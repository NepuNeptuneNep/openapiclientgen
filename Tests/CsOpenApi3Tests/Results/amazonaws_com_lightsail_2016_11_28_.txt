//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllocateStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// Describes the API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTerminal")]
		public System.Nullable<System.Boolean> IsTerminal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operationDetails")]
		public string OperationDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public OperationType OperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public OperationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusChangedAt")]
		public System.DateTimeOffset StatusChangedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public string ErrorDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ContainerService")]
		ContainerService = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance")]
		Instance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StaticIp")]
		StaticIp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KeyPair")]
		KeyPair = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InstanceSnapshot")]
		InstanceSnapshot = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Domain")]
		Domain = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PeeredVpc")]
		PeeredVpc = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LoadBalancer")]
		LoadBalancer = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LoadBalancerTlsCertificate")]
		LoadBalancerTlsCertificate = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Disk")]
		Disk = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiskSnapshot")]
		DiskSnapshot = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RelationalDatabase")]
		RelationalDatabase = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RelationalDatabaseSnapshot")]
		RelationalDatabaseSnapshot = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExportSnapshotRecord")]
		ExportSnapshotRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloudFormationStackRecord")]
		CloudFormationStackRecord = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Alarm")]
		Alarm = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ContactMethod")]
		ContactMethod = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Distribution")]
		Distribution = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Certificate")]
		Certificate = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bucket")]
		Bucket = 19,
	}
	
	/// <summary>
	/// Describes the resource location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public RegionName RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RegionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-1")]
		usMinuseastMinus1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-2")]
		usMinuseastMinus2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west-1")]
		usMinuswestMinus1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west-2")]
		usMinuswestMinus2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-1")]
		euMinuswestMinus1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-2")]
		euMinuswestMinus2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-3")]
		euMinuswestMinus3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-central-1")]
		euMinuscentralMinus1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-central-1")]
		caMinuscentralMinus1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-south-1")]
		apMinussouthMinus1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-1")]
		apMinussoutheastMinus1 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-2")]
		apMinussoutheastMinus2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-1")]
		apMinusnortheastMinus1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-2")]
		apMinusnortheastMinus2 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-north-1")]
		euMinusnorthMinus1 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteKnownHostKeys")]
		DeleteKnownHostKeys = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteInstance")]
		DeleteInstance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateInstance")]
		CreateInstance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StopInstance")]
		StopInstance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StartInstance")]
		StartInstance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RebootInstance")]
		RebootInstance = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OpenInstancePublicPorts")]
		OpenInstancePublicPorts = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutInstancePublicPorts")]
		PutInstancePublicPorts = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloseInstancePublicPorts")]
		CloseInstancePublicPorts = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AllocateStaticIp")]
		AllocateStaticIp = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ReleaseStaticIp")]
		ReleaseStaticIp = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AttachStaticIp")]
		AttachStaticIp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DetachStaticIp")]
		DetachStaticIp = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateDomainEntry")]
		UpdateDomainEntry = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDomainEntry")]
		DeleteDomainEntry = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDomain")]
		CreateDomain = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDomain")]
		DeleteDomain = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateInstanceSnapshot")]
		CreateInstanceSnapshot = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteInstanceSnapshot")]
		DeleteInstanceSnapshot = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateInstancesFromSnapshot")]
		CreateInstancesFromSnapshot = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateLoadBalancer")]
		CreateLoadBalancer = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteLoadBalancer")]
		DeleteLoadBalancer = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AttachInstancesToLoadBalancer")]
		AttachInstancesToLoadBalancer = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DetachInstancesFromLoadBalancer")]
		DetachInstancesFromLoadBalancer = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateLoadBalancerAttribute")]
		UpdateLoadBalancerAttribute = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateLoadBalancerTlsCertificate")]
		CreateLoadBalancerTlsCertificate = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteLoadBalancerTlsCertificate")]
		DeleteLoadBalancerTlsCertificate = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AttachLoadBalancerTlsCertificate")]
		AttachLoadBalancerTlsCertificate = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDisk")]
		CreateDisk = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDisk")]
		DeleteDisk = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AttachDisk")]
		AttachDisk = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DetachDisk")]
		DetachDisk = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDiskSnapshot")]
		CreateDiskSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDiskSnapshot")]
		DeleteDiskSnapshot = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDiskFromSnapshot")]
		CreateDiskFromSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateRelationalDatabase")]
		CreateRelationalDatabase = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateRelationalDatabase")]
		UpdateRelationalDatabase = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteRelationalDatabase")]
		DeleteRelationalDatabase = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateRelationalDatabaseFromSnapshot")]
		CreateRelationalDatabaseFromSnapshot = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateRelationalDatabaseSnapshot")]
		CreateRelationalDatabaseSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteRelationalDatabaseSnapshot")]
		DeleteRelationalDatabaseSnapshot = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateRelationalDatabaseParameters")]
		UpdateRelationalDatabaseParameters = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StartRelationalDatabase")]
		StartRelationalDatabase = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RebootRelationalDatabase")]
		RebootRelationalDatabase = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StopRelationalDatabase")]
		StopRelationalDatabase = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EnableAddOn")]
		EnableAddOn = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DisableAddOn")]
		DisableAddOn = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PutAlarm")]
		PutAlarm = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetAlarms")]
		GetAlarms = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteAlarm")]
		DeleteAlarm = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TestAlarm")]
		TestAlarm = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateContactMethod")]
		CreateContactMethod = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetContactMethods")]
		GetContactMethods = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SendContactMethodVerification")]
		SendContactMethodVerification = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteContactMethod")]
		DeleteContactMethod = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDistribution")]
		CreateDistribution = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateDistribution")]
		UpdateDistribution = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteDistribution")]
		DeleteDistribution = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResetDistributionCache")]
		ResetDistributionCache = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AttachCertificateToDistribution")]
		AttachCertificateToDistribution = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DetachCertificateFromDistribution")]
		DetachCertificateFromDistribution = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateDistributionBundle")]
		UpdateDistributionBundle = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetIpAddressType")]
		SetIpAddressType = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateCertificate")]
		CreateCertificate = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteCertificate")]
		DeleteCertificate = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateContainerService")]
		CreateContainerService = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateContainerService")]
		UpdateContainerService = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteContainerService")]
		DeleteContainerService = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateContainerServiceDeployment")]
		CreateContainerServiceDeployment = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateContainerServiceRegistryLogin")]
		CreateContainerServiceRegistryLogin = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RegisterContainerImage")]
		RegisterContainerImage = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteContainerImage")]
		DeleteContainerImage = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateBucket")]
		CreateBucket = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteBucket")]
		DeleteBucket = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateBucketAccessKey")]
		CreateBucketAccessKey = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteBucketAccessKey")]
		DeleteBucketAccessKey = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateBucketBundle")]
		UpdateBucketBundle = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateBucket")]
		UpdateBucket = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SetResourceAccessForBucket")]
		SetResourceAccessForBucket = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpdateInstanceMetadataOptions")]
		UpdateInstanceMetadataOptions = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StartGUISession")]
		StartGUISession = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StopGUISession")]
		StopGUISession = 81,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotStarted")]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Started")]
		Started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Completed")]
		Completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Succeeded")]
		Succeeded = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AllocateStaticIpRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="staticIpName")]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidInputException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountSetupInProgressException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthenticatedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachCertificateToDistributionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachCertificateToDistributionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachDiskResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachDiskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskPath")]
		public string DiskPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoMounting")]
		public System.Nullable<System.Boolean> AutoMounting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachInstancesToLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachInstancesToLoadBalancerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachLoadBalancerTlsCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachLoadBalancerTlsCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachStaticIpRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="staticIpName")]
		public string StaticIpName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloseInstancePublicPortsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloseInstancePublicPortsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portInfo")]
		public PortInfo PortInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	/// <summary>
	/// Describes ports to open on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromPort")]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toPort")]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public NetworkProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrs")]
		public string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipv6Cidrs")]
		public string[] Ipv6Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrListAliases")]
		public string[] CidrListAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NetworkProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tcp")]
		tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="udp")]
		udp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="icmp")]
		icmp = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopySnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopySnapshotRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceSnapshotName")]
		public string SourceSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceResourceName")]
		public string SourceResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restoreDate")]
		public string RestoreDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useLatestRestorableAutoSnapshot")]
		public System.Nullable<System.Boolean> UseLatestRestorableAutoSnapshot { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetSnapshotName")]
		public string TargetSnapshotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceRegion")]
		public RegionName SourceRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBucketResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public Bucket Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon Lightsail bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bucket
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessRules")]
		public AccessRules AccessRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectVersioning")]
		public string ObjectVersioning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ableToUpdateBundle")]
		public System.Nullable<System.Boolean> AbleToUpdateBundle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readonlyAccessAccounts")]
		public string[] ReadonlyAccessAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourcesReceivingAccess")]
		public ResourceReceivingAccess[] ResourcesReceivingAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public BucketState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessLogConfig")]
		public BucketAccessLogConfig AccessLogConfig { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the anonymous access permissions for an Amazon Lightsail bucket and its objects.</p> <p>For more information about bucket access permissions, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-understanding-bucket-permissions">Understanding bucket permissions in Amazon Lightsail</a> in the </p> <p> <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="getObject")]
		public AccessType GetObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowPublicOverrides")]
		public System.Nullable<System.Boolean> AllowPublicOverrides { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
	}
	
	/// <summary>
	/// <p>Describes a tag key and optional value assigned to an Amazon Lightsail resource.</p> <p>For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon Lightsail instance that has access to a Lightsail bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceReceivingAccess
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// Describes the state of an Amazon Lightsail bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BucketState
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the access log configuration for a bucket in the Amazon Lightsail object storage service.</p> <p>For more information about bucket access logs, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-bucket-access-logs">Logging bucket requests using access logging in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BucketAccessLogConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBucketRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableObjectVersioning")]
		public System.Nullable<System.Boolean> EnableObjectVersioning { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBucketAccessKeyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public AccessKey AccessKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// <p>Describes an access key for an Amazon Lightsail bucket.</p> <p>Access keys grant full programmatic access to the specified bucket and its objects. You can have a maximum of two access keys per bucket. Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action to create an access key for a specific bucket. For more information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p> <important> <p>The <code>secretAccessKey</code> value is returned only in response to the <code>CreateBucketAccessKey</code> action. You can get a secret access key only when you first create an access key; you cannot get the secret access key later. If you lose the secret access key, you must create a new access key.</p> </important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessKeyId")]
		public string AccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretAccessKey")]
		public string SecretAccessKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUsed")]
		public AccessKeyLastUsed LastUsed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Active")]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Inactive")]
		Inactive = 1,
	}
	
	/// <summary>
	/// <p>Describes the last time an access key was used.</p> <note> <p>This object does not include data in the response of a <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessKeyLastUsed
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastUsedDate")]
		public System.DateTimeOffset LastUsedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBucketAccessKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public CertificateSummary Certificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon Lightsail SSL/TLS certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateDetail")]
		public Certificate CertificateDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the full details of an Amazon Lightsail SSL/TLS certificate.</p> <note> <p>To get a summary of a certificate, use the <code>GetCertificates</code> action and omit <code>includeCertificateDetails</code> from your request. The response will include only the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CertificateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjectAlternativeNames")]
		public string[] SubjectAlternativeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainValidationRecords")]
		public DomainValidationRecord[] DomainValidationRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestFailureReason")]
		public string RequestFailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inUseResourceCount")]
		public System.Nullable<System.Int32> InUseResourceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyAlgorithm")]
		public string KeyAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuedAt")]
		public System.DateTimeOffset IssuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuerCA")]
		public string IssuerCA { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.DateTimeOffset NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notAfter")]
		public System.DateTimeOffset NotAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eligibleToRenew")]
		public string EligibleToRenew { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renewalSummary")]
		public RenewalSummary RenewalSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revokedAt")]
		public System.DateTimeOffset RevokedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revocationReason")]
		public string RevocationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_VALIDATION")]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISSUED")]
		ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION_TIMED_OUT")]
		VALIDATION_TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKED")]
		REVOKED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 6,
	}
	
	/// <summary>
	/// Describes the domain name system (DNS) records that you must add to the DNS of your registered domain to validate ownership for an Amazon Lightsail SSL/TLS certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainValidationRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceRecord")]
		public ResourceRecord ResourceRecord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsRecordCreationState")]
		public DnsRecordCreationState DnsRecordCreationState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationStatus")]
		public CertificateDomainValidationStatus ValidationStatus { get; set; }
	}
	
	/// <summary>
	/// Describes the domain name system (DNS) records to add to your domain's DNS to validate it for an Amazon Lightsail certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the creation state of the canonical name (CNAME) records that are automatically added by Amazon Lightsail to the DNS of a domain to validate domain ownership for an SSL/TLS certificate.</p> <p>When you create an SSL/TLS certificate for a Lightsail resource, you must add a set of CNAME records to the DNS of the domains for the certificate to validate that you own the domains. Lightsail can automatically add the CNAME records to the DNS of the domain if the DNS zone for the domain exists within your Lightsail account. If automatic record addition fails, or if you manage the DNS of your domain using a third-party service, then you must manually add the CNAME records to the DNS of your domain. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/verify-tls-ssl-certificate-using-dns-cname-https">Verify an SSL/TLS certificate in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DnsRecordCreationState
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public DnsRecordCreationStateCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DnsRecordCreationStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CertificateDomainValidationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_VALIDATION")]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 2,
	}
	
	/// <summary>
	/// Describes the status of a SSL/TLS certificate renewal managed by Amazon Lightsail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewalSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainValidationRecords")]
		public DomainValidationRecord[] DomainValidationRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renewalStatus")]
		public RenewalStatus RenewalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renewalStatusReason")]
		public string RenewalStatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RenewalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PendingAutoRenewal")]
		PendingAutoRenewal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PendingValidation")]
		PendingValidation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Success")]
		Success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjectAlternativeNames")]
		public string[] SubjectAlternativeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCloudFormationStackResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCloudFormationStackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public InstanceEntry[] Instances { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon Elastic Compute Cloud instance and related resources to be created using the <code>create cloud formation stack</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portInfoSource")]
		public PortInfoSourceType PortInfoSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public string UserData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PortInfoSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTANCE")]
		INSTANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOSED")]
		CLOSED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContactMethodResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContactMethodRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ContactProtocol Protocol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactEndpoint")]
		public string ContactEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Email")]
		Email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMS")]
		SMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerServiceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerService")]
		public ContainerService ContainerService { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon Lightsail container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerService
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerServiceName")]
		public string ContainerServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="power")]
		public ContainerServicePowerName Power { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="powerId")]
		public string PowerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ContainerServiceState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateDetail")]
		public ContainerServiceStateDetail StateDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentDeployment")]
		public ContainerServiceDeployment CurrentDeployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextDeployment")]
		public ContainerServiceDeployment NextDeployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDisabled")]
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalArn")]
		public string PrincipalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateDomainName")]
		public string PrivateDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicDomainNames")]
		public ContainerServicePublicDomains PublicDomainNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateRegistryAccess")]
		public PrivateRegistryAccess PrivateRegistryAccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerServicePowerName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nano")]
		nano = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="micro")]
		micro = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="small")]
		small = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="medium")]
		medium = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="large")]
		large = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="xlarge")]
		xlarge = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerServiceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY")]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPLOYING")]
		DEPLOYING = 6,
	}
	
	/// <summary>
	/// Describes the current state of a container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceStateDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ContainerServiceStateDetailCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerServiceStateDetailCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING_SYSTEM_RESOURCES")]
		CREATING_SYSTEM_RESOURCES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING_NETWORK_INFRASTRUCTURE")]
		CREATING_NETWORK_INFRASTRUCTURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVISIONING_CERTIFICATE")]
		PROVISIONING_CERTIFICATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVISIONING_SERVICE")]
		PROVISIONING_SERVICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING_DEPLOYMENT")]
		CREATING_DEPLOYMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVALUATING_HEALTH_CHECK")]
		EVALUATING_HEALTH_CHECK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVATING_DEPLOYMENT")]
		ACTIVATING_DEPLOYMENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CERTIFICATE_LIMIT_EXCEEDED")]
		CERTIFICATE_LIMIT_EXCEEDED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_ERROR")]
		UNKNOWN_ERROR = 8,
	}
	
	/// <summary>
	/// <p>Describes a container deployment configuration of an Amazon Lightsail container service.</p> <p>A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceDeployment
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ContainerServiceDeploymentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public ContainerMap Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicEndpoint")]
		public ContainerServiceEndpoint PublicEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerServiceDeploymentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVATING")]
		ACTIVATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerMap
	{
	}
	
	/// <summary>
	/// Describes the public endpoint configuration of a deployment of an Amazon Lightsail container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceEndpoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerPort")]
		public System.Nullable<System.Int32> ContainerPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public ContainerServiceHealthCheckConfig HealthCheck { get; set; }
	}
	
	/// <summary>
	/// Describes the health check configuration of an Amazon Lightsail container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceHealthCheckConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="healthyThreshold")]
		public System.Nullable<System.Int32> HealthyThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unhealthyThreshold")]
		public System.Nullable<System.Int32> UnhealthyThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutSeconds")]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalSeconds")]
		public System.Nullable<System.Int32> IntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successCodes")]
		public string SuccessCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServicePublicDomains
	{
	}
	
	/// <summary>
	/// <p>Describes the configuration for an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p> <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateRegistryAccess
	{
		
		[System.Runtime.Serialization.DataMember(Name="ecrImagePullerRole")]
		public ContainerServiceECRImagePullerRole EcrImagePullerRole { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the activation status of the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.</p> <p>When activated, Lightsail creates an Identity and Access Management (IAM) role for the specified Lightsail container service. You can use the ARN of the role to create a trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container service to pull images from Amazon ECR private repositories. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceECRImagePullerRole
	{
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalArn")]
		public string PrincipalArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerServiceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="power")]
		public ContainerServicePowerName Power { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public int Scale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicDomainNames")]
		public ContainerServicePublicDomains PublicDomainNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public ContainerServiceDeploymentRequest Deployment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateRegistryAccess")]
		public PrivateRegistryAccessRequest PrivateRegistryAccess { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a container deployment configuration of an Amazon Lightsail container service.</p> <p>A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public ContainerMap Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicEndpoint")]
		public EndpointRequest PublicEndpoint { get; set; }
	}
	
	/// <summary>
	/// Describes the settings of a public endpoint for an Amazon Lightsail container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndpointRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerPort")]
		public int ContainerPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public ContainerServiceHealthCheckConfig HealthCheck { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a request to configure an Amazon Lightsail container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p> <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateRegistryAccessRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="ecrImagePullerRole")]
		public ContainerServiceECRImagePullerRoleRequest EcrImagePullerRole { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a request to activate or deactivate the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.</p> <p>When activated, Lightsail creates an Identity and Access Management (IAM) role for the specified Lightsail container service. You can use the ARN of the role to create a trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container service to pull images from Amazon ECR private repositories. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceECRImagePullerRoleRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerServiceDeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerService")]
		public ContainerService ContainerService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerServiceDeploymentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containers")]
		public ContainerMap Containers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicEndpoint")]
		public EndpointRequest PublicEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerServiceRegistryLoginResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="registryLogin")]
		public ContainerServiceRegistryLogin RegistryLogin { get; set; }
	}
	
	/// <summary>
	/// Describes the sign-in credentials for the container image registry of an Amazon Lightsail account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceRegistryLogin
	{
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.DateTimeOffset ExpiresAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registry")]
		public string Registry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateContainerServiceRegistryLoginRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDiskResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDiskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public int SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addOns")]
		public AddOnRequest[] AddOns { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail resource.</p> <note> <p>An additional cost may be associated with enabling add-ons. For more information, see the <a href="https://aws.amazon.com/lightsail/pricing/">Lightsail pricing page</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOnRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addOnType")]
		public AddOnType AddOnType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSnapshotAddOnRequest")]
		public AutoSnapshotAddOnRequest AutoSnapshotAddOnRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopInstanceOnIdleRequest")]
		public StopInstanceOnIdleRequest StopInstanceOnIdleRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AddOnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AutoSnapshot")]
		AutoSnapshot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StopInstanceOnIdle")]
		StopInstanceOnIdle = 1,
	}
	
	/// <summary>
	/// <p>Describes a request to enable or modify the automatic snapshot add-on for an Amazon Lightsail instance or disk.</p> <p>When you modify the automatic snapshot time for a resource, it is typically effective immediately except under the following conditions:</p> <ul> <li> <p>If an automatic snapshot has been created for the current day, and you change the snapshot time to a later time of day, then the new snapshot time will be effective the following day. This ensures that two snapshots are not created for the current day.</p> </li> <li> <p>If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to an earlier time of day, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day.</p> </li> <li> <p>If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to a time that is within 30 minutes from your current time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.</p> </li> <li> <p>If an automatic snapshot is scheduled to be created within 30 minutes from your current time and you change the snapshot time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoSnapshotAddOnRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="snapshotTimeOfDay")]
		public string SnapshotTimeOfDay { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a request to create or edit the <code>StopInstanceOnIdle</code> add-on.</p> <important> <p>This add-on only applies to Lightsail for Research resources.</p> </important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopInstanceOnIdleRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public string Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDiskFromSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDiskFromSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diskSnapshotName")]
		public string DiskSnapshotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public int SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addOns")]
		public AddOnRequest[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceDiskName")]
		public string SourceDiskName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restoreDate")]
		public string RestoreDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useLatestRestorableAutoSnapshot")]
		public System.Nullable<System.Boolean> UseLatestRestorableAutoSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDiskSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDiskSnapshotRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskSnapshotName")]
		public string DiskSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDistributionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public LightsailDistribution Distribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon Lightsail content delivery network (CDN) distribution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LightsailDistribution
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alternativeDomainNames")]
		public string[] AlternativeDomainNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public Origin Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originPublicDNS")]
		public string OriginPublicDNS { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultCacheBehavior")]
		public CacheBehavior DefaultCacheBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheBehaviorSettings")]
		public CacheSettings CacheBehaviorSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheBehaviors")]
		public CacheBehaviorPerPath[] CacheBehaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ableToUpdateBundle")]
		public System.Nullable<System.Boolean> AbleToUpdateBundle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution.</p> <p>An origin can be a Lightsail instance, bucket, or load balancer. A distribution pulls content from an origin, caches it, and serves it to viewers via a worldwide network of edge servers.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Origin
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public RegionName RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolPolicy")]
		public OriginProtocolPolicyEnum ProtocolPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OriginProtocolPolicyEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="http-only")]
		httpMinusonly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="https-only")]
		httpsMinusonly = 1,
	}
	
	/// <summary>
	/// Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheBehavior
	{
		
		[System.Runtime.Serialization.DataMember(Name="behavior")]
		public BehaviorEnum Behavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BehaviorEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dont-cache")]
		dontMinuscache = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cache")]
		cache = 1,
	}
	
	/// <summary>
	/// <p>Describes the cache settings of an Amazon Lightsail content delivery network (CDN) distribution.</p> <p>These settings apply only to your distribution's <code>cacheBehaviors</code> (including the <code>defaultCacheBehavior</code>) that have a <code>behavior</code> of <code>cache</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultTTL")]
		public System.Nullable<System.Int32> DefaultTTL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumTTL")]
		public System.Nullable<System.Int32> MinimumTTL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumTTL")]
		public System.Nullable<System.Int32> MaximumTTL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowedHTTPMethods")]
		public string AllowedHTTPMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cachedHTTPMethods")]
		public string CachedHTTPMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forwardedCookies")]
		public CookieObject ForwardedCookies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forwardedHeaders")]
		public HeaderObject ForwardedHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forwardedQueryStrings")]
		public QueryStringObject ForwardedQueryStrings { get; set; }
	}
	
	/// <summary>
	/// <p>Describes whether an Amazon Lightsail content delivery network (CDN) distribution forwards cookies to the origin and, if so, which ones.</p> <p>For the cookies that you specify, your distribution caches separate versions of the specified content based on the cookie values in viewer requests.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CookieObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="option")]
		public ForwardValues Option { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cookiesAllowList")]
		public string[] CookiesAllowList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForwardValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allow-list")]
		allowMinuslist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 2,
	}
	
	/// <summary>
	/// <p>Describes the request headers that a Lightsail distribution bases caching on.</p> <p>For the headers that you specify, your distribution caches separate versions of the specified content based on the header values in viewer requests. For example, suppose viewer requests for <code>logo.jpg</code> contain a custom <code>product</code> header that has a value of either <code>acme</code> or <code>apex</code>, and you configure your distribution to cache your content based on values in the <code>product</code> header. Your distribution forwards the <code>product</code> header to the origin and caches the response from the origin once for each header value. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeaderObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="option")]
		public ForwardValues Option { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headersAllowList")]
		public HeaderEnum[] HeadersAllowList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HeaderEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accept")]
		Accept = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accept-Charset")]
		AcceptMinusCharset = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accept-Datetime")]
		AcceptMinusDatetime = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accept-Encoding")]
		AcceptMinusEncoding = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accept-Language")]
		AcceptMinusLanguage = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Authorization")]
		Authorization = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloudFront-Forwarded-Proto")]
		CloudFrontMinusForwardedMinusProto = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloudFront-Is-Desktop-Viewer")]
		CloudFrontMinusIsMinusDesktopMinusViewer = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloudFront-Is-Mobile-Viewer")]
		CloudFrontMinusIsMinusMobileMinusViewer = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloudFront-Is-SmartTV-Viewer")]
		CloudFrontMinusIsMinusSmartTVMinusViewer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloudFront-Is-Tablet-Viewer")]
		CloudFrontMinusIsMinusTabletMinusViewer = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CloudFront-Viewer-Country")]
		CloudFrontMinusViewerMinusCountry = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Host")]
		Host = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Origin")]
		Origin = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Referer")]
		Referer = 14,
	}
	
	/// <summary>
	/// <p>Describes the query string parameters that an Amazon Lightsail content delivery network (CDN) distribution to bases caching on.</p> <p>For the query strings that you specify, your distribution caches separate versions of the specified content based on the query string values in viewer requests.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryStringObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="option")]
		public System.Nullable<System.Boolean> Option { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryStringsAllowList")]
		public string[] QueryStringsAllowList { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the per-path cache behavior of an Amazon Lightsail content delivery network (CDN) distribution.</p> <p>A per-path cache behavior is used to override, or add an exception to, the default cache behavior of a distribution. For example, if the <code>cacheBehavior</code> is set to <code>cache</code>, then a per-path cache behavior can be used to specify a directory, file, or file type that your distribution will cache. Alternately, if the distribution's <code>cacheBehavior</code> is <code>dont-cache</code>, then a per-path cache behavior can be used to specify a directory, file, or file type that your distribution will not cache.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CacheBehaviorPerPath
	{
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="behavior")]
		public BehaviorEnum Behavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dualstack")]
		dualstack = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ipv4")]
		ipv4 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDistributionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public InputOrigin Origin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultCacheBehavior")]
		public CacheBehavior DefaultCacheBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheBehaviorSettings")]
		public CacheSettings CacheBehaviorSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheBehaviors")]
		public CacheBehaviorPerPath[] CacheBehaviors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the origin resource of an Amazon Lightsail content delivery network (CDN) distribution.</p> <p>An origin can be a Lightsail instance, bucket, or load balancer. A distribution pulls content from an origin, caches it, and serves it to viewers via a worldwide network of edge servers.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputOrigin
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public RegionName RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolPolicy")]
		public OriginProtocolPolicyEnum ProtocolPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainEntryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainEntryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainEntry")]
		public DomainEntry DomainEntry { get; set; }
	}
	
	/// <summary>
	/// Describes a domain recordset entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAlias")]
		public System.Nullable<System.Boolean> IsAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public DomainEntryOptions Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainEntryOptions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGUISessionAccessDetailsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentageComplete")]
		public System.Nullable<System.Int32> PercentageComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public Session[] Sessions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="startExpired")]
		startExpired = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notStarted")]
		notStarted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="started")]
		started = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="starting")]
		starting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopped")]
		stopped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopping")]
		stopping = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingUpInstance")]
		settingUpInstance = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failedInstanceCreation")]
		failedInstanceCreation = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failedStartingGUISession")]
		failedStartingGUISession = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failedStoppingGUISession")]
		failedStoppingGUISession = 9,
	}
	
	/// <summary>
	/// Describes a web-based, remote graphical user interface (GUI), NICE DCV session. The session is used to access a virtual computer’s operating system or application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Session
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrimary")]
		public System.Nullable<System.Boolean> IsPrimary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGUISessionAccessDetailsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstanceSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstanceSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceSnapshotName")]
		public string InstanceSnapshotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstancesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customImageName")]
		public string CustomImageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blueprintId")]
		public string BlueprintId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPairName")]
		public string KeyPairName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addOns")]
		public AddOnRequest[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstancesFromSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstancesFromSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachedDiskMapping")]
		public AttachedDiskMap AttachedDiskMapping { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceSnapshotName")]
		public string InstanceSnapshotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPairName")]
		public string KeyPairName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addOns")]
		public AddOnRequest[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceInstanceName")]
		public string SourceInstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restoreDate")]
		public string RestoreDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useLatestRestorableAutoSnapshot")]
		public System.Nullable<System.Boolean> UseLatestRestorableAutoSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachedDiskMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKeyPairResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public KeyPair KeyPair { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicKeyBase64")]
		public string PublicKeyBase64 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateKeyBase64")]
		public string PrivateKeyBase64 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	/// <summary>
	/// Describes an SSH key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyPair
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateKeyPairRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyPairName")]
		public string KeyPairName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoadBalancerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instancePort")]
		public int InstancePort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheckPath")]
		public string HealthCheckPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateDomainName")]
		public string CertificateDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateAlternativeNames")]
		public string[] CertificateAlternativeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlsPolicyName")]
		public string TlsPolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoadBalancerTlsCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoadBalancerTlsCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateDomainName")]
		public string CertificateDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateAlternativeNames")]
		public string[] CertificateAlternativeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseBlueprintId")]
		public string RelationalDatabaseBlueprintId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseBundleId")]
		public string RelationalDatabaseBundleId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="masterDatabaseName")]
		public string MasterDatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="masterUsername")]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="masterUserPassword")]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredBackupWindow")]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRelationalDatabaseFromSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRelationalDatabaseFromSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZone")]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseSnapshotName")]
		public string RelationalDatabaseSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseBundleId")]
		public string RelationalDatabaseBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceRelationalDatabaseName")]
		public string SourceRelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restoreTime")]
		public System.DateTimeOffset RestoreTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useLatestRestorableTime")]
		public System.Nullable<System.Boolean> UseLatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRelationalDatabaseSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRelationalDatabaseSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseSnapshotName")]
		public string RelationalDatabaseSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAlarmResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAlarmRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alarmName")]
		public string AlarmName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAutoSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAutoSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBucketResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBucketRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceDelete")]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBucketAccessKeyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBucketAccessKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKeyId")]
		public string AccessKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContactMethodResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContactMethodRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ContactProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContainerImageResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContainerImageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContainerServiceResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteContainerServiceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDiskResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDiskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceDeleteAddOns")]
		public System.Nullable<System.Boolean> ForceDeleteAddOns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDiskSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDiskSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskSnapshotName")]
		public string DiskSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDistributionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDistributionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainEntryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainEntryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainEntry")]
		public DomainEntry DomainEntry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceDeleteAddOns")]
		public System.Nullable<System.Boolean> ForceDeleteAddOns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceSnapshotName")]
		public string InstanceSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKeyPairResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKeyPairRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyPairName")]
		public string KeyPairName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedFingerprint")]
		public string ExpectedFingerprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKnownHostKeysResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteKnownHostKeysRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoadBalancerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoadBalancerTlsCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoadBalancerTlsCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipFinalSnapshot")]
		public System.Nullable<System.Boolean> SkipFinalSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="finalRelationalDatabaseSnapshotName")]
		public string FinalRelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRelationalDatabaseSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRelationalDatabaseSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseSnapshotName")]
		public string RelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachCertificateFromDistributionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachCertificateFromDistributionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachDiskResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachDiskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachInstancesFromLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachInstancesFromLoadBalancerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceNames")]
		public string[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachStaticIpRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="staticIpName")]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableAddOnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableAddOnRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addOnType")]
		public AddOnType AddOnType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadDefaultKeyPairResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="publicKeyBase64")]
		public string PublicKeyBase64 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateKeyBase64")]
		public string PrivateKeyBase64 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DownloadDefaultKeyPairRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableAddOnResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableAddOnRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addOnRequest")]
		public AddOnRequest AddOnRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceSnapshotName")]
		public string SourceSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetActiveNamesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeNames")]
		public string[] ActiveNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetActiveNamesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAlarmsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="alarms")]
		public Alarm[] Alarms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// <p>Describes an alarm.</p> <p>An alarm is a way to monitor your Lightsail resource metrics. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Alarm
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitoredResourceInfo")]
		public MonitoredResourceInfo MonitoredResourceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparisonOperator")]
		public ComparisonOperator ComparisonOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluationPeriods")]
		public System.Nullable<System.Int32> EvaluationPeriods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Double> Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointsToAlarm")]
		public System.Nullable<System.Int32> DatapointsToAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatMissingData")]
		public TreatMissingData TreatMissingData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistic")]
		public MetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public MetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AlarmState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactProtocols")]
		public ContactProtocol[] ContactProtocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationTriggers")]
		public AlarmState[] NotificationTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationEnabled")]
		public System.Nullable<System.Boolean> NotificationEnabled { get; set; }
	}
	
	/// <summary>
	/// <p>Describes resource being monitored by an alarm.</p> <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonitoredResourceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GreaterThanOrEqualToThreshold")]
		GreaterThanOrEqualToThreshold = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GreaterThanThreshold")]
		GreaterThanThreshold = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThanThreshold")]
		LessThanThreshold = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LessThanOrEqualToThreshold")]
		LessThanOrEqualToThreshold = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TreatMissingData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="breaching")]
		breaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notBreaching")]
		notBreaching = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ignore")]
		ignore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="missing")]
		missing = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Minimum")]
		Minimum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Maximum")]
		Maximum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sum")]
		Sum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Average")]
		Average = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SampleCount")]
		SampleCount = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CPUUtilization")]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkIn")]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkOut")]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StatusCheckFailed")]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StatusCheckFailed_Instance")]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StatusCheckFailed_System")]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ClientTLSNegotiationErrorCount")]
		ClientTLSNegotiationErrorCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HealthyHostCount")]
		HealthyHostCount = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UnhealthyHostCount")]
		UnhealthyHostCount = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_LB_4XX_Count")]
		HTTPCode_LB_4XX_Count = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_LB_5XX_Count")]
		HTTPCode_LB_5XX_Count = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_2XX_Count")]
		HTTPCode_Instance_2XX_Count = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_3XX_Count")]
		HTTPCode_Instance_3XX_Count = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_4XX_Count")]
		HTTPCode_Instance_4XX_Count = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_5XX_Count")]
		HTTPCode_Instance_5XX_Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InstanceResponseTime")]
		InstanceResponseTime = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RejectedConnectionCount")]
		RejectedConnectionCount = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestCount")]
		RequestCount = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DatabaseConnections")]
		DatabaseConnections = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiskQueueDepth")]
		DiskQueueDepth = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FreeStorageSpace")]
		FreeStorageSpace = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkReceiveThroughput")]
		NetworkReceiveThroughput = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkTransmitThroughput")]
		NetworkTransmitThroughput = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BurstCapacityTime")]
		BurstCapacityTime = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BurstCapacityPercentage")]
		BurstCapacityPercentage = 24,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlarmState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALARM")]
		ALARM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSUFFICIENT_DATA")]
		INSUFFICIENT_DATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Seconds")]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microseconds")]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Milliseconds")]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes")]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes")]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes")]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes")]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes")]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits")]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits")]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits")]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits")]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits")]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Percent")]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count")]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bytes/Second")]
		Bytes_Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobytes/Second")]
		Kilobytes_Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabytes/Second")]
		Megabytes_Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabytes/Second")]
		Gigabytes_Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabytes/Second")]
		Terabytes_Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bits/Second")]
		Bits_Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kilobits/Second")]
		Kilobits_Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Megabits/Second")]
		Megabits_Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Gigabits/Second")]
		Gigabits_Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Terabits/Second")]
		Terabits_Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Count/Second")]
		Count_Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAlarmsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="alarmName")]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitoredResourceName")]
		public string MonitoredResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAutoSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSnapshots")]
		public AutoSnapshotDetails[] AutoSnapshots { get; set; }
	}
	
	/// <summary>
	/// Describes an automatic snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoSnapshotDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AutoSnapshotStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromAttachedDisks")]
		public AttachedDisk[] FromAttachedDisks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutoSnapshotStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Success")]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotFound")]
		NotFound = 3,
	}
	
	/// <summary>
	/// Describes a block storage disk that is attached to an instance, and is included in an automatic snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachedDisk
	{
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAutoSnapshotsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBlueprintsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="blueprints")]
		public Blueprint[] Blueprints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes a blueprint (a virtual private server image).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Blueprint
	{
		
		[System.Runtime.Serialization.DataMember(Name="blueprintId")]
		public string BlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public string Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BlueprintType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minPower")]
		public System.Nullable<System.Int32> MinPower { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public string VersionCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productUrl")]
		public string ProductUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseUrl")]
		public string LicenseUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public InstancePlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appCategory")]
		public AppCategory AppCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BlueprintType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="os")]
		os = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app")]
		app = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstancePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINUX_UNIX")]
		LINUX_UNIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WINDOWS")]
		WINDOWS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AppCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LfR")]
		LfR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBlueprintsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="includeInactive")]
		public System.Nullable<System.Boolean> IncludeInactive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appCategory")]
		public AppCategory AppCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketAccessKeysResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessKeys")]
		public AccessKey[] AccessKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketAccessKeysRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketBundlesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public BucketBundle[] Bundles { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the specifications of a bundle that can be applied to an Amazon Lightsail bucket.</p> <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BucketBundle
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public float Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storagePerMonthInGb")]
		public System.Nullable<System.Int32> StoragePerMonthInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferPerMonthInGb")]
		public System.Nullable<System.Int32> TransferPerMonthInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketBundlesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="includeInactive")]
		public System.Nullable<System.Boolean> IncludeInactive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public BucketMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricData")]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BucketMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BucketSizeBytes")]
		BucketSizeBytes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NumberOfObjects")]
		NumberOfObjects = 1,
	}
	
	/// <summary>
	/// Describes the metric data point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetricDatapoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="average")]
		public System.Nullable<System.Double> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleCount")]
		public System.Nullable<System.Double> SampleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sum")]
		public System.Nullable<System.Double> Sum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketMetricDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public BucketMetricName MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public MetricStatistic[] Statistics { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public Bucket[] Buckets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountLevelBpaSync")]
		public AccountLevelBpaSync AccountLevelBpaSync { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the synchronization status of the Amazon Simple Storage Service (Amazon S3) account-level block public access (BPA) feature for your Lightsail buckets.</p> <p>The account-level BPA feature of Amazon S3 provides centralized controls to limit public access to all Amazon S3 buckets in an account. BPA can make all Amazon S3 buckets in an Amazon Web Services account private regardless of the individual bucket and object permissions that are configured. Lightsail buckets take into account the Amazon S3 account-level BPA configuration when allowing or denying public access. To do this, Lightsail periodically fetches the account-level BPA configuration from Amazon S3. When the account-level BPA status is <code>InSync</code>, the Amazon S3 account-level BPA configuration is synchronized and it applies to your Lightsail buckets. For more information about Amazon Simple Storage Service account-level BPA and how it affects Lightsail buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-block-public-access-for-buckets">Block public access for buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountLevelBpaSync
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AccountLevelBpaSyncStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSyncedAt")]
		public System.DateTimeOffset LastSyncedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public BPAStatusMessage Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bpaImpactsLightsail")]
		public System.Nullable<System.Boolean> BpaImpactsLightsail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountLevelBpaSyncStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InSync")]
		InSync = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NeverSynced")]
		NeverSynced = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Defaulted")]
		Defaulted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BPAStatusMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULTED_FOR_SLR_MISSING")]
		DEFAULTED_FOR_SLR_MISSING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNC_ON_HOLD")]
		SYNC_ON_HOLD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULTED_FOR_SLR_MISSING_ON_HOLD")]
		DEFAULTED_FOR_SLR_MISSING_ON_HOLD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBucketsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeConnectedResources")]
		public System.Nullable<System.Boolean> IncludeConnectedResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBundlesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public Bundle[] Bundles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes a bundle, which is a set of specs describing your virtual private server (or <i>instance</i>).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bundle
	{
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public float Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpuCount")]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diskSizeInGb")]
		public System.Nullable<System.Int32> DiskSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="power")]
		public System.Nullable<System.Int32> Power { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramSizeInGb")]
		public float RamSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferPerMonthInGb")]
		public System.Nullable<System.Int32> TransferPerMonthInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedPlatforms")]
		public InstancePlatform[] SupportedPlatforms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedAppCategories")]
		public AppCategory[] SupportedAppCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBundlesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="includeInactive")]
		public System.Nullable<System.Boolean> IncludeInactive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appCategory")]
		public AppCategory AppCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCertificatesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public CertificateSummary[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCertificatesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateStatuses")]
		public CertificateStatus[] CertificateStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeCertificateDetails")]
		public System.Nullable<System.Boolean> IncludeCertificateDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateName")]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCloudFormationStackRecordsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudFormationStackRecords")]
		public CloudFormationStackRecord[] CloudFormationStackRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a CloudFormation stack record created as a result of the <code>create cloud formation stack</code> action.</p> <p>A CloudFormation stack record provides information about the AWS CloudFormation stack used to create a new Amazon Elastic Compute Cloud instance from an exported Lightsail instance snapshot.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudFormationStackRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public RecordState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceInfo")]
		public CloudFormationStackRecordSourceInfo[] SourceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationInfo")]
		public DestinationInfo DestinationInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecordState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Started")]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Succeeded")]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 2,
	}
	
	/// <summary>
	/// Describes the source of a CloudFormation stack record (i.e., the export snapshot record).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudFormationStackRecordSourceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public CloudFormationStackRecordSourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CloudFormationStackRecordSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExportSnapshotRecord")]
		ExportSnapshotRecord = 0,
	}
	
	/// <summary>
	/// Describes the destination of a record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCloudFormationStackRecordsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContactMethodsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactMethods")]
		public ContactMethod[] ContactMethods { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a contact method.</p> <p>A contact method is a way to send you notifications. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactMethod
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactEndpoint")]
		public string ContactEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ContactMethodStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ContactProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactMethodStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PendingVerification")]
		PendingVerification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Valid")]
		Valid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invalid")]
		Invalid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContactMethodsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="protocols")]
		public ContactProtocol[] Protocols { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerAPIMetadataResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ContainerServiceMetadataEntry[] Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceMetadataEntry
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerAPIMetadataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerImagesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerImages")]
		public ContainerImage[] ContainerImages { get; set; }
	}
	
	/// <summary>
	/// Describes a container image that is registered to an Amazon Lightsail container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerImagesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerLogResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="logEvents")]
		public ContainerServiceLogEvent[] LogEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes the log events of a container of an Amazon Lightsail container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServiceLogEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerLogRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterPattern")]
		public string FilterPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerServiceDeploymentsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="deployments")]
		public ContainerServiceDeployment[] Deployments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerServiceDeploymentsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerServiceMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public ContainerServiceMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricData")]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerServiceMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CPUUtilization")]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemoryUtilization")]
		MemoryUtilization = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerServiceMetricDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public ContainerServiceMetricName MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerServicePowersResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="powers")]
		public ContainerServicePower[] Powers { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the powers that can be specified for an Amazon Lightsail container service.</p> <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the container service.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServicePower
	{
		
		[System.Runtime.Serialization.DataMember(Name="powerId")]
		public string PowerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public float Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpuCount")]
		public float CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramSizeInGb")]
		public float RamSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerServicePowersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerServicesListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerServices")]
		public ContainerService[] ContainerServices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContainerServicesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCostEstimateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourcesBudgetEstimate")]
		public ResourceBudgetEstimate[] ResourcesBudgetEstimate { get; set; }
	}
	
	/// <summary>
	/// Describes the estimated cost or usage that a budget tracks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceBudgetEstimate
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costEstimates")]
		public CostEstimate[] CostEstimates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	/// <summary>
	/// Describes the estimated cost for resources in your Lightsail for Research account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CostEstimate
	{
		
		[System.Runtime.Serialization.DataMember(Name="usageType")]
		public string UsageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultsByTime")]
		public EstimateByTime[] ResultsByTime { get; set; }
	}
	
	/// <summary>
	/// An estimate that's associated with a time period. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EstimateByTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="usageCost")]
		public System.Nullable<System.Double> UsageCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pricingUnit")]
		public PricingUnit PricingUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<System.Double> Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timePeriod")]
		public TimePeriod TimePeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PricingUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GB")]
		GB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hrs")]
		Hrs = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GB-Mo")]
		GBMinusMo = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bundles")]
		Bundles = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Queries")]
		Queries = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Currency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USD")]
		USD = 0,
	}
	
	/// <summary>
	/// Sets the start date and end date for retrieving a cost estimate. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimePeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.DateTimeOffset Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.DateTimeOffset End { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCostEstimateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiskResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public Disk Disk { get; set; }
	}
	
	/// <summary>
	/// Describes a block storage disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Disk
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addOns")]
		public AddOn[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSystemDisk")]
		public System.Nullable<System.Boolean> IsSystemDisk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DiskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachedTo")]
		public string AttachedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAttached")]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachmentState")]
		public string AttachmentState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gbInUse")]
		public System.Nullable<System.Int32> GbInUse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoMountStatus")]
		public AutoMountStatus AutoMountStatus { get; set; }
	}
	
	/// <summary>
	/// Describes an add-on that is enabled for an Amazon Lightsail resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOn
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snapshotTimeOfDay")]
		public string SnapshotTimeOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextSnapshotTimeOfDay")]
		public string NextSnapshotTimeOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public string Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-use")]
		inMinususe = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AutoMountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mounted")]
		Mounted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotMounted")]
		NotMounted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskName")]
		public string DiskName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiskSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="diskSnapshot")]
		public DiskSnapshot DiskSnapshot { get; set; }
	}
	
	/// <summary>
	/// Describes a block storage disk snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiskSnapshot
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DiskSnapshotState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromDiskName")]
		public string FromDiskName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromDiskArn")]
		public string FromDiskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromInstanceName")]
		public string FromInstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromInstanceArn")]
		public string FromInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFromAutoSnapshot")]
		public System.Nullable<System.Boolean> IsFromAutoSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiskSnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiskSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="diskSnapshotName")]
		public string DiskSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiskSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="diskSnapshots")]
		public DiskSnapshot[] DiskSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDiskSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDisksResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public Disk[] Disks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDisksRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionBundlesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public DistributionBundle[] Bundles { get; set; }
	}
	
	/// <summary>
	/// Describes the specifications of a distribution bundle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DistributionBundle
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public float Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferPerMonthInGb")]
		public System.Nullable<System.Int32> TransferPerMonthInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionBundlesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionLatestCacheResetResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionLatestCacheResetRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public DistributionMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricData")]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DistributionMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Requests")]
		Requests = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BytesDownloaded")]
		BytesDownloaded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BytesUploaded")]
		BytesUploaded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TotalErrorRate")]
		TotalErrorRate = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Http4xxErrorRate")]
		Http4xxErrorRate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Http5xxErrorRate")]
		Http5xxErrorRate = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionMetricDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public DistributionMetricName MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="distributions")]
		public LightsailDistribution[] Distributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDistributionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public Domain Domain { get; set; }
	}
	
	/// <summary>
	/// Describes a domain where you are storing recordsets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Domain
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainEntries")]
		public DomainEntry[] DomainEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredDomainDelegationInfo")]
		public RegisteredDomainDelegationInfo RegisteredDomainDelegationInfo { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the delegation state of an Amazon Route 53 registered domain to Amazon Lightsail.</p> <p>When you delegate an Amazon Route 53 registered domain to Lightsail, you can manage the DNS of the domain using a Lightsail DNS zone. You no longer use the Route 53 hosted zone to manage the DNS of the domain. To delegate the domain, Lightsail automatically updates the domain's name servers in Route 53 to the name servers of the Lightsail DNS zone. Then, Lightsail automatically deletes the Route 53 hosted zone for the domain.</p> <p>All of the following conditions must be true for automatic domain delegation to be successful:</p> <ul> <li> <p>The registered domain must be in the same Amazon Web Services account as the Lightsail account making the request.</p> </li> <li> <p>The user or entity making the request must have permission to manage domains in Route 53.</p> </li> <li> <p>The Route 53 hosted zone for the domain must be empty. It cannot contain DNS records other than start of authority (SOA) and name server records.</p> </li> </ul> <p>If automatic domain delegation fails, or if you manage the DNS of your domain using a service other than Route 53, then you must manually add the Lightsail DNS zone name servers to your domain in order to delegate management of its DNS to Lightsail. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-create-dns-entry">Creating a DNS zone to manage your domain’s records in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisteredDomainDelegationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="nameServersUpdateState")]
		public NameServersUpdateState NameServersUpdateState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="r53HostedZoneDeletionState")]
		public R53HostedZoneDeletionState R53HostedZoneDeletionState { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the state of the name server records update made by Amazon Lightsail to an Amazon Route 53 registered domain.</p> <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/understanding-dns-in-amazon-lightsail">DNS in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameServersUpdateState
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public NameServersUpdateStateCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NameServersUpdateStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 3,
	}
	
	/// <summary>
	/// Describes the deletion state of an Amazon Route 53 hosted zone for a domain that is being automatically delegated to an Amazon Lightsail DNS zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class R53HostedZoneDeletionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public NameServersUpdateStateCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public Domain[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExportSnapshotRecordsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="exportSnapshotRecords")]
		public ExportSnapshotRecord[] ExportSnapshotRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes an export snapshot record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportSnapshotRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public RecordState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceInfo")]
		public ExportSnapshotRecordSourceInfo SourceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationInfo")]
		public DestinationInfo DestinationInfo { get; set; }
	}
	
	/// <summary>
	/// Describes the source of an export snapshot record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportSnapshotRecordSourceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ExportSnapshotRecordSourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromResourceName")]
		public string FromResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromResourceArn")]
		public string FromResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceSnapshotInfo")]
		public InstanceSnapshotInfo InstanceSnapshotInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diskSnapshotInfo")]
		public DiskSnapshotInfo DiskSnapshotInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExportSnapshotRecordSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InstanceSnapshot")]
		InstanceSnapshot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiskSnapshot")]
		DiskSnapshot = 1,
	}
	
	/// <summary>
	/// Describes an instance snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceSnapshotInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromBundleId")]
		public string FromBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromBlueprintId")]
		public string FromBlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromDiskInfo")]
		public DiskInfo[] FromDiskInfo { get; set; }
	}
	
	/// <summary>
	/// Describes a disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiskInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSystemDisk")]
		public System.Nullable<System.Boolean> IsSystemDisk { get; set; }
	}
	
	/// <summary>
	/// Describes a disk snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiskSnapshotInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExportSnapshotRecordsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public Instance Instance { get; set; }
	}
	
	/// <summary>
	/// Describes an instance (a virtual private server).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Instance
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blueprintId")]
		public string BlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blueprintName")]
		public string BlueprintName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addOns")]
		public AddOn[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isStaticIp")]
		public System.Nullable<System.Boolean> IsStaticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateIpAddress")]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicIpAddress")]
		public string PublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipv6Addresses")]
		public string[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hardware")]
		public InstanceHardware Hardware { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networking")]
		public InstanceNetworking Networking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public InstanceState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sshKeyName")]
		public string SshKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadataOptions")]
		public InstanceMetadataOptions MetadataOptions { get; set; }
	}
	
	/// <summary>
	/// Describes the hardware for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceHardware
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpuCount")]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public Disk[] Disks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramSizeInGb")]
		public float RamSizeInGb { get; set; }
	}
	
	/// <summary>
	/// Describes monthly data transfer rates and port information for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceNetworking
	{
		
		[System.Runtime.Serialization.DataMember(Name="monthlyTransfer")]
		public MonthlyTransfer MonthlyTransfer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public InstancePortInfo[] Ports { get; set; }
	}
	
	/// <summary>
	/// Describes the monthly data transfer in and out of your virtual private server (or <i>instance</i>).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonthlyTransfer
	{
		
		[System.Runtime.Serialization.DataMember(Name="gbPerMonthAllocated")]
		public System.Nullable<System.Int32> GbPerMonthAllocated { get; set; }
	}
	
	/// <summary>
	/// Describes information about ports for an Amazon Lightsail instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstancePortInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromPort")]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toPort")]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public NetworkProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessFrom")]
		public string AccessFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public PortAccessType AccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commonName")]
		public string CommonName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessDirection")]
		public AccessDirection AccessDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrs")]
		public string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipv6Cidrs")]
		public string[] Ipv6Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrListAliases")]
		public string[] CidrListAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PortAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Public")]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Private")]
		Private = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound")]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound")]
		outbound = 1,
	}
	
	/// <summary>
	/// Describes the virtual private server (or <i>instance</i>) status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceState
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The metadata options for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceMetadataOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public InstanceMetadataState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpTokens")]
		public HttpTokens HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpEndpoint")]
		public HttpEndpoint HttpEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpPutResponseHopLimit")]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpProtocolIpv6")]
		public HttpEndpoint HttpProtocolIpv6 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceMetadataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="applied")]
		applied = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HttpTokens
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="optional")]
		optional = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="required")]
		required = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HttpEndpoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceAccessDetailsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessDetails")]
		public InstanceAccessDetails AccessDetails { get; set; }
	}
	
	/// <summary>
	/// The parameters for gaining temporary access to one of your Amazon Lightsail instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceAccessDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="certKey")]
		public string CertKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.DateTimeOffset ExpiresAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passwordData")]
		public PasswordData PasswordData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public InstanceAccessProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostKeys")]
		public HostKeyAttributes[] HostKeys { get; set; }
	}
	
	/// <summary>
	/// The password data for the Windows Server-based instance, including the ciphertext and the key pair name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordData
	{
		
		[System.Runtime.Serialization.DataMember(Name="ciphertext")]
		public string Ciphertext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPairName")]
		public string KeyPairName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceAccessProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ssh")]
		ssh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rdp")]
		rdp = 1,
	}
	
	/// <summary>
	/// Describes the public SSH host keys or the RDP certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HostKeyAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="witnessedAt")]
		public System.DateTimeOffset WitnessedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fingerprintSHA1")]
		public string FingerprintSHA1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fingerprintSHA256")]
		public string FingerprintSHA256 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notValidBefore")]
		public System.DateTimeOffset NotValidBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notValidAfter")]
		public System.DateTimeOffset NotValidAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceAccessDetailsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public InstanceAccessProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public InstanceMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricData")]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CPUUtilization")]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkIn")]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkOut")]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StatusCheckFailed")]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StatusCheckFailed_Instance")]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="StatusCheckFailed_System")]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BurstCapacityTime")]
		BurstCapacityTime = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BurstCapacityPercentage")]
		BurstCapacityPercentage = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MetadataNoToken")]
		MetadataNoToken = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceMetricDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public InstanceMetricName MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstancePortStatesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="portStates")]
		public InstancePortState[] PortStates { get; set; }
	}
	
	/// <summary>
	/// Describes open ports on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstancePortState
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromPort")]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toPort")]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public NetworkProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public PortState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrs")]
		public string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipv6Cidrs")]
		public string[] Ipv6Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrListAliases")]
		public string[] CidrListAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PortState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open")]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstancePortStatesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceSnapshot")]
		public InstanceSnapshot InstanceSnapshot { get; set; }
	}
	
	/// <summary>
	/// Describes an instance snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceSnapshot
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public InstanceSnapshotState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromAttachedDisks")]
		public Disk[] FromAttachedDisks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromInstanceName")]
		public string FromInstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromInstanceArn")]
		public string FromInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromBlueprintId")]
		public string FromBlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromBundleId")]
		public string FromBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFromAutoSnapshot")]
		public System.Nullable<System.Boolean> IsFromAutoSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceSnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="error")]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="available")]
		available = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceSnapshotName")]
		public string InstanceSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceSnapshots")]
		public InstanceSnapshot[] InstanceSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceStateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public InstanceState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceStateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public Instance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKeyPairResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public KeyPair KeyPair { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKeyPairRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyPairName")]
		public string KeyPairName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKeyPairsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyPairs")]
		public KeyPair[] KeyPairs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetKeyPairsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeDefaultKeyPair")]
		public System.Nullable<System.Boolean> IncludeDefaultKeyPair { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancer")]
		public LoadBalancer LoadBalancer { get; set; }
	}
	
	/// <summary>
	/// Describes a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancer
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsName")]
		public string DnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public LoadBalancerState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public LoadBalancerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicPorts")]
		public System.Nullable<System.Int32> PublicPorts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="healthCheckPath")]
		public string HealthCheckPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instancePort")]
		public System.Nullable<System.Int32> InstancePort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceHealthSummary")]
		public InstanceHealthSummary[] InstanceHealthSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlsCertificateSummaries")]
		public LoadBalancerTlsCertificateSummary[] TlsCertificateSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationOptions")]
		public LoadBalancerConfigurationOptions ConfigurationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpsRedirectionEnabled")]
		public System.Nullable<System.Boolean> HttpsRedirectionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tlsPolicyName")]
		public string TlsPolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="provisioning")]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active_impaired")]
		active_impaired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP_HTTPS")]
		HTTP_HTTPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP")]
		HTTP = 1,
	}
	
	/// <summary>
	/// Describes information about the health of the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceHealthSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceHealth")]
		public InstanceHealthState InstanceHealth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceHealthReason")]
		public InstanceHealthReason InstanceHealthReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="initial")]
		initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="healthy")]
		healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unhealthy")]
		unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unused")]
		unused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="draining")]
		draining = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unavailable")]
		unavailable = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceHealthReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lb.RegistrationInProgress")]
		Lb_RegistrationInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lb.InitialHealthChecking")]
		Lb_InitialHealthChecking = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lb.InternalError")]
		Lb_InternalError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.ResponseCodeMismatch")]
		Instance_ResponseCodeMismatch = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.Timeout")]
		Instance_Timeout = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.FailedHealthChecks")]
		Instance_FailedHealthChecks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.NotRegistered")]
		Instance_NotRegistered = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.NotInUse")]
		Instance_NotInUse = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.DeregistrationInProgress")]
		Instance_DeregistrationInProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.InvalidState")]
		Instance_InvalidState = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Instance.IpUnusable")]
		Instance_IpUnusable = 10,
	}
	
	/// <summary>
	/// Provides a summary of SSL/TLS certificate metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTlsCertificateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAttached")]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerConfigurationOptions
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public LoadBalancerMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricData")]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ClientTLSNegotiationErrorCount")]
		ClientTLSNegotiationErrorCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HealthyHostCount")]
		HealthyHostCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UnhealthyHostCount")]
		UnhealthyHostCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_LB_4XX_Count")]
		HTTPCode_LB_4XX_Count = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_LB_5XX_Count")]
		HTTPCode_LB_5XX_Count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_2XX_Count")]
		HTTPCode_Instance_2XX_Count = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_3XX_Count")]
		HTTPCode_Instance_3XX_Count = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_4XX_Count")]
		HTTPCode_Instance_4XX_Count = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPCode_Instance_5XX_Count")]
		HTTPCode_Instance_5XX_Count = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InstanceResponseTime")]
		InstanceResponseTime = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RejectedConnectionCount")]
		RejectedConnectionCount = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestCount")]
		RequestCount = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerMetricDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public LoadBalancerMetricName MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerTlsCertificatesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="tlsCertificates")]
		public LoadBalancerTlsCertificate[] TlsCertificates { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a load balancer SSL/TLS certificate.</p> <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTlsCertificate
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAttached")]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public LoadBalancerTlsCertificateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainValidationRecords")]
		public LoadBalancerTlsCertificateDomainValidationRecord[] DomainValidationRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public LoadBalancerTlsCertificateFailureReason FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuedAt")]
		public System.DateTimeOffset IssuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyAlgorithm")]
		public string KeyAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notAfter")]
		public System.DateTimeOffset NotAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.DateTimeOffset NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renewalSummary")]
		public LoadBalancerTlsCertificateRenewalSummary RenewalSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revocationReason")]
		public LoadBalancerTlsCertificateRevocationReason RevocationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revokedAt")]
		public System.DateTimeOffset RevokedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serial")]
		public string Serial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureAlgorithm")]
		public string SignatureAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subjectAlternativeNames")]
		public string[] SubjectAlternativeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerTlsCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_VALIDATION")]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISSUED")]
		ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION_TIMED_OUT")]
		VALIDATION_TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKED")]
		REVOKED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 7,
	}
	
	/// <summary>
	/// Describes the validation record of each domain name in the SSL/TLS certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTlsCertificateDomainValidationRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationStatus")]
		public CertificateDomainValidationStatus ValidationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsRecordCreationState")]
		public LoadBalancerTlsCertificateDnsRecordCreationState DnsRecordCreationState { get; set; }
	}
	
	/// <summary>
	/// An object that describes the state of the canonical name (CNAME) records that are automatically added by Lightsail to the DNS of the domain to validate domain ownership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTlsCertificateDnsRecordCreationState
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public DnsRecordCreationStateCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerTlsCertificateFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_AVAILABLE_CONTACTS")]
		NO_AVAILABLE_CONTACTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITIONAL_VERIFICATION_REQUIRED")]
		ADDITIONAL_VERIFICATION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOMAIN_NOT_ALLOWED")]
		DOMAIN_NOT_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_PUBLIC_DOMAIN")]
		INVALID_PUBLIC_DOMAIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 4,
	}
	
	/// <summary>
	/// <p>Contains information about the status of Lightsail's managed renewal for the certificate.</p> <p>The renewal status of the certificate.</p> <p>The following renewal status are possible:</p> <ul> <li> <p> <b> <code>PendingAutoRenewal</code> </b> - Lightsail is attempting to automatically validate the domain names in the certificate. No further action is required. </p> </li> <li> <p> <b> <code>PendingValidation</code> </b> - Lightsail couldn't automatically validate one or more domain names in the certificate. You must take action to validate these domain names or the certificate won't be renewed. If you used DNS validation, check to make sure your certificate's domain validation records exist in your domain's DNS, and that your certificate remains in use.</p> </li> <li> <p> <b> <code>Success</code> </b> - All domain names in the certificate are validated, and Lightsail renewed the certificate. No further action is required. </p> </li> <li> <p> <b> <code>Failed</code> </b> - One or more domain names were not validated before the certificate expired, and Lightsail did not renew the certificate. You can request a new certificate using the <code>CreateCertificate</code> action.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTlsCertificateRenewalSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="renewalStatus")]
		public LoadBalancerTlsCertificateRenewalStatus RenewalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domainValidationOptions")]
		public LoadBalancerTlsCertificateDomainValidationOption[] DomainValidationOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerTlsCertificateRenewalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_AUTO_RENEWAL")]
		PENDING_AUTO_RENEWAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_VALIDATION")]
		PENDING_VALIDATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
	}
	
	/// <summary>
	/// Contains information about the domain names on an SSL/TLS certificate that you will use to validate domain ownership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTlsCertificateDomainValidationOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationStatus")]
		public CertificateDomainValidationStatus ValidationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerTlsCertificateRevocationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED")]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEY_COMPROMISE")]
		KEY_COMPROMISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA_COMPROMISE")]
		CA_COMPROMISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFFILIATION_CHANGED")]
		AFFILIATION_CHANGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUPERCEDED")]
		SUPERCEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CESSATION_OF_OPERATION")]
		CESSATION_OF_OPERATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CERTIFICATE_HOLD")]
		CERTIFICATE_HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVE_FROM_CRL")]
		REMOVE_FROM_CRL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIVILEGE_WITHDRAWN")]
		PRIVILEGE_WITHDRAWN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="A_A_COMPROMISE")]
		A_A_COMPROMISE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerTlsCertificatesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerTlsPoliciesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="tlsPolicies")]
		public LoadBalancerTlsPolicy[] TlsPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the TLS security policies that are available for Lightsail load balancers.</p> <p>For more information about load balancer TLS security policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoadBalancerTlsPolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocols")]
		public string[] Protocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ciphers")]
		public string[] Ciphers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancerTlsPoliciesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancersResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="loadBalancers")]
		public LoadBalancer[] LoadBalancers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoadBalancersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationsForResourceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageCount")]
		public string NextPageCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOperationsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRegionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public Region[] Regions { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon Web Services Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Region
	{
		
		[System.Runtime.Serialization.DataMember(Name="continentCode")]
		public string ContinentCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public RegionName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityZones")]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseAvailabilityZones")]
		public AvailabilityZone[] RelationalDatabaseAvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// Describes an Availability Zone. This is returned only as part of a <code>GetRegions</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember(Name="zoneName")]
		public string ZoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRegionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="includeAvailabilityZones")]
		public System.Nullable<System.Boolean> IncludeAvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeRelationalDatabaseAvailabilityZones")]
		public System.Nullable<System.Boolean> IncludeRelationalDatabaseAvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabase")]
		public RelationalDatabase RelationalDatabase { get; set; }
	}
	
	/// <summary>
	/// Describes a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabase
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseBlueprintId")]
		public string RelationalDatabaseBlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseBundleId")]
		public string RelationalDatabaseBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="masterDatabaseName")]
		public string MasterDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hardware")]
		public RelationalDatabaseHardware Hardware { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondaryAvailabilityZone")]
		public string SecondaryAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backupRetentionEnabled")]
		public System.Nullable<System.Boolean> BackupRetentionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingModifiedValues")]
		public PendingModifiedRelationalDatabaseValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestRestorableTime")]
		public System.DateTimeOffset LatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="masterUsername")]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterApplyStatus")]
		public string ParameterApplyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredBackupWindow")]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="masterEndpoint")]
		public RelationalDatabaseEndpoint MasterEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingMaintenanceActions")]
		public PendingMaintenanceAction[] PendingMaintenanceActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateIdentifier")]
		public string CaCertificateIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes the hardware of a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabaseHardware
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpuCount")]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diskSizeInGb")]
		public System.Nullable<System.Int32> DiskSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramSizeInGb")]
		public float RamSizeInGb { get; set; }
	}
	
	/// <summary>
	/// Describes a pending database value modification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingModifiedRelationalDatabaseValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="masterUserPassword")]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backupRetentionEnabled")]
		public System.Nullable<System.Boolean> BackupRetentionEnabled { get; set; }
	}
	
	/// <summary>
	/// Describes an endpoint for a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabaseEndpoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
	}
	
	/// <summary>
	/// Describes a pending database maintenance action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingMaintenanceAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentApplyDate")]
		public System.DateTimeOffset CurrentApplyDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseBlueprintsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="blueprints")]
		public RelationalDatabaseBlueprint[] Blueprints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes a database image, or blueprint. A blueprint describes the major engine version of a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabaseBlueprint
	{
		
		[System.Runtime.Serialization.DataMember(Name="blueprintId")]
		public string BlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public RelationalDatabaseEngine Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineDescription")]
		public string EngineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineVersionDescription")]
		public string EngineVersionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEngineDefault")]
		public System.Nullable<System.Boolean> IsEngineDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RelationalDatabaseEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mysql")]
		mysql = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseBlueprintsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseBundlesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public RelationalDatabaseBundle[] Bundles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes a database bundle. A bundle describes the performance specifications of the database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabaseBundle
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public float Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ramSizeInGb")]
		public float RamSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="diskSizeInGb")]
		public System.Nullable<System.Int32> DiskSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferPerMonthInGb")]
		public System.Nullable<System.Int32> TransferPerMonthInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpuCount")]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseBundlesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeInactive")]
		public System.Nullable<System.Boolean> IncludeInactive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseEventsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseEvents")]
		public RelationalDatabaseEvent[] RelationalDatabaseEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes an event for a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabaseEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventCategories")]
		public string[] EventCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseEventsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInMinutes")]
		public System.Nullable<System.Int32> DurationInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseLogEventsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceLogEvents")]
		public LogEvent[] ResourceLogEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextBackwardToken")]
		public string NextBackwardToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextForwardToken")]
		public string NextForwardToken { get; set; }
	}
	
	/// <summary>
	/// Describes a database log event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseLogEventsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logStreamName")]
		public string LogStreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startFromHead")]
		public System.Nullable<System.Boolean> StartFromHead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseLogStreamsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="logStreams")]
		public string[] LogStreams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseLogStreamsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseMasterUserPasswordResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="masterUserPassword")]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseMasterUserPasswordRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passwordVersion")]
		public RelationalDatabasePasswordVersion PasswordVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RelationalDatabasePasswordVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENT")]
		CURRENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREVIOUS")]
		PREVIOUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public RelationalDatabaseMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricData")]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RelationalDatabaseMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CPUUtilization")]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DatabaseConnections")]
		DatabaseConnections = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiskQueueDepth")]
		DiskQueueDepth = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FreeStorageSpace")]
		FreeStorageSpace = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkReceiveThroughput")]
		NetworkReceiveThroughput = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NetworkTransmitThroughput")]
		NetworkTransmitThroughput = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseMetricDataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public RelationalDatabaseMetricName MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="period")]
		public int Period { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public MetricUnit Unit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseParametersResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public RelationalDatabaseParameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes the parameters of a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabaseParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applyMethod")]
		public string ApplyMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applyType")]
		public string ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isModifiable")]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterName")]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterValue")]
		public string ParameterValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseParametersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseSnapshot")]
		public RelationalDatabaseSnapshot RelationalDatabaseSnapshot { get; set; }
	}
	
	/// <summary>
	/// Describes a database snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RelationalDatabaseSnapshot
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engineVersion")]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGb")]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromRelationalDatabaseName")]
		public string FromRelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromRelationalDatabaseArn")]
		public string FromRelationalDatabaseArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromRelationalDatabaseBundleId")]
		public string FromRelationalDatabaseBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromRelationalDatabaseBlueprintId")]
		public string FromRelationalDatabaseBlueprintId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseSnapshotName")]
		public string RelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseSnapshots")]
		public RelationalDatabaseSnapshot[] RelationalDatabaseSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabaseSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabasesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabases")]
		public RelationalDatabase[] RelationalDatabases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRelationalDatabasesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="staticIp")]
		public StaticIp StaticIp { get; set; }
	}
	
	/// <summary>
	/// Describes a static IP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaticIp
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportCode")]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachedTo")]
		public string AttachedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAttached")]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStaticIpRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="staticIpName")]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStaticIpsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="staticIps")]
		public StaticIp[] StaticIps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStaticIpsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportKeyPairResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportKeyPairRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyPairName")]
		public string KeyPairName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicKeyBase64")]
		public string PublicKeyBase64 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IsVpcPeeredResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="isPeered")]
		public System.Nullable<System.Boolean> IsPeered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IsVpcPeeredRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenInstancePublicPortsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenInstancePublicPortsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portInfo")]
		public PortInfo PortInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PeerVpcResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PeerVpcRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAlarmResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAlarmRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alarmName")]
		public string AlarmName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public MetricName MetricName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monitoredResourceName")]
		public string MonitoredResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comparisonOperator")]
		public ComparisonOperator ComparisonOperator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public double Threshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluationPeriods")]
		public int EvaluationPeriods { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datapointsToAlarm")]
		public System.Nullable<System.Int32> DatapointsToAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treatMissingData")]
		public TreatMissingData TreatMissingData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactProtocols")]
		public ContactProtocol[] ContactProtocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationTriggers")]
		public AlarmState[] NotificationTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationEnabled")]
		public System.Nullable<System.Boolean> NotificationEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutInstancePublicPortsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutInstancePublicPortsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portInfos")]
		public PortInfo[] PortInfos { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RebootRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterContainerImageResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerImage")]
		public ContainerImage ContainerImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterContainerImageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReleaseStaticIpRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="staticIpName")]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetDistributionCacheResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetDistributionCacheRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendContactMethodVerificationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SendContactMethodVerificationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public ContactMethodVerificationProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContactMethodVerificationProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Email")]
		Email = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIpAddressTypeResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetIpAddressTypeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public ResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAddressType")]
		public IpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetResourceAccessForBucketResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetResourceAccessForBucketRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access")]
		public ResourceBucketAccess Access { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceBucketAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="allow")]
		allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deny")]
		deny = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartGUISessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartGUISessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopGUISessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopGUISessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseSnapshotName")]
		public string RelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestAlarmResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestAlarmRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alarmName")]
		public string AlarmName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public AlarmState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnpeerVpcResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnpeerVpcRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBucketResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public Bucket Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBucketRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessRules")]
		public AccessRules AccessRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versioning")]
		public string Versioning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readonlyAccessAccounts")]
		public string[] ReadonlyAccessAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessLogConfig")]
		public BucketAccessLogConfig AccessLogConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBucketBundleResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBucketBundleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateContainerServiceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerService")]
		public ContainerService ContainerService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateContainerServiceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="power")]
		public ContainerServicePowerName Power { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDisabled")]
		public System.Nullable<System.Boolean> IsDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicDomainNames")]
		public ContainerServicePublicDomains PublicDomainNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateRegistryAccess")]
		public PrivateRegistryAccessRequest PrivateRegistryAccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDistributionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDistributionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public InputOrigin Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultCacheBehavior")]
		public CacheBehavior DefaultCacheBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheBehaviorSettings")]
		public CacheSettings CacheBehaviorSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cacheBehaviors")]
		public CacheBehaviorPerPath[] CacheBehaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDistributionBundleResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDistributionBundleRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="distributionName")]
		public string DistributionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainEntryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainEntryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainEntry")]
		public DomainEntry DomainEntry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInstanceMetadataOptionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInstanceMetadataOptionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceName")]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpTokens")]
		public HttpTokens HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpEndpoint")]
		public HttpEndpoint HttpEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpPutResponseHopLimit")]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="httpProtocolIpv6")]
		public HttpEndpoint HttpProtocolIpv6 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLoadBalancerAttributeResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLoadBalancerAttributeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loadBalancerName")]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public LoadBalancerAttributeName AttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributeValue")]
		public string AttributeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HealthCheckPath")]
		HealthCheckPath = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SessionStickinessEnabled")]
		SessionStickinessEnabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SessionStickiness_LB_CookieDurationSeconds")]
		SessionStickiness_LB_CookieDurationSeconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HttpsRedirectionEnabled")]
		HttpsRedirectionEnabled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TlsPolicyName")]
		TlsPolicyName = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="masterUserPassword")]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotateMasterUserPassword")]
		public System.Nullable<System.Boolean> RotateMasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredBackupWindow")]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredMaintenanceWindow")]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBackupRetention")]
		public System.Nullable<System.Boolean> EnableBackupRetention { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableBackupRetention")]
		public System.Nullable<System.Boolean> DisableBackupRetention { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publiclyAccessible")]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applyImmediately")]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="caCertificateIdentifier")]
		public string CaCertificateIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRelationalDatabaseParametersResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRelationalDatabaseParametersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationalDatabaseName")]
		public string RelationalDatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public RelationalDatabaseParameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Describes a block storage disk mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DiskMap
	{
		
		[System.Runtime.Serialization.DataMember(Name="originalDiskPath")]
		public string OriginalDiskPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newDiskName")]
		public string NewDiskName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Environment
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortMap
	{
	}
	
	/// <summary>
	/// Describes the settings of a container that will be launched, or that is launched, to an Amazon Lightsail container service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Container
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string[] Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public Environment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ports")]
		public PortMap Ports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerServiceProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP")]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTPS")]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TCP")]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UDP")]
		UDP = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HttpProtocolIpv6
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disabled")]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="enabled")]
		enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerTlsCertificateDnsRecordCreationStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoadBalancerTlsCertificateDomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_VALIDATION")]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum R53HostedZoneDeletionStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTED")]
		STARTED = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Allocates a static IP address.
		/// AllocateStaticIp #X-Amz-Target=Lightsail_20161128.AllocateStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AllocateStaticIpResult> AllocateStaticIpAsync(AllocateStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.AllocateStaticIp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AllocateStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches an SSL/TLS certificate to your Amazon Lightsail content delivery network (CDN) distribution.</p> <p>After the certificate is attached, your distribution accepts HTTPS traffic for all of the domains that are associated with the certificate.</p> <p>Use the <code>CreateCertificate</code> action to create a certificate that you can attach to your distribution.</p> <important> <p>Only certificates created in the <code>us-east-1</code> Amazon Web Services Region can be attached to Lightsail distributions. Lightsail distributions are global resources that can reference an origin in any Amazon Web Services Region, and distribute its content globally. However, all distributions are located in the <code>us-east-1</code> Region.</p> </important>
		/// AttachCertificateToDistribution #X-Amz-Target=Lightsail_20161128.AttachCertificateToDistribution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachCertificateToDistributionResult> AttachCertificateToDistributionAsync(AttachCertificateToDistributionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.AttachCertificateToDistribution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttachCertificateToDistributionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches a block storage disk to a running or stopped Lightsail instance and exposes it to the instance with the specified disk name.</p> <p>The <code>attach disk</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// AttachDisk #X-Amz-Target=Lightsail_20161128.AttachDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachDiskResult> AttachDiskAsync(AttachDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.AttachDisk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttachDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches one or more Lightsail instances to a load balancer.</p> <p>After some time, the instances are attached to the load balancer and the health check status is available.</p> <p>The <code>attach instances to load balancer</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
		/// AttachInstancesToLoadBalancer #X-Amz-Target=Lightsail_20161128.AttachInstancesToLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachInstancesToLoadBalancerResult> AttachInstancesToLoadBalancerAsync(AttachInstancesToLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.AttachInstancesToLoadBalancer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttachInstancesToLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches a Transport Layer Security (TLS) certificate to your load balancer. TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p> <p>Once you create and validate your certificate, you can attach it to your load balancer. You can also use this API to rotate the certificates on your account. Use the <code>AttachLoadBalancerTlsCertificate</code> action with the non-attached certificate, and it will replace the existing one and become the attached certificate.</p> <p>The <code>AttachLoadBalancerTlsCertificate</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// AttachLoadBalancerTlsCertificate #X-Amz-Target=Lightsail_20161128.AttachLoadBalancerTlsCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachLoadBalancerTlsCertificateResult> AttachLoadBalancerTlsCertificateAsync(AttachLoadBalancerTlsCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.AttachLoadBalancerTlsCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttachLoadBalancerTlsCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attaches a static IP address to a specific Amazon Lightsail instance.
		/// AttachStaticIp #X-Amz-Target=Lightsail_20161128.AttachStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachStaticIpResult> AttachStaticIpAsync(AttachStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.AttachStaticIp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttachStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Closes ports for a specific Amazon Lightsail instance.</p> <p>The <code>CloseInstancePublicPorts</code> action supports tag-based access control via resource tags applied to the resource identified by <code>instanceName</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CloseInstancePublicPorts #X-Amz-Target=Lightsail_20161128.CloseInstancePublicPorts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloseInstancePublicPortsResult> CloseInstancePublicPortsAsync(CloseInstancePublicPortsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CloseInstancePublicPorts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloseInstancePublicPortsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Copies a manual snapshot of an instance or disk as another manual snapshot, or copies an automatic snapshot of an instance or disk as a manual snapshot. This operation can also be used to copy a manual or automatic snapshot of an instance or a disk from one Amazon Web Services Region to another in Amazon Lightsail.</p> <p>When copying a <i>manual snapshot</i>, be sure to define the <code>source region</code>, <code>source snapshot name</code>, and <code>target snapshot name</code> parameters.</p> <p>When copying an <i>automatic snapshot</i>, be sure to define the <code>source region</code>, <code>source resource name</code>, <code>target snapshot name</code>, and either the <code>restore date</code> or the <code>use latest restorable auto snapshot</code> parameters.</p>
		/// CopySnapshot #X-Amz-Target=Lightsail_20161128.CopySnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CopySnapshotResult> CopySnapshotAsync(CopySnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CopySnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CopySnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Lightsail bucket.</p> <p>A bucket is a cloud storage resource available in the Lightsail object storage service. Use buckets to store objects such as data and its descriptive metadata. For more information about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
		/// CreateBucket #X-Amz-Target=Lightsail_20161128.CreateBucket
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBucketResult> CreateBucketAsync(CreateBucketRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateBucket";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBucketResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new access key for the specified Amazon Lightsail bucket. Access keys consist of an access key ID and corresponding secret access key.</p> <p>Access keys grant full programmatic access to the specified bucket and its objects. You can have a maximum of two access keys per bucket. Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html">GetBucketAccessKeys</a> action to get a list of current access keys for a specific bucket. For more information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p> <important> <p>The <code>secretAccessKey</code> value is returned only in response to the <code>CreateBucketAccessKey</code> action. You can get a secret access key only when you first create an access key; you cannot get the secret access key later. If you lose the secret access key, you must create a new access key.</p> </important>
		/// CreateBucketAccessKey #X-Amz-Target=Lightsail_20161128.CreateBucketAccessKey
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBucketAccessKeyResult> CreateBucketAccessKeyAsync(CreateBucketAccessKeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateBucketAccessKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBucketAccessKeyResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an SSL/TLS certificate for an Amazon Lightsail content delivery network (CDN) distribution and a container service.</p> <p>After the certificate is valid, use the <code>AttachCertificateToDistribution</code> action to use the certificate and its domains with your distribution. Or use the <code>UpdateContainerService</code> action to use the certificate and its domains with your container service.</p> <important> <p>Only certificates created in the <code>us-east-1</code> Amazon Web Services Region can be attached to Lightsail distributions. Lightsail distributions are global resources that can reference an origin in any Amazon Web Services Region, and distribute its content globally. However, all distributions are located in the <code>us-east-1</code> Region.</p> </important>
		/// CreateCertificate #X-Amz-Target=Lightsail_20161128.CreateCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCertificateResult> CreateCertificateAsync(CreateCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an AWS CloudFormation stack, which creates a new Amazon EC2 instance from an exported Amazon Lightsail snapshot. This operation results in a CloudFormation stack record that can be used to track the AWS CloudFormation stack created. Use the <code>get cloud formation stack records</code> operation to get a list of the CloudFormation stacks created.</p> <important> <p>Wait until after your new Amazon EC2 instance is created before running the <code>create cloud formation stack</code> operation again with the same export snapshot record.</p> </important>
		/// CreateCloudFormationStack #X-Amz-Target=Lightsail_20161128.CreateCloudFormationStack
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCloudFormationStackResult> CreateCloudFormationStackAsync(CreateCloudFormationStackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateCloudFormationStack";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCloudFormationStackResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an email or SMS text message contact method.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
		/// CreateContactMethod #X-Amz-Target=Lightsail_20161128.CreateContactMethod
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContactMethodResult> CreateContactMethodAsync(CreateContactMethodRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateContactMethod";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateContactMethodResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Lightsail container service.</p> <p>A Lightsail container service is a compute resource to which you can deploy containers. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services">Container services in Amazon Lightsail</a> in the <i>Lightsail Dev Guide</i>.</p>
		/// CreateContainerService #X-Amz-Target=Lightsail_20161128.CreateContainerService
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContainerServiceResult> CreateContainerServiceAsync(CreateContainerServiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateContainerService";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateContainerServiceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a deployment for your Amazon Lightsail container service.</p> <p>A deployment specifies the containers that will be launched on the container service and their settings, such as the ports to open, the environment variables to apply, and the launch command to run. It also specifies the container that will serve as the public endpoint of the deployment and its settings, such as the HTTP or HTTPS port to use, and the health check configuration.</p> <p>You can deploy containers to your container service using container images from a public registry such as Amazon ECR Public, or from your local machine. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-images">Creating container images for your Amazon Lightsail container services</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
		/// CreateContainerServiceDeployment #X-Amz-Target=Lightsail_20161128.CreateContainerServiceDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContainerServiceDeploymentResult> CreateContainerServiceDeploymentAsync(CreateContainerServiceDeploymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateContainerServiceDeployment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateContainerServiceDeploymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a temporary set of log in credentials that you can use to log in to the Docker process on your local machine. After you're logged in, you can use the native Docker commands to push your local container images to the container image registry of your Amazon Lightsail account so that you can use them with your Lightsail container service. The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials.</p> <note> <p>You can only push container images to the container service registry of your Lightsail account. You cannot pull container images or perform any other container image management actions on the container service registry.</p> </note> <p>After you push your container images to the container image registry of your Lightsail account, use the <code>RegisterContainerImage</code> action to register the pushed images to a specific Lightsail container service.</p> <note> <p>This action is not required if you install and use the Lightsail Control (lightsailctl) plugin to push container images to your Lightsail container service. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a> in the <i>Amazon Lightsail Developer Guide</i>.</p> </note>
		/// CreateContainerServiceRegistryLogin #X-Amz-Target=Lightsail_20161128.CreateContainerServiceRegistryLogin
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContainerServiceRegistryLoginResult> CreateContainerServiceRegistryLoginAsync(CreateContainerServiceRegistryLoginRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateContainerServiceRegistryLogin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateContainerServiceRegistryLoginResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a block storage disk that can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g., <code>us-east-2a</code>).</p> <p>The <code>create disk</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateDisk #X-Amz-Target=Lightsail_20161128.CreateDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDiskResult> CreateDiskAsync(CreateDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateDisk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g., <code>us-east-2a</code>).</p> <p>The <code>create disk from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>disk snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateDiskFromSnapshot #X-Amz-Target=Lightsail_20161128.CreateDiskFromSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDiskFromSnapshotResult> CreateDiskFromSnapshotAsync(CreateDiskFromSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateDiskFromSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDiskFromSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of a block storage disk. You can use snapshots for backups, to make copies of disks, and to save data before shutting down a Lightsail instance.</p> <p>You can take a snapshot of an attached disk that is in use; however, snapshots only capture data that has been written to your disk at the time the snapshot command is issued. This may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the disk long enough to take a snapshot, your snapshot should be complete. Nevertheless, if you cannot pause all file writes to the disk, you should unmount the disk from within the Lightsail instance, issue the create disk snapshot command, and then remount the disk to ensure a consistent and complete snapshot. You may remount and use your disk while the snapshot status is pending.</p> <p>You can also use this operation to create a snapshot of an instance's system volume. You might want to do this, for example, to recover data from the system volume of a botched instance or to create a backup of the system volume like you would for a block storage disk. To create a snapshot of a system volume, just define the <code>instance name</code> parameter when issuing the snapshot command, and a snapshot of the defined instance's system volume will be created. After the snapshot is available, you can create a block storage disk from the snapshot and attach it to a running instance to access the data on the disk.</p> <p>The <code>create disk snapshot</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateDiskSnapshot #X-Amz-Target=Lightsail_20161128.CreateDiskSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDiskSnapshotResult> CreateDiskSnapshotAsync(CreateDiskSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateDiskSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDiskSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Lightsail content delivery network (CDN) distribution.</p> <p>A distribution is a globally distributed network of caching servers that improve the performance of your website or web application hosted on a Lightsail instance. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-network-distributions">Content delivery networks in Amazon Lightsail</a>.</p>
		/// CreateDistribution #X-Amz-Target=Lightsail_20161128.CreateDistribution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDistributionResult> CreateDistributionAsync(CreateDistributionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateDistribution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDistributionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a domain resource for the specified domain (e.g., example.com).</p> <p>The <code>create domain</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateDomain #X-Amz-Target=Lightsail_20161128.CreateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDomainResult> CreateDomainAsync(CreateDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDomainResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one of the following domain name system (DNS) records in a domain DNS zone: Address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT).</p> <p>The <code>create domain entry</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateDomainEntry #X-Amz-Target=Lightsail_20161128.CreateDomainEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDomainEntryResult> CreateDomainEntryAsync(CreateDomainEntryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateDomainEntry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDomainEntryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates two URLs that are used to access a virtual computer’s graphical user interface (GUI) session. The primary URL initiates a web-based NICE DCV session to the virtual computer's application. The secondary URL initiates a web-based NICE DCV session to the virtual computer's operating session. </p> <p>Use <code>StartGUISession</code> to open the session.</p>
		/// CreateGUISessionAccessDetails #X-Amz-Target=Lightsail_20161128.CreateGUISessionAccessDetails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateGUISessionAccessDetailsResult> CreateGUISessionAccessDetailsAsync(CreateGUISessionAccessDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateGUISessionAccessDetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGUISessionAccessDetailsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of a specific virtual private server, or <i>instance</i>. You can use a snapshot to create a new instance that is based on that snapshot.</p> <p>The <code>create instance snapshot</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateInstanceSnapshot #X-Amz-Target=Lightsail_20161128.CreateInstanceSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstanceSnapshotResult> CreateInstanceSnapshotAsync(CreateInstanceSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateInstanceSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInstanceSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more Amazon Lightsail instances.</p> <p>The <code>create instances</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
		/// CreateInstances #X-Amz-Target=Lightsail_20161128.CreateInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstancesResult> CreateInstancesAsync(CreateInstancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInstancesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more new instances from a manual or automatic snapshot of an instance.</p> <p>The <code>create instances from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateInstancesFromSnapshot #X-Amz-Target=Lightsail_20161128.CreateInstancesFromSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstancesFromSnapshotResult> CreateInstancesFromSnapshotAsync(CreateInstancesFromSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateInstancesFromSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInstancesFromSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a custom SSH key pair that you can use with an Amazon Lightsail instance.</p> <note> <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> action to create a Lightsail default key pair in an Amazon Web Services Region where a default key pair does not currently exist.</p> </note> <p>The <code>create key pair</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateKeyPair #X-Amz-Target=Lightsail_20161128.CreateKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateKeyPairResult> CreateKeyPairAsync(CreateKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateKeyPair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Lightsail load balancer. To learn more about deciding whether to load balance your application, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/configure-lightsail-instances-for-load-balancing">Configure your Lightsail instances for load balancing</a>. You can create up to 5 load balancers per AWS Region in your account.</p> <p>When you create a load balancer, you can specify a unique name and port settings. To change additional load balancer settings, use the <code>UpdateLoadBalancerAttribute</code> operation.</p> <p>The <code>create load balancer</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateLoadBalancer #X-Amz-Target=Lightsail_20161128.CreateLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLoadBalancerResult> CreateLoadBalancerAsync(CreateLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateLoadBalancer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an SSL/TLS certificate for an Amazon Lightsail load balancer.</p> <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p> <p>The <code>CreateLoadBalancerTlsCertificate</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateLoadBalancerTlsCertificate #X-Amz-Target=Lightsail_20161128.CreateLoadBalancerTlsCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLoadBalancerTlsCertificateResult> CreateLoadBalancerTlsCertificateAsync(CreateLoadBalancerTlsCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateLoadBalancerTlsCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLoadBalancerTlsCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new database in Amazon Lightsail.</p> <p>The <code>create relational database</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateRelationalDatabase #X-Amz-Target=Lightsail_20161128.CreateRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRelationalDatabaseResult> CreateRelationalDatabaseAsync(CreateRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new database from an existing database snapshot in Amazon Lightsail.</p> <p>You can create a new database from a snapshot in if something goes wrong with your original database, or to change it to a different plan, such as a high availability or standard plan.</p> <p>The <code>create relational database from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by relationalDatabaseSnapshotName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateRelationalDatabaseFromSnapshot #X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseFromSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRelationalDatabaseFromSnapshotResult> CreateRelationalDatabaseFromSnapshotAsync(CreateRelationalDatabaseFromSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseFromSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRelationalDatabaseFromSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups, to make copies of a database, and to save data before deleting a database.</p> <p>The <code>create relational database snapshot</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// CreateRelationalDatabaseSnapshot #X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRelationalDatabaseSnapshotResult> CreateRelationalDatabaseSnapshotAsync(CreateRelationalDatabaseSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRelationalDatabaseSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an alarm.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
		/// DeleteAlarm #X-Amz-Target=Lightsail_20161128.DeleteAlarm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAlarmResult> DeleteAlarmAsync(DeleteAlarmRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteAlarm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAlarmResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an automatic snapshot of an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.
		/// DeleteAutoSnapshot #X-Amz-Target=Lightsail_20161128.DeleteAutoSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAutoSnapshotResult> DeleteAutoSnapshotAsync(DeleteAutoSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteAutoSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAutoSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a Amazon Lightsail bucket.</p> <note> <p>When you delete your bucket, the bucket name is released and can be reused for a new bucket in your account or another Amazon Web Services account.</p> </note>
		/// DeleteBucket #X-Amz-Target=Lightsail_20161128.DeleteBucket
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBucketResult> DeleteBucketAsync(DeleteBucketRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteBucket";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBucketResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an access key for the specified Amazon Lightsail bucket.</p> <p>We recommend that you delete an access key if the secret access key is compromised.</p> <p>For more information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
		/// DeleteBucketAccessKey #X-Amz-Target=Lightsail_20161128.DeleteBucketAccessKey
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBucketAccessKeyResult> DeleteBucketAccessKeyAsync(DeleteBucketAccessKeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteBucketAccessKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBucketAccessKeyResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an SSL/TLS certificate for your Amazon Lightsail content delivery network (CDN) distribution.</p> <p>Certificates that are currently attached to a distribution cannot be deleted. Use the <code>DetachCertificateFromDistribution</code> action to detach a certificate from a distribution.</p>
		/// DeleteCertificate #X-Amz-Target=Lightsail_20161128.DeleteCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteCertificateResult> DeleteCertificateAsync(DeleteCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a contact method.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
		/// DeleteContactMethod #X-Amz-Target=Lightsail_20161128.DeleteContactMethod
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteContactMethodResult> DeleteContactMethodAsync(DeleteContactMethodRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteContactMethod";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteContactMethodResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a container image that is registered to your Amazon Lightsail container service.
		/// DeleteContainerImage #X-Amz-Target=Lightsail_20161128.DeleteContainerImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteContainerImageResult> DeleteContainerImageAsync(DeleteContainerImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteContainerImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteContainerImageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes your Amazon Lightsail container service.
		/// DeleteContainerService #X-Amz-Target=Lightsail_20161128.DeleteContainerService
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteContainerServiceResult> DeleteContainerServiceAsync(DeleteContainerServiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteContainerService";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteContainerServiceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified block storage disk. The disk must be in the <code>available</code> state (not attached to a Lightsail instance).</p> <note> <p>The disk may remain in the <code>deleting</code> state for several minutes.</p> </note> <p>The <code>delete disk</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteDisk #X-Amz-Target=Lightsail_20161128.DeleteDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDiskResult> DeleteDiskAsync(DeleteDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteDisk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified disk snapshot.</p> <p>When you make periodic snapshots of a disk, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the disk.</p> <p>The <code>delete disk snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteDiskSnapshot #X-Amz-Target=Lightsail_20161128.DeleteDiskSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDiskSnapshotResult> DeleteDiskSnapshotAsync(DeleteDiskSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteDiskSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDiskSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes your Amazon Lightsail content delivery network (CDN) distribution.
		/// DeleteDistribution #X-Amz-Target=Lightsail_20161128.DeleteDistribution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDistributionResult> DeleteDistributionAsync(DeleteDistributionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteDistribution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDistributionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified domain recordset and all of its domain records.</p> <p>The <code>delete domain</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteDomain #X-Amz-Target=Lightsail_20161128.DeleteDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDomainResult> DeleteDomainAsync(DeleteDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDomainResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific domain entry.</p> <p>The <code>delete domain entry</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteDomainEntry #X-Amz-Target=Lightsail_20161128.DeleteDomainEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDomainEntryResult> DeleteDomainEntryAsync(DeleteDomainEntryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteDomainEntry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDomainEntryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an Amazon Lightsail instance.</p> <p>The <code>delete instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteInstance #X-Amz-Target=Lightsail_20161128.DeleteInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInstanceResult> DeleteInstanceAsync(DeleteInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific snapshot of a virtual private server (or <i>instance</i>).</p> <p>The <code>delete instance snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteInstanceSnapshot #X-Amz-Target=Lightsail_20161128.DeleteInstanceSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInstanceSnapshotResult> DeleteInstanceSnapshotAsync(DeleteInstanceSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteInstanceSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInstanceSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified key pair by removing the public key from Amazon Lightsail.</p> <p>You can delete key pairs that were created using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_ImportKeyPair.html">ImportKeyPair</a> and <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateKeyPair.html">CreateKeyPair</a> actions, as well as the Lightsail default key pair. A new default key pair will not be created unless you launch an instance without specifying a custom key pair, or you call the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> API. </p> <p>The <code>delete key pair</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>key pair name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteKeyPair #X-Amz-Target=Lightsail_20161128.DeleteKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteKeyPairResult> DeleteKeyPairAsync(DeleteKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteKeyPair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the known host key or certificate used by the Amazon Lightsail browser-based SSH or RDP clients to authenticate an instance. This operation enables the Lightsail browser-based SSH or RDP clients to connect to the instance after a host key mismatch.</p> <important> <p>Perform this operation only if you were expecting the host key or certificate mismatch or if you are familiar with the new host key or certificate on the instance. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-troubleshooting-browser-based-ssh-rdp-client-connection">Troubleshooting connection issues when using the Amazon Lightsail browser-based SSH or RDP client</a>.</p> </important>
		/// DeleteKnownHostKeys #X-Amz-Target=Lightsail_20161128.DeleteKnownHostKeys
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteKnownHostKeysResult> DeleteKnownHostKeysAsync(DeleteKnownHostKeysRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteKnownHostKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteKnownHostKeysResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a Lightsail load balancer and all its associated SSL/TLS certificates. Once the load balancer is deleted, you will need to create a new load balancer, create a new certificate, and verify domain ownership again.</p> <p>The <code>delete load balancer</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteLoadBalancer #X-Amz-Target=Lightsail_20161128.DeleteLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteLoadBalancerResult> DeleteLoadBalancerAsync(DeleteLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteLoadBalancer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an SSL/TLS certificate associated with a Lightsail load balancer.</p> <p>The <code>DeleteLoadBalancerTlsCertificate</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteLoadBalancerTlsCertificate #X-Amz-Target=Lightsail_20161128.DeleteLoadBalancerTlsCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteLoadBalancerTlsCertificateResult> DeleteLoadBalancerTlsCertificateAsync(DeleteLoadBalancerTlsCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteLoadBalancerTlsCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteLoadBalancerTlsCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a database in Amazon Lightsail.</p> <p>The <code>delete relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteRelationalDatabase #X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRelationalDatabaseResult> DeleteRelationalDatabaseAsync(DeleteRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a database snapshot in Amazon Lightsail.</p> <p>The <code>delete relational database snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DeleteRelationalDatabaseSnapshot #X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabaseSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRelationalDatabaseSnapshotResult> DeleteRelationalDatabaseSnapshotAsync(DeleteRelationalDatabaseSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabaseSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRelationalDatabaseSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches an SSL/TLS certificate from your Amazon Lightsail content delivery network (CDN) distribution.</p> <p>After the certificate is detached, your distribution stops accepting traffic for all of the domains that are associated with the certificate.</p>
		/// DetachCertificateFromDistribution #X-Amz-Target=Lightsail_20161128.DetachCertificateFromDistribution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachCertificateFromDistributionResult> DetachCertificateFromDistributionAsync(DetachCertificateFromDistributionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DetachCertificateFromDistribution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetachCertificateFromDistributionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches a stopped block storage disk from a Lightsail instance. Make sure to unmount any file systems on the device within your operating system before stopping the instance and detaching the disk.</p> <p>The <code>detach disk</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DetachDisk #X-Amz-Target=Lightsail_20161128.DetachDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachDiskResult> DetachDiskAsync(DetachDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DetachDisk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetachDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches the specified instances from a Lightsail load balancer.</p> <p>This operation waits until the instances are no longer needed before they are detached from the load balancer.</p> <p>The <code>detach instances from load balancer</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// DetachInstancesFromLoadBalancer #X-Amz-Target=Lightsail_20161128.DetachInstancesFromLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachInstancesFromLoadBalancerResult> DetachInstancesFromLoadBalancerAsync(DetachInstancesFromLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DetachInstancesFromLoadBalancer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetachInstancesFromLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detaches a static IP from the Amazon Lightsail instance to which it is attached.
		/// DetachStaticIp #X-Amz-Target=Lightsail_20161128.DetachStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachStaticIpResult> DetachStaticIpAsync(DetachStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DetachStaticIp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetachStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disables an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.
		/// DisableAddOn #X-Amz-Target=Lightsail_20161128.DisableAddOn
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableAddOnResult> DisableAddOnAsync(DisableAddOnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DisableAddOn";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisableAddOnResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Downloads the regional Amazon Lightsail default key pair.</p> <p>This action also creates a Lightsail default key pair if a default key pair does not currently exist in the Amazon Web Services Region.</p>
		/// DownloadDefaultKeyPair #X-Amz-Target=Lightsail_20161128.DownloadDefaultKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DownloadDefaultKeyPairResult> DownloadDefaultKeyPairAsync(DownloadDefaultKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.DownloadDefaultKeyPair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DownloadDefaultKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables or modifies an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.
		/// EnableAddOn #X-Amz-Target=Lightsail_20161128.EnableAddOn
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableAddOnResult> EnableAddOnAsync(EnableAddOnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.EnableAddOn";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnableAddOnResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Exports an Amazon Lightsail instance or block storage disk snapshot to Amazon Elastic Compute Cloud (Amazon EC2). This operation results in an export snapshot record that can be used with the <code>create cloud formation stack</code> operation to create new Amazon EC2 instances.</p> <p>Exported instance snapshots appear in Amazon EC2 as Amazon Machine Images (AMIs), and the instance system disk appears as an Amazon Elastic Block Store (Amazon EBS) volume. Exported disk snapshots appear in Amazon EC2 as Amazon EBS volumes. Snapshots are exported to the same Amazon Web Services Region in Amazon EC2 as the source Lightsail snapshot.</p> <p/> <p>The <code>export snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>source snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p> <note> <p>Use the <code>get instance snapshots</code> or <code>get disk snapshots</code> operations to get a list of snapshots that you can export to Amazon EC2.</p> </note>
		/// ExportSnapshot #X-Amz-Target=Lightsail_20161128.ExportSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExportSnapshotResult> ExportSnapshotAsync(ExportSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.ExportSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the names of all active (not deleted) resources.
		/// GetActiveNames #X-Amz-Target=Lightsail_20161128.GetActiveNames
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetActiveNamesResult> GetActiveNamesAsync(GetActiveNamesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetActiveNames";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetActiveNamesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the configured alarms. Specify an alarm name in your request to return information about a specific alarm, or specify a monitored resource name to return information about all alarms for a specific resource.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
		/// GetAlarms #X-Amz-Target=Lightsail_20161128.GetAlarms
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAlarmsResult> GetAlarmsAsync(GetAlarmsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetAlarms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAlarmsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the available automatic snapshots for an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.
		/// GetAutoSnapshots #X-Amz-Target=Lightsail_20161128.GetAutoSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAutoSnapshotsResult> GetAutoSnapshotsAsync(GetAutoSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetAutoSnapshots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAutoSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of available instance images, or <i>blueprints</i>. You can use a blueprint to create a new instance already running a specific operating system, as well as a preinstalled app or development stack. The software each instance is running depends on the blueprint image you choose.</p> <note> <p>Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.</p> </note>
		/// GetBlueprints #X-Amz-Target=Lightsail_20161128.GetBlueprints
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBlueprintsResult> GetBlueprintsAsync(GetBlueprintsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetBlueprints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBlueprintsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the existing access key IDs for the specified Amazon Lightsail bucket.</p> <important> <p>This action does not return the secret access key value of an access key. You can get a secret access key only when you create it from the response of the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action. If you lose the secret access key, you must create a new access key.</p> </important>
		/// GetBucketAccessKeys #X-Amz-Target=Lightsail_20161128.GetBucketAccessKeys
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBucketAccessKeysResult> GetBucketAccessKeysAsync(GetBucketAccessKeysRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetBucketAccessKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBucketAccessKeysResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the bundles that you can apply to a Amazon Lightsail bucket.</p> <p>The bucket bundle specifies the monthly cost, storage quota, and data transfer quota for a bucket.</p> <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to update the bundle for a bucket.</p>
		/// GetBucketBundles #X-Amz-Target=Lightsail_20161128.GetBucketBundles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBucketBundlesResult> GetBucketBundlesAsync(GetBucketBundlesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetBucketBundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBucketBundlesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the data points of a specific metric for an Amazon Lightsail bucket.</p> <p>Metrics report the utilization of a bucket. View and collect metric data regularly to monitor the number of objects stored in a bucket (including object versions) and the storage space used by those objects.</p>
		/// GetBucketMetricData #X-Amz-Target=Lightsail_20161128.GetBucketMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBucketMetricDataResult> GetBucketMetricDataAsync(GetBucketMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetBucketMetricData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBucketMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about one or more Amazon Lightsail buckets. The information returned includes the synchronization status of the Amazon Simple Storage Service (Amazon S3) account-level block public access feature for your Lightsail buckets.</p> <p>For more information about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
		/// GetBuckets #X-Amz-Target=Lightsail_20161128.GetBuckets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBucketsResult> GetBucketsAsync(GetBucketsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetBuckets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBucketsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the bundles that you can apply to an Amazon Lightsail instance when you create it.</p> <p>A bundle describes the specifications of an instance, such as the monthly cost, amount of memory, the number of vCPUs, amount of storage space, and monthly network data transfer quota.</p> <note> <p>Bundles are referred to as <i>instance plans</i> in the Lightsail console.</p> </note>
		/// GetBundles #X-Amz-Target=Lightsail_20161128.GetBundles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBundlesResult> GetBundlesAsync(GetBundlesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetBundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBundlesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about one or more Amazon Lightsail SSL/TLS certificates.</p> <note> <p>To get a summary of a certificate, omit <code>includeCertificateDetails</code> from your request. The response will include only the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.</p> </note>
		/// GetCertificates #X-Amz-Target=Lightsail_20161128.GetCertificates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCertificatesResult> GetCertificatesAsync(GetCertificatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetCertificates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCertificatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the CloudFormation stack record created as a result of the <code>create cloud formation stack</code> operation.</p> <p>An AWS CloudFormation stack is used to create a new Amazon EC2 instance from an exported Lightsail snapshot.</p>
		/// GetCloudFormationStackRecords #X-Amz-Target=Lightsail_20161128.GetCloudFormationStackRecords
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCloudFormationStackRecordsResult> GetCloudFormationStackRecordsAsync(GetCloudFormationStackRecordsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetCloudFormationStackRecords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCloudFormationStackRecordsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the configured contact methods. Specify a protocol in your request to return information about a specific contact method.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
		/// GetContactMethods #X-Amz-Target=Lightsail_20161128.GetContactMethods
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContactMethodsResult> GetContactMethodsAsync(GetContactMethodsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContactMethods";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContactMethodsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about Amazon Lightsail containers, such as the current version of the Lightsail Control (lightsailctl) plugin.
		/// GetContainerAPIMetadata #X-Amz-Target=Lightsail_20161128.GetContainerAPIMetadata
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContainerAPIMetadataResult> GetContainerAPIMetadataAsync(GetContainerAPIMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContainerAPIMetadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerAPIMetadataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the container images that are registered to your Amazon Lightsail container service.</p> <note> <p>If you created a deployment on your Lightsail container service that uses container images from a public registry like Docker Hub, those images are not returned as part of this action. Those images are not registered to your Lightsail container service.</p> </note>
		/// GetContainerImages #X-Amz-Target=Lightsail_20161128.GetContainerImages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContainerImagesResult> GetContainerImagesAsync(GetContainerImagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContainerImages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerImagesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the log events of a container of your Amazon Lightsail container service.</p> <p>If your container service has more than one node (i.e., a scale greater than 1), then the log events that are returned for the specified container are merged from all nodes on your container service.</p> <note> <p>Container logs are retained for a certain amount of time. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> </note>
		/// GetContainerLog #X-Amz-Target=Lightsail_20161128.GetContainerLog
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContainerLogResult> GetContainerLogAsync(GetContainerLogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContainerLog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerLogResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the deployments for your Amazon Lightsail container service</p> <p>A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.</p> <p>The deployments are ordered by version in ascending order. The newest version is listed at the top of the response.</p> <note> <p>A set number of deployments are kept before the oldest one is replaced with the newest one. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> </note>
		/// GetContainerServiceDeployments #X-Amz-Target=Lightsail_20161128.GetContainerServiceDeployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContainerServiceDeploymentsResult> GetContainerServiceDeploymentsAsync(GetContainerServiceDeploymentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContainerServiceDeployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerServiceDeploymentsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the data points of a specific metric of your Amazon Lightsail container service.</p> <p>Metrics report the utilization of your resources. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetContainerServiceMetricData #X-Amz-Target=Lightsail_20161128.GetContainerServiceMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContainerServiceMetricDataResult> GetContainerServiceMetricDataAsync(GetContainerServiceMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContainerServiceMetricData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerServiceMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of powers that can be specified for your Amazon Lightsail container services.</p> <p>The power specifies the amount of memory, the number of vCPUs, and the base price of the container service.</p>
		/// GetContainerServicePowers #X-Amz-Target=Lightsail_20161128.GetContainerServicePowers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContainerServicePowersResult> GetContainerServicePowersAsync(GetContainerServicePowersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContainerServicePowers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetContainerServicePowersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about one or more of your Amazon Lightsail container services.
		/// GetContainerServices #X-Amz-Target=Lightsail_20161128.GetContainerServices
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ContainerServicesListResult> GetContainerServicesAsync(GetContainerServicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetContainerServices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainerServicesListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the cost estimate for a specified resource. A cost estimate will not generate for a resource that has been deleted.
		/// GetCostEstimate #X-Amz-Target=Lightsail_20161128.GetCostEstimate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCostEstimateResult> GetCostEstimateAsync(GetCostEstimateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetCostEstimate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCostEstimateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific block storage disk.
		/// GetDisk #X-Amz-Target=Lightsail_20161128.GetDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDiskResult> GetDiskAsync(GetDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDisk";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific block storage disk snapshot.
		/// GetDiskSnapshot #X-Amz-Target=Lightsail_20161128.GetDiskSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDiskSnapshotResult> GetDiskSnapshotAsync(GetDiskSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDiskSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDiskSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all block storage disk snapshots in your AWS account and region.
		/// GetDiskSnapshots #X-Amz-Target=Lightsail_20161128.GetDiskSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDiskSnapshotsResult> GetDiskSnapshotsAsync(GetDiskSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDiskSnapshots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDiskSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all block storage disks in your AWS account and region.
		/// GetDisks #X-Amz-Target=Lightsail_20161128.GetDisks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDisksResult> GetDisksAsync(GetDisksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDisks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDisksResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the bundles that can be applied to your Amazon Lightsail content delivery network (CDN) distributions.</p> <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of your distribution.</p>
		/// GetDistributionBundles #X-Amz-Target=Lightsail_20161128.GetDistributionBundles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDistributionBundlesResult> GetDistributionBundlesAsync(GetDistributionBundlesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDistributionBundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDistributionBundlesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the timestamp and status of the last cache reset of a specific Amazon Lightsail content delivery network (CDN) distribution.
		/// GetDistributionLatestCacheReset #X-Amz-Target=Lightsail_20161128.GetDistributionLatestCacheReset
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDistributionLatestCacheResetResult> GetDistributionLatestCacheResetAsync(GetDistributionLatestCacheResetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDistributionLatestCacheReset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDistributionLatestCacheResetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the data points of a specific metric for an Amazon Lightsail content delivery network (CDN) distribution.</p> <p>Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetDistributionMetricData #X-Amz-Target=Lightsail_20161128.GetDistributionMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDistributionMetricDataResult> GetDistributionMetricDataAsync(GetDistributionMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDistributionMetricData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDistributionMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about one or more of your Amazon Lightsail content delivery network (CDN) distributions.
		/// GetDistributions #X-Amz-Target=Lightsail_20161128.GetDistributions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDistributionsResult> GetDistributionsAsync(GetDistributionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDistributions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDistributionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific domain recordset.
		/// GetDomain #X-Amz-Target=Lightsail_20161128.GetDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainResult> GetDomainAsync(GetDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDomainResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all domains in the user's account.
		/// GetDomains #X-Amz-Target=Lightsail_20161128.GetDomains
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainsResult> GetDomainsAsync(GetDomainsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetDomains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDomainsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns all export snapshot records created as a result of the <code>export snapshot</code> operation.</p> <p>An export snapshot record can be used to create a new Amazon EC2 instance and its related resources with the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateCloudFormationStack.html">CreateCloudFormationStack</a> action.</p>
		/// GetExportSnapshotRecords #X-Amz-Target=Lightsail_20161128.GetExportSnapshotRecords
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetExportSnapshotRecordsResult> GetExportSnapshotRecordsAsync(GetExportSnapshotRecordsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetExportSnapshotRecords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetExportSnapshotRecordsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific Amazon Lightsail instance, which is a virtual private server.
		/// GetInstance #X-Amz-Target=Lightsail_20161128.GetInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceResult> GetInstanceAsync(GetInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns temporary SSH keys you can use to connect to a specific virtual private server, or <i>instance</i>.</p> <p>The <code>get instance access details</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// GetInstanceAccessDetails #X-Amz-Target=Lightsail_20161128.GetInstanceAccessDetails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceAccessDetailsResult> GetInstanceAccessDetailsAsync(GetInstanceAccessDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstanceAccessDetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceAccessDetailsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the data points for the specified Amazon Lightsail instance metric, given an instance name.</p> <p>Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetInstanceMetricData #X-Amz-Target=Lightsail_20161128.GetInstanceMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceMetricDataResult> GetInstanceMetricDataAsync(GetInstanceMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstanceMetricData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the firewall port states for a specific Amazon Lightsail instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
		/// GetInstancePortStates #X-Amz-Target=Lightsail_20161128.GetInstancePortStates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstancePortStatesResult> GetInstancePortStatesAsync(GetInstancePortStatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstancePortStates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstancePortStatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific instance snapshot.
		/// GetInstanceSnapshot #X-Amz-Target=Lightsail_20161128.GetInstanceSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceSnapshotResult> GetInstanceSnapshotAsync(GetInstanceSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstanceSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all instance snapshots for the user's account.
		/// GetInstanceSnapshots #X-Amz-Target=Lightsail_20161128.GetInstanceSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceSnapshotsResult> GetInstanceSnapshotsAsync(GetInstanceSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstanceSnapshots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the state of a specific instance. Works on one instance at a time.
		/// GetInstanceState #X-Amz-Target=Lightsail_20161128.GetInstanceState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceStateResult> GetInstanceStateAsync(GetInstanceStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstanceState";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceStateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all Amazon Lightsail virtual private servers, or <i>instances</i>.
		/// GetInstances #X-Amz-Target=Lightsail_20161128.GetInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstancesResult> GetInstancesAsync(GetInstancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstancesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific key pair.
		/// GetKeyPair #X-Amz-Target=Lightsail_20161128.GetKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetKeyPairResult> GetKeyPairAsync(GetKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetKeyPair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all key pairs in the user's account.
		/// GetKeyPairs #X-Amz-Target=Lightsail_20161128.GetKeyPairs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetKeyPairsResult> GetKeyPairsAsync(GetKeyPairsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetKeyPairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetKeyPairsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified Lightsail load balancer.
		/// GetLoadBalancer #X-Amz-Target=Lightsail_20161128.GetLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancerResult> GetLoadBalancerAsync(GetLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetLoadBalancer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about health metrics for your Lightsail load balancer.</p> <p>Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetLoadBalancerMetricData #X-Amz-Target=Lightsail_20161128.GetLoadBalancerMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancerMetricDataResult> GetLoadBalancerMetricDataAsync(GetLoadBalancerMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetLoadBalancerMetricData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLoadBalancerMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the TLS certificates that are associated with the specified Lightsail load balancer.</p> <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p> <p>You can have a maximum of 2 certificates associated with a Lightsail load balancer. One is active and the other is inactive.</p>
		/// GetLoadBalancerTlsCertificates #X-Amz-Target=Lightsail_20161128.GetLoadBalancerTlsCertificates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancerTlsCertificatesResult> GetLoadBalancerTlsCertificatesAsync(GetLoadBalancerTlsCertificatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetLoadBalancerTlsCertificates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLoadBalancerTlsCertificatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of TLS security policies that you can apply to Lightsail load balancers.</p> <p>For more information about load balancer TLS security policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
		/// GetLoadBalancerTlsPolicies #X-Amz-Target=Lightsail_20161128.GetLoadBalancerTlsPolicies
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancerTlsPoliciesResult> GetLoadBalancerTlsPoliciesAsync(GetLoadBalancerTlsPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetLoadBalancerTlsPolicies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLoadBalancerTlsPoliciesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all load balancers in an account.
		/// GetLoadBalancers #X-Amz-Target=Lightsail_20161128.GetLoadBalancers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancersResult> GetLoadBalancersAsync(GetLoadBalancersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetLoadBalancers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLoadBalancersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific operation. Operations include events such as when you create an instance, allocate a static IP, attach a static IP, and so on.
		/// GetOperation #X-Amz-Target=Lightsail_20161128.GetOperation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationResult> GetOperationAsync(GetOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetOperation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOperationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about all operations.</p> <p>Results are returned from oldest to newest, up to a maximum of 200. Results can be paged by making each subsequent call to <code>GetOperations</code> use the maximum (last) <code>statusChangedAt</code> value from the previous request.</p>
		/// GetOperations #X-Amz-Target=Lightsail_20161128.GetOperations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationsResult> GetOperationsAsync(GetOperationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetOperations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOperationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets operations for a specific resource (e.g., an instance or a static IP).
		/// GetOperationsForResource #X-Amz-Target=Lightsail_20161128.GetOperationsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationsForResourceResult> GetOperationsForResourceAsync(GetOperationsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetOperationsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOperationsForResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all valid regions for Amazon Lightsail. Use the <code>include availability zones</code> parameter to also return the Availability Zones in a region.
		/// GetRegions #X-Amz-Target=Lightsail_20161128.GetRegions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRegionsResult> GetRegionsAsync(GetRegionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRegions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRegionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific database in Amazon Lightsail.
		/// GetRelationalDatabase #X-Amz-Target=Lightsail_20161128.GetRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseResult> GetRelationalDatabaseAsync(GetRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of available database blueprints in Amazon Lightsail. A blueprint describes the major engine version of a database.</p> <p>You can use a blueprint ID to create a new database that runs a specific database engine.</p>
		/// GetRelationalDatabaseBlueprints #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBlueprints
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseBlueprintsResult> GetRelationalDatabaseBlueprintsAsync(GetRelationalDatabaseBlueprintsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBlueprints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseBlueprintsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of bundles that are available in Amazon Lightsail. A bundle describes the performance specifications for a database.</p> <p>You can use a bundle ID to create a new database with explicit performance specifications.</p>
		/// GetRelationalDatabaseBundles #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBundles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseBundlesResult> GetRelationalDatabaseBundlesAsync(GetRelationalDatabaseBundlesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseBundlesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of events for a specific database in Amazon Lightsail.
		/// GetRelationalDatabaseEvents #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseEvents
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseEventsResult> GetRelationalDatabaseEventsAsync(GetRelationalDatabaseEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseEvents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseEventsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of log events for a database in Amazon Lightsail.
		/// GetRelationalDatabaseLogEvents #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogEvents
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseLogEventsResult> GetRelationalDatabaseLogEventsAsync(GetRelationalDatabaseLogEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogEvents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseLogEventsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of available log streams for a specific database in Amazon Lightsail.
		/// GetRelationalDatabaseLogStreams #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogStreams
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseLogStreamsResult> GetRelationalDatabaseLogStreamsAsync(GetRelationalDatabaseLogStreamsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogStreams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseLogStreamsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the current, previous, or pending versions of the master user password for a Lightsail database.</p> <p>The <code>GetRelationalDatabaseMasterUserPassword</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName.</p>
		/// GetRelationalDatabaseMasterUserPassword #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMasterUserPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseMasterUserPasswordResult> GetRelationalDatabaseMasterUserPasswordAsync(GetRelationalDatabaseMasterUserPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMasterUserPassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseMasterUserPasswordResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the data points of the specified metric for a database in Amazon Lightsail.</p> <p>Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetRelationalDatabaseMetricData #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseMetricDataResult> GetRelationalDatabaseMetricDataAsync(GetRelationalDatabaseMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMetricData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns all of the runtime parameters offered by the underlying database software, or engine, for a specific database in Amazon Lightsail.</p> <p>In addition to the parameter names and values, this operation returns other information about each parameter. This information includes whether changes require a reboot, whether the parameter is modifiable, the allowed values, and the data types.</p>
		/// GetRelationalDatabaseParameters #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseParametersResult> GetRelationalDatabaseParametersAsync(GetRelationalDatabaseParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseParameters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific database snapshot in Amazon Lightsail.
		/// GetRelationalDatabaseSnapshot #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseSnapshotResult> GetRelationalDatabaseSnapshotAsync(GetRelationalDatabaseSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all of your database snapshots in Amazon Lightsail.
		/// GetRelationalDatabaseSnapshots #X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseSnapshotsResult> GetRelationalDatabaseSnapshotsAsync(GetRelationalDatabaseSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabaseSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all of your databases in Amazon Lightsail.
		/// GetRelationalDatabases #X-Amz-Target=Lightsail_20161128.GetRelationalDatabases
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabasesResult> GetRelationalDatabasesAsync(GetRelationalDatabasesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetRelationalDatabases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRelationalDatabasesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about an Amazon Lightsail static IP.
		/// GetStaticIp #X-Amz-Target=Lightsail_20161128.GetStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetStaticIpResult> GetStaticIpAsync(GetStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetStaticIp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all static IPs in the user's account.
		/// GetStaticIps #X-Amz-Target=Lightsail_20161128.GetStaticIps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetStaticIpsResult> GetStaticIpsAsync(GetStaticIpsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.GetStaticIps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStaticIpsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports a public SSH key from a specific key pair.
		/// ImportKeyPair #X-Amz-Target=Lightsail_20161128.ImportKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportKeyPairResult> ImportKeyPairAsync(ImportKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.ImportKeyPair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a Boolean value indicating whether your Lightsail VPC is peered.
		/// IsVpcPeered #X-Amz-Target=Lightsail_20161128.IsVpcPeered
		/// </summary>
		/// <returns>Success</returns>
		public async Task<IsVpcPeeredResult> IsVpcPeeredAsync(IsVpcPeeredRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.IsVpcPeered";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IsVpcPeeredResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol.</p> <p>The <code>OpenInstancePublicPorts</code> action supports tag-based access control via resource tags applied to the resource identified by <code>instanceName</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// OpenInstancePublicPorts #X-Amz-Target=Lightsail_20161128.OpenInstancePublicPorts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<OpenInstancePublicPortsResult> OpenInstancePublicPortsAsync(OpenInstancePublicPortsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.OpenInstancePublicPorts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenInstancePublicPortsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Peers the Lightsail VPC with the user's default VPC.
		/// PeerVpc #X-Amz-Target=Lightsail_20161128.PeerVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PeerVpcResult> PeerVpcAsync(PeerVpcRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.PeerVpc";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PeerVpcResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates an alarm, and associates it with the specified metric.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p> <p>When this action creates an alarm, the alarm state is immediately set to <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.</p> <p>When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm. The alarm is then evaluated with the updated configuration.</p>
		/// PutAlarm #X-Amz-Target=Lightsail_20161128.PutAlarm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAlarmResult> PutAlarmAsync(PutAlarmRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.PutAlarm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAlarmResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol. This action also closes all currently open ports that are not included in the request. Include all of the ports and the protocols you want to open in your <code>PutInstancePublicPorts</code>request. Or use the <code>OpenInstancePublicPorts</code> action to open ports without closing currently open ports.</p> <p>The <code>PutInstancePublicPorts</code> action supports tag-based access control via resource tags applied to the resource identified by <code>instanceName</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// PutInstancePublicPorts #X-Amz-Target=Lightsail_20161128.PutInstancePublicPorts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutInstancePublicPortsResult> PutInstancePublicPortsAsync(PutInstancePublicPortsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.PutInstancePublicPorts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutInstancePublicPortsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Restarts a specific instance.</p> <p>The <code>reboot instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// RebootInstance #X-Amz-Target=Lightsail_20161128.RebootInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RebootInstanceResult> RebootInstanceAsync(RebootInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.RebootInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RebootInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Restarts a specific database in Amazon Lightsail.</p> <p>The <code>reboot relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// RebootRelationalDatabase #X-Amz-Target=Lightsail_20161128.RebootRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RebootRelationalDatabaseResult> RebootRelationalDatabaseAsync(RebootRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.RebootRelationalDatabase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RebootRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a container image to your Amazon Lightsail container service.</p> <note> <p>This action is not required if you install and use the Lightsail Control (lightsailctl) plugin to push container images to your Lightsail container service. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a> in the <i>Amazon Lightsail Developer Guide</i>.</p> </note>
		/// RegisterContainerImage #X-Amz-Target=Lightsail_20161128.RegisterContainerImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterContainerImageResult> RegisterContainerImageAsync(RegisterContainerImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.RegisterContainerImage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterContainerImageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a specific static IP from your account.
		/// ReleaseStaticIp #X-Amz-Target=Lightsail_20161128.ReleaseStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseStaticIpResult> ReleaseStaticIpAsync(ReleaseStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.ReleaseStaticIp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReleaseStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes currently cached content from your Amazon Lightsail content delivery network (CDN) distribution.</p> <p>After resetting the cache, the next time a content request is made, your distribution pulls, serves, and caches it from the origin.</p>
		/// ResetDistributionCache #X-Amz-Target=Lightsail_20161128.ResetDistributionCache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResetDistributionCacheResult> ResetDistributionCacheAsync(ResetDistributionCacheRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.ResetDistributionCache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResetDistributionCacheResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sends a verification request to an email contact method to ensure it's owned by the requester. SMS contact methods don't need to be verified.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p> <p>A verification request is sent to the contact method when you initially create it. Use this action to send another verification request if a previous verification request was deleted, or has expired.</p> <important> <p>Notifications are not sent to an email contact method until after it is verified, and confirmed as valid.</p> </important>
		/// SendContactMethodVerification #X-Amz-Target=Lightsail_20161128.SendContactMethodVerification
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendContactMethodVerificationResult> SendContactMethodVerificationAsync(SendContactMethodVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.SendContactMethodVerification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SendContactMethodVerificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the IP address type for an Amazon Lightsail resource.</p> <p>Use this action to enable dual-stack for a resource, which enables IPv4 and IPv6 for the specified resource. Alternately, you can use this action to disable dual-stack, and enable IPv4 only.</p>
		/// SetIpAddressType #X-Amz-Target=Lightsail_20161128.SetIpAddressType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetIpAddressTypeResult> SetIpAddressTypeAsync(SetIpAddressTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.SetIpAddressType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetIpAddressTypeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the Amazon Lightsail resources that can access the specified Lightsail bucket.</p> <p>Lightsail buckets currently support setting access for Lightsail instances in the same Amazon Web Services Region.</p>
		/// SetResourceAccessForBucket #X-Amz-Target=Lightsail_20161128.SetResourceAccessForBucket
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetResourceAccessForBucketResult> SetResourceAccessForBucketAsync(SetResourceAccessForBucketRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.SetResourceAccessForBucket";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SetResourceAccessForBucketResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiates a graphical user interface (GUI) session that’s used to access a virtual computer’s operating system and application. The session will be active for 1 hour. Use this action to resume the session after it expires.
		/// StartGUISession #X-Amz-Target=Lightsail_20161128.StartGUISession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartGUISessionResult> StartGUISessionAsync(StartGUISessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.StartGUISession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartGUISessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance, use the <code>reboot instance</code> operation.</p> <note> <p>When you start a stopped instance, Lightsail assigns a new public IP address to the instance. To use the same IP address after stopping and starting an instance, create a static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p> </note> <p>The <code>start instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// StartInstance #X-Amz-Target=Lightsail_20161128.StartInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartInstanceResult> StartInstanceAsync(StartInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.StartInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a specific database from a stopped state in Amazon Lightsail. To restart a database, use the <code>reboot relational database</code> operation.</p> <p>The <code>start relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// StartRelationalDatabase #X-Amz-Target=Lightsail_20161128.StartRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRelationalDatabaseResult> StartRelationalDatabaseAsync(StartRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.StartRelationalDatabase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Terminates a web-based NICE DCV session that’s used to access a virtual computer’s operating system or application. The session will close and any unsaved data will be lost.
		/// StopGUISession #X-Amz-Target=Lightsail_20161128.StopGUISession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopGUISessionResult> StopGUISessionAsync(StopGUISessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.StopGUISession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopGUISessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a specific Amazon Lightsail instance that is currently running.</p> <note> <p>When you start a stopped instance, Lightsail assigns a new public IP address to the instance. To use the same IP address after stopping and starting an instance, create a static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p> </note> <p>The <code>stop instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// StopInstance #X-Amz-Target=Lightsail_20161128.StopInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopInstanceResult> StopInstanceAsync(StopInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.StopInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a specific database that is currently running in Amazon Lightsail.</p> <p>The <code>stop relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// StopRelationalDatabase #X-Amz-Target=Lightsail_20161128.StopRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRelationalDatabaseResult> StopRelationalDatabaseAsync(StopRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.StopRelationalDatabase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to the specified Amazon Lightsail resource. Each resource can have a maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p> <p>The <code>tag resource</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>resource name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// TagResource #X-Amz-Target=Lightsail_20161128.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResult> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Tests an alarm by displaying a banner on the Amazon Lightsail console. If a notification trigger is configured for the specified alarm, the test also sends a notification to the notification protocol (<code>Email</code> and/or <code>SMS</code>) configured for the alarm.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
		/// TestAlarm #X-Amz-Target=Lightsail_20161128.TestAlarm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TestAlarmResult> TestAlarmAsync(TestAlarmRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.TestAlarm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestAlarmResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unpeers the Lightsail VPC from the user's default VPC.
		/// UnpeerVpc #X-Amz-Target=Lightsail_20161128.UnpeerVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UnpeerVpcResult> UnpeerVpcAsync(UnpeerVpcRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UnpeerVpc";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnpeerVpcResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified set of tag keys and their values from the specified Amazon Lightsail resource.</p> <p>The <code>untag resource</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>resource name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// UntagResource #X-Amz-Target=Lightsail_20161128.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResult> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an existing Amazon Lightsail bucket.</p> <p>Use this action to update the configuration of an existing bucket, such as versioning, public accessibility, and the Amazon Web Services accounts that can access the bucket.</p>
		/// UpdateBucket #X-Amz-Target=Lightsail_20161128.UpdateBucket
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateBucketResult> UpdateBucketAsync(UpdateBucketRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateBucket";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBucketResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the bundle, or storage plan, of an existing Amazon Lightsail bucket.</p> <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket. You can update a bucket's bundle only one time within a monthly Amazon Web Services billing cycle. To determine if you can update a bucket's bundle, use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html">GetBuckets</a> action. The <code>ableToUpdateBundle</code> parameter in the response will indicate whether you can currently update a bucket's bundle.</p> <p>Update a bucket's bundle if it's consistently going over its storage space or data transfer quota, or if a bucket's usage is consistently in the lower range of its storage space or data transfer quota. Due to the unpredictable usage fluctuations that a bucket might experience, we strongly recommend that you update a bucket's bundle only as a long-term strategy, instead of as a short-term, monthly cost-cutting measure. Choose a bucket bundle that will provide the bucket with ample storage space and data transfer for a long time to come.</p>
		/// UpdateBucketBundle #X-Amz-Target=Lightsail_20161128.UpdateBucketBundle
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateBucketBundleResult> UpdateBucketBundleAsync(UpdateBucketBundleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateBucketBundle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBucketBundleResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of your Amazon Lightsail container service, such as its power, scale, and public domain names.
		/// UpdateContainerService #X-Amz-Target=Lightsail_20161128.UpdateContainerService
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateContainerServiceResult> UpdateContainerServiceAsync(UpdateContainerServiceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateContainerService";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateContainerServiceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an existing Amazon Lightsail content delivery network (CDN) distribution.</p> <p>Use this action to update the configuration of your existing distribution.</p>
		/// UpdateDistribution #X-Amz-Target=Lightsail_20161128.UpdateDistribution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDistributionResult> UpdateDistributionAsync(UpdateDistributionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateDistribution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDistributionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the bundle of your Amazon Lightsail content delivery network (CDN) distribution.</p> <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of your distribution.</p> <p>Update your distribution's bundle if your distribution is going over its monthly network transfer quota and is incurring an overage fee.</p> <p>You can update your distribution's bundle only one time within your monthly Amazon Web Services billing cycle. To determine if you can update your distribution's bundle, use the <code>GetDistributions</code> action. The <code>ableToUpdateBundle</code> parameter in the result will indicate whether you can currently update your distribution's bundle.</p>
		/// UpdateDistributionBundle #X-Amz-Target=Lightsail_20161128.UpdateDistributionBundle
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDistributionBundleResult> UpdateDistributionBundleAsync(UpdateDistributionBundleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateDistributionBundle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDistributionBundleResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a domain recordset after it is created.</p> <p>The <code>update domain entry</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// UpdateDomainEntry #X-Amz-Target=Lightsail_20161128.UpdateDomainEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainEntryResult> UpdateDomainEntryAsync(UpdateDomainEntryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateDomainEntry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainEntryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the Amazon Lightsail instance metadata parameters on a running or stopped instance. When you modify the parameters on a running instance, the <code>GetInstance</code> or <code>GetInstances</code> API operation initially responds with a state of <code>pending</code>. After the parameter modifications are successfully applied, the state changes to <code>applied</code> in subsequent <code>GetInstance</code> or <code>GetInstances</code> API calls. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-instance-metadata-service">Use IMDSv2 with an Amazon Lightsail instance</a> in the <i>Amazon Lightsail Developer Guide</i>.
		/// UpdateInstanceMetadataOptions #X-Amz-Target=Lightsail_20161128.UpdateInstanceMetadataOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateInstanceMetadataOptionsResult> UpdateInstanceMetadataOptionsAsync(UpdateInstanceMetadataOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateInstanceMetadataOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInstanceMetadataOptionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified attribute for a load balancer. You can only update one attribute at a time.</p> <p>The <code>update load balancer attribute</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// UpdateLoadBalancerAttribute #X-Amz-Target=Lightsail_20161128.UpdateLoadBalancerAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateLoadBalancerAttributeResult> UpdateLoadBalancerAttributeAsync(UpdateLoadBalancerAttributeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateLoadBalancerAttribute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateLoadBalancerAttributeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Allows the update of one or more attributes of a database in Amazon Lightsail.</p> <p>Updates are applied immediately, or in cases where the updates could result in an outage, are applied during the database's predefined maintenance window.</p> <p>The <code>update relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// UpdateRelationalDatabase #X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateRelationalDatabaseResult> UpdateRelationalDatabaseAsync(UpdateRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Allows the update of one or more parameters of a database in Amazon Lightsail.</p> <p>Parameter updates don't cause outages; therefore, their application is not subject to the preferred maintenance window. However, there are two ways in which parameter updates are applied: <code>dynamic</code> or <code>pending-reboot</code>. Parameters marked with a <code>dynamic</code> apply type are applied immediately. Parameters marked with a <code>pending-reboot</code> apply type are applied only after the database is rebooted using the <code>reboot relational database</code> operation.</p> <p>The <code>update relational database parameters</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
		/// UpdateRelationalDatabaseParameters #X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabaseParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateRelationalDatabaseParametersResult> UpdateRelationalDatabaseParametersAsync(UpdateRelationalDatabaseParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabaseParameters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRelationalDatabaseParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AllocateStaticIpX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.AllocateStaticIp")]
		Lightsail_20161128_AllocateStaticIp = 0,
	}
	
	public enum AttachCertificateToDistributionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.AttachCertificateToDistribution")]
		Lightsail_20161128_AttachCertificateToDistribution = 0,
	}
	
	public enum AttachDiskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.AttachDisk")]
		Lightsail_20161128_AttachDisk = 0,
	}
	
	public enum AttachInstancesToLoadBalancerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.AttachInstancesToLoadBalancer")]
		Lightsail_20161128_AttachInstancesToLoadBalancer = 0,
	}
	
	public enum AttachLoadBalancerTlsCertificateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.AttachLoadBalancerTlsCertificate")]
		Lightsail_20161128_AttachLoadBalancerTlsCertificate = 0,
	}
	
	public enum AttachStaticIpX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.AttachStaticIp")]
		Lightsail_20161128_AttachStaticIp = 0,
	}
	
	public enum CloseInstancePublicPortsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CloseInstancePublicPorts")]
		Lightsail_20161128_CloseInstancePublicPorts = 0,
	}
	
	public enum CopySnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CopySnapshot")]
		Lightsail_20161128_CopySnapshot = 0,
	}
	
	public enum CreateBucketX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateBucket")]
		Lightsail_20161128_CreateBucket = 0,
	}
	
	public enum CreateBucketAccessKeyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateBucketAccessKey")]
		Lightsail_20161128_CreateBucketAccessKey = 0,
	}
	
	public enum CreateCertificateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateCertificate")]
		Lightsail_20161128_CreateCertificate = 0,
	}
	
	public enum CreateCloudFormationStackX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateCloudFormationStack")]
		Lightsail_20161128_CreateCloudFormationStack = 0,
	}
	
	public enum CreateContactMethodX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateContactMethod")]
		Lightsail_20161128_CreateContactMethod = 0,
	}
	
	public enum CreateContainerServiceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateContainerService")]
		Lightsail_20161128_CreateContainerService = 0,
	}
	
	public enum CreateContainerServiceDeploymentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateContainerServiceDeployment")]
		Lightsail_20161128_CreateContainerServiceDeployment = 0,
	}
	
	public enum CreateContainerServiceRegistryLoginX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateContainerServiceRegistryLogin")]
		Lightsail_20161128_CreateContainerServiceRegistryLogin = 0,
	}
	
	public enum CreateDiskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateDisk")]
		Lightsail_20161128_CreateDisk = 0,
	}
	
	public enum CreateDiskFromSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateDiskFromSnapshot")]
		Lightsail_20161128_CreateDiskFromSnapshot = 0,
	}
	
	public enum CreateDiskSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateDiskSnapshot")]
		Lightsail_20161128_CreateDiskSnapshot = 0,
	}
	
	public enum CreateDistributionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateDistribution")]
		Lightsail_20161128_CreateDistribution = 0,
	}
	
	public enum CreateDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateDomain")]
		Lightsail_20161128_CreateDomain = 0,
	}
	
	public enum CreateDomainEntryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateDomainEntry")]
		Lightsail_20161128_CreateDomainEntry = 0,
	}
	
	public enum CreateGUISessionAccessDetailsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateGUISessionAccessDetails")]
		Lightsail_20161128_CreateGUISessionAccessDetails = 0,
	}
	
	public enum CreateInstanceSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateInstanceSnapshot")]
		Lightsail_20161128_CreateInstanceSnapshot = 0,
	}
	
	public enum CreateInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateInstances")]
		Lightsail_20161128_CreateInstances = 0,
	}
	
	public enum CreateInstancesFromSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateInstancesFromSnapshot")]
		Lightsail_20161128_CreateInstancesFromSnapshot = 0,
	}
	
	public enum CreateKeyPairX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateKeyPair")]
		Lightsail_20161128_CreateKeyPair = 0,
	}
	
	public enum CreateLoadBalancerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateLoadBalancer")]
		Lightsail_20161128_CreateLoadBalancer = 0,
	}
	
	public enum CreateLoadBalancerTlsCertificateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateLoadBalancerTlsCertificate")]
		Lightsail_20161128_CreateLoadBalancerTlsCertificate = 0,
	}
	
	public enum CreateRelationalDatabaseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateRelationalDatabase")]
		Lightsail_20161128_CreateRelationalDatabase = 0,
	}
	
	public enum CreateRelationalDatabaseFromSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateRelationalDatabaseFromSnapshot")]
		Lightsail_20161128_CreateRelationalDatabaseFromSnapshot = 0,
	}
	
	public enum CreateRelationalDatabaseSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.CreateRelationalDatabaseSnapshot")]
		Lightsail_20161128_CreateRelationalDatabaseSnapshot = 0,
	}
	
	public enum DeleteAlarmX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteAlarm")]
		Lightsail_20161128_DeleteAlarm = 0,
	}
	
	public enum DeleteAutoSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteAutoSnapshot")]
		Lightsail_20161128_DeleteAutoSnapshot = 0,
	}
	
	public enum DeleteBucketX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteBucket")]
		Lightsail_20161128_DeleteBucket = 0,
	}
	
	public enum DeleteBucketAccessKeyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteBucketAccessKey")]
		Lightsail_20161128_DeleteBucketAccessKey = 0,
	}
	
	public enum DeleteCertificateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteCertificate")]
		Lightsail_20161128_DeleteCertificate = 0,
	}
	
	public enum DeleteContactMethodX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteContactMethod")]
		Lightsail_20161128_DeleteContactMethod = 0,
	}
	
	public enum DeleteContainerImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteContainerImage")]
		Lightsail_20161128_DeleteContainerImage = 0,
	}
	
	public enum DeleteContainerServiceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteContainerService")]
		Lightsail_20161128_DeleteContainerService = 0,
	}
	
	public enum DeleteDiskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteDisk")]
		Lightsail_20161128_DeleteDisk = 0,
	}
	
	public enum DeleteDiskSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteDiskSnapshot")]
		Lightsail_20161128_DeleteDiskSnapshot = 0,
	}
	
	public enum DeleteDistributionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteDistribution")]
		Lightsail_20161128_DeleteDistribution = 0,
	}
	
	public enum DeleteDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteDomain")]
		Lightsail_20161128_DeleteDomain = 0,
	}
	
	public enum DeleteDomainEntryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteDomainEntry")]
		Lightsail_20161128_DeleteDomainEntry = 0,
	}
	
	public enum DeleteInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteInstance")]
		Lightsail_20161128_DeleteInstance = 0,
	}
	
	public enum DeleteInstanceSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteInstanceSnapshot")]
		Lightsail_20161128_DeleteInstanceSnapshot = 0,
	}
	
	public enum DeleteKeyPairX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteKeyPair")]
		Lightsail_20161128_DeleteKeyPair = 0,
	}
	
	public enum DeleteKnownHostKeysX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteKnownHostKeys")]
		Lightsail_20161128_DeleteKnownHostKeys = 0,
	}
	
	public enum DeleteLoadBalancerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteLoadBalancer")]
		Lightsail_20161128_DeleteLoadBalancer = 0,
	}
	
	public enum DeleteLoadBalancerTlsCertificateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteLoadBalancerTlsCertificate")]
		Lightsail_20161128_DeleteLoadBalancerTlsCertificate = 0,
	}
	
	public enum DeleteRelationalDatabaseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteRelationalDatabase")]
		Lightsail_20161128_DeleteRelationalDatabase = 0,
	}
	
	public enum DeleteRelationalDatabaseSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DeleteRelationalDatabaseSnapshot")]
		Lightsail_20161128_DeleteRelationalDatabaseSnapshot = 0,
	}
	
	public enum DetachCertificateFromDistributionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DetachCertificateFromDistribution")]
		Lightsail_20161128_DetachCertificateFromDistribution = 0,
	}
	
	public enum DetachDiskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DetachDisk")]
		Lightsail_20161128_DetachDisk = 0,
	}
	
	public enum DetachInstancesFromLoadBalancerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DetachInstancesFromLoadBalancer")]
		Lightsail_20161128_DetachInstancesFromLoadBalancer = 0,
	}
	
	public enum DetachStaticIpX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DetachStaticIp")]
		Lightsail_20161128_DetachStaticIp = 0,
	}
	
	public enum DisableAddOnX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DisableAddOn")]
		Lightsail_20161128_DisableAddOn = 0,
	}
	
	public enum DownloadDefaultKeyPairX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.DownloadDefaultKeyPair")]
		Lightsail_20161128_DownloadDefaultKeyPair = 0,
	}
	
	public enum EnableAddOnX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.EnableAddOn")]
		Lightsail_20161128_EnableAddOn = 0,
	}
	
	public enum ExportSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.ExportSnapshot")]
		Lightsail_20161128_ExportSnapshot = 0,
	}
	
	public enum GetActiveNamesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetActiveNames")]
		Lightsail_20161128_GetActiveNames = 0,
	}
	
	public enum GetAlarmsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetAlarms")]
		Lightsail_20161128_GetAlarms = 0,
	}
	
	public enum GetAutoSnapshotsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetAutoSnapshots")]
		Lightsail_20161128_GetAutoSnapshots = 0,
	}
	
	public enum GetBlueprintsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetBlueprints")]
		Lightsail_20161128_GetBlueprints = 0,
	}
	
	public enum GetBucketAccessKeysX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetBucketAccessKeys")]
		Lightsail_20161128_GetBucketAccessKeys = 0,
	}
	
	public enum GetBucketBundlesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetBucketBundles")]
		Lightsail_20161128_GetBucketBundles = 0,
	}
	
	public enum GetBucketMetricDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetBucketMetricData")]
		Lightsail_20161128_GetBucketMetricData = 0,
	}
	
	public enum GetBucketsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetBuckets")]
		Lightsail_20161128_GetBuckets = 0,
	}
	
	public enum GetBundlesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetBundles")]
		Lightsail_20161128_GetBundles = 0,
	}
	
	public enum GetCertificatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetCertificates")]
		Lightsail_20161128_GetCertificates = 0,
	}
	
	public enum GetCloudFormationStackRecordsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetCloudFormationStackRecords")]
		Lightsail_20161128_GetCloudFormationStackRecords = 0,
	}
	
	public enum GetContactMethodsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContactMethods")]
		Lightsail_20161128_GetContactMethods = 0,
	}
	
	public enum GetContainerAPIMetadataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContainerAPIMetadata")]
		Lightsail_20161128_GetContainerAPIMetadata = 0,
	}
	
	public enum GetContainerImagesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContainerImages")]
		Lightsail_20161128_GetContainerImages = 0,
	}
	
	public enum GetContainerLogX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContainerLog")]
		Lightsail_20161128_GetContainerLog = 0,
	}
	
	public enum GetContainerServiceDeploymentsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContainerServiceDeployments")]
		Lightsail_20161128_GetContainerServiceDeployments = 0,
	}
	
	public enum GetContainerServiceMetricDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContainerServiceMetricData")]
		Lightsail_20161128_GetContainerServiceMetricData = 0,
	}
	
	public enum GetContainerServicePowersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContainerServicePowers")]
		Lightsail_20161128_GetContainerServicePowers = 0,
	}
	
	public enum GetContainerServicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetContainerServices")]
		Lightsail_20161128_GetContainerServices = 0,
	}
	
	public enum GetCostEstimateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetCostEstimate")]
		Lightsail_20161128_GetCostEstimate = 0,
	}
	
	public enum GetDiskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDisk")]
		Lightsail_20161128_GetDisk = 0,
	}
	
	public enum GetDiskSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDiskSnapshot")]
		Lightsail_20161128_GetDiskSnapshot = 0,
	}
	
	public enum GetDiskSnapshotsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDiskSnapshots")]
		Lightsail_20161128_GetDiskSnapshots = 0,
	}
	
	public enum GetDisksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDisks")]
		Lightsail_20161128_GetDisks = 0,
	}
	
	public enum GetDistributionBundlesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDistributionBundles")]
		Lightsail_20161128_GetDistributionBundles = 0,
	}
	
	public enum GetDistributionLatestCacheResetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDistributionLatestCacheReset")]
		Lightsail_20161128_GetDistributionLatestCacheReset = 0,
	}
	
	public enum GetDistributionMetricDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDistributionMetricData")]
		Lightsail_20161128_GetDistributionMetricData = 0,
	}
	
	public enum GetDistributionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDistributions")]
		Lightsail_20161128_GetDistributions = 0,
	}
	
	public enum GetDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDomain")]
		Lightsail_20161128_GetDomain = 0,
	}
	
	public enum GetDomainsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetDomains")]
		Lightsail_20161128_GetDomains = 0,
	}
	
	public enum GetExportSnapshotRecordsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetExportSnapshotRecords")]
		Lightsail_20161128_GetExportSnapshotRecords = 0,
	}
	
	public enum GetInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstance")]
		Lightsail_20161128_GetInstance = 0,
	}
	
	public enum GetInstanceAccessDetailsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstanceAccessDetails")]
		Lightsail_20161128_GetInstanceAccessDetails = 0,
	}
	
	public enum GetInstanceMetricDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstanceMetricData")]
		Lightsail_20161128_GetInstanceMetricData = 0,
	}
	
	public enum GetInstancePortStatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstancePortStates")]
		Lightsail_20161128_GetInstancePortStates = 0,
	}
	
	public enum GetInstanceSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstanceSnapshot")]
		Lightsail_20161128_GetInstanceSnapshot = 0,
	}
	
	public enum GetInstanceSnapshotsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstanceSnapshots")]
		Lightsail_20161128_GetInstanceSnapshots = 0,
	}
	
	public enum GetInstanceStateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstanceState")]
		Lightsail_20161128_GetInstanceState = 0,
	}
	
	public enum GetInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetInstances")]
		Lightsail_20161128_GetInstances = 0,
	}
	
	public enum GetKeyPairX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetKeyPair")]
		Lightsail_20161128_GetKeyPair = 0,
	}
	
	public enum GetKeyPairsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetKeyPairs")]
		Lightsail_20161128_GetKeyPairs = 0,
	}
	
	public enum GetLoadBalancerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetLoadBalancer")]
		Lightsail_20161128_GetLoadBalancer = 0,
	}
	
	public enum GetLoadBalancerMetricDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetLoadBalancerMetricData")]
		Lightsail_20161128_GetLoadBalancerMetricData = 0,
	}
	
	public enum GetLoadBalancerTlsCertificatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetLoadBalancerTlsCertificates")]
		Lightsail_20161128_GetLoadBalancerTlsCertificates = 0,
	}
	
	public enum GetLoadBalancerTlsPoliciesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetLoadBalancerTlsPolicies")]
		Lightsail_20161128_GetLoadBalancerTlsPolicies = 0,
	}
	
	public enum GetLoadBalancersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetLoadBalancers")]
		Lightsail_20161128_GetLoadBalancers = 0,
	}
	
	public enum GetOperationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetOperation")]
		Lightsail_20161128_GetOperation = 0,
	}
	
	public enum GetOperationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetOperations")]
		Lightsail_20161128_GetOperations = 0,
	}
	
	public enum GetOperationsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetOperationsForResource")]
		Lightsail_20161128_GetOperationsForResource = 0,
	}
	
	public enum GetRegionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRegions")]
		Lightsail_20161128_GetRegions = 0,
	}
	
	public enum GetRelationalDatabaseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabase")]
		Lightsail_20161128_GetRelationalDatabase = 0,
	}
	
	public enum GetRelationalDatabaseBlueprintsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseBlueprints")]
		Lightsail_20161128_GetRelationalDatabaseBlueprints = 0,
	}
	
	public enum GetRelationalDatabaseBundlesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseBundles")]
		Lightsail_20161128_GetRelationalDatabaseBundles = 0,
	}
	
	public enum GetRelationalDatabaseEventsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseEvents")]
		Lightsail_20161128_GetRelationalDatabaseEvents = 0,
	}
	
	public enum GetRelationalDatabaseLogEventsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseLogEvents")]
		Lightsail_20161128_GetRelationalDatabaseLogEvents = 0,
	}
	
	public enum GetRelationalDatabaseLogStreamsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseLogStreams")]
		Lightsail_20161128_GetRelationalDatabaseLogStreams = 0,
	}
	
	public enum GetRelationalDatabaseMasterUserPasswordX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseMasterUserPassword")]
		Lightsail_20161128_GetRelationalDatabaseMasterUserPassword = 0,
	}
	
	public enum GetRelationalDatabaseMetricDataX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseMetricData")]
		Lightsail_20161128_GetRelationalDatabaseMetricData = 0,
	}
	
	public enum GetRelationalDatabaseParametersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseParameters")]
		Lightsail_20161128_GetRelationalDatabaseParameters = 0,
	}
	
	public enum GetRelationalDatabaseSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseSnapshot")]
		Lightsail_20161128_GetRelationalDatabaseSnapshot = 0,
	}
	
	public enum GetRelationalDatabaseSnapshotsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabaseSnapshots")]
		Lightsail_20161128_GetRelationalDatabaseSnapshots = 0,
	}
	
	public enum GetRelationalDatabasesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetRelationalDatabases")]
		Lightsail_20161128_GetRelationalDatabases = 0,
	}
	
	public enum GetStaticIpX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetStaticIp")]
		Lightsail_20161128_GetStaticIp = 0,
	}
	
	public enum GetStaticIpsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.GetStaticIps")]
		Lightsail_20161128_GetStaticIps = 0,
	}
	
	public enum ImportKeyPairX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.ImportKeyPair")]
		Lightsail_20161128_ImportKeyPair = 0,
	}
	
	public enum IsVpcPeeredX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.IsVpcPeered")]
		Lightsail_20161128_IsVpcPeered = 0,
	}
	
	public enum OpenInstancePublicPortsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.OpenInstancePublicPorts")]
		Lightsail_20161128_OpenInstancePublicPorts = 0,
	}
	
	public enum PeerVpcX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.PeerVpc")]
		Lightsail_20161128_PeerVpc = 0,
	}
	
	public enum PutAlarmX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.PutAlarm")]
		Lightsail_20161128_PutAlarm = 0,
	}
	
	public enum PutInstancePublicPortsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.PutInstancePublicPorts")]
		Lightsail_20161128_PutInstancePublicPorts = 0,
	}
	
	public enum RebootInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.RebootInstance")]
		Lightsail_20161128_RebootInstance = 0,
	}
	
	public enum RebootRelationalDatabaseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.RebootRelationalDatabase")]
		Lightsail_20161128_RebootRelationalDatabase = 0,
	}
	
	public enum RegisterContainerImageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.RegisterContainerImage")]
		Lightsail_20161128_RegisterContainerImage = 0,
	}
	
	public enum ReleaseStaticIpX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.ReleaseStaticIp")]
		Lightsail_20161128_ReleaseStaticIp = 0,
	}
	
	public enum ResetDistributionCacheX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.ResetDistributionCache")]
		Lightsail_20161128_ResetDistributionCache = 0,
	}
	
	public enum SendContactMethodVerificationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.SendContactMethodVerification")]
		Lightsail_20161128_SendContactMethodVerification = 0,
	}
	
	public enum SetIpAddressTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.SetIpAddressType")]
		Lightsail_20161128_SetIpAddressType = 0,
	}
	
	public enum SetResourceAccessForBucketX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.SetResourceAccessForBucket")]
		Lightsail_20161128_SetResourceAccessForBucket = 0,
	}
	
	public enum StartGUISessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.StartGUISession")]
		Lightsail_20161128_StartGUISession = 0,
	}
	
	public enum StartInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.StartInstance")]
		Lightsail_20161128_StartInstance = 0,
	}
	
	public enum StartRelationalDatabaseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.StartRelationalDatabase")]
		Lightsail_20161128_StartRelationalDatabase = 0,
	}
	
	public enum StopGUISessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.StopGUISession")]
		Lightsail_20161128_StopGUISession = 0,
	}
	
	public enum StopInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.StopInstance")]
		Lightsail_20161128_StopInstance = 0,
	}
	
	public enum StopRelationalDatabaseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.StopRelationalDatabase")]
		Lightsail_20161128_StopRelationalDatabase = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.TagResource")]
		Lightsail_20161128_TagResource = 0,
	}
	
	public enum TestAlarmX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.TestAlarm")]
		Lightsail_20161128_TestAlarm = 0,
	}
	
	public enum UnpeerVpcX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UnpeerVpc")]
		Lightsail_20161128_UnpeerVpc = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UntagResource")]
		Lightsail_20161128_UntagResource = 0,
	}
	
	public enum UpdateBucketX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateBucket")]
		Lightsail_20161128_UpdateBucket = 0,
	}
	
	public enum UpdateBucketBundleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateBucketBundle")]
		Lightsail_20161128_UpdateBucketBundle = 0,
	}
	
	public enum UpdateContainerServiceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateContainerService")]
		Lightsail_20161128_UpdateContainerService = 0,
	}
	
	public enum UpdateDistributionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateDistribution")]
		Lightsail_20161128_UpdateDistribution = 0,
	}
	
	public enum UpdateDistributionBundleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateDistributionBundle")]
		Lightsail_20161128_UpdateDistributionBundle = 0,
	}
	
	public enum UpdateDomainEntryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateDomainEntry")]
		Lightsail_20161128_UpdateDomainEntry = 0,
	}
	
	public enum UpdateInstanceMetadataOptionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateInstanceMetadataOptions")]
		Lightsail_20161128_UpdateInstanceMetadataOptions = 0,
	}
	
	public enum UpdateLoadBalancerAttributeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateLoadBalancerAttribute")]
		Lightsail_20161128_UpdateLoadBalancerAttribute = 0,
	}
	
	public enum UpdateRelationalDatabaseX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateRelationalDatabase")]
		Lightsail_20161128_UpdateRelationalDatabase = 0,
	}
	
	public enum UpdateRelationalDatabaseParametersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lightsail_20161128.UpdateRelationalDatabaseParameters")]
		Lightsail_20161128_UpdateRelationalDatabaseParameters = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
