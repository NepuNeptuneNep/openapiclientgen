//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateApprovalRuleTemplateWithRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleTemplateNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidApprovalRuleTemplateNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleTemplateDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumRuleTemplatesAssociatedWithRepositoryException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionIntegrityChecksFailedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionKeyAccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionKeyDisabledException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionKeyNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionKeyUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchAssociateApprovalRuleTemplateWithRepositoriesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedRepositoryNames")]
		public string[] AssociatedRepositoryNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchAssociateApprovalRuleTemplateWithRepositoriesError[] Errors { get; set; }
	}
	
	/// <summary>
	/// Returns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchAssociateApprovalRuleTemplateWithRepositoriesError
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchAssociateApprovalRuleTemplateWithRepositoriesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryNames")]
		public string[] RepositoryNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryNamesRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumRepositoryNamesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeMergeConflictsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conflicts")]
		public Conflict[] Conflicts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchDescribeMergeConflictsError[] Errors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitId")]
		public string DestinationCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseCommitId")]
		public string BaseCommitId { get; set; }
	}
	
	/// <summary>
	/// Information about conflicts in a merge operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Conflict
	{
		
		[System.Runtime.Serialization.DataMember(Name="conflictMetadata")]
		public ConflictMetadata ConflictMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeHunks")]
		public MergeHunk[] MergeHunks { get; set; }
	}
	
	/// <summary>
	/// Information about the metadata for a conflict in a merge operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSizes")]
		public FileSizes FileSizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileModes")]
		public FileModes FileModes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectTypes")]
		public ObjectTypes ObjectTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfConflicts")]
		public System.Nullable<System.Int32> NumberOfConflicts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBinaryFile")]
		public IsBinaryFile IsBinaryFile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentConflict")]
		public System.Nullable<System.Boolean> ContentConflict { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileModeConflict")]
		public System.Nullable<System.Boolean> FileModeConflict { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectTypeConflict")]
		public System.Nullable<System.Boolean> ObjectTypeConflict { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeOperations")]
		public MergeOperations MergeOperations { get; set; }
	}
	
	/// <summary>
	/// Information about the size of files in a merge or pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileSizes
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<System.Int32> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public System.Nullable<System.Int32> Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public System.Nullable<System.Int32> Base { get; set; }
	}
	
	/// <summary>
	/// Information about file modes in a merge or pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileModes
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public FileModeTypeEnum Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public FileModeTypeEnum Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public FileModeTypeEnum Base { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FileModeTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTABLE")]
		EXECUTABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NORMAL")]
		NORMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYMLINK")]
		SYMLINK = 2,
	}
	
	/// <summary>
	/// Information about the type of an object in a merge operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObjectTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ObjectTypeEnum Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public ObjectTypeEnum Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public ObjectTypeEnum Base { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ObjectTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILE")]
		FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIRECTORY")]
		DIRECTORY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GIT_LINK")]
		GIT_LINK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYMBOLIC_LINK")]
		SYMBOLIC_LINK = 3,
	}
	
	/// <summary>
	/// Information about whether a file is binary or textual in a merge or pull request operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IsBinaryFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<System.Boolean> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public System.Nullable<System.Boolean> Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public System.Nullable<System.Boolean> Base { get; set; }
	}
	
	/// <summary>
	/// Information about the file operation conflicts in a merge operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeOperations
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public ChangeTypeEnum Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public ChangeTypeEnum Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="A")]
		A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="M")]
		M = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="D")]
		D = 2,
	}
	
	/// <summary>
	/// Information about merge hunks in a merge or pull request operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeHunk
	{
		
		[System.Runtime.Serialization.DataMember(Name="isConflict")]
		public System.Nullable<System.Boolean> IsConflict { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public MergeHunkDetail Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public MergeHunkDetail Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public MergeHunkDetail Base { get; set; }
	}
	
	/// <summary>
	/// Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeHunkDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="startLine")]
		public System.Nullable<System.Int32> StartLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endLine")]
		public System.Nullable<System.Int32> EndLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hunkContent")]
		public string HunkContent { get; set; }
	}
	
	/// <summary>
	/// Returns information about errors in a BatchDescribeMergeConflicts operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeMergeConflictsError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exceptionName")]
		public string ExceptionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDescribeMergeConflictsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeOption")]
		public MergeOptionTypeEnum MergeOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxMergeHunks")]
		public System.Nullable<System.Int32> MaxMergeHunks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxConflictFiles")]
		public System.Nullable<System.Int32> MaxConflictFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filePaths")]
		public string[] FilePaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MergeOptionTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAST_FORWARD_MERGE")]
		FAST_FORWARD_MERGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQUASH_MERGE")]
		SQUASH_MERGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THREE_WAY_MERGE")]
		THREE_WAY_MERGE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConflictDetailLevelTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILE_LEVEL")]
		FILE_LEVEL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINE_LEVEL")]
		LINE_LEVEL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConflictResolutionStrategyTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPT_SOURCE")]
		ACCEPT_SOURCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPT_DESTINATION")]
		ACCEPT_DESTINATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMERGE")]
		AUTOMERGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeOptionRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidMergeOptionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidContinuationTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCommitException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TipsDivergenceExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidMaxConflictFilesException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidMaxMergeHunksException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidConflictDetailLevelException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidConflictResolutionStrategyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumFileContentToLoadExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumItemsToCompareExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disassociatedRepositoryNames")]
		public string[] DisassociatedRepositoryNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchDisassociateApprovalRuleTemplateFromRepositoriesError[] Errors { get; set; }
	}
	
	/// <summary>
	/// Returns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDisassociateApprovalRuleTemplateFromRepositoriesError
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDisassociateApprovalRuleTemplateFromRepositoriesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryNames")]
		public string[] RepositoryNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetCommitsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commits")]
		public Commit[] Commits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public BatchGetCommitsError[] Errors { get; set; }
	}
	
	/// <summary>
	/// Returns information about a specific commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Commit
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parents")]
		public string[] Parents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserInfo Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committer")]
		public UserInfo Committer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="additionalData")]
		public string AdditionalData { get; set; }
	}
	
	/// <summary>
	/// Information about the user who made a specified commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
	}
	
	/// <summary>
	/// Returns information about errors in a BatchGetCommits operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetCommitsError
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetCommitsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitIds")]
		public string[] CommitIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitIdsListRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitIdsLimitExceededException
	{
	}
	
	/// <summary>
	/// Represents the output of a batch get repositories operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetRepositoriesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public RepositoryMetadata[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoriesNotFound")]
		public string[] RepositoriesNotFound { get; set; }
	}
	
	/// <summary>
	/// Information about a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryId")]
		public string RepositoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryDescription")]
		public string RepositoryDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultBranch")]
		public string DefaultBranch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloneUrlHttp")]
		public string CloneUrlHttp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cloneUrlSsh")]
		public string CloneUrlSsh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a batch get repositories operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchGetRepositoriesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryNames")]
		public string[] RepositoryNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateApprovalRuleTemplateOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplate")]
		public ApprovalRuleTemplate ApprovalRuleTemplate { get; set; }
	}
	
	/// <summary>
	/// Returns information about an approval rule template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateId")]
		public string ApprovalRuleTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateDescription")]
		public string ApprovalRuleTemplateDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateContent")]
		public string ApprovalRuleTemplateContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleContentSha256")]
		public string RuleContentSha256 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedUser")]
		public string LastModifiedUser { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateApprovalRuleTemplateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateContent")]
		public string ApprovalRuleTemplateContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateDescription")]
		public string ApprovalRuleTemplateDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleTemplateNameAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleTemplateContentRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidApprovalRuleTemplateContentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidApprovalRuleTemplateDescriptionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberOfRuleTemplatesExceededException
	{
	}
	
	/// <summary>
	/// Represents the input of a create branch operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBranchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BranchNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BranchNameExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidBranchNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCommitIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCommitOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filesAdded")]
		public FileMetadata[] FilesAdded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filesUpdated")]
		public FileMetadata[] FilesUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filesDeleted")]
		public FileMetadata[] FilesDeleted { get; set; }
	}
	
	/// <summary>
	/// A file to be added, updated, or deleted as part of a commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="absolutePath")]
		public string AbsolutePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCommitInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentCommitId")]
		public string ParentCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keepEmptyFolders")]
		public System.Nullable<System.Boolean> KeepEmptyFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="putFiles")]
		public PutFileEntry[] PutFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteFiles")]
		public DeleteFileEntry[] DeleteFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setFileModes")]
		public SetFileModeEntry[] SetFileModes { get; set; }
	}
	
	/// <summary>
	/// Information about a file added or updated as part of a commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutFileEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileContent")]
		public string FileContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceFile")]
		public SourceFileSpecifier SourceFile { get; set; }
	}
	
	/// <summary>
	/// Information about a source file that is part of changes made in a commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceFileSpecifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMove")]
		public System.Nullable<System.Boolean> IsMove { get; set; }
	}
	
	/// <summary>
	/// A file that is deleted as part of a commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFileEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	/// <summary>
	/// Information about the file mode changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetFileModeEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParentCommitIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParentCommitIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParentCommitDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParentCommitIdOutdatedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BranchDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BranchNameIsTagNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileEntryRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumFileEntriesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutFileEntryConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceFileOrContentRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileContentAndSourceFileSpecifiedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PathRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidPathException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SamePathRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileContentSizeLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FolderContentSizeLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDeletionParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestrictedSourceFileException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileModeRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidFileModeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameLengthExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidEmailException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitMessageLengthExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoChangeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileNameConflictsWithDirectoryNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectoryNameConflictsWithFileNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilePathConflictsWithSubmodulePathException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePullRequestOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	/// <summary>
	/// Returns information about a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastActivityDate")]
		public System.DateTimeOffset LastActivityDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestStatus")]
		public PullRequestStatusEnum PullRequestStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorArn")]
		public string AuthorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestTargets")]
		public PullRequestTarget[] PullRequestTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRules")]
		public ApprovalRule[] ApprovalRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PullRequestStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN")]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOSED")]
		CLOSED = 1,
	}
	
	/// <summary>
	/// Returns information about a pull request target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceReference")]
		public string SourceReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationReference")]
		public string DestinationReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationCommit")]
		public string DestinationCommit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCommit")]
		public string SourceCommit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeBase")]
		public string MergeBase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeMetadata")]
		public MergeMetadata MergeMetadata { get; set; }
	}
	
	/// <summary>
	/// Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="isMerged")]
		public System.Nullable<System.Boolean> IsMerged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedBy")]
		public string MergedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeCommitId")]
		public string MergeCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeOption")]
		public MergeOptionTypeEnum MergeOption { get; set; }
	}
	
	/// <summary>
	/// Returns information about an approval rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleId")]
		public string ApprovalRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleName")]
		public string ApprovalRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleContent")]
		public string ApprovalRuleContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ruleContentSha256")]
		public string RuleContentSha256 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedUser")]
		public string LastModifiedUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originApprovalRuleTemplate")]
		public OriginApprovalRuleTemplate OriginApprovalRuleTemplate { get; set; }
	}
	
	/// <summary>
	/// Returns information about the template that created the approval rule for a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OriginApprovalRuleTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateId")]
		public string ApprovalRuleTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePullRequestInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public Target[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about a target for a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Target
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceReference")]
		public string SourceReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationReference")]
		public string DestinationReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientRequestTokenRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClientRequestTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdempotencyParameterMismatchException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferenceNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidReferenceNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferenceDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferenceTypeNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TitleRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTitleException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDescriptionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetsRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTargetsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTargetException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultipleRepositoriesInPullRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumOpenPullRequestsExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAndDestinationAreSameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePullRequestApprovalRuleOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRule")]
		public ApprovalRule ApprovalRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePullRequestApprovalRuleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleName")]
		public string ApprovalRuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleContent")]
		public string ApprovalRuleContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidApprovalRuleNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleNameAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleContentRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidApprovalRuleContentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NumberOfRulesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidPullRequestIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestAlreadyClosedException
	{
	}
	
	/// <summary>
	/// Represents the output of a create repository operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRepositoryOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryMetadata")]
		public RepositoryMetadata RepositoryMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a create repository operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryDescription")]
		public string RepositoryDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryNameExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryDescriptionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTagsMapException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSystemTagUsageException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagPolicyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUnreferencedMergeCommitOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUnreferencedMergeCommitInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeOption")]
		public MergeOptionTypeEnum MergeOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keepEmptyFolders")]
		public System.Nullable<System.Boolean> KeepEmptyFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolution")]
		public ConflictResolution ConflictResolution { get; set; }
	}
	
	/// <summary>
	/// If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictResolution
	{
		
		[System.Runtime.Serialization.DataMember(Name="replaceContents")]
		public ReplaceContentEntry[] ReplaceContents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleteFiles")]
		public DeleteFileEntry[] DeleteFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setFileModes")]
		public SetFileModeEntry[] SetFileModes { get; set; }
	}
	
	/// <summary>
	/// Information about a replacement content entry in the conflict of a merge or pull request operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplaceContentEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replacementType")]
		public ReplacementTypeEnum ReplacementType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReplacementTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEEP_BASE")]
		KEEP_BASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEEP_SOURCE")]
		KEEP_SOURCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KEEP_DESTINATION")]
		KEEP_DESTINATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_NEW_CONTENT")]
		USE_NEW_CONTENT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidConflictResolutionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManualMergeRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumConflictResolutionEntriesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultipleConflictResolutionEntriesException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplacementTypeRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidReplacementTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplacementContentRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidReplacementContentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcurrentReferenceUpdateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteApprovalRuleTemplateOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateId")]
		public string ApprovalRuleTemplateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteApprovalRuleTemplateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleTemplateInUseException
	{
	}
	
	/// <summary>
	/// Represents the output of a delete branch operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBranchOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="deletedBranch")]
		public BranchInfo DeletedBranch { get; set; }
	}
	
	/// <summary>
	/// Returns information about a branch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BranchInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a delete branch operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBranchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DefaultBranchCannotBeDeletedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCommentContentOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public Comment Comment { get; set; }
	}
	
	/// <summary>
	/// Returns information about a specific comment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comment
	{
		
		[System.Runtime.Serialization.DataMember(Name="commentId")]
		public string CommentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inReplyTo")]
		public string InReplyTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public System.DateTimeOffset LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorArn")]
		public string AuthorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callerReactions")]
		public string[] CallerReactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reactionCounts")]
		public ReactionCountsMap ReactionCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReactionCountsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCommentContentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commentId")]
		public string CommentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCommentIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentDeletedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFileOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFileInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentCommitId")]
		public string ParentCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keepEmptyFolders")]
		public System.Nullable<System.Boolean> KeepEmptyFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePullRequestApprovalRuleOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleId")]
		public string ApprovalRuleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePullRequestApprovalRuleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleName")]
		public string ApprovalRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CannotDeleteApprovalRuleFromTemplateException
	{
	}
	
	/// <summary>
	/// Represents the output of a delete repository operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRepositoryOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryId")]
		public string RepositoryId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a delete repository operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMergeConflictsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conflictMetadata")]
		public ConflictMetadata ConflictMetadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeHunks")]
		public MergeHunk[] MergeHunks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitId")]
		public string DestinationCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseCommitId")]
		public string BaseCommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeMergeConflictsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeOption")]
		public MergeOptionTypeEnum MergeOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxMergeHunks")]
		public System.Nullable<System.Int32> MaxMergeHunks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePullRequestEventsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestEvents")]
		public PullRequestEvent[] PullRequestEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about a pull request event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventDate")]
		public System.DateTimeOffset EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEventType")]
		public PullRequestEventType PullRequestEventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actorArn")]
		public string ActorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestCreatedEventMetadata")]
		public PullRequestCreatedEventMetadata PullRequestCreatedEventMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestStatusChangedEventMetadata")]
		public PullRequestStatusChangedEventMetadata PullRequestStatusChangedEventMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestSourceReferenceUpdatedEventMetadata")]
		public PullRequestSourceReferenceUpdatedEventMetadata PullRequestSourceReferenceUpdatedEventMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestMergedStateChangedEventMetadata")]
		public PullRequestMergedStateChangedEventMetadata PullRequestMergedStateChangedEventMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleEventMetadata")]
		public ApprovalRuleEventMetadata ApprovalRuleEventMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalStateChangedEventMetadata")]
		public ApprovalStateChangedEventMetadata ApprovalStateChangedEventMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleOverriddenEventMetadata")]
		public ApprovalRuleOverriddenEventMetadata ApprovalRuleOverriddenEventMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PullRequestEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_CREATED")]
		PULL_REQUEST_CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_STATUS_CHANGED")]
		PULL_REQUEST_STATUS_CHANGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_SOURCE_REFERENCE_UPDATED")]
		PULL_REQUEST_SOURCE_REFERENCE_UPDATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_MERGE_STATE_CHANGED")]
		PULL_REQUEST_MERGE_STATE_CHANGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_APPROVAL_RULE_CREATED")]
		PULL_REQUEST_APPROVAL_RULE_CREATED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_APPROVAL_RULE_UPDATED")]
		PULL_REQUEST_APPROVAL_RULE_UPDATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_APPROVAL_RULE_DELETED")]
		PULL_REQUEST_APPROVAL_RULE_DELETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN")]
		PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST_APPROVAL_STATE_CHANGED")]
		PULL_REQUEST_APPROVAL_STATE_CHANGED = 8,
	}
	
	/// <summary>
	/// Metadata about the pull request that is used when comparing the pull request source with its destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestCreatedEventMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationCommitId")]
		public string DestinationCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeBase")]
		public string MergeBase { get; set; }
	}
	
	/// <summary>
	/// Information about a change to the status of a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestStatusChangedEventMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestStatus")]
		public PullRequestStatusEnum PullRequestStatus { get; set; }
	}
	
	/// <summary>
	/// Information about an update to the source branch of a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestSourceReferenceUpdatedEventMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeBase")]
		public string MergeBase { get; set; }
	}
	
	/// <summary>
	/// Returns information about the change in the merge state for a pull request event. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestMergedStateChangedEventMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationReference")]
		public string DestinationReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergeMetadata")]
		public MergeMetadata MergeMetadata { get; set; }
	}
	
	/// <summary>
	/// Returns information about an event for an approval rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleEventMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleName")]
		public string ApprovalRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleId")]
		public string ApprovalRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleContent")]
		public string ApprovalRuleContent { get; set; }
	}
	
	/// <summary>
	/// Returns information about a change in the approval state for a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalStateChangedEventMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalStatus")]
		public ApprovalState ApprovalStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApprovalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPROVE")]
		APPROVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKE")]
		REVOKE = 1,
	}
	
	/// <summary>
	/// Returns information about an override event for approval rules for a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleOverriddenEventMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrideStatus")]
		public OverrideStatus OverrideStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OverrideStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OVERRIDE")]
		OVERRIDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKE")]
		REVOKE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePullRequestEventsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEventType")]
		public PullRequestEventType PullRequestEventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actorArn")]
		public string ActorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidPullRequestEventTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidActorArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActorDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidMaxResultsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateApprovalRuleTemplateFromRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluatePullRequestApprovalRulesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluation")]
		public Evaluation Evaluation { get; set; }
	}
	
	/// <summary>
	/// Returns information about the approval rules applied to a pull request and whether conditions have been met.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Evaluation
	{
		
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overridden")]
		public System.Nullable<System.Boolean> Overridden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRulesSatisfied")]
		public string[] ApprovalRulesSatisfied { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalRulesNotSatisfied")]
		public string[] ApprovalRulesNotSatisfied { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluatePullRequestApprovalRulesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRevisionIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevisionIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RevisionNotCurrentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApprovalRuleTemplateOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplate")]
		public ApprovalRuleTemplate ApprovalRuleTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApprovalRuleTemplateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a get blob operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBlobOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a get blob operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBlobInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlobIdRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidBlobIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlobIdDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileTooLargeException
	{
	}
	
	/// <summary>
	/// Represents the output of a get branch operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBranchOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public BranchInfo Branch { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a get branch operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBranchInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public Comment Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commentId")]
		public string CommentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentReactionsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reactionsForComment")]
		public ReactionForComment[] ReactionsForComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the reaction values provided by users on a comment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReactionForComment
	{
		
		[System.Runtime.Serialization.DataMember(Name="reaction")]
		public ReactionValueFormats Reaction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reactionUsers")]
		public string[] ReactionUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reactionsFromDeletedUsersCount")]
		public System.Nullable<System.Int32> ReactionsFromDeletedUsersCount { get; set; }
	}
	
	/// <summary>
	/// Information about the values for reactions to a comment. AWS CodeCommit supports a limited set of reactions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReactionValueFormats
	{
		
		[System.Runtime.Serialization.DataMember(Name="emoji")]
		public string Emoji { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortCode")]
		public string ShortCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unicode")]
		public string Unicode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentReactionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commentId")]
		public string CommentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reactionUserArn")]
		public string ReactionUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidReactionUserArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentsForComparedCommitOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commentsForComparedCommitData")]
		public CommentsForComparedCommit[] CommentsForComparedCommitData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about comments on the comparison between two commits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentsForComparedCommit
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeBlobId")]
		public string BeforeBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterBlobId")]
		public string AfterBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
	}
	
	/// <summary>
	/// Returns information about the location of a change or comment in the comparison between two commits or a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filePosition")]
		public System.Nullable<System.Int32> FilePosition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativeFileVersion")]
		public RelativeFileVersionEnum RelativeFileVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RelativeFileVersionEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BEFORE")]
		BEFORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFTER")]
		AFTER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentsForComparedCommitInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentsForPullRequestOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commentsForPullRequestData")]
		public CommentsForPullRequest[] CommentsForPullRequestData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about comments on a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentsForPullRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeBlobId")]
		public string BeforeBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterBlobId")]
		public string AfterBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommentsForPullRequestInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryNotAssociatedWithPullRequestException
	{
	}
	
	/// <summary>
	/// Represents the output of a get commit operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommitOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commit")]
		public Commit Commit { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a get commit operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCommitInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitIdDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDifferencesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="differences")]
		public Difference[] Differences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about a set of differences for a commit specifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Difference
	{
		
		[System.Runtime.Serialization.DataMember(Name="beforeBlob")]
		public BlobMetadata BeforeBlob { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterBlob")]
		public BlobMetadata AfterBlob { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public ChangeTypeEnum ChangeType { get; set; }
	}
	
	/// <summary>
	/// Returns information about a specific Git blob object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlobMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDifferencesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitSpecifier")]
		public string BeforeCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="afterCommitSpecifier")]
		public string AfterCommitSpecifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforePath")]
		public string BeforePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterPath")]
		public string AfterPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PathDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFileOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public int FileSize { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileContent")]
		public string FileContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFileInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitSpecifier")]
		public string CommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFolderOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subFolders")]
		public Folder[] SubFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public File[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="symbolicLinks")]
		public SymbolicLink[] SymbolicLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subModules")]
		public SubModule[] SubModules { get; set; }
	}
	
	/// <summary>
	/// Returns information about a folder in a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Folder
	{
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="absolutePath")]
		public string AbsolutePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
	}
	
	/// <summary>
	/// Returns information about a file in a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="absolutePath")]
		public string AbsolutePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
	}
	
	/// <summary>
	/// Returns information about a symbolic link in a repository folder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SymbolicLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="absolutePath")]
		public string AbsolutePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
	}
	
	/// <summary>
	/// Returns information about a submodule reference in a repository folder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubModule
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="absolutePath")]
		public string AbsolutePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relativePath")]
		public string RelativePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFolderInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitSpecifier")]
		public string CommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="folderPath")]
		public string FolderPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FolderDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMergeCommitOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationCommitId")]
		public string DestinationCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseCommitId")]
		public string BaseCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedCommitId")]
		public string MergedCommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMergeCommitInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMergeConflictsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeable")]
		public bool Mergeable { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitId")]
		public string DestinationCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseCommitId")]
		public string BaseCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conflictMetadataList")]
		public ConflictMetadata[] ConflictMetadataList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMergeConflictsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeOption")]
		public MergeOptionTypeEnum MergeOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxConflictFiles")]
		public System.Nullable<System.Int32> MaxConflictFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidDestinationCommitSpecifierException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSourceCommitSpecifierException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMergeOptionsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mergeOptions")]
		public MergeOptionTypeEnum[] MergeOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitId")]
		public string DestinationCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baseCommitId")]
		public string BaseCommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMergeOptionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPullRequestOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPullRequestInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPullRequestApprovalStatesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvals")]
		public Approval[] Approvals { get; set; }
	}
	
	/// <summary>
	/// Returns information about a specific approval on a pull request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Approval
	{
		
		[System.Runtime.Serialization.DataMember(Name="userArn")]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approvalState")]
		public ApprovalState ApprovalState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPullRequestApprovalStatesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPullRequestOverrideStateOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="overridden")]
		public System.Nullable<System.Boolean> Overridden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrider")]
		public string Overrider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPullRequestOverrideStateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a get repository operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRepositoryOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryMetadata")]
		public RepositoryMetadata RepositoryMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a get repository operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a get repository triggers operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRepositoryTriggersOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="configurationId")]
		public string ConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public RepositoryTrigger[] Triggers { get; set; }
	}
	
	/// <summary>
	/// Information about a trigger for a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryTrigger
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationArn")]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public string CustomData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branches")]
		public string[] Branches { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public RepositoryTriggerEventEnum[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RepositoryTriggerEventEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="updateReference")]
		updateReference = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="createReference")]
		createReference = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="deleteReference")]
		deleteReference = 3,
	}
	
	/// <summary>
	/// Represents the input of a get repository triggers operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRepositoryTriggersInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApprovalRuleTemplatesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateNames")]
		public string[] ApprovalRuleTemplateNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApprovalRuleTemplatesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssociatedApprovalRuleTemplatesForRepositoryOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateNames")]
		public string[] ApprovalRuleTemplateNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssociatedApprovalRuleTemplatesForRepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a list branches operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBranchesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="branches")]
		public string[] Branches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a list branches operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBranchesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPullRequestsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestIds")]
		public string[] PullRequestIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPullRequestsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorArn")]
		public string AuthorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestStatus")]
		public PullRequestStatusEnum PullRequestStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidPullRequestStatusException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidAuthorArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorDoesNotExistException
	{
	}
	
	/// <summary>
	/// Represents the output of a list repositories operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRepositoriesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public RepositoryNameIdPair[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a repository name and ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryNameIdPair
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryId")]
		public string RepositoryId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a list repositories operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRepositoriesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public SortByEnum SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderEnum Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortByEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="repositoryName")]
		repositoryName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastModifiedDate")]
		lastModifiedDate = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ascending")]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="descending")]
		descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidSortByException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidOrderException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRepositoriesForApprovalRuleTemplateOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryNames")]
		public string[] RepositoryNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRepositoriesForApprovalRuleTemplateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceArnRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidResourceArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeBranchesByFastForwardOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeBranchesByFastForwardInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetBranch")]
		public string TargetBranch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTargetBranchException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeBranchesBySquashOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeBranchesBySquashInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetBranch")]
		public string TargetBranch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keepEmptyFolders")]
		public System.Nullable<System.Boolean> KeepEmptyFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolution")]
		public ConflictResolution ConflictResolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeBranchesByThreeWayOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergeBranchesByThreeWayInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCommitSpecifier")]
		public string SourceCommitSpecifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationCommitSpecifier")]
		public string DestinationCommitSpecifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetBranch")]
		public string TargetBranch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keepEmptyFolders")]
		public System.Nullable<System.Boolean> KeepEmptyFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolution")]
		public ConflictResolution ConflictResolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergePullRequestByFastForwardOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergePullRequestByFastForwardInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TipOfSourceReferenceIsDifferentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestApprovalRulesNotSatisfiedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergePullRequestBySquashOutput
	{
		
		/// <summary>
		/// Returns information about a pull request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergePullRequestBySquashInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keepEmptyFolders")]
		public System.Nullable<System.Boolean> KeepEmptyFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolution")]
		public ConflictResolution ConflictResolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergePullRequestByThreeWayOutput
	{
		
		/// <summary>
		/// Returns information about a pull request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergePullRequestByThreeWayInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCommitId")]
		public string SourceCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictDetailLevel")]
		public ConflictDetailLevelTypeEnum ConflictDetailLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolutionStrategy")]
		public ConflictResolutionStrategyTypeEnum ConflictResolutionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keepEmptyFolders")]
		public System.Nullable<System.Boolean> KeepEmptyFolders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conflictResolution")]
		public ConflictResolution ConflictResolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverridePullRequestApprovalRulesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overrideStatus")]
		public OverrideStatus OverrideStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidOverrideStatusException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverrideStatusRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverrideAlreadySetException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCommentForComparedCommitOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeBlobId")]
		public string BeforeBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterBlobId")]
		public string AfterBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public Comment Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCommentForComparedCommitInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentContentRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentContentSizeLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidFileLocationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRelativeFileVersionEnumException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidFilePositionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeforeCommitIdAndAfterCommitIdAreSameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCommentForPullRequestOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beforeBlobId")]
		public string BeforeBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="afterBlobId")]
		public string AfterBlobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public Comment Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCommentForPullRequestInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="beforeCommitId")]
		public string BeforeCommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="afterCommitId")]
		public string AfterCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCommentReplyOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public Comment Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCommentReplyInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inReplyTo")]
		public string InReplyTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutCommentReactionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commentId")]
		public string CommentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reactionValue")]
		public string ReactionValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidReactionValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReactionValueRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReactionLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutFileOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="treeId")]
		public string TreeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutFileInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileContent")]
		public string FileContent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileMode")]
		public FileModeTypeEnum FileMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentCommitId")]
		public string ParentCommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileContentRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SameFileContentException
	{
	}
	
	/// <summary>
	/// Represents the output of a put repository triggers operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRepositoryTriggersOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="configurationId")]
		public string ConfigurationId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a put repository triggers operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRepositoryTriggersInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public RepositoryTrigger[] Triggers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryTriggersListRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumRepositoryTriggersExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryTriggerNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryTriggerDestinationArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryTriggerRegionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryTriggerCustomDataException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumBranchesExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryTriggerBranchNameException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRepositoryTriggerEventsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryTriggerNameRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryTriggerDestinationArnRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryTriggerBranchNameListRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryTriggerEventsListRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagsMapRequiredException
	{
	}
	
	/// <summary>
	/// Represents the output of a test repository triggers operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestRepositoryTriggersOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="successfulExecutions")]
		public string[] SuccessfulExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedExecutions")]
		public RepositoryTriggerExecutionFailure[] FailedExecutions { get; set; }
	}
	
	/// <summary>
	/// A trigger failed to run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepositoryTriggerExecutionFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public string Trigger { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a test repository triggers operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestRepositoryTriggersInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public RepositoryTrigger[] Triggers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagKeysListRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTagKeysListException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApprovalRuleTemplateContentOutput
	{
		
		/// <summary>
		/// Returns information about an approval rule template.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplate")]
		public ApprovalRuleTemplate ApprovalRuleTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApprovalRuleTemplateContentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newRuleContent")]
		public string NewRuleContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="existingRuleContentSha256")]
		public string ExistingRuleContentSha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRuleContentSha256Exception
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApprovalRuleTemplateDescriptionOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplate")]
		public ApprovalRuleTemplate ApprovalRuleTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApprovalRuleTemplateDescriptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateName")]
		public string ApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplateDescription")]
		public string ApprovalRuleTemplateDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApprovalRuleTemplateNameOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleTemplate")]
		public ApprovalRuleTemplate ApprovalRuleTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApprovalRuleTemplateNameInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oldApprovalRuleTemplateName")]
		public string OldApprovalRuleTemplateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newApprovalRuleTemplateName")]
		public string NewApprovalRuleTemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCommentOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public Comment Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCommentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commentId")]
		public string CommentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommentNotCreatedByCallerException
	{
	}
	
	/// <summary>
	/// Represents the input of an update default branch operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDefaultBranchInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultBranchName")]
		public string DefaultBranchName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestApprovalRuleContentOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRule")]
		public ApprovalRule ApprovalRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestApprovalRuleContentInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalRuleName")]
		public string ApprovalRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="existingRuleContentSha256")]
		public string ExistingRuleContentSha256 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newRuleContent")]
		public string NewRuleContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRuleDoesNotExistException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CannotModifyApprovalRuleFromTemplateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestApprovalStateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="approvalState")]
		public ApprovalState ApprovalState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidApprovalStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalStateRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestCannotBeApprovedByAuthorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaximumNumberOfApprovalsExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestDescriptionOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestDescriptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestStatusOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestStatusInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestStatus")]
		public PullRequestStatusEnum PullRequestStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidPullRequestStatusUpdateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PullRequestStatusRequiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestTitleOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequest PullRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePullRequestTitleInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pullRequestId")]
		public string PullRequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an update repository description operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRepositoryDescriptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryDescription")]
		public string RepositoryDescription { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an update repository description operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRepositoryNameInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oldName")]
		public string OldName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newName")]
		public string NewName { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.
		/// AssociateApprovalRuleTemplateWithRepository #X-Amz-Target=CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task AssociateApprovalRuleTemplateWithRepositoryAsync(AssociateApprovalRuleTemplateWithRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an association between an approval rule template and one or more specified repositories.
		/// BatchAssociateApprovalRuleTemplateWithRepositories #X-Amz-Target=CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput> BatchAssociateApprovalRuleTemplateWithRepositoriesAsync(BatchAssociateApprovalRuleTemplateWithRepositoriesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchAssociateApprovalRuleTemplateWithRepositoriesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
		/// BatchDescribeMergeConflicts #X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDescribeMergeConflictsOutput> BatchDescribeMergeConflictsAsync(BatchDescribeMergeConflictsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDescribeMergeConflictsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the association between an approval rule template and one or more specified repositories.
		/// BatchDisassociateApprovalRuleTemplateFromRepositories #X-Amz-Target=CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput> BatchDisassociateApprovalRuleTemplateFromRepositoriesAsync(BatchDisassociateApprovalRuleTemplateFromRepositoriesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the contents of one or more commits in a repository.
		/// BatchGetCommits #X-Amz-Target=CodeCommit_20150413.BatchGetCommits
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetCommitsOutput> BatchGetCommitsAsync(BatchGetCommitsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.BatchGetCommits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetCommitsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about one or more repositories.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
		/// BatchGetRepositories #X-Amz-Target=CodeCommit_20150413.BatchGetRepositories
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetRepositoriesOutput> BatchGetRepositoriesAsync(BatchGetRepositoriesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetRepositoriesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see <a>AssociateApprovalRuleTemplateWithRepository</a>.
		/// CreateApprovalRuleTemplate #X-Amz-Target=CodeCommit_20150413.CreateApprovalRuleTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateApprovalRuleTemplateOutput> CreateApprovalRuleTemplateAsync(CreateApprovalRuleTemplateInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.CreateApprovalRuleTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateApprovalRuleTemplateOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a branch in a repository and points the branch to a commit.</p> <note> <p>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</p> </note>
		/// CreateBranch #X-Amz-Target=CodeCommit_20150413.CreateBranch
		/// </summary>
		/// <returns>Success</returns>
		public async Task CreateBranchAsync(CreateBranchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.CreateBranch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a commit for a repository on the tip of a specified branch.
		/// CreateCommit #X-Amz-Target=CodeCommit_20150413.CreateCommit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCommitOutput> CreateCommitAsync(CreateCommitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.CreateCommit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCommitOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a pull request in the specified repository.
		/// CreatePullRequest #X-Amz-Target=CodeCommit_20150413.CreatePullRequest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePullRequestOutput> CreatePullRequestAsync(CreatePullRequestInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.CreatePullRequest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePullRequestOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an approval rule for a pull request.
		/// CreatePullRequestApprovalRule #X-Amz-Target=CodeCommit_20150413.CreatePullRequestApprovalRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePullRequestApprovalRuleOutput> CreatePullRequestApprovalRuleAsync(CreatePullRequestApprovalRuleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.CreatePullRequestApprovalRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePullRequestApprovalRuleOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new, empty repository.
		/// CreateRepository #X-Amz-Target=CodeCommit_20150413.CreateRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRepositoryOutput> CreateRepositoryAsync(CreateRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.CreateRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRepositoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p> </note>
		/// CreateUnreferencedMergeCommit #X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUnreferencedMergeCommitOutput> CreateUnreferencedMergeCommitAsync(CreateUnreferencedMergeCommitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateUnreferencedMergeCommitOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.
		/// DeleteApprovalRuleTemplate #X-Amz-Target=CodeCommit_20150413.DeleteApprovalRuleTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteApprovalRuleTemplateOutput> DeleteApprovalRuleTemplateAsync(DeleteApprovalRuleTemplateInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DeleteApprovalRuleTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteApprovalRuleTemplateOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a branch from a repository, unless that branch is the default branch for the repository.
		/// DeleteBranch #X-Amz-Target=CodeCommit_20150413.DeleteBranch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBranchOutput> DeleteBranchAsync(DeleteBranchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DeleteBranch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBranchOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the content of a comment made on a change, file, or commit in a repository.
		/// DeleteCommentContent #X-Amz-Target=CodeCommit_20150413.DeleteCommentContent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteCommentContentOutput> DeleteCommentContentAsync(DeleteCommentContentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCommentContentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.
		/// DeleteFile #X-Amz-Target=CodeCommit_20150413.DeleteFile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteFileOutput> DeleteFileAsync(DeleteFileInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DeleteFile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteFileOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.
		/// DeletePullRequestApprovalRule #X-Amz-Target=CodeCommit_20150413.DeletePullRequestApprovalRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeletePullRequestApprovalRuleOutput> DeletePullRequestApprovalRuleAsync(DeletePullRequestApprovalRuleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DeletePullRequestApprovalRule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePullRequestApprovalRuleOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a repository. If a specified repository was already deleted, a null repository ID is returned.</p> <important> <p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.</p> </important>
		/// DeleteRepository #X-Amz-Target=CodeCommit_20150413.DeleteRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRepositoryOutput> DeleteRepositoryAsync(DeleteRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DeleteRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRepositoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.
		/// DescribeMergeConflicts #X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts
		/// </summary>
		/// <param name="maxMergeHunks">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeMergeConflictsOutput> DescribeMergeConflictsAsync(string maxMergeHunks, string nextToken, DescribeMergeConflictsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts?maxMergeHunks=" + (maxMergeHunks==null? "" : System.Uri.EscapeDataString(maxMergeHunks))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeMergeConflictsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about one or more pull request events.
		/// DescribePullRequestEvents #X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribePullRequestEventsOutput> DescribePullRequestEventsAsync(string maxResults, string nextToken, DescribePullRequestEventsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePullRequestEventsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.
		/// DisassociateApprovalRuleTemplateFromRepository #X-Amz-Target=CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task DisassociateApprovalRuleTemplateFromRepositoryAsync(DisassociateApprovalRuleTemplateFromRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Evaluates whether a pull request has met all the conditions specified in its associated approval rules.
		/// EvaluatePullRequestApprovalRules #X-Amz-Target=CodeCommit_20150413.EvaluatePullRequestApprovalRules
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EvaluatePullRequestApprovalRulesOutput> EvaluatePullRequestApprovalRulesAsync(EvaluatePullRequestApprovalRulesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.EvaluatePullRequestApprovalRules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EvaluatePullRequestApprovalRulesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specified approval rule template.
		/// GetApprovalRuleTemplate #X-Amz-Target=CodeCommit_20150413.GetApprovalRuleTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetApprovalRuleTemplateOutput> GetApprovalRuleTemplateAsync(GetApprovalRuleTemplateInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetApprovalRuleTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApprovalRuleTemplateOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the base-64 encoded content of an individual blob in a repository.
		/// GetBlob #X-Amz-Target=CodeCommit_20150413.GetBlob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBlobOutput> GetBlobAsync(GetBlobInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetBlob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBlobOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a repository branch, including its name and the last commit ID.
		/// GetBranch #X-Amz-Target=CodeCommit_20150413.GetBranch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBranchOutput> GetBranchAsync(GetBranchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetBranch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBranchOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the content of a comment made on a change, file, or commit in a repository. </p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>
		/// GetComment #X-Amz-Target=CodeCommit_20150413.GetComment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCommentOutput> GetCommentAsync(GetCommentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetComment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCommentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.
		/// GetCommentReactions #X-Amz-Target=CodeCommit_20150413.GetCommentReactions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCommentReactionsOutput> GetCommentReactionsAsync(string maxResults, string nextToken, GetCommentReactionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetCommentReactions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCommentReactionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about comments made on the comparison between two commits.</p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>
		/// GetCommentsForComparedCommit #X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCommentsForComparedCommitOutput> GetCommentsForComparedCommitAsync(string maxResults, string nextToken, GetCommentsForComparedCommitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCommentsForComparedCommitOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns comments made on a pull request.</p> <note> <p>Reaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.</p> </note>
		/// GetCommentsForPullRequest #X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCommentsForPullRequestOutput> GetCommentsForPullRequestAsync(string maxResults, string nextToken, GetCommentsForPullRequestInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCommentsForPullRequestOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a commit, including commit message and committer information.
		/// GetCommit #X-Amz-Target=CodeCommit_20150413.GetCommit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCommitOutput> GetCommitAsync(GetCommitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetCommit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCommitOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.
		/// GetDifferences #X-Amz-Target=CodeCommit_20150413.GetDifferences
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetDifferencesOutput> GetDifferencesAsync(string MaxResults, string NextToken, GetDifferencesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetDifferences?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDifferencesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the base-64 encoded contents of a specified file and its metadata.
		/// GetFile #X-Amz-Target=CodeCommit_20150413.GetFile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetFileOutput> GetFileAsync(GetFileInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetFile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFileOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the contents of a specified folder in a repository.
		/// GetFolder #X-Amz-Target=CodeCommit_20150413.GetFolder
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetFolderOutput> GetFolderAsync(GetFolderInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetFolder";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFolderOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specified merge commit.
		/// GetMergeCommit #X-Amz-Target=CodeCommit_20150413.GetMergeCommit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMergeCommitOutput> GetMergeCommitAsync(GetMergeCommitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetMergeCommit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMergeCommitOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
		/// GetMergeConflicts #X-Amz-Target=CodeCommit_20150413.GetMergeConflicts
		/// </summary>
		/// <param name="maxConflictFiles">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetMergeConflictsOutput> GetMergeConflictsAsync(string maxConflictFiles, string nextToken, GetMergeConflictsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts?maxConflictFiles=" + (maxConflictFiles==null? "" : System.Uri.EscapeDataString(maxConflictFiles))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMergeConflictsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.
		/// GetMergeOptions #X-Amz-Target=CodeCommit_20150413.GetMergeOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMergeOptionsOutput> GetMergeOptionsAsync(GetMergeOptionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetMergeOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMergeOptionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a pull request in a specified repository.
		/// GetPullRequest #X-Amz-Target=CodeCommit_20150413.GetPullRequest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPullRequestOutput> GetPullRequestAsync(GetPullRequestInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetPullRequest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPullRequestOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.
		/// GetPullRequestApprovalStates #X-Amz-Target=CodeCommit_20150413.GetPullRequestApprovalStates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPullRequestApprovalStatesOutput> GetPullRequestApprovalStatesAsync(GetPullRequestApprovalStatesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetPullRequestApprovalStates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPullRequestApprovalStatesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
		/// GetPullRequestOverrideState #X-Amz-Target=CodeCommit_20150413.GetPullRequestOverrideState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPullRequestOverrideStateOutput> GetPullRequestOverrideStateAsync(GetPullRequestOverrideStateInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetPullRequestOverrideState";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPullRequestOverrideStateOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
		/// GetRepository #X-Amz-Target=CodeCommit_20150413.GetRepository
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRepositoryOutput> GetRepositoryAsync(GetRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRepositoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about triggers configured for a repository.
		/// GetRepositoryTriggers #X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRepositoryTriggersOutput> GetRepositoryTriggersAsync(GetRepositoryTriggersInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRepositoryTriggersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.
		/// ListApprovalRuleTemplates #X-Amz-Target=CodeCommit_20150413.ListApprovalRuleTemplates
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListApprovalRuleTemplatesOutput> ListApprovalRuleTemplatesAsync(string maxResults, string nextToken, ListApprovalRuleTemplatesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.ListApprovalRuleTemplates?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListApprovalRuleTemplatesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all approval rule templates that are associated with a specified repository.
		/// ListAssociatedApprovalRuleTemplatesForRepository #X-Amz-Target=CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAssociatedApprovalRuleTemplatesForRepositoryOutput> ListAssociatedApprovalRuleTemplatesForRepositoryAsync(string maxResults, string nextToken, ListAssociatedApprovalRuleTemplatesForRepositoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssociatedApprovalRuleTemplatesForRepositoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more branches in a repository.
		/// ListBranches #X-Amz-Target=CodeCommit_20150413.ListBranches
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBranchesOutput> ListBranchesAsync(string nextToken, ListBranchesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.ListBranches?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBranchesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
		/// ListPullRequests #X-Amz-Target=CodeCommit_20150413.ListPullRequests
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPullRequestsOutput> ListPullRequestsAsync(string maxResults, string nextToken, ListPullRequestsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.ListPullRequests?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPullRequestsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more repositories.
		/// ListRepositories #X-Amz-Target=CodeCommit_20150413.ListRepositories
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRepositoriesOutput> ListRepositoriesAsync(string nextToken, ListRepositoriesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.ListRepositories?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRepositoriesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all repositories associated with the specified approval rule template.
		/// ListRepositoriesForApprovalRuleTemplate #X-Amz-Target=CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRepositoriesForApprovalRuleTemplateOutput> ListRepositoriesForApprovalRuleTemplateAsync(string maxResults, string nextToken, ListRepositoriesForApprovalRuleTemplateInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRepositoriesForApprovalRuleTemplateOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User Guide</i>.
		/// ListTagsForResource #X-Amz-Target=CodeCommit_20150413.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.ListTagsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Merges two branches using the fast-forward merge strategy.
		/// MergeBranchesByFastForward #X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MergeBranchesByFastForwardOutput> MergeBranchesByFastForwardAsync(MergeBranchesByFastForwardInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MergeBranchesByFastForwardOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Merges two branches using the squash merge strategy.
		/// MergeBranchesBySquash #X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MergeBranchesBySquashOutput> MergeBranchesBySquashAsync(MergeBranchesBySquashInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MergeBranchesBySquashOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Merges two specified branches using the three-way merge strategy.
		/// MergeBranchesByThreeWay #X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MergeBranchesByThreeWayOutput> MergeBranchesByThreeWayAsync(MergeBranchesByThreeWayInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MergeBranchesByThreeWayOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.
		/// MergePullRequestByFastForward #X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MergePullRequestByFastForwardOutput> MergePullRequestByFastForwardAsync(MergePullRequestByFastForwardInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MergePullRequestByFastForwardOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.
		/// MergePullRequestBySquash #X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MergePullRequestBySquashOutput> MergePullRequestBySquashAsync(MergePullRequestBySquashInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MergePullRequestBySquashOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.
		/// MergePullRequestByThreeWay #X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MergePullRequestByThreeWayOutput> MergePullRequestByThreeWayAsync(MergePullRequestByThreeWayInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MergePullRequestByThreeWayOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets aside (overrides) all approval rule requirements for a specified pull request.
		/// OverridePullRequestApprovalRules #X-Amz-Target=CodeCommit_20150413.OverridePullRequestApprovalRules
		/// </summary>
		/// <returns>Success</returns>
		public async Task OverridePullRequestApprovalRulesAsync(OverridePullRequestApprovalRulesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.OverridePullRequestApprovalRules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Posts a comment on the comparison between two commits.
		/// PostCommentForComparedCommit #X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PostCommentForComparedCommitOutput> PostCommentForComparedCommitAsync(PostCommentForComparedCommitInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PostCommentForComparedCommitOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Posts a comment on a pull request.
		/// PostCommentForPullRequest #X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PostCommentForPullRequestOutput> PostCommentForPullRequestAsync(PostCommentForPullRequestInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PostCommentForPullRequestOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
		/// PostCommentReply #X-Amz-Target=CodeCommit_20150413.PostCommentReply
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PostCommentReplyOutput> PostCommentReplyAsync(PostCommentReplyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.PostCommentReply";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PostCommentReplyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.
		/// PutCommentReaction #X-Amz-Target=CodeCommit_20150413.PutCommentReaction
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutCommentReactionAsync(PutCommentReactionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.PutCommentReaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.
		/// PutFile #X-Amz-Target=CodeCommit_20150413.PutFile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutFileOutput> PutFileAsync(PutFileInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.PutFile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutFileOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replaces all triggers for a repository. Used to create or delete triggers.
		/// PutRepositoryTriggers #X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRepositoryTriggersOutput> PutRepositoryTriggersAsync(PutRepositoryTriggersInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutRepositoryTriggersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.
		/// TagResource #X-Amz-Target=CodeCommit_20150413.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(TagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.
		/// TestRepositoryTriggers #X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TestRepositoryTriggersOutput> TestRepositoryTriggersAsync(TestRepositoryTriggersInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRepositoryTriggersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.
		/// UntagResource #X-Amz-Target=CodeCommit_20150413.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(UntagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.
		/// UpdateApprovalRuleTemplateContent #X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateContent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateApprovalRuleTemplateContentOutput> UpdateApprovalRuleTemplateContentAsync(UpdateApprovalRuleTemplateContentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateContent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateApprovalRuleTemplateContentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the description for a specified approval rule template.
		/// UpdateApprovalRuleTemplateDescription #X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateDescription
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateApprovalRuleTemplateDescriptionOutput> UpdateApprovalRuleTemplateDescriptionAsync(UpdateApprovalRuleTemplateDescriptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateDescription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateApprovalRuleTemplateDescriptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the name of a specified approval rule template.
		/// UpdateApprovalRuleTemplateName #X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateName
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateApprovalRuleTemplateNameOutput> UpdateApprovalRuleTemplateNameAsync(UpdateApprovalRuleTemplateNameInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateName";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateApprovalRuleTemplateNameOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replaces the contents of a comment.
		/// UpdateComment #X-Amz-Target=CodeCommit_20150413.UpdateComment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateCommentOutput> UpdateCommentAsync(UpdateCommentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdateComment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCommentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets or changes the default branch name for the specified repository.</p> <note> <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p> </note>
		/// UpdateDefaultBranch #X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateDefaultBranchAsync(UpdateDefaultBranchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers.
		/// UpdatePullRequestApprovalRuleContent #X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalRuleContent
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePullRequestApprovalRuleContentOutput> UpdatePullRequestApprovalRuleContentAsync(UpdatePullRequestApprovalRuleContentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalRuleContent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePullRequestApprovalRuleContentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.
		/// UpdatePullRequestApprovalState #X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalState
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdatePullRequestApprovalStateAsync(UpdatePullRequestApprovalStateInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalState";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replaces the contents of the description of a pull request.
		/// UpdatePullRequestDescription #X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePullRequestDescriptionOutput> UpdatePullRequestDescriptionAsync(UpdatePullRequestDescriptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePullRequestDescriptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the status of a pull request.
		/// UpdatePullRequestStatus #X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePullRequestStatusOutput> UpdatePullRequestStatusAsync(UpdatePullRequestStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePullRequestStatusOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replaces the title of a pull request.
		/// UpdatePullRequestTitle #X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePullRequestTitleOutput> UpdatePullRequestTitleAsync(UpdatePullRequestTitleInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePullRequestTitleOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets or changes the comment or description for a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
		/// UpdateRepositoryDescription #X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateRepositoryDescriptionAsync(UpdateRepositoryDescriptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Renames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit User Guide.
		/// UpdateRepositoryName #X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateRepositoryNameAsync(UpdateRepositoryNameInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AssociateApprovalRuleTemplateWithRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository")]
		CodeCommit_20150413_AssociateApprovalRuleTemplateWithRepository = 0,
	}
	
	public enum BatchAssociateApprovalRuleTemplateWithRepositoriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories")]
		CodeCommit_20150413_BatchAssociateApprovalRuleTemplateWithRepositories = 0,
	}
	
	public enum BatchDescribeMergeConflictsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.BatchDescribeMergeConflicts")]
		CodeCommit_20150413_BatchDescribeMergeConflicts = 0,
	}
	
	public enum BatchDisassociateApprovalRuleTemplateFromRepositoriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories")]
		CodeCommit_20150413_BatchDisassociateApprovalRuleTemplateFromRepositories = 0,
	}
	
	public enum BatchGetCommitsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.BatchGetCommits")]
		CodeCommit_20150413_BatchGetCommits = 0,
	}
	
	public enum BatchGetRepositoriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.BatchGetRepositories")]
		CodeCommit_20150413_BatchGetRepositories = 0,
	}
	
	public enum CreateApprovalRuleTemplateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.CreateApprovalRuleTemplate")]
		CodeCommit_20150413_CreateApprovalRuleTemplate = 0,
	}
	
	public enum CreateBranchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.CreateBranch")]
		CodeCommit_20150413_CreateBranch = 0,
	}
	
	public enum CreateCommitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.CreateCommit")]
		CodeCommit_20150413_CreateCommit = 0,
	}
	
	public enum CreatePullRequestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.CreatePullRequest")]
		CodeCommit_20150413_CreatePullRequest = 0,
	}
	
	public enum CreatePullRequestApprovalRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.CreatePullRequestApprovalRule")]
		CodeCommit_20150413_CreatePullRequestApprovalRule = 0,
	}
	
	public enum CreateRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.CreateRepository")]
		CodeCommit_20150413_CreateRepository = 0,
	}
	
	public enum CreateUnreferencedMergeCommitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.CreateUnreferencedMergeCommit")]
		CodeCommit_20150413_CreateUnreferencedMergeCommit = 0,
	}
	
	public enum DeleteApprovalRuleTemplateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DeleteApprovalRuleTemplate")]
		CodeCommit_20150413_DeleteApprovalRuleTemplate = 0,
	}
	
	public enum DeleteBranchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DeleteBranch")]
		CodeCommit_20150413_DeleteBranch = 0,
	}
	
	public enum DeleteCommentContentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DeleteCommentContent")]
		CodeCommit_20150413_DeleteCommentContent = 0,
	}
	
	public enum DeleteFileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DeleteFile")]
		CodeCommit_20150413_DeleteFile = 0,
	}
	
	public enum DeletePullRequestApprovalRuleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DeletePullRequestApprovalRule")]
		CodeCommit_20150413_DeletePullRequestApprovalRule = 0,
	}
	
	public enum DeleteRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DeleteRepository")]
		CodeCommit_20150413_DeleteRepository = 0,
	}
	
	public enum DescribeMergeConflictsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DescribeMergeConflicts")]
		CodeCommit_20150413_DescribeMergeConflicts = 0,
	}
	
	public enum DescribePullRequestEventsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DescribePullRequestEvents")]
		CodeCommit_20150413_DescribePullRequestEvents = 0,
	}
	
	public enum DisassociateApprovalRuleTemplateFromRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository")]
		CodeCommit_20150413_DisassociateApprovalRuleTemplateFromRepository = 0,
	}
	
	public enum EvaluatePullRequestApprovalRulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.EvaluatePullRequestApprovalRules")]
		CodeCommit_20150413_EvaluatePullRequestApprovalRules = 0,
	}
	
	public enum GetApprovalRuleTemplateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetApprovalRuleTemplate")]
		CodeCommit_20150413_GetApprovalRuleTemplate = 0,
	}
	
	public enum GetBlobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetBlob")]
		CodeCommit_20150413_GetBlob = 0,
	}
	
	public enum GetBranchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetBranch")]
		CodeCommit_20150413_GetBranch = 0,
	}
	
	public enum GetCommentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetComment")]
		CodeCommit_20150413_GetComment = 0,
	}
	
	public enum GetCommentReactionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetCommentReactions")]
		CodeCommit_20150413_GetCommentReactions = 0,
	}
	
	public enum GetCommentsForComparedCommitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetCommentsForComparedCommit")]
		CodeCommit_20150413_GetCommentsForComparedCommit = 0,
	}
	
	public enum GetCommentsForPullRequestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetCommentsForPullRequest")]
		CodeCommit_20150413_GetCommentsForPullRequest = 0,
	}
	
	public enum GetCommitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetCommit")]
		CodeCommit_20150413_GetCommit = 0,
	}
	
	public enum GetDifferencesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetDifferences")]
		CodeCommit_20150413_GetDifferences = 0,
	}
	
	public enum GetFileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetFile")]
		CodeCommit_20150413_GetFile = 0,
	}
	
	public enum GetFolderX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetFolder")]
		CodeCommit_20150413_GetFolder = 0,
	}
	
	public enum GetMergeCommitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetMergeCommit")]
		CodeCommit_20150413_GetMergeCommit = 0,
	}
	
	public enum GetMergeConflictsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetMergeConflicts")]
		CodeCommit_20150413_GetMergeConflicts = 0,
	}
	
	public enum GetMergeOptionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetMergeOptions")]
		CodeCommit_20150413_GetMergeOptions = 0,
	}
	
	public enum GetPullRequestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetPullRequest")]
		CodeCommit_20150413_GetPullRequest = 0,
	}
	
	public enum GetPullRequestApprovalStatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetPullRequestApprovalStates")]
		CodeCommit_20150413_GetPullRequestApprovalStates = 0,
	}
	
	public enum GetPullRequestOverrideStateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetPullRequestOverrideState")]
		CodeCommit_20150413_GetPullRequestOverrideState = 0,
	}
	
	public enum GetRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetRepository")]
		CodeCommit_20150413_GetRepository = 0,
	}
	
	public enum GetRepositoryTriggersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.GetRepositoryTriggers")]
		CodeCommit_20150413_GetRepositoryTriggers = 0,
	}
	
	public enum ListApprovalRuleTemplatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.ListApprovalRuleTemplates")]
		CodeCommit_20150413_ListApprovalRuleTemplates = 0,
	}
	
	public enum ListAssociatedApprovalRuleTemplatesForRepositoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository")]
		CodeCommit_20150413_ListAssociatedApprovalRuleTemplatesForRepository = 0,
	}
	
	public enum ListBranchesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.ListBranches")]
		CodeCommit_20150413_ListBranches = 0,
	}
	
	public enum ListPullRequestsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.ListPullRequests")]
		CodeCommit_20150413_ListPullRequests = 0,
	}
	
	public enum ListRepositoriesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.ListRepositories")]
		CodeCommit_20150413_ListRepositories = 0,
	}
	
	public enum ListRepositoriesForApprovalRuleTemplateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate")]
		CodeCommit_20150413_ListRepositoriesForApprovalRuleTemplate = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.ListTagsForResource")]
		CodeCommit_20150413_ListTagsForResource = 0,
	}
	
	public enum MergeBranchesByFastForwardX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.MergeBranchesByFastForward")]
		CodeCommit_20150413_MergeBranchesByFastForward = 0,
	}
	
	public enum MergeBranchesBySquashX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.MergeBranchesBySquash")]
		CodeCommit_20150413_MergeBranchesBySquash = 0,
	}
	
	public enum MergeBranchesByThreeWayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.MergeBranchesByThreeWay")]
		CodeCommit_20150413_MergeBranchesByThreeWay = 0,
	}
	
	public enum MergePullRequestByFastForwardX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.MergePullRequestByFastForward")]
		CodeCommit_20150413_MergePullRequestByFastForward = 0,
	}
	
	public enum MergePullRequestBySquashX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.MergePullRequestBySquash")]
		CodeCommit_20150413_MergePullRequestBySquash = 0,
	}
	
	public enum MergePullRequestByThreeWayX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.MergePullRequestByThreeWay")]
		CodeCommit_20150413_MergePullRequestByThreeWay = 0,
	}
	
	public enum OverridePullRequestApprovalRulesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.OverridePullRequestApprovalRules")]
		CodeCommit_20150413_OverridePullRequestApprovalRules = 0,
	}
	
	public enum PostCommentForComparedCommitX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.PostCommentForComparedCommit")]
		CodeCommit_20150413_PostCommentForComparedCommit = 0,
	}
	
	public enum PostCommentForPullRequestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.PostCommentForPullRequest")]
		CodeCommit_20150413_PostCommentForPullRequest = 0,
	}
	
	public enum PostCommentReplyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.PostCommentReply")]
		CodeCommit_20150413_PostCommentReply = 0,
	}
	
	public enum PutCommentReactionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.PutCommentReaction")]
		CodeCommit_20150413_PutCommentReaction = 0,
	}
	
	public enum PutFileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.PutFile")]
		CodeCommit_20150413_PutFile = 0,
	}
	
	public enum PutRepositoryTriggersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.PutRepositoryTriggers")]
		CodeCommit_20150413_PutRepositoryTriggers = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.TagResource")]
		CodeCommit_20150413_TagResource = 0,
	}
	
	public enum TestRepositoryTriggersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.TestRepositoryTriggers")]
		CodeCommit_20150413_TestRepositoryTriggers = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UntagResource")]
		CodeCommit_20150413_UntagResource = 0,
	}
	
	public enum UpdateApprovalRuleTemplateContentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdateApprovalRuleTemplateContent")]
		CodeCommit_20150413_UpdateApprovalRuleTemplateContent = 0,
	}
	
	public enum UpdateApprovalRuleTemplateDescriptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdateApprovalRuleTemplateDescription")]
		CodeCommit_20150413_UpdateApprovalRuleTemplateDescription = 0,
	}
	
	public enum UpdateApprovalRuleTemplateNameX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdateApprovalRuleTemplateName")]
		CodeCommit_20150413_UpdateApprovalRuleTemplateName = 0,
	}
	
	public enum UpdateCommentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdateComment")]
		CodeCommit_20150413_UpdateComment = 0,
	}
	
	public enum UpdateDefaultBranchX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdateDefaultBranch")]
		CodeCommit_20150413_UpdateDefaultBranch = 0,
	}
	
	public enum UpdatePullRequestApprovalRuleContentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdatePullRequestApprovalRuleContent")]
		CodeCommit_20150413_UpdatePullRequestApprovalRuleContent = 0,
	}
	
	public enum UpdatePullRequestApprovalStateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdatePullRequestApprovalState")]
		CodeCommit_20150413_UpdatePullRequestApprovalState = 0,
	}
	
	public enum UpdatePullRequestDescriptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdatePullRequestDescription")]
		CodeCommit_20150413_UpdatePullRequestDescription = 0,
	}
	
	public enum UpdatePullRequestStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdatePullRequestStatus")]
		CodeCommit_20150413_UpdatePullRequestStatus = 0,
	}
	
	public enum UpdatePullRequestTitleX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdatePullRequestTitle")]
		CodeCommit_20150413_UpdatePullRequestTitle = 0,
	}
	
	public enum UpdateRepositoryDescriptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdateRepositoryDescription")]
		CodeCommit_20150413_UpdateRepositoryDescription = 0,
	}
	
	public enum UpdateRepositoryNameX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodeCommit_20150413.UpdateRepositoryName")]
		CodeCommit_20150413_UpdateRepositoryName = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
