//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class _401_UNAUTHORIZED
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<_401_UNAUTHORIZEDCode> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public System.Nullable<_401_UNAUTHORIZEDMessage> Message { get; set; }
		
		/// <summary>
		/// Timestamp of the request
		///
		///  * e.g.: `2019-09-17T03:20:45.737043Z`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Tracking identifier for this error response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum _401_UNAUTHORIZEDCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHORIZED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum _401_UNAUTHORIZEDMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invalid API key")]
		Invalid_API_key = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class _406_NOT_ACCEPTABLE
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<_406_NOT_ACCEPTABLECode> Code { get; set; }
		
		/// <summary>
		/// Describes which in-header parameter was not acceptable to this system; e.g., 'Invalid value for header: exp-api-key'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Timestamp of the request
		///
		///  * e.g.: `2019-09-17T03:20:45.737043Z`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Tracking identifier for this error response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum _406_NOT_ACCEPTABLECode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_HEADER_VALUE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class _500_INTERNAL_SERVER_ERROR
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<_500_INTERNAL_SERVER_ERRORCode> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public System.Nullable<_500_INTERNAL_SERVER_ERRORMessage> Message { get; set; }
		
		/// <summary>
		/// Timestamp of the request
		///
		///  * e.g.: `2019-09-17T03:20:45.737043Z`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Tracking identifier for this error response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum _500_INTERNAL_SERVER_ERRORCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVER_ERROR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum _500_INTERNAL_SERVER_ERRORMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Internal server error")]
		Internal_server_error = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class _503_SERVICE_UNAVAILABLE
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<_503_SERVICE_UNAVAILABLECode> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public System.Nullable<_503_SERVICE_UNAVAILABLEMessage> Message { get; set; }
		
		/// <summary>
		/// Timestamp of the request
		///e.g.: `2019-09-17T03:20:45.737043Z`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Tracking identifier for this error response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingId")]
		public string TrackingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum _503_SERVICE_UNAVAILABLECode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_UNAVAILABLE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum _503_SERVICE_UNAVAILABLEMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Internal server error")]
		Internal_server_error = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelBookingQuoteResponse
	{
		
		/// <summary>
		/// The booking reference number, prepended with `BR-`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingId")]
		public string BookingId { get; set; }
		
		/// <summary>
		/// Details of the refund
		///
		///**Note**: Bookings that have not been confirmed by the supplier and have a status of `"PENDING"` will report an `itemPrice`, `refundAmount` and `refundPercentage` of `0`, as no fees are charged until the booking has been accepted by the supplier and its status is `"CONFIRMED"`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundDetails")]
		public RefundDetails RefundDetails { get; set; }
		
		/// <summary>
		/// String indicating the cancellation status of this itinerary item:
		///
		///  * `CANCELLABLE` - this booking is available to be cancelled
		///  * `CANCELLED` - this booking has already been cancelled
		///  * `NOT_CANCELLABLE` - this booking cannot be cancelled (because the product's operation date is now in the past)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CancelBookingQuoteResponseStatus> Status { get; set; }
	}
	
	/// <summary>
	/// Details of the refund
	///
	///**Note**: Bookings that have not been confirmed by the supplier and have a status of `"PENDING"` will report an `itemPrice`, `refundAmount` and `refundPercentage` of `0`, as no fees are charged until the booking has been accepted by the supplier and its status is `"CONFIRMED"`.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefundDetails
	{
		
		/// <summary>
		/// Three-letter code indicating the currency in which `itemPrice` and `refundAmount` are displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The merchant net price at the time this product was booked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemPrice")]
		public System.Nullable<System.Double> ItemPrice { get; set; }
		
		/// <summary>
		/// Numeric currency amount that will be refunded if this booking is cancelled now
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundAmount")]
		public System.Nullable<System.Double> RefundAmount { get; set; }
		
		/// <summary>
		/// Percentage of the item price that will be refunded if this booking is cancelled now
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundPercentage")]
		public System.Nullable<System.Double> RefundPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelBookingQuoteResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CANCELLABLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelBookingResponse
	{
		
		/// <summary>
		/// Booking reference number for this booking, prepended with `BR-`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingId")]
		public string BookingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<CancelBookingResponseReason> Reason { get; set; }
		
		/// <summary>
		/// String indicating the outcome of the booking cancellation request.
		///
		///  * `ACCEPTED`: The cancellation was successful
		///  * `DECLINED`: The cancellation failed
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<CancelBookingResponseStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelBookingResponseReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_CANCELLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CANCELLABLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelBookingResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECLINED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancellationReason
	{
		
		/// <summary>
		/// Machine-interpretable identification code for this cancellation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellationReasonCode")]
		public string CancellationReasonCode { get; set; }
		
		/// <summary>
		/// Natural-language description of this cancellation reason
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancellationReasonText")]
		public string CancellationReasonText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancellationReasonsResponse
	{
		
		/// <summary>
		/// Array of cancellation reason codes and their asssociated texts for display to the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public CancellationReason[] Reasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancellationRequest
	{
		
		/// <summary>
		/// Machine-interpretable identification code for this cancellation reason, retrieved from [cancellationReasons](#operation/cancellationReasons)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchFreetextResponse
	{
		
		/// <summary>
		/// **indicator** of the entity type for *this* result that is *one of*:
		///  - `"PRODUCT"`: a tour / activity
		///  - `"DESTINATION"`: continent, country, city, region
		///  - `"ATTRACTION"`: an attraction within a destination (only available to partners with SEO access)
		///  - `"RECOMMENDATION"`: an attraction within a destination (only available to partners with SEO access)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchType")]
		public System.Nullable<SearchFreetextResponseSearchType> SearchType { get; set; }
		
		/// <summary>
		/// **sort order** for *this* data object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchFreetextResponseSearchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTRACTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOMMENDATION = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchFreetextResponseAttraction : SearchFreetextResponse
	{
		
		/// <summary>
		/// **object** detailing **an attraction** that matches the search criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SearchFreetextResponseAttractionData Data { get; set; }
	}
	
	public class SearchFreetextResponseAttractionData
	{
		
		/// <summary>
		/// City in which this attraction is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionCity")]
		public System.Nullable<System.Double> AttractionCity { get; set; }
		
		/// <summary>
		/// Latitude of this attraction's location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionLatitude")]
		public System.Nullable<System.Double> AttractionLatitude { get; set; }
		
		/// <summary>
		/// Longitude of this attraction's location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionLongitude")]
		public System.Nullable<System.Double> AttractionLongitude { get; set; }
		
		/// <summary>
		/// State in which this attraction is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionState")]
		public System.Nullable<System.Double> AttractionState { get; set; }
		
		/// <summary>
		/// Street address of this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionStreetAddress")]
		public System.Nullable<System.Double> AttractionStreetAddress { get; set; }
		
		/// <summary>
		/// Description introduction text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionIntro")]
		public string DescriptionIntro { get; set; }
		
		/// <summary>
		/// Description of this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionText")]
		public string DescriptionText { get; set; }
		
		/// <summary>
		/// Destination ID for the destination in which this attraction is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationId")]
		public System.Nullable<System.Int32> DestinationId { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorsPick")]
		public System.Nullable<System.Boolean> EditorsPick { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordCount")]
		public System.Nullable<System.Int32> KeywordCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// HTML-formatted summary overview of this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overviewSummary")]
		public string OverviewSummary { get; set; }
		
		/// <summary>
		/// Language of the natural-language elements in this response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagePrimaryLanguage")]
		public string PagePrimaryLanguage { get; set; }
		
		/// <summary>
		/// Title of page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageTitle")]
		public string PageTitle { get; set; }
		
		/// <summary>
		/// URL path fragment for attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageUrlName")]
		public string PageUrlName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="panoramaCount")]
		public System.Nullable<System.Int32> PanoramaCount { get; set; }
		
		/// <summary>
		/// Number of photos available for this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoCount")]
		public System.Nullable<System.Int32> PhotoCount { get; set; }
		
		/// <summary>
		/// Primary destination ID for the destination in which this attraction is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationId")]
		public System.Nullable<System.Int32> PrimaryDestinationId { get; set; }
		
		/// <summary>
		/// Primary destination ID for the destination in which this attraction is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationName")]
		public string PrimaryDestinationName { get; set; }
		
		/// <summary>
		/// Name of primary destination for this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationUrlName")]
		public string PrimaryDestinationUrlName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCount")]
		public System.Nullable<System.Int32> ProductCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedDate")]
		public string PublishedDate { get; set; }
		
		/// <summary>
		/// Numeric rating for this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// Number of reviews for this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewCount")]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seoId")]
		public System.Nullable<System.Int32> SeoId { get; set; }
		
		/// <summary>
		/// Type of result; i.e. `"ATTRACTION"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seoType")]
		public string SeoType { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showPhotos")]
		public System.Nullable<System.Boolean> ShowPhotos { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showReviews")]
		public System.Nullable<System.Boolean> ShowReviews { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// Tab title for this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tabTitle")]
		public string TabTitle { get; set; }
		
		/// <summary>
		/// URL for high-resolution image for this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailHiResURL")]
		public string ThumbnailHiResURL { get; set; }
		
		/// <summary>
		/// URL for medium-resolution image for this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailURL")]
		public string ThumbnailURL { get; set; }
		
		/// <summary>
		/// Title of this attraction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webURL")]
		public string WebURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchFreetextResponseDestination : SearchFreetextResponse
	{
		
		/// <summary>
		/// **object** detailing **a destination** that matches the search criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SearchFreetextResponseDestinationData Data { get; set; }
	}
	
	public class SearchFreetextResponseDestinationData
	{
		
		/// <summary>
		/// **currency code** for the currency in which pricing is displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCurrencyCode")]
		public string DefaultCurrencyCode { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of the destination
		///- use this value as the `destId` input field for other Viator API services
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationId")]
		public System.Nullable<System.Int32> DestinationId { get; set; }
		
		/// <summary>
		/// **natural-language name** of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationName")]
		public string DestinationName { get; set; }
		
		/// <summary>
		/// **destination type specifier**
		///- `"COUNTRY"`: destination is a country
		///- `"REGION"`: destination is a recognized region of a country, such as a state, island within a country, stretch of coastline, etc.
		///- `"CITY"`: destination is a city
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public System.Nullable<SearchFreetextResponseDestinationDataDestinationType> DestinationType { get; set; }
		
		/// <summary>
		/// ignore - (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationUrlName")]
		public string DestinationUrlName { get; set; }
		
		/// <summary>
		/// **IATA airport code** for the destination
		///- a three-letter code defined by the International Air Transport Association (IATA) used to identify many airports around the world
		///- the IATA code is also known as an 'IATA location identifier', 'IATA station code' or simply a 'location identifier'
		///- the IATA code is &lt;u&gt;not available&lt;/u&gt; for destinations with a destination type of `'COUNTRY'` or `'REGION'`, as there could be more than one airport within a destination
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iataCode")]
		public string IataCode { get; set; }
		
		/// <summary>
		/// **latitude component** of the destination's geolocation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// **longitude component** of the destination's geolocation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// **hierarchy location specifier** for the destination that is a concatenation of all `parentId` and `destinationId` codes
		///- e.g. `'8.77.673'` for Chicago
		///- format: [top level `parentId`].[any additional `parentId`].[`destinationId`]
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookupId")]
		public string LookupId { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of the destination's parent destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int32> ParentId { get; set; }
		
		/// <summary>
		/// ignore - (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectable")]
		public System.Nullable<System.Boolean> Selectable { get; set; }
		
		/// <summary>
		/// **sort order** for this response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// **time zone** of the destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchFreetextResponseDestinationDataDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchFreetextResponseProduct : SearchFreetextResponse
	{
		
		/// <summary>
		/// **object** detailing a **product** that matches the search criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SearchFreetextResponseProductData Data { get; set; }
	}
	
	public class SearchFreetextResponseProductData
	{
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admission")]
		public string Admission { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionLatitude")]
		public string AttractionLatitude { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionLongitude")]
		public string AttractionLongitude { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// **booking type specifier** for *this* product that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
		///
		///*one of* the following:
		///- `"FreesaleBE"` – *this* product will be confirmed immediately and the supplier will be sent a notification
		///- `"UnconditionalBE"` - *this* product will be confirmed immediately and the supplier will not be notified
		///- `"DeferredCRMBE"` - *this* product is an on-request product and will not be confirmed immediately. *this* product will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
		///- `"FreesaleOnRequestBE"` - *this* product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
		///
		///If a booking is made within the on-request period, *this* product will be an on-request product. Once the booking has been made, the `bookingEngineId` will change to either `"FreesaleOnRequestBE:OnRequest"` or `"FreesaleOnRequestBE:Freesold"` depending on the travel date and the on-request period                        
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingEngineId")]
		public System.Nullable<SearchFreetextResponseProductDataBookingEngineId> BookingEngineId { get; set; }
		
		/// <summary>
		/// **list** of unique numeric product category identifiers 
		///- `categoryId` is available for the destination from the [/taxonomy/categories](#operation/taxonomyCategories) service
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catIds")]
		public int[] CatIds { get; set; }
		
		/// <summary>
		/// **unique alphanumeric identifier** of *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// **currency** in which *this* product's pricing is displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **natural-language duration** of *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="essential")]
		public string Essential { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		///
		///For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantCancellable")]
		public System.Nullable<System.Boolean> MerchantCancellable { get; set; }
		
		/// <summary>
		/// Numeric 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee; i.e. the merchant net rate
		///
		///For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantNetPriceFrom")]
		public System.Nullable<System.Double> MerchantNetPriceFrom { get; set; }
		
		/// <summary>
		/// Currency-formatted 'from' (lowest possible) price that Viator will invoice the merchant for the sale of this product, excluding the transaction fee (i.e. the merchant net rate)
		///
		///For more information, see: [Merchant pricing](#section/Key-concepts/Merchant-pricing)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchantNetPriceFromFormatted")]
		public string MerchantNetPriceFromFormatted { get; set; }
		
		/// <summary>
		/// **number** of hours before the travel date that *this* product will be 'on-request' for
		///- this field will contain a value if the `bookingEngineId` is `'FreesaleOnRequestBE'`
		///- an `onRequestPeriod` of 48 hours means that *this* product is freesale up until 48 hours before the travel date, and is on-request for 48 hours or less until the travel date
		///- **note**: 'hours in advance' (the number of hours a product is available for booking before the travel date) may also affect this; however, this value is not available in the API
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onRequestPeriod")]
		public System.Nullable<System.Int32> OnRequestPeriod { get; set; }
		
		/// <summary>
		/// Ignore (Viator only)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onSale")]
		public System.Nullable<System.Boolean> OnSale { get; set; }
		
		/// <summary>
		/// **number** of panoramic images available for *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="panoramaCount")]
		public System.Nullable<System.Int32> PanoramaCount { get; set; }
		
		/// <summary>
		/// **object** detailing product availability
		///- `pas` stands for Product Availability Schema
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pas")]
		public string Pas { get; set; }
		
		/// <summary>
		/// **number** of user photos published for *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoCount")]
		public System.Nullable<System.Int32> PhotoCount { get; set; }
		
		/// <summary>
		/// **suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter. This is the cheapest sell price, taking into consideration off-peak periods and discounts on larger groups.
		///
		///
		///  - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// **currency-formatted suggested sell ('from') price** for this product in the currency set in the `currencyCode` parameter
		///
		///- For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceFormatted")]
		public string PriceFormatted { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of *this* product's primary destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationId")]
		public System.Nullable<System.Int32> PrimaryDestinationId { get; set; }
		
		/// <summary>
		/// **natural-language name** of *this* product's primary destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationName")]
		public string PrimaryDestinationName { get; set; }
		
		/// <summary>
		/// **URL-formatted name** of *this* product's primary destination
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationUrlName")]
		public string PrimaryDestinationUrlName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryGroupId")]
		public string PrimaryGroupId { get; set; }
		
		/// <summary>
		/// **URL-formatted name** of *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productURLName")]
		public string ProductURLName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedDate")]
		public string PublishedDate { get; set; }
		
		/// <summary>
		/// **average user rating** of *this* product
		///
		///users rate products by assigning a star-rating from 1-5; this value shows the average of the star ratings provided by users;
		///
		///the `ratingCounts` associative array in this response provides a breakdown of how many submissions for each star rating have been received
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// **number** of user reviews that have been submitted by users for *this* product
		///
		///If your account has been configured to limit the number of reviews you can receive, this value will never be higher than that. Otherwise, this value will show the total number of reviews available for this product. If there are more than 24 reviews available, you will need to use the [/product/reviews](#operation/productReviews) service to retrieve the remainder of the reviews.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewCount")]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		/// <summary>
		/// **numeric original price** for this product if the product is on special / a discount has been applied. `0` if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrp")]
		public System.Nullable<System.Int32> Rrp { get; set; }
		
		/// <summary>
		/// **currency-formatted original price** for this product if the product is on special / a discount has been applied. Empty string if there is no discount on this product. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrpformatted")]
		public string Rrpformatted { get; set; }
		
		/// <summary>
		/// Ignore (Viator only)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savingAmount")]
		public string SavingAmount { get; set; }
		
		/// <summary>
		/// Ignore (Viator only)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savingAmountFormated")]
		public string SavingAmountFormated { get; set; }
		
		/// <summary>
		/// **natural-language description** (shortened) of *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// **natural-language title** (shortened) of *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortTitle")]
		public string ShortTitle { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if a special offer is available for *this* product. If `true` the `specialOffer` field will contain a text string providing details of the special offer which you may wish to display in your product search results. E.g. 'Book by May 27 to save 34% off our previously offered price!'. See [Special offers and on-sale pricing](#section/Key-concepts/Special-offers-and-on-sale-pricing) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialOfferAvailable")]
		public System.Nullable<System.Boolean> SpecialOfferAvailable { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialReservation")]
		public System.Nullable<System.Boolean> SpecialReservation { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialReservationDetails")]
		public string SpecialReservationDetails { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslSupported")]
		public System.Nullable<System.Boolean> SslSupported { get; set; }
		
		/// <summary>
		/// **list** of unique numeric subcategory identifiers that *this* product falls under
		///- `subcategoryId` is available from [/taxonomy/categories](#operation/taxonomyCategories) service"
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCatIds")]
		public int[] SubCatIds { get; set; }
		
		/// <summary>
		/// **unique identifier** of *this* product's supplier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplierCode")]
		public string SupplierCode { get; set; }
		
		/// <summary>
		/// **natural-language name** of *this* product's supplier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplierName")]
		public string SupplierName { get; set; }
		
		/// <summary>
		/// **high-resolution thumbnail image URL** for *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailHiResURL")]
		public string ThumbnailHiResURL { get; set; }
		
		/// <summary>
		/// **URL** of *this* product's thumbnail image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailURL")]
		public string ThumbnailURL { get; set; }
		
		/// <summary>
		/// **natural-language title** of *this* product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// **numeric indicator** of the language translation level for *this* product that is one of:
		///- `0`: no translation (English only)
		///- `80`: full machine translation
		///- `100`: full human translation
		///
		///See: [Working with human and machine translations](#section/Appendices/Working-with-human-and-machine-translations) for more information
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translationLevel")]
		public TranslationLevel TranslationLevel { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueShortDescription")]
		public string UniqueShortDescription { get; set; }
		
		/// <summary>
		/// ignore (Viator only) – videos are not available to partners
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoCount")]
		public System.Nullable<System.Int32> VideoCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webURL")]
		public string WebURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchFreetextResponseProductDataBookingEngineId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreesaleBE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnconditionalBE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeferredCRMBE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreesaleOnRequestBE = 3,
	}
	
	/// <summary>
	/// **numeric indicator** of the language translation level for *this* product that is one of:
	///- `0`: no translation (English only)
	///- `80`: full machine translation
	///- `100`: full human translation
	///
	///See: [Working with human and machine translations](#section/Appendices/Working-with-human-and-machine-translations) for more information
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TranslationLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_80 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_100 = 100,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchFreetextResponseRecommendation : SearchFreetextResponse
	{
		
		/// <summary>
		/// **object** detailing a **recommendation** that matches the search criteria
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SearchFreetextResponseRecommendationData Data { get; set; }
	}
	
	public class SearchFreetextResponseRecommendationData
	{
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionCity")]
		public string AttractionCity { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionLatitude")]
		public System.Nullable<System.Double> AttractionLatitude { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionLongitude")]
		public System.Nullable<System.Double> AttractionLongitude { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionState")]
		public string AttractionState { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attractionStreetAddress")]
		public string AttractionStreetAddress { get; set; }
		
		/// <summary>
		/// Introductory text for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionIntro")]
		public string DescriptionIntro { get; set; }
		
		/// <summary>
		/// Text for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionText")]
		public string DescriptionText { get; set; }
		
		/// <summary>
		/// Destination Id for the destination of this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationId")]
		public System.Nullable<System.Int32> DestinationId { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorsPick")]
		public System.Nullable<System.Boolean> EditorsPick { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordCount")]
		public System.Nullable<System.Int32> KeywordCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// HTML-formatted overview of recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overviewSummary")]
		public string OverviewSummary { get; set; }
		
		/// <summary>
		/// language for the natural-language text in this response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pagePrimaryLanguage")]
		public string PagePrimaryLanguage { get; set; }
		
		/// <summary>
		/// Title of this page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageTitle")]
		public string PageTitle { get; set; }
		
		/// <summary>
		/// URL path fragment for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageUrlName")]
		public string PageUrlName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="panoramaCount")]
		public System.Nullable<System.Int32> PanoramaCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoCount")]
		public System.Nullable<System.Int32> PhotoCount { get; set; }
		
		/// <summary>
		/// Destination Id for the primary destination of this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationId")]
		public System.Nullable<System.Int32> PrimaryDestinationId { get; set; }
		
		/// <summary>
		/// Name of primary destination for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationName")]
		public string PrimaryDestinationName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDestinationUrlName")]
		public string PrimaryDestinationUrlName { get; set; }
		
		/// <summary>
		/// Number of products that this recommendation refers to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCount")]
		public System.Nullable<System.Int32> ProductCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedDate")]
		public string PublishedDate { get; set; }
		
		/// <summary>
		/// Numeric average rating for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Double> Rating { get; set; }
		
		/// <summary>
		/// number of reviews for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewCount")]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seoId")]
		public System.Nullable<System.Int32> SeoId { get; set; }
		
		/// <summary>
		/// Type of response; i.e. `"RECOMMENDATION"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seoType")]
		public string SeoType { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showPhotos")]
		public System.Nullable<System.Boolean> ShowPhotos { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showReviews")]
		public System.Nullable<System.Boolean> ShowReviews { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// Tab-title for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tabTitle")]
		public string TabTitle { get; set; }
		
		/// <summary>
		/// URL for the high-resolution image for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailHiResURL")]
		public string ThumbnailHiResURL { get; set; }
		
		/// <summary>
		/// URL for medium-resolution image for this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailURL")]
		public string ThumbnailURL { get; set; }
		
		/// <summary>
		/// Title of this recommendation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webURL")]
		public string WebURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicErrorModel
	{
		
		/// <summary>
		/// **timestamp** of *this* response
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateStamp")]
		public string DateStamp { get; set; }
		
		/// <summary>
		/// **array** of error codes pertaining to *this* error
		///- See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCodes")]
		public string[] ErrorCodes { get; set; }
		
		/// <summary>
		/// **array** of error message strings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string[] ErrorMessage { get; set; }
		
		/// <summary>
		/// **array** of error message strings in plain text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessageText")]
		public string ErrorMessageText { get; set; }
		
		/// <summary>
		/// **name** of *this* type of error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorName")]
		public string ErrorName { get; set; }
		
		/// <summary>
		/// **reference number** of *this* error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorReference")]
		public string ErrorReference { get; set; }
		
		/// <summary>
		/// **code** specifying the type of error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public string ErrorType { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraInfo")]
		public string ExtraInfo { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraObject")]
		public string ExtraObject { get; set; }
		
		/// <summary>
		/// **boolean indicator** of *this* request's outcome
		///- `true`: the request was successful with no errors
		///- `false`: an error was encountered
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		/// <summary>
		/// **number** of results available for *this* service
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// **unique numeric id** of the server that processed *this* request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmid")]
		public string Vmid { get; set; }
	}
	
	/// <summary>
	/// **booking type specifier** for *this* product that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
	///
	///*one of* the following:
	///- `"FreesaleBE"` – *this* product will be confirmed immediately and the supplier will be sent a notification
	///- `"UnconditionalBE"` - *this* product will be confirmed immediately and the supplier will not be notified
	///- `"DeferredCRMBE"` - *this* product is an on-request product and will not be confirmed immediately. *this* product will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
	///- `"FreesaleOnRequestBE"` - *this* product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
	///
	///If a booking is made within the on-request period, *this* product will be an on-request product. Once the booking has been made, the `bookingEngineId` will change to either `"FreesaleOnRequestBE:OnRequest"` or `"FreesaleOnRequestBE:Freesold"` depending on the travel date and the on-request period                        
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BookingEngineId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreesaleBE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnconditionalBE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeferredCRMBE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreesaleOnRequestBE = 3,
	}
	
	/// <summary>
	/// [booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
	///
	///*one of* the following:
	///- `"UF"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
	///- `"OR"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
	///- `"FO"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BookingEngineId_response
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FO = 2,
	}
	
	/// <summary>
	/// **object** containing item booking status information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BookingStatus_item
	{
		
		/// <summary>
		/// **indicator**: `true` if *this* item's booking has been amended
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amended")]
		public System.Nullable<System.Boolean> Amended { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* item's booking has been cancelled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelled")]
		public System.Nullable<System.Boolean> Cancelled { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* item's booking is confirmed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Boolean> Confirmed { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* item's booking has failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Boolean> Failed { get; set; }
		
		/// <summary>
		/// **level** of *this* item's booking status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<BookingStatus_itemLevel> Level { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* item's booking is pending
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public System.Nullable<System.Boolean> Pending { get; set; }
		
		/// <summary>
		/// **numeric identifier** of *this* item's booking status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// **natural-language description** of *this* item's booking status; e.g., 'Waiting to be booked'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// **specifier** of *this* item's booking status
		///* See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BookingStatus_itemType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BookingStatus_itemLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITINERARY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BookingStatus_itemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMENDED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_AMEND = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_HOLD = 10,
	}
	
	/// <summary>
	/// **object** containing itinerary booking status information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BookingStatus_itinerary
	{
		
		/// <summary>
		/// **indicator**: `true` if *this* itinerary's booking has been amended
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amended")]
		public System.Nullable<System.Boolean> Amended { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* itinerary's booking has been cancelled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelled")]
		public System.Nullable<System.Boolean> Cancelled { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* itinerary's booking is confirmed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Boolean> Confirmed { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* itinerary's booking has failed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Boolean> Failed { get; set; }
		
		/// <summary>
		/// **level** of *this* itinerary's booking status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public BookingStatus_itemLevel Level { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* itinerary's booking is pending
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public System.Nullable<System.Boolean> Pending { get; set; }
		
		/// <summary>
		/// **numeric identifier** of *this* itinerary's booking status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// **natural-language description** of *this* itinerary's booking status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// **specifier** of *this* itinerary's booking status
		///* See: [bookingStatus fields and meanings](#section/Appendices/bookingStatus-field-values-and-meanings)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BookingStatus_itineraryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BookingStatus_itineraryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMENDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_AMEND = 6,
	}
	
	/// <summary>
	/// **destination type specifier**
	///- `"COUNTRY"`: destination is a country
	///- `"REGION"`: destination is a recognized region of a country, such as a state, island within a country, stretch of coastline, etc.
	///- `"CITY"`: destination is a city
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGION = 2,
	}
	
	/// <summary>
	/// **object** detailing a single photo from a user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhotoObject
	{
		
		/// <summary>
		/// **HTML-formatted caption** for *this* photograph
		///- may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if *this* photograph has been tagged as an *editor's pick*; i.e., can be given preference for display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editorsPick")]
		public System.Nullable<System.Boolean> EditorsPick { get; set; }
		
		/// <summary>
		/// **URL** for the avatar image of the user that submitted *this* photograph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerAvatarURL")]
		public string OwnerAvatarURL { get; set; }
		
		/// <summary>
		/// **country** in which the owner of *this* photograph is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerCountry")]
		public string OwnerCountry { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of the user that owns the photograph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public System.Nullable<System.Int32> OwnerId { get; set; }
		
		/// <summary>
		/// **handle** of the user that submitted *this* photograph; e.g., 'Husker1k'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerName")]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// **URL** of the high-resolution version of *this* photograph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoHiResURL")]
		public string PhotoHiResURL { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of *this* photograph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoId")]
		public System.Nullable<System.Int32> PhotoId { get; set; }
		
		/// <summary>
		/// **URL** of the medium-resolution version of *this* photograph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoMediumResURL")]
		public string PhotoMediumResURL { get; set; }
		
		/// <summary>
		/// **URL** for the standard-resolution version of *this* photograph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoURL")]
		public string PhotoURL { get; set; }
		
		/// <summary>
		/// **product code** for the product that *this* photograph is of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// **natural-language title** of the product associated with *this* photograph; e.g., 'Sydney and Bondi Hop-on Hop-off Tour'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTitle")]
		public string ProductTitle { get; set; }
		
		/// <summary>
		/// **URL-formatted title** of the product associated with *this* photograph; e.g., `Sydney-and-Bondi-Hop-on-Hop-off-Tour`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productUrlName")]
		public string ProductUrlName { get; set; }
		
		/// <summary>
		/// **sort order** for *this* photograph; e.g., `3`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslSupported")]
		public System.Nullable<System.Boolean> SslSupported { get; set; }
		
		/// <summary>
		/// **URL** of *this* product's thumbnail image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailURL")]
		public string ThumbnailURL { get; set; }
		
		/// <summary>
		/// **date** on which *this* photograph was submitted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeUploaded")]
		public string TimeUploaded { get; set; }
		
		/// <summary>
		/// **title** of *this* photograph
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// **dictionary** of rating (stars) to number of reviews with each rating for *this* product"
	///
	///users rate products by assigning a star-rating from 1-5; these values show the total number of reviews for each of the star ratings (up to a maximum given in the `reviewCount` field in this response)
	///
	///- **note**: see response sample for structure
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RatingCounts
	{
		
		/// <summary>
		/// Number of reviews with a one star rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="1")]
		public System.Nullable<System.Double> _1 { get; set; }
		
		/// <summary>
		/// Number of reviews with a two star rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="2")]
		public System.Nullable<System.Double> _2 { get; set; }
		
		/// <summary>
		/// Number of reviews with a three star rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="3")]
		public System.Nullable<System.Double> _3 { get; set; }
		
		/// <summary>
		/// Number of reviews with a four star rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="4")]
		public System.Nullable<System.Double> _4 { get; set; }
		
		/// <summary>
		/// Number of reviews with a five star rating
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="5")]
		public System.Nullable<System.Double> _5 { get; set; }
	}
	
	/// <summary>
	/// **object** containing a single user review
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewObject
	{
		
		/// <summary>
		/// **URL** of the reviewer's avatar image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerAvatarURL")]
		public string OwnerAvatarURL { get; set; }
		
		/// <summary>
		/// **country** in which the reviewer is located
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerCountry")]
		public string OwnerCountry { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of the user that submitted *this* review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public System.Nullable<System.Int32> OwnerId { get; set; }
		
		/// <summary>
		/// **name** of the user that submitted *this* review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerName")]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// **product code** of the product that *this* review is about; e.g., `5010SYDNEY`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// **title** of the product that *this* review is about
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productTitle")]
		public string ProductTitle { get; set; }
		
		/// <summary>
		/// **URL-formatted title** of the product that *this* review is about
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productUrlName")]
		public string ProductUrlName { get; set; }
		
		/// <summary>
		/// **date** that *this* review was published
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedDate")]
		public string PublishedDate { get; set; }
		
		/// <summary>
		/// **rating** given by the reviewer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Int32> Rating { get; set; }
		
		/// <summary>
		/// **HTML-formatted content** of the review
		///- may contain basic HTML mark-up - e.g., br, li, b, u, p, i, ul and ol
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="review")]
		public string Review { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of *this* review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewId")]
		public System.Nullable<System.Int32> ReviewId { get; set; }
		
		/// <summary>
		/// **sort order** for *this* review
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslSupported")]
		public System.Nullable<System.Boolean> SslSupported { get; set; }
		
		/// <summary>
		/// **date** that *this* review was submitted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submissionDate")]
		public string SubmissionDate { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viatorFeedback")]
		public string ViatorFeedback { get; set; }
		
		/// <summary>
		/// ignore (Viator only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viatorNotes")]
		public string ViatorNotes { get; set; }
	}
	
	/// <summary>
	/// **sort order** in which to return the results that is *one of*:
	///
	///  - `'TOP_SELLERS'`: the top sellers
	///  - `'REVIEW_AVG_RATING_A'`: ascending by average traveler rating (low -&gt; high)
	///  - `'REVIEW_AVG_RATING_D'`: descending by average traveler rating (high -&gt; low)
	///  - `'PRICE_FROM_A'`: ascending by price (low -&gt; high)
	///  - `'PRICE_FROM_D'`: descending by price (high -&gt; low)
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_SELLERS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_AVG_RATING_A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_AVG_RATING_D = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_FROM_A = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICE_FROM_D = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// /available/products
		/// Find products that are available
		/// 
		/// This endpoint returns available products filtered by product code, date range or number of adult travelers
		/// 
		/// 
		/// - **Note**: Availability data is limited to a period of **12 months** into the future from the present time on the production server and **6 months** on the sandbox server.
		/// 
		/// 
		/// AvailableProducts available/products
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> AvailableProductsAsync(AvailableProductsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "available/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/availability
		/// Get the tour-grade with the lowest price that is available for a product on each day of the specified month
		/// 
		/// This service:
		/// - returns
		/// - useful when displaying a calendar of available tours
		/// - For more information, see: [Availability services](#section/Key-concepts/Availability-services)
		/// - **Notes:**
		/// - [/booking/availability/dates](#operation/bookingAvailabilityDates) provides all availability in one call and is more suitable for calendars, etc.
		/// 
		/// - Availability data is limited to a period of **12 months** into the future from the present time on the production server and **6 months** on the sandbox server.
		/// 
		/// BookingAvailability booking/availability
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingAvailabilityAsync(BookingAvailabilityPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/availability";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/availability/dates
		/// Get dates on which a product is available
		/// 
		/// This service:
		/// - retrieves all available dates for a product, excluding days it does not operate and blocked-out dates
		/// - returns a multi-dimensional array of year-month -&gt; days that have any availabile tour grade or traveler mix
		/// - useful to present the user with a list of dates for selection on which *this* product is available for booking
		/// - **Notes**:
		/// 
		/// - The user's desired traveler mix may not be eligible for booking; these details can be displayed when you retrieve its list of tour grades
		/// - Availability data is limited to a period of **12 months** into the future from the present time on the production server and **6 months** on the sandbox server.
		/// 
		/// BookingAvailabilityDates booking/availability/dates
		/// </summary>
		/// <param name="productCode">**unique alphanumeric identifier** of the product</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingAvailabilityDatesAsync(string productCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/availability/dates?productCode=" + (productCode==null? "" : System.Uri.EscapeDataString(productCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/availability/tourgrades
		/// Get the tour grades of a product that are currently available
		/// 
		/// This service reports:
		/// - all tour grades for the specified product, on the specified day, that are available for the specified age bands
		/// - the pricing breakdown and the total depending on the travel date and traveler mix
		/// 
		/// **Note**: Availability data is limited to a period of **12 months** into the future from the present time on the production server and **6 months** on the sandbox server.
		/// 
		/// BookingAvailabilityTourgrades booking/availability/tourgrades
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingAvailabilityTourgradesAsync(BookingAvailabilityTourgradesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/availability/tourgrades";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/availability/tourgrades/pricingmatrix
		/// Get a pricing matrix that includes availability and tour-grades for a product
		/// 
		/// Given a month, this service returns days with available tour grades only (i.e., days which have at least one tourgrade available), and the pricing matrix for that tour grade for that day.
		/// 
		/// - **Note**: Availability data is limited to a period of **12 months** into the future from the present time on the production server and **6 months** on the sandbox server.
		/// 
		/// BookingAvailabilityTourgradesPricingmatrix booking/availability/tourgrades/pricingmatrix
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingAvailabilityTourgradesPricingmatrixAsync(BookingAvailabilityTourgradesPricingmatrixPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/availability/tourgrades/pricingmatrix";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/book
		/// Make a booking
		/// 
		/// For more information, see:
		/// 
		/// - [Cancellation policy](#section/Key-concepts/Cancellation-policy)
		/// - [Booking concepts](#section/Key-concepts/Booking-concepts)
		/// - [Booking process flow](#section/Common-workflows-and-data-validation/Booking-process-flow)
		/// - [Making a booking](#section/Common-workflows-and-data-validation/Making-a-booking)
		/// - [Supplier communications](#section/Key-concepts/Supplier-communications)
		/// 
		/// BookingBook booking/book
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingBookAsync(BookingBookPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/book";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/calculateprice
		/// Confirm the price of a tour / activity prior to booking
		/// 
		/// For more information, see: [Calculating prices](#section/Common-workflows-and-data-validation/Calculating-prices)
		/// 
		/// - **Note**: Availability and pricing data is limited to a period of **six months** into the future from the present time
		/// 
		/// BookingCalculateprice booking/calculateprice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingCalculatepriceAsync(BookingCalculatepricePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/calculateprice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/hotels
		/// Get hotel pick-ups
		/// Lists the hotel pickups available for either a product or a destination
		/// 
		/// BookingHotels booking/hotels
		/// </summary>
		/// <param name="productCode">**unique alphanumeric identifier** of the product</param>
		/// <param name="destId">**unique numeric identifier** of the destination</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingHotelsAsync(string productCode, int destId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/hotels?productCode=" + (productCode==null? "" : System.Uri.EscapeDataString(productCode))+"&destId="+destId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/mybookings
		/// Get a user's bookings with travel dates in the future.
		/// 
		/// This service can also be used to check the status of a booking.
		/// 
		/// **Provide either:**
		/// - A `voucherKey`, **or...**
		/// - An email address (`email`) and a booking reference (`itineraryOrItemId`) ([Booking Reference](#section/Key-concepts/Booking-references))
		/// 
		/// BookingMybookings booking/mybookings
		/// </summary>
		/// <param name="voucherKey">**voucher key** for the booking</param>
		/// <param name="email">**email address** of the booker for the booking</param>
		/// <param name="itineraryOrItemId">The booking reference number of the item
		///- **Note**: For more information, see [Booking references](#section/Key-concepts/Booking-references)
		///</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingMybookingsAsync(string voucherKey, string email, string itineraryOrItemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/mybookings?voucherKey=" + (voucherKey==null? "" : System.Uri.EscapeDataString(voucherKey))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&itineraryOrItemId=" + (itineraryOrItemId==null? "" : System.Uri.EscapeDataString(itineraryOrItemId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/pastbooking
		/// Get the details of a single specific past booking based on the `voucherKey` or `itemId` and email address sent in the request.
		/// 
		/// **Note**: this service will only return past bookings that were made with the same API key that was used to make the booking
		/// 
		/// **Sample query parameters**:
		/// - email=apitest@viator.com&amp;itemId=580669678
		/// 
		/// **or**
		/// - voucherKey=1005851866:4af44c13ecf3f1a7d3f9ef2fc00c2257e08fa42ae20f877f3039ff9b52aba24e:580669678
		/// 
		/// **email**
		/// - The email address passed must match the email address associated with the booking
		/// 
		/// **Departure details**
		/// 
		/// - Departure details such as the `departurePoint`, `departurePointAddress` and `departurePointDirections` is included in the response.
		/// - These fields may contain HTML escape characters such as &amp;amp; and special characters that are escaped by a backslash. Ensure that these fields are parsed after receiving the response as it will cause your JSON to be invalid.
		/// 
		/// For more information, see: [Reviewing bookings](#section/Common-workflows-and-data-validation/Reviewing-bookings)
		/// 
		/// BookingPastbooking booking/pastbooking
		/// </summary>
		/// <param name="voucherKey">**specifier** of past booking type (use *one* of: `itemId` (booking reference) *and* `'voucherKey'` *or* `'email'`)</param>
		/// <param name="email">**email address** by which to search for past bookings</param>
		/// <param name="itemId">Search for a booking with this **unique booking-reference number**. See [Booking references](#section/Key-concepts/Booking-references) for more information.
		///</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingPastbookingAsync(string voucherKey, string email, string itemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/pastbooking?voucherKey=" + (voucherKey==null? "" : System.Uri.EscapeDataString(voucherKey))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&itemId=" + (itemId==null? "" : System.Uri.EscapeDataString(itemId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/pricingmatrix
		/// Get the pricing matrix for tour-grades, product age bands and pax mixes
		/// 
		/// For more information, see: [Get the tour-grade pricing matrix](#section/Common-workflows-and-data-validation/Get-the-tour-grade-pricing-matrix)
		/// 
		/// BookingPricingmatrix booking/pricingmatrix
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingPricingmatrixAsync(BookingPricingmatrixPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/pricingmatrix";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/status
		/// Get the booking status for multiple items based on different criteria
		/// 
		/// This service:
		/// - is ideally be used in software for bulk updates of pending bookings
		/// - returns a maximum of 1000 bookings (narrow your search if you expect a greater number of results)
		/// - will return &lt;u&gt;both&lt;/u&gt; live &lt;u&gt;and&lt;/u&gt; test bookings
		/// - rate limited to &lt;u&gt;one request every 30 minutes&lt;/u&gt;
		/// - For more information, see: [Get the bookiing status for multiple items](#section/Common-workflows-and-data-validation/Get-the-booking-status-for-multiple-items)
		/// 
		/// **Exceeding the rate limit**
		/// - You will receive the following error message if you exceed the rate limit allowed for this service. Set `test` to `true` to bypass this limit:
		/// ```javascript
		/// {
		/// "data": null
		/// "vmid": 221002
		/// "errorMessage": ["Access allowed every 30 minutes"]
		/// "errorType": "EXCEPTION"
		/// "dateStamp": "2013-03-26T10:28:51+0000"
		/// "errorReference": 55315512721712161381352771
		/// "errorMessageText": ["Access allowed every 30 minutes"]
		/// "success": false
		/// "totalCount": 1
		/// "errorName": "PollingDeniedException"
		/// }
		/// ```
		/// 
		/// BookingStatus booking/status
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingStatusAsync(BookingStatusPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/status/items
		/// Get brief booking statuses
		/// 
		/// This service is similar to [/booking/status](#operation/bookingStatus) in that it:
		/// - retrieves the booking status for multiple items based on different criteria
		/// - has the same request parameters as [/booking/status](#operation/bookingStatus)
		/// 
		/// However, it differs in that it returns a multi-item array of booking items with less detail than what would be received from [/booking/status](#operation/bookingStatus).
		/// 
		/// BookingStatusItems booking/status/items
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingStatusItemsAsync(BookingStatusItemsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/status/items";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /booking/voucher
		/// Get voucher details
		/// - Use this service to retrieve the voucher details of a booked item.
		/// - The data returned is HTML-formatted and can be wrapped in a header and/or footer.
		/// 
		/// **Sample query parameters**
		/// - leadLastName=Simpson test&amp;itemId=580669678
		/// 
		/// **or**
		/// - voucherKey=1005851866:4af44c13ecf3f1a7d3f9ef2fc00c2257e08fa42ae20f877f3039ff9b52aba24e:580669678&amp;fullHTML=true&amp;mobileVoucher=true
		/// 
		/// BookingVoucher booking/voucher
		/// </summary>
		/// <param name="leadLastName">**surname** of *this* lead traveler</param>
		/// <param name="itemId">Booking-reference number generated by Viator
		///
		///  - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
		///</param>
		/// <param name="embeddedResources">ignore (Viator only)</param>
		/// <param name="voucherKey">**identifier** for the voucher
		///- **note**: use &lt;u&gt;either&lt;/u&gt; `voucherKey` &lt;u&gt;or&lt;/u&gt; the three separate parameters
		///- if `voucherKey` is provided as well as the other parameters, then `voucherKey` overrides the other paramaters
		///- `voucherKey` is obtained from [/booking/mybookings](#operation/bookingMybookings) or in the response from [/booking/book](#operation/bookingBook) when you make a booking
		///</param>
		/// <param name="fullHTML">**specifier**:
		///- set to `true` if you wish to retrieve the full HTML-formatted voucher
		///- set to `false` if you want the div fragment (optional)
		///</param>
		/// <param name="mobileVoucher">**specifier**: 
		///- if set to `true`, the service returns the mobile (cut down) HTML-formatted voucher
		///- if `false` the full voucher HTML is returned (ignoring `fullHTML`)
		///- default: `true` 
		///- this field should only be enabled for products that have a `voucherOption` of `'VOUCHER_E'`
		///- do not enable `mobileVouchers` for paper vouchers (`voucherOption` of `'VOUCHER_PAPER_ONLY'`) as no barcode is returned
		///- the voucher information is available in the response from [/product](#operation/product), [/booking/book](#operation/bookingBook), [/booking/pastbooking](#operation/bookingPastbooking), [/booking/mybookings](#operation/bookingMybookings) (it is also displayed under the 'Redemption Info' heading in this service)
		///</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> BookingVoucherAsync(string leadLastName, int itemId, bool embeddedResources, string voucherKey, bool fullHTML, bool mobileVoucher, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "booking/voucher?leadLastName=" + (leadLastName==null? "" : System.Uri.EscapeDataString(leadLastName))+"&itemId="+itemId+"&embeddedResources="+embeddedResources+"&voucherKey=" + (voucherKey==null? "" : System.Uri.EscapeDataString(voucherKey))+"&fullHTML="+fullHTML+"&mobileVoucher="+mobileVoucher;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /bookings/cancel-reasons
		/// Retrieves a dictionary of unique identification codes (`cancellationReasonCode`) and their associated natural-language descriptions (`cancellationReasonText`).
		/// 
		/// For information on how to use this service, see: [Cancellation API workflow](#section/Common-workflows-and-data-validation/Cancellation-API-workflow)
		/// 
		/// **Note**:
		/// 
		/// * This service &lt;u&gt;requires&lt;/u&gt; [exp-api-key](#section/Authentication/exp-api-key) to be included as a header parameter. Please speak to your account manager if you have not yet been issued an exp-api-key.
		/// * The base URL for the server for this endpoint is different from the older endpoints described in this document. Use `https://api.sandbox.viator.com/partner/cancel-reasons`
		/// 
		/// CancellationReasons bookings/cancel-reasons
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancellationReasonsResponse[]> CancellationReasonsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bookings/cancel-reasons";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CancellationReasonsResponse[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /bookings/{booking-reference}/cancel
		/// Submits a cancellation request for the specified booking
		/// 
		/// For information on how to use this service, see: [Cancellation API workflow](#section/Common-workflows-and-data-validation/Cancellation-API-workflow)
		/// 
		/// **Note**:
		/// 
		/// * This service &lt;u&gt;requires&lt;/u&gt; [exp-api-key](#section/Authentication/exp-api-key) to be included as a header parameter. Please speak to your account manager if you have not yet been issued an exp-api-key.
		/// * The base URL for the server for this endpoint is different from the older endpoints described in this document. Use `https://api.sandbox.viator.com/partner/bookings/{booking-reference}/cancel`
		/// 
		/// CancelBooking bookings/{booking_reference}/cancel
		/// </summary>
		/// <param name="booking_reference">The ID of the booking</param>
		/// <returns>Success</returns>
		public async Task<CancelBookingResponse> CancelBookingAsync(string booking_reference, CancellationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bookings/{booking_reference}/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CancelBookingResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /bookings/{booking-reference}/cancel-quote
		/// Retrieves a quote for the cancellation of a booking
		/// 
		/// For information on how to use this service, see: [Cancellation API workflow](#section/Common-workflows-and-data-validation/Cancellation-API-workflow)
		/// 
		/// **Note**:
		/// 
		/// * This service &lt;u&gt;requires&lt;/u&gt; [exp-api-key](#section/Authentication/exp-api-key) to be included as a header parameter. Please speak to your account manager if you have not yet been issued an exp-api-key.
		/// * The base URL for the server for this endpoint is different from the older endpoints described in this document. Use `https://api.sandbox.viator.com/partner/bookings/{booking-reference}/cancel-quote`
		/// 
		/// CancelBookingQuote bookings/{booking_reference}/cancel-quote
		/// </summary>
		/// <param name="booking_reference">Unique numeric identifier of the booking for which to retrieve a cancellation quote</param>
		/// <returns>Success</returns>
		public async Task<CancelBookingQuoteResponse> CancelBookingQuoteAsync(string booking_reference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bookings/{booking_reference}/cancel-quote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CancelBookingQuoteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /health/check
		/// Health check
		/// Use this service to determine whether the Viator API is presently online and that your API key is valid. You should receive a response identical to the example shown. If you have not yet received an API key, please request one from your business development partner. If you have not yet signed up as a Viator merchant partner and would like to, please visit our [distribution partner website](https://www.viator.com/distribution-partners?mcid=58463#api-solutions)."
		/// 
		/// HealthCheck health/check
		/// </summary>
		/// <returns>Success</returns>
		public async Task<HealthCheckReturn> HealthCheckAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health/check";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HealthCheckReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /merchant/cancellation
		/// Cancel a booking
		/// **Note**: This service has been replaced by the [cancellationReasons](#operation/cancellationReasons), [bookingQuote](#operation/bookingQuote) and [cancelBooking](#operation/cancelBooking) endpoints
		/// 
		/// MerchantCancellation merchant/cancellation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> MerchantCancellationAsync(MerchantCancellationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "merchant/cancellation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /product
		/// Get product information
		/// This service provides all product details required for a product display page, as well as information required for price checks and booking, such as:
		/// - age bands
		/// - tour grades
		/// - language options
		/// - booking questions
		/// - hotel pickup flags
		/// 
		/// **currencyCode (in query):**
		/// - use this parameter to specify the currency in which product pricing should be displayed
		/// - the default currency is the currency of your account; or, if you have multi-currency enabled, US dollars
		/// - "multi-currency" allows pricing and booking in various currencies - please speak to the business development team if you'd like this enabled
		/// - **Note**: you will be billed in the currency in which the booking was made
		/// 
		/// **Product photos**
		/// 
		/// &lt;mark&gt;**&lt;u&gt;Update 13 Feb 2020&lt;/u&gt;**: All supplier-provided photos for the selected product are now available in the `productPhotos` array in this endpoint's response. Previously, only two supplier-provided photos were available – one in the `productPhotos` array and one in `thumbnailHiResURL`. &lt;/mark&gt;
		/// 
		/// **Videos**
		/// 
		/// - Videos are no longer provided via this API
		/// 
		/// Product product
		/// </summary>
		/// <param name="currencyCode">**currency code** for the currency in which pricing is displayed
		///- default=`'USD'`
		///</param>
		/// <param name="sortOrder">**specifier** of the order in which to return reviews
		///
		///Sort order options:
		///
		///  - `"REVIEW_RATING_A"`: Traveler Rating (low→high) Average
		///  - `"REVIEW_RATING_D"`: Traveler Rating (high→low) Average
		///  - `"REVIEW_RATING_SUBMISSION_DATE_D"`: Most recent review
		///</param>
		/// <param name="voucherOption">- `"VOUCHER_PAPER_ONLY"`: Paper Vouchers only accepted
		///- `"VOUCHER_E"`: EVouchers + Paper Vouchers accepted
		///</param>
		/// <param name="code">**unique alphanumeric identifier** of the product</param>
		/// <param name="showUnavailable">**specifier** as to whether or not to show 'unavailable' products:
		///
		///  - `true`: return *both* available and unavailable products
		///  - `false`: return *only* available products (default)
		///</param>
		/// <param name="excludeTourGradeAvailability">**specifier:** 
		///- `true`: return **all** tour grades, including those that are not available
		///- `false`: only display tour grades that *are* available
		///</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> ProductAsync(string currencyCode, ProductSortOrder sortOrder, ProductVoucherOption voucherOption, string code, bool showUnavailable, bool excludeTourGradeAvailability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product?currencyCode=" + (currencyCode==null? "" : System.Uri.EscapeDataString(currencyCode))+"&sortOrder=" + sortOrder+"&voucherOption=" + voucherOption+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&showUnavailable="+showUnavailable+"&excludeTourGradeAvailability="+excludeTourGradeAvailability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /product/photos
		/// Get photos of a product submitted by users
		/// ProductPhotos product/photos
		/// </summary>
		/// <param name="topX">**start and end rows** to return in the format {start}-{end}
		///- e.g. `'1-10'`, `'11-20'`
		///
		///**Note**: 
		///- the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
		///- if `topX` is not specified, the default is `'1-100'`
		///</param>
		/// <param name="code">**unique alphanumeric identifier** of the product</param>
		/// <param name="showUnavailable">**specifier** as to whether or not to show 'unavailable' products:
		///
		///  - `true`: return *both* available and unavailable products
		///  - `false`: return *only* available products (default)
		///</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> ProductPhotosAsync(string topX, string code, bool showUnavailable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product/photos?topX=" + (topX==null? "" : System.Uri.EscapeDataString(topX))+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&showUnavailable="+showUnavailable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /product/reviews
		/// Get user-submitted reviews of a product
		/// 
		/// **Note**:
		/// - The number of reviews that you can obtain via this service will depend on whether your account is limited in terms of the number of reviews you are entitled to receive.
		/// - The number of reviews available through this service is given in the `reviewCount` element in the response from [/product](#operation/product)
		/// - Please speak to your account manager if you wish to receive more reviews. If your account is not limited, you will be able to receive all available reviews for this product.
		/// - Only reviews in the language specified in the Accept-Language request header will be returned
		/// 
		/// **Example:** "Get the first three reviews for product `5010SYDNEY` sorted by rating in ascending order":
		/// 
		/// ```javascript
		/// https://viatorapi.sandbox.viator.com/service/product/reviews?sortOrder=REVIEW_RATING_A&amp;topX=1-3&amp;code=5010SYDNEY&amp;showUnavailable=false
		/// ```
		/// 
		/// ProductReviews product/reviews
		/// </summary>
		/// <param name="sortOrder">**specifier** of the order in which to return reviews
		///
		///Sort order options:
		///
		///  - `"REVIEW_RATING_A"`: Traveler Rating (low→high) Average
		///  - `"REVIEW_RATING_D"`: Traveler Rating (high→low) Average
		///  - `"REVIEW_RATING_SUBMISSION_DATE_D"`: Most recent review
		///</param>
		/// <param name="topX">**start and end rows** to return in the format {start}-{end}
		///- e.g. `'1-10'`, `'11-20'`
		///
		///**Note**: 
		///- the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
		///- if `topX` is not specified, the default is `'1-100'`
		///</param>
		/// <param name="code">**unique alphanumeric identifier** of the product</param>
		/// <param name="showUnavailable">**specifier** as to whether or not to show 'unavailable' products:
		///
		///  - `true`: return *both* available and unavailable products
		///  - `false`: return *only* available products (default)
		///</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> ProductReviewsAsync(ProductSortOrder sortOrder, string topX, string code, bool showUnavailable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product/reviews?sortOrder=" + sortOrder+"&topX=" + (topX==null? "" : System.Uri.EscapeDataString(topX))+"&code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&showUnavailable="+showUnavailable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /search/freetext
		/// Free text search
		/// - This service provides a **free text search across all products and destinations**
		/// - The `text` parameter is required
		/// - **Note:** results include a type indicator (`type`) that you can use to display each result appropriately based on its content
		/// 
		/// SearchFreetext search/freetext
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> SearchFreetextAsync(SearchFreetextPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/freetext";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /search/products
		/// Search for products
		/// This service is used to search for products based on various criteria; such as:
		/// * the destination (locale) in which it operates
		/// * its association with a tourist attraction
		/// * its category and/or subcategory
		/// * the time period during which it operates
		/// The fields you include in the request body for this service determine the kind of search that will be performed.
		/// 
		/// **&lt;u&gt;Note&lt;/u&gt;**:
		/// 
		/// * You can search **EITHER** by destination (`destId`) **OR** by attraction-link (`seoId`), but not both.
		/// * The destination identifier (`destId`) can be retrieved from the [/taxonomy/destinations](#operation/taxonomyDestinations) service.
		/// * The category (`catId`) and subcategory (`subCatId`) identifiers can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service.
		/// * The attraction identifier (`seoId`) can be retrieved from the [/taxonomy/attractions](#operation/taxonomyAttractions) service.
		/// 
		/// **&lt;u&gt;Examples&lt;/u&gt;**:
		/// 
		/// **Search by destination**:
		/// 
		/// * E.g., "Top ten highest-rated yoga classes operating in Las Vegas:
		/// ```javascript
		/// {
		/// "destId": 684,
		/// "subCatId": 26052,
		/// "sortOrder": "REVIEW_AVG_RATING_D",
		/// "topX": "1-3"
		/// }
		/// ```
		/// 
		/// **Search by attraction-link**:
		/// 
		/// * E.g., "Products related to Everglades National Park operating 21-26 May 2019 in order of descending price":
		/// ```javascript
		/// {
		/// "seoId": 1115,
		/// "sortOrder": "PRICE_FROM_D",
		/// "topX": "1-3"
		/// }
		/// ```
		/// 
		/// **&lt;u&gt;'Freesale-only' merchants&lt;/u&gt;**:
		/// - Merchants with a "freesale only" key *must* pass `startDate` and `endDate` to this service to retrieve a list of all available 'freesale' products (and 'freesale/on-request' products that are currently 'freesale') in the destination.
		/// - E.g., the following request body will result in 'freesale/on-request' products within their on-request period not appearing in the results from this service.
		/// ```javascript
		/// {
		/// "destId": 684,
		/// "startDate": "2020-02-21",
		/// "endDate": "2020-03-21",
		/// "sortOrder": "PRICE_FROM_D",
		/// "topX": "1-3"
		/// }
		/// ```
		/// 
		/// - If `startDate` and `endDate` are omitted, 'freesale/on-request' products that are presently within their on-request period may appear to be available to customers, but won't be available at the time of booking.
		/// 
		/// SearchProducts search/products
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> SearchProductsAsync(SearchProductsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /search/products/codes
		/// Search by product code
		/// - This service returns an array of products given an array of product identifiers that is useful for wishlist / shopping cart / user account display
		/// - **Note**: requesting an inactive or non-existent product code will return `0`, `null` and blank values (as per the 'invalid_product' example).
		/// 
		/// SearchProductsCodes search/products/codes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> SearchProductsCodesAsync(SearchProductsCodesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search/products/codes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /taxonomy/attractions
		/// Get attractions
		/// - Retrieves a list of attractions (things like the Eiffel Tower or Empire State Building) and their associated unique numeric identifiers
		/// - The attraction's identifier (`seoId`) can be used as a means of searching for available products; for example, in the [/search/products](#operation/searchProducts) service.
		/// 
		/// TaxonomyAttractions taxonomy/attractions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> TaxonomyAttractionsAsync(TaxonomyAttractionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taxonomy/attractions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /taxonomy/categories
		/// Get all product categories
		/// - Retrieves a list of product categories for a destination that can be used as a means of filtering when searching for products using the [/search/products](/#operation/searchProducts) service
		/// - This service can be used to get a list of all categories and subcategories for a destination by including its `destId`, or you can omit the `destId` to get a list of all categories and subcategories
		/// - **Note:** If no `destId` is passed, `productCount` and `thumbnailURL` will be `null` as they are destination-specific fields
		/// 
		/// TaxonomyCategories taxonomy/categories
		/// </summary>
		/// <param name="destId">**unique numeric identifier** of the destination to enquire about (optional)
		///- `destinationId` is returned by [/taxonomy/destinations](#operation/taxonomyDestinations)
		///</param>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> TaxonomyCategoriesAsync(int destId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taxonomy/categories?destId="+destId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// /taxonomy/destinations
		/// Get details of all destinations supported by this API
		/// - Retrieves all the country taxonomy/city nodes as a flat list
		/// - Returns a complete list of Viator destinations, including destination names and parent identifiers
		/// - Used to provide navigation through drill down lists or combo boxes
		/// 
		/// TaxonomyDestinations taxonomy/destinations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BasicErrorModel> TaxonomyDestinationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "taxonomy/destinations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BasicErrorModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AvailableProductsPostBody
	{
		
		/// <summary>
		/// **currency** in which to display product pricing
		///- default: `'USD'`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **end date** of the date range to search within (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// **number of adult travelers** who wish to participate
		///- default: `1`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numAdults")]
		public System.Nullable<System.Int32> NumAdults { get; set; }
		
		/// <summary>
		/// **array of unique alphanumeric product identifiers** specifying which products to find the availability of
		///- maximum: `50`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCodes")]
		public string[] ProductCodes { get; set; }
		
		/// <summary>
		/// **start date** of the date range to search within (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
	}
	
	public class BookingAvailabilityPostBody
	{
		
		/// <summary>
		/// **array of objects** specifying the age bands by which to to filter search results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageBands")]
		public BookingAvailabilityPostBodyAgeBands[] BookingAvailabilityPostBodyAgeBands { get; set; }
		
		/// <summary>
		/// **currency code** for the currency in which to display tour grade pricing information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **month component** (text format) of the start of the date range for which to retrieve tour grade availability information (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public string Month { get; set; }
		
		/// <summary>
		/// **unique alphanumeric identifier** of the product for which you wish to retrieve tour grade availability information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// **year component** (text format) of the start of the date range for which to retrieve tour grade availability information (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public string Year { get; set; }
	}
	
	public class BookingAvailabilityPostBodyAgeBands
	{
		
		/// <summary>
		/// **unique numeric identifier** for the age band
		///- See: [Working with age bands](#section/Appendices/Working-with-age-bands)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandId")]
		public System.Nullable<System.Int32> BandId { get; set; }
		
		/// <summary>
		/// **number of people** in *this* age band
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class BookingAvailabilityTourgradesPostBody
	{
		
		/// <summary>
		/// **array** of ageBand objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageBands")]
		public BookingAvailabilityTourgradesPostBodyAgeBands[] BookingAvailabilityTourgradesPostBodyAgeBands { get; set; }
		
		/// <summary>
		/// **date** to enquire about available tour grades for *this* product (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingDate")]
		public string BookingDate { get; set; }
		
		/// <summary>
		/// **currency code** for the currency in which to display pricing information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
	}
	
	public class BookingAvailabilityTourgradesPostBodyAgeBands
	{
		
		/// <summary>
		/// **unique numeric identifier** for the age band
		///- See: [Working with age bands](#section/Appendices/Working-with-age-bands)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandId")]
		public System.Nullable<System.Int32> BandId { get; set; }
		
		/// <summary>
		/// **numeric count** of number of travelers in *this* age band
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	public class BookingAvailabilityTourgradesPricingmatrixPostBody
	{
		
		/// <summary>
		/// **currency code** for the currency in which to display pricing details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **month of year** (as text) by which to filter results (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public string Month { get; set; }
		
		/// <summary>
		/// **alphanumeric identifier** of product about which to retrieve tour grade and pricing information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// **year** (as text) by which to filter results (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public string Year { get; set; }
	}
	
	public class BookingBookPostBody
	{
		
		/// <summary>
		/// **object** containing details about the primary contact (**note**: this contact needn't be a traveller)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booker")]
		public BookingBookPostBodyBooker Booker { get; set; }
		
		/// <summary>
		/// **currency code** for the currency the booking will be submitted in (you will be billed in this currency)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **specifier**: `true` if this is a *demo* booking only (demos do not send any notifications, are automatically confirmed and OnRequest products become freesale products. Default value is true. Production must have `demo` set to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="demo")]
		public System.Nullable<System.Boolean> Demo { get; set; }
		
		/// <summary>
		/// **array** of items to be booked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BookingBookPostBodyItems[] BookingBookPostBodyItems { get; set; }
		
		/// <summary>
		/// Applicable only for extra partner detail for either partner or merchant partner for sending partner specific information
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerDetail")]
		public BookingBookPostBodyPartnerDetail PartnerDetail { get; set; }
	}
	
	public class BookingBookPostBodyBooker
	{
		
		/// <summary>
		/// **telephone number** of the lead traveler
		///
		///**Note**:
		///
		///  * Must be included to enable CLC communications
		///  * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellPhone")]
		public string CellPhone { get; set; }
		
		/// <summary>
		/// **country code** for the telephone number of the lead traveler
		///
		///**Note**: 
		///
		///  * Must be included to enable CLC communications. 
		///  * See [Supplier communications](#section/Merchant-APIs/Supplier-communications) for more information
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellPhoneCountryCode")]
		public string CellPhoneCountryCode { get; set; }
		
		/// <summary>
		/// **email address** of the primary contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// **first name** of the primary contact
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		/// <summary>
		/// **phone number** (home) of the primary contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		/// <summary>
		/// **surname** of the primary contact
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
		
		/// <summary>
		/// **title** of the primary contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class BookingBookPostBodyItems
	{
		
		/// <summary>
		/// **array** of objects containing booking questions and the answers provided for them for *this* product
		///- If a booking question is available in the `bookingQuestions` array in the response from [/product](#operation/product) for *this* product, the matching `bookingQuestionAnswers` must be passed to *this* service. 
		///- If a product does not have any booking questions, you can omit the `bookingQuestionAnswers` array in your request. 
		///- Any invalid or unrequired booking-question answers that are passed to *this* service will be ignored (and, no exceptions will be raised) 
		///- You will need to include this array if [/product](#operation/product) returns any questions in the `bookingQuestions` array.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingQuestionAnswers")]
		public BookingBookPostBodyItemsBookingQuestionAnswers[] BookingBookPostBodyItemsBookingQuestionAnswers { get; set; }
		
		/// <summary>
		/// **specifer** of the hotel
		///If [/product](#operation/product) returns `hotelPickup`: `true` and a list of hotels is available for *this* product in [/booking/hotels](#operation/bookingHotels), a `hotelId` must be captured (as per the hotel service id field); or, use an alternative `hotelId`, such as:
		/// 
		/// - `"notBooked"`: the customer has not yet booked their hotel
		/// - `"notListed"`: the customer's hotel is not listed
		///
		/// If the customer chooses one of these options, the product supplier may need to correspond with the user to find out their pick-up location. The best way to do this is by enabling [Closed-Loop-Communication (CLC)](#section/Merchant-APIs/Supplier-communications).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hotelId")]
		public string HotelId { get; set; }
		
		/// <summary>
		/// **specifier** of language service provided for this product that has been chosen for this booking (usually in the format langcode/Service eg en/SERVICE_GUIDE. If the product details service [/product](#operation/product) for the product returns a langService, this must be provided.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageOptionCode")]
		public string LanguageOptionCode { get; set; }
		
		/// <summary>
		/// **object** containing partner details at a per-item level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerItemDetail")]
		public BookingBookPostBodyItemsPartnerItemDetail PartnerItemDetail { get; set; }
		
		/// <summary>
		/// **details** about the hotel pick-up point (must be provided if the `hotelId` selected by the user is `'notListed'` or if no hotels are returned for *this* product in [/booking/hotels](#operation/bookingHotels) where `hotelPickup` is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pickupPoint")]
		public string PickupPoint { get; set; }
		
		/// <summary>
		/// **unique alphanumeric identifier** of the product to be booked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// **text field** to capture any additional requirements for the booking, such as dietary requirements or if a wheelchair is required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialRequirements")]
		public string SpecialRequirements { get; set; }
		
		/// <summary>
		/// **specifier** of the tour grade to be booked (if tour grades are supplied in [/product](#operation/product), you must allow the customer to select a tour grade code. If no tour grades are available for *this* product, set this to `'DEFAULT'`.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tourGradeCode")]
		public string TourGradeCode { get; set; }
		
		/// <summary>
		/// **date** of travel for the item in format yyyy-mm-dd
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="travelDate")]
		public string TravelDate { get; set; }
		
		/// <summary>
		/// **array** of traveler names, details and whether they are the lead traveller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="travellers")]
		public BookingBookPostBodyItemsTravellers[] BookingBookPostBodyItemsTravellers { get; set; }
	}
	
	public class BookingBookPostBodyItemsBookingQuestionAnswers
	{
		
		/// <summary>
		/// **answer** to the question for the `questionId` listed (recommended length for the answer is 500 characters)
		///
		///**Note**: To specify answers for each traveler, separate the values with a comma as in the per_person_booking_questions request example
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer")]
		public string Answer { get; set; }
		
		/// <summary>
		/// **numeric identifier** for the question (**note**: `questionId` can be retrieved from the [/product](#operation/product) service)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionId")]
		public System.Nullable<System.Int32> QuestionId { get; set; }
	}
	
	public class BookingBookPostBodyItemsPartnerItemDetail
	{
		
		/// <summary>
		/// **unique alphanumeric code** for the order ('itinerary') (merchant API partners must pass a `distributorItemRef` into the `partnerItemDetails` object for each item in *this* object
		///- this code can be any alphanumeric string and is defined by the distributor
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorItemRef")]
		public string DistributorItemRef { get; set; }
	}
	
	public class BookingBookPostBodyItemsTravellers
	{
		
		/// <summary>
		/// **unique numeric identifier** for the age band
		///- See: [Working with age bands](#section/Appendices/Working-with-age-bands)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandId")]
		public System.Nullable<System.Int32> BandId { get; set; }
		
		/// <summary>
		/// **first name** of *this* traveller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		/// <summary>
		/// **indicator**: `true` if this traveler is the lead traveler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadTraveller")]
		public System.Nullable<System.Boolean> LeadTraveller { get; set; }
		
		/// <summary>
		/// **surname** of *this* traveler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="surname")]
		public string Surname { get; set; }
		
		/// <summary>
		/// **title** of the traveler (e.g `'Mr'`, `'Mrs'`, `'Ms'`, `'Miss'`, `'Mstr'`, `'Dr'`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class BookingBookPostBodyPartnerDetail
	{
		
		/// <summary>
		/// **unique alphanumeric reference code** for the distributor
		///- Merchant API partners must pass a `distributorRef` at the order (A.K.A. 'itinerary') level in the `partnerDetail` object. The `distributorRef` passed must be alphanumeric and unique to bookings made by the merchant.
		///- Passing an existing `distributorRef`: If an existing `distributorRef` is passed, the booking with the matching `distributorRef` will be returned in the response and a new booking will not be made. The fields in the response are identical to the response for a new booking.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorRef")]
		public string DistributorRef { get; set; }
	}
	
	public class BookingCalculatepricePostBody
	{
		
		/// <summary>
		/// **currency code** for the currency in which to display pricing details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **array** of travel detail objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BookingCalculatepricePostBodyItems[] BookingCalculatepricePostBodyItems { get; set; }
	}
	
	public class BookingCalculatepricePostBodyItems
	{
		
		/// <summary>
		/// **unique alphanumeric identifier** of the product the total price for which you which to calculate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// **alphanumeric identifier** for the tour grade for which to calculate the total price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tourGradeCode")]
		public string TourGradeCode { get; set; }
		
		/// <summary>
		/// **date** for which to calculate the total price (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="travelDate")]
		public string TravelDate { get; set; }
		
		/// <summary>
		/// **array of objects** detailing the age bands for which to calculate the total price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="travellers")]
		public BookingCalculatepricePostBodyItemsTravellers[] BookingCalculatepricePostBodyItemsTravellers { get; set; }
	}
	
	public class BookingCalculatepricePostBodyItemsTravellers
	{
		
		/// <summary>
		/// **unique numeric identifier** for the age band
		///- See: [Working with age bands](#section/Appendices/Working-with-age-bands)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandId")]
		public System.Nullable<System.Int32> BandId { get; set; }
	}
	
	public class BookingPricingmatrixPostBody
	{
		
		/// <summary>
		/// **date** for which to retrieve pricing data  (must be in the future) (**note**: this is an optional parameter for normal products; if the date is *not* provided then the nearest available date is determined)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingDate")]
		public string BookingDate { get; set; }
		
		/// <summary>
		/// **currency code** of the currency in which to display pricing information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **unique alphanumeric identifier** of the product for which to retrieve the pricing matrix
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// **alphanumeric identifier** of the product tour grade for which to retrieve the pricing matrix
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tourGradeCode")]
		public string TourGradeCode { get; set; }
	}
	
	public class BookingStatusPostBody
	{
		
		/// <summary>
		/// **earliest date** for *this* booking (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingDateFrom")]
		public string BookingDateFrom { get; set; }
		
		/// <summary>
		/// **latest date** for *this* booking (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingDateTo")]
		public string BookingDateTo { get; set; }
		
		/// <summary>
		/// **array** of partner-defined distributor item reference identifiers e.g. `['refItem1','refItem2','refItem3']`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorItemRefs")]
		public string[] DistributorItemRefs { get; set; }
		
		/// <summary>
		/// **array** of partner-defined distributor reference identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorRefs")]
		public string[] DistributorRefs { get; set; }
		
		/// <summary>
		/// **array** of item identifiers to check
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIds")]
		public int[] ItemIds { get; set; }
		
		/// <summary>
		/// **first name** of the lead traveler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadFirstName")]
		public string LeadFirstName { get; set; }
		
		/// <summary>
		/// **surname** of the lead traveler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadSurname")]
		public string LeadSurname { get; set; }
		
		/// <summary>
		/// **specifier**:
		///- `true`: bypass the poll limit in the prelive environment only (recommended for testing)
		///- `false`: (default)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test")]
		public System.Nullable<System.Boolean> Test { get; set; }
	}
	
	public class BookingStatusItemsPostBody
	{
		
		/// <summary>
		/// **earliest date** for when the booking(s) in question were made (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingDateFrom")]
		public string BookingDateFrom { get; set; }
		
		/// <summary>
		/// **latest date** for when the booking(s) in question were made (must be in the future)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookingDateTo")]
		public string BookingDateTo { get; set; }
		
		/// <summary>
		/// **array** of partner-defined distributor item reference identifiers e.g. `['refItem1','refItem2','refItem3']`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorItemRefs")]
		public string[] DistributorItemRefs { get; set; }
		
		/// <summary>
		/// **array** of partner-defined distributor reference identifiers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorRefs")]
		public string[] DistributorRefs { get; set; }
		
		/// <summary>
		/// **array** of booking-reference numbers to check
		///
		/// `itemId` (booking-reference provided by Viator). For more information, see [Booking references](#section/Key-concepts/Booking-references)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIds")]
		public int[] ItemIds { get; set; }
		
		/// <summary>
		/// **first name** of the lead traveler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadFirstName")]
		public string LeadFirstName { get; set; }
		
		/// <summary>
		/// **surname** of the lead traveler
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadSurname")]
		public string LeadSurname { get; set; }
		
		/// <summary>
		/// **specifier**:
		///- `true`: bypass the poll limit in the prelive environment only
		///- `false`: (default) make a *real* booking, not a test
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test")]
		public System.Nullable<System.Boolean> Test { get; set; }
	}
	
	public class HealthCheckReturn
	{
		
		/// <summary>
		/// **indicator**: `true` signifies health
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allGood")]
		public System.Nullable<System.Boolean> AllGood { get; set; }
		
		/// <summary>
		/// **indicator**: `true` signifies health
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capiOk")]
		public System.Nullable<System.Boolean> CapiOk { get; set; }
		
		/// <summary>
		/// **indicator**: `true` signifies health
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dbOk")]
		public System.Nullable<System.Boolean> DbOk { get; set; }
		
		/// <summary>
		/// **indicator**: `true` signifies health
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memcachedOk")]
		public System.Nullable<System.Boolean> MemcachedOk { get; set; }
		
		/// <summary>
		/// **natural-language description** of any issues regarding the health of the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public class MerchantCancellationPostBody
	{
		
		/// <summary>
		/// **array** of objects detailing itinerary items to cancel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelItems")]
		public MerchantCancellationPostBodyCancelItems[] MerchantCancellationPostBodyCancelItems { get; set; }
		
		/// <summary>
		/// **itinerary reference identifier** (partner defined) for the booking to cancel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorRef")]
		public string DistributorRef { get; set; }
		
		/// <summary>
		/// **numeric identifier** for the itinerary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itineraryId")]
		public System.Nullable<System.Int32> ItineraryId { get; set; }
	}
	
	public class MerchantCancellationPostBodyCancelItems
	{
		
		/// <summary>
		/// **cancellation code** that describes the reason for the cancellation
		///- see: [Suggested cancellation codes](#suggested-cancellation-codes)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelCode")]
		public string CancelCode { get; set; }
		
		/// <summary>
		/// **natural-language description** of the reason for cancellation (a reason must be provided if `cancelCode` is `62` or `66`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelDescription")]
		public string CancelDescription { get; set; }
		
		/// <summary>
		/// **alphanumeric reference code** of the distributor item
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributorItemRef")]
		public string DistributorItemRef { get; set; }
		
		/// <summary>
		/// **numeric identifier** of item to cancel in itinerary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public System.Nullable<System.Int32> ItemId { get; set; }
	}
	
	public enum ProductSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_RATING_A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_RATING_D = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_RATING_SUBMISSION_DATE_D = 2,
	}
	
	public enum ProductVoucherOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOUCHER_PAPER_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOUCHER_E = 1,
	}
	
	public class SearchFreetextPostBody
	{
		
		/// <summary>
		/// **currency code** for the currency in which to display product pricing information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of the destination to search within 
		///- `destinationId` can be retrieved from the [/taxonomy/destinations](#operation/taxonomyDestinations) service
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destId")]
		public System.Nullable<System.Int32> DestId { get; set; }
		
		/// <summary>
		/// **array** of search domain specifiers where each item is *one of*:
		///  - `"PRODUCT"`: a tour / activity
		///  - `"DESTINATION"`: continent, country, city, region
		///  - `"ATTRACTION"`: an attraction within a destination (only available to partners with SEO access)
		///  - `"RECOMMENDATION"`: an attraction within a destination (only available to partners with SEO access)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchTypes")]
		public SearchFreetextResponseSearchType[] SearchTypes { get; set; }
		
		/// <summary>
		/// **sort order** in which to return the results that is *one of*:
		///
		///  - `'TOP_SELLERS'`: the top sellers
		///  - `'REVIEW_AVG_RATING_A'`: ascending by average traveler rating (low -&gt; high)
		///  - `'REVIEW_AVG_RATING_D'`: descending by average traveler rating (high -&gt; low)
		///  - `'PRICE_FROM_A'`: ascending by price (low -&gt; high)
		///  - `'PRICE_FROM_D'`: descending by price (high -&gt; low)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrder SortOrder { get; set; }
		
		/// <summary>
		/// **text** to search for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// **start and end rows** to return in the format {start}-{end}
		///- e.g. `'1-10'`, `'11-20'`
		///
		///**Note**: 
		///- the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
		///- if `topX` is not specified, the default is `'1-100'`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topX")]
		public string TopX { get; set; }
	}
	
	public class SearchProductsPostBody
	{
		
		/// <summary>
		/// **unique numeric identifier** of *this* product category to search within
		///- `categoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service
		///- at present, it is not possible to use `catId` in conjunction with `seoId`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catId")]
		public System.Nullable<System.Int32> CatId { get; set; }
		
		/// <summary>
		/// **currency** in which to display product prices
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of the destination in which to search for products
		///- `destinationId` is available from the [/taxonomy/destinations](#operation/taxonomyDestinations) service
		///- use **EITHER** `destId` **OR** `seoId`, but not both
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destId")]
		public System.Nullable<System.Int32> DestId { get; set; }
		
		/// <summary>
		/// **end date delimiter** for the search (must be in the future)
		///- e.g., `'2019-10-21'`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// **search restriction specifier** for products associated with an attraction uniquely identified by `seoId`
		///- use **EITHER** `destId` **OR** `seoId`, but not both
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seoId")]
		public string SeoId { get; set; }
		
		/// <summary>
		/// **sort order** in which to return the results that is *one of*:
		///
		///  - `"TOP_SELLERS"`: the top sellers
		///  - `"REVIEW_AVG_RATING_A"`: ascending by average traveler rating (low -&gt; high)
		///  - `"REVIEW_AVG_RATING_D"`: descending by average traveler rating (high -&gt; low)
		///  - `"PRICE_FROM_A"`: ascending by price (low -&gt; high)
		///  - `"PRICE_FROM_D"`: descending by price (high -&gt; low) 
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortOrder SortOrder { get; set; }
		
		/// <summary>
		/// **start date delimiter** for the search (must be in the future)
		///- e.g., `'2018-10-21'`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// **unique numeric identifier** of *this* product subcategory to search within
		///- `subcategoryId` can be retrieved from the [/taxonomy/categories](#operation/taxonomyCategories) service
		///- at present, it is not possible to use `subCatId` in conjunction with `seoId`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCatId")]
		public System.Nullable<System.Int32> SubCatId { get; set; }
		
		/// <summary>
		/// **start and end rows** to return in the format {start}-{end}
		///- e.g. `'1-10'`, `'11-20'`
		///
		///**Note**: 
		///- the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
		///- if `topX` is not specified, the default is `'1-100'`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topX")]
		public string TopX { get; set; }
	}
	
	public class SearchProductsCodesPostBody
	{
		
		/// <summary>
		/// **currency code** for the currency in which to display product pricing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// **array** of product codes to search for
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCodes")]
		public string[] ProductCodes { get; set; }
	}
	
	public class TaxonomyAttractionsPostBody
	{
		
		/// <summary>
		/// **unique numeric identifier** of the destination in which to search for attractions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destId")]
		public System.Nullable<System.Int32> DestId { get; set; }
		
		/// <summary>
		/// **sort order** in which to return the results that is *one of*:
		///  * `"SEO_PUBLISHED_DATE_D"`: publish date (descending)
		///  * `"SEO_PUBLISHED_DATE_A"`: publish date (ascending)
		///  * `"SEO_REVIEW_AVG_RATING_D"`: traveler rating (high→low)
		///  * `"SEO_REVIEW_AVG_RATING_A"`: traveler rating (low→high)
		///  * `"SEO_ALPHABETICAL"`: alphabetical (A→Z)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<TaxonomyAttractionsPostBodySortOrder> SortOrder { get; set; }
		
		/// <summary>
		/// **start and end rows** to return in the format {start}-{end}
		///- e.g. `'1-10'`, `'11-20'`
		///
		///**Note**: 
		///- the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
		///- if `topX` is not specified, the default is `'1-100'`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topX")]
		public string TopX { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaxonomyAttractionsPostBodySortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEO_PUBLISHED_DATE_D = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEO_PUBLISHED_DATE_A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEO_REVIEW_AVG_RATING_D = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEO_REVIEW_AVG_RATING_A = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEO_ALPHABETICAL = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
