//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents a request that was made to the API. Including what Token was used and what resource was accessed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APIRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<APIRequestAction> Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actor")]
		public APIRequestActor Actor { get; set; }
		
		/// <summary>
		/// The unique id used to identify a single request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public APIRequestResource Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<APIRequestResult> Result { get; set; }
		
		/// <summary>
		/// The time at which the request was processed by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum APIRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 3,
	}
	
	public class APIRequestActor
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jti")]
		public string Jti { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestIp")]
		public string RequestIp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
	}
	
	public class APIRequestResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public APIRequestResourceItem Item { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemVersion")]
		public System.Nullable<System.Int32> ItemVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<APIRequestResourceType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vault")]
		public APIRequestResourceVault Vault { get; set; }
	}
	
	public class APIRequestResourceItem
	{
		
		/// <summary>
		/// Pattern: ^[\da-z]{26}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\da-z]{26}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum APIRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAULT = 1,
	}
	
	public class APIRequestResourceVault
	{
		
		/// <summary>
		/// Pattern: ^[\da-z]{26}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\da-z]{26}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum APIRequestResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// A message detailing the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// HTTP Status Code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Field
	{
		
		/// <summary>
		/// For fields with a purpose of `PASSWORD` this is the entropy of the value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entropy")]
		public System.Nullable<System.Double> Entropy { get; set; }
		
		/// <summary>
		/// If value is not present then a new value should be generated for this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generate")]
		public System.Nullable<System.Boolean> Generate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public System.Nullable<FieldPurpose> Purpose { get; set; }
		
		/// <summary>
		/// The recipe is used in conjunction with the "generate" property to set the character set used to generate a new secure value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipe")]
		public GeneratorRecipe Recipe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section")]
		public FieldSection Section { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(FieldType.STRING)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FieldType Type { get; set; } = FieldType.STRING;
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USERNAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTES = 3,
	}
	
	/// <summary>
	/// The recipe is used in conjunction with the "generate" property to set the character set used to generate a new secure value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratorRecipe
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterSets")]
		[System.ComponentModel.DataAnnotations.Range(0, 3)]
		public string[] CharacterSets { get; set; }
		
		/// <summary>
		/// List of all characters that should be excluded from generated passwords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeCharacters")]
		public string ExcludeCharacters { get; set; }
		
		/// <summary>
		/// Length of the generated value
		/// Minimum: 1
		/// Maximum: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		[System.ComponentModel.DataAnnotations.Range(1, 64)]
		public System.Nullable<System.Int32> Length { get; set; }
	}
	
	public class FieldSection
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCEALED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH_YEAR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENU = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class File
	{
		
		/// <summary>
		/// Base64-encoded contents of the file. Only set if size <= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Path of the Connect API that can be used to download the contents of this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content_path")]
		public string Content_path { get; set; }
		
		/// <summary>
		/// ID of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// For files that are in a section, this field describes the section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="section")]
		public FileSection Section { get; set; }
		
		/// <summary>
		/// Size in bytes of the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	public class FileSection
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FullItem : Item
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Field[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public File[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public FullItemSections[] FullItemSections { get; set; }
	}
	
	public class FullItemSections
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Item
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ItemCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="favorite")]
		public System.Nullable<System.Boolean> Favorite { get; set; }
		
		/// <summary>
		/// Pattern: ^[\da-z]{26}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\da-z]{26}$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEditedBy")]
		public string LastEditedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ItemState> State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public ItemUrls[] ItemUrls { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vault")]
		public ItemVault Vault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ItemCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_CREDENTIAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_CARD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMBERSHIP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSPORT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_LICENSE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTDOOR_LICENSE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURE_NOTE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIRELESS_ROUTER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_ACCOUNT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVER_LICENSE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTITY = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REWARD_PROGRAM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_ACCOUNT = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOCIAL_SECURITY_NUMBER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSH_KEY = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 21,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ItemState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
	}
	
	public class ItemUrls
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
	}
	
	public class ItemVault
	{
		
		/// <summary>
		/// Required
		/// Pattern: ^[\da-z]{26}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\da-z]{26}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PatchElement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="op")]
		public PatchElementOp Op { get; set; }
		
		/// <summary>
		/// An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PatchElementOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		replace = 2,
	}
	
	/// <summary>
	/// The state of a registered server dependency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceDependency
	{
		
		/// <summary>
		/// Human-readable message for explaining the current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Vault
	{
		
		/// <summary>
		/// The vault version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeVersion")]
		public System.Nullable<System.Int32> AttributeVersion { get; set; }
		
		/// <summary>
		/// The version of the vault contents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentVersion")]
		public System.Nullable<System.Int32> ContentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Pattern: ^[\da-z]{26}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\da-z]{26}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// Number of active items in the vault
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public System.Nullable<System.Int32> Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<VaultType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VaultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERYONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of API Requests that have been made.
		/// GetApiActivity activity
		/// </summary>
		/// <param name="limit">How many API Events should be retrieved in a single request.</param>
		/// <param name="offset">How far into the collection of API Events should the response start</param>
		/// <returns>OK</returns>
		public async Task<APIRequest[]> GetApiActivityAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "activity?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<APIRequest[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get state of the server and its dependencies.
		/// GetServerHealth health
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetServerHealthReturn> GetServerHealthAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetServerHealthReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ping the server for liveness
		/// GetHeartbeat heartbeat
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> GetHeartbeatAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "heartbeat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query server for exposed Prometheus metrics
		/// See Prometheus documentation for a complete data model.
		/// GetPrometheusMetrics metrics
		/// </summary>
		/// <returns>Successfully returned Prometheus metrics</returns>
		public async Task<string> GetPrometheusMetricsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metrics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Vaults
		/// GetVaults vaults
		/// </summary>
		/// <param name="filter">Filter the Vault collection based on Vault name using SCIM eq filter</param>
		/// <returns>OK</returns>
		public async Task<Vault[]> GetVaultsAsync(string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Vault[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Vault details and metadata
		/// GetVaultById vaults/{vaultUuid}
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault to fetch Items from</param>
		/// <returns>OK</returns>
		public async Task<Vault> GetVaultByIdAsync(string vaultUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Vault>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all items for inside a Vault
		/// GetVaultItems vaults/{vaultUuid}/items
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault to fetch Items from</param>
		/// <param name="filter">Filter the Item collection based on Item name using SCIM eq filter</param>
		/// <returns>OK</returns>
		public async Task<Item[]> GetVaultItemsAsync(string vaultUuid, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Item[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Item
		/// CreateVaultItem vaults/{vaultUuid}/items
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault to create an Item in</param>
		/// <returns>OK</returns>
		public async Task<FullItem> CreateVaultItemAsync(string vaultUuid, FullItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FullItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Item
		/// DeleteVaultItem vaults/{vaultUuid}/items/{itemUuid}
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault the item is in</param>
		/// <param name="itemUuid">The UUID of the Item to update</param>
		public async Task DeleteVaultItemAsync(string vaultUuid, string itemUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details of an Item
		/// GetVaultItemById vaults/{vaultUuid}/items/{itemUuid}
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault to fetch Item from</param>
		/// <param name="itemUuid">The UUID of the Item to fetch</param>
		/// <returns>OK</returns>
		public async Task<FullItem> GetVaultItemByIdAsync(string vaultUuid, string itemUuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FullItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a subset of Item attributes
		/// Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports `add`, `remove` and `replace` operations.
		/// 
		/// When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`
		/// 
		/// PatchVaultItem vaults/{vaultUuid}/items/{itemUuid}
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault the item is in</param>
		/// <param name="itemUuid">The UUID of the Item to update</param>
		/// <returns>OK - Item updated. If no Patch operations were provided, Item is unmodified.</returns>
		public async Task<FullItem> PatchVaultItemAsync(string vaultUuid, string itemUuid, PatchVaultItemPatchBody[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FullItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Item
		/// UpdateVaultItem vaults/{vaultUuid}/items/{itemUuid}
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Item's Vault</param>
		/// <param name="itemUuid">The UUID of the Item to update</param>
		/// <returns>OK</returns>
		public async Task<FullItem> UpdateVaultItemAsync(string vaultUuid, string itemUuid, FullItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FullItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the files inside an Item
		/// GetItemFiles vaults/{vaultUuid}/items/{itemUuid}/files
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault to fetch Items from</param>
		/// <param name="itemUuid">The UUID of the Item to fetch files from</param>
		/// <param name="inline_files">Tells server to return the base64-encoded file contents in the response.</param>
		/// <returns>OK</returns>
		public async Task<File[]> GetItemFilesAsync(string vaultUuid, string itemUuid, bool inline_files, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid))+"/files&inline_files="+inline_files;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<File[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details of a File
		/// GetDetailsOfFileById vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}
		/// </summary>
		/// <param name="vaultUuid">The UUID of the Vault to fetch Item from</param>
		/// <param name="itemUuid">The UUID of the Item to fetch File from</param>
		/// <param name="fileUuid">The UUID of the File to fetch</param>
		/// <param name="inline_files">Tells server to return the base64-encoded file contents in the response.</param>
		/// <returns>OK</returns>
		public async Task<File> GetDetailsOfFileByIdAsync(string vaultUuid, string itemUuid, string fileUuid, bool inline_files, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/"+ (vaultUuid==null? "" : System.Uri.EscapeDataString(vaultUuid))+"/items/"+ (itemUuid==null? "" : System.Uri.EscapeDataString(itemUuid))+"/files/"+ (fileUuid==null? "" : System.Uri.EscapeDataString(fileUuid))+"&inline_files="+inline_files;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<File>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the content of a File
		/// DownloadFileByID vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content
		/// </summary>
		/// <returns>Success</returns>
		public async Task DownloadFileByIDAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetServerHealthReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="dependencies")]
		public ServiceDependency[] Dependencies { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The Connect server's version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class PatchVaultItemPatchBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="op")]
		public PatchElementOp Op { get; set; }
		
		/// <summary>
		/// An RFC6901 JSON Pointer pointing to the Item document, an Item Attribute, and Item Field by Field ID, or an Item Field Attribute
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
