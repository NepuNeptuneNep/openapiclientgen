//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Metadata related to the create database operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1CreateDatabaseMetadata
	{
	}
	
	/// <summary>
	/// Metadata related to the delete database operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1DeleteDatabaseMetadata
	{
	}
	
	/// <summary>
	/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1Progress
	{
		
		/// <summary>
		/// The amount of work completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedWork")]
		public string CompletedWork { get; set; }
		
		/// <summary>
		/// The amount of work estimated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedWork")]
		public string EstimatedWork { get; set; }
	}
	
	/// <summary>
	/// Metadata for the long-running operation from the RestoreDatabase request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1RestoreDatabaseMetadata
	{
		
		/// <summary>
		/// The name of the backup restoring from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backup")]
		public string Backup { get; set; }
		
		/// <summary>
		/// The name of the database being restored to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// The time the restore finished, unset for ongoing restores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The operation state of the restore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationState")]
		public System.Nullable<GoogleFirestoreAdminV1RestoreDatabaseMetadataOperationState> OperationState { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressPercentage")]
		public GoogleFirestoreAdminV1Progress ProgressPercentage { get; set; }
		
		/// <summary>
		/// The time the restore was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleFirestoreAdminV1RestoreDatabaseMetadataOperationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPERATION_STATE_UNSPECIFIED")]
		OPERATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INITIALIZING")]
		INITIALIZING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESSING")]
		PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLING")]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FINALIZING")]
		FINALIZING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFUL")]
		SUCCESSFUL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 7,
	}
	
	/// <summary>
	/// Metadata related to the update database operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1UpdateDatabaseMetadata
	{
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.ExportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2ExportDocumentsMetadata
	{
		
		/// <summary>
		/// Which collection ids are being exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The state of the export operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationState")]
		public GoogleFirestoreAdminV1RestoreDatabaseMetadataOperationState OperationState { get; set; }
		
		/// <summary>
		/// Where the entities are being exported to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleFirestoreAdminV1beta2Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDocuments")]
		public GoogleFirestoreAdminV1beta2Progress ProgressDocuments { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2Progress
	{
		
		/// <summary>
		/// The amount of work completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedWork")]
		public string CompletedWork { get; set; }
		
		/// <summary>
		/// The amount of work estimated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedWork")]
		public string EstimatedWork { get; set; }
	}
	
	/// <summary>
	/// The request for FirestoreAdmin.ExportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2ExportDocumentsRequest
	{
		
		/// <summary>
		/// Which collection ids to export. Unspecified means all collections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// The output URI. Currently only supports Google Cloud Storage URIs of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional Google Cloud Storage namespace path. When choosing a name, be sure to consider Google Cloud Storage naming guidelines: https://cloud.google.com/storage/docs/naming. If the URI is a bucket (without a namespace path), a prefix will be generated based on the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
	}
	
	/// <summary>
	/// Returned in the google.longrunning.Operation response field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2ExportDocumentsResponse
	{
		
		/// <summary>
		/// Location of the output files. This can be used to begin an import into Cloud Firestore (this project or another project) after the operation completes successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
	}
	
	/// <summary>
	/// Represents a single field in the database. Fields are grouped by their "Collection Group", which represent all collections in the database with the same id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2Field
	{
		
		/// <summary>
		/// The index configuration for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexConfig")]
		public GoogleFirestoreAdminV1beta2IndexConfig IndexConfig { get; set; }
		
		/// <summary>
		/// A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\`address.city\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The index configuration for this field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2IndexConfig
	{
		
		/// <summary>
		/// Output only. Specifies the resource name of the `Field` from which this field's index configuration is set (when `uses_ancestor_config` is true), or from which it *would* be set if this field had no index configuration (when `uses_ancestor_config` is false).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ancestorField")]
		public string AncestorField { get; set; }
		
		/// <summary>
		/// The indexes supported for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexes")]
		public GoogleFirestoreAdminV1beta2Index[] Indexes { get; set; }
		
		/// <summary>
		/// Output only When true, the `Field`'s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by `ancestor_field`, at which point `uses_ancestor_config` will be `true` and `reverting` will be `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reverting")]
		public System.Nullable<System.Boolean> Reverting { get; set; }
		
		/// <summary>
		/// Output only. When true, the `Field`'s index configuration is set from the configuration specified by the `ancestor_field`. When false, the `Field`'s index configuration is defined explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesAncestorConfig")]
		public System.Nullable<System.Boolean> UsesAncestorConfig { get; set; }
	}
	
	/// <summary>
	/// Cloud Firestore indexes enable simple and complex queries against documents in a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2Index
	{
		
		/// <summary>
		/// The fields supported by this index. For composite indexes, this is always 2 or more fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public GoogleFirestoreAdminV1beta2IndexField[] Fields { get; set; }
		
		/// <summary>
		/// Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryScope")]
		public System.Nullable<GoogleFirestoreAdminV1beta2IndexQueryScope> QueryScope { get; set; }
		
		/// <summary>
		/// Output only. The serving state of the index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleFirestoreAdminV1beta2IndexState> State { get; set; }
	}
	
	/// <summary>
	/// A field in an index. The field_path describes which field is indexed, the value_mode describes how the field value is indexed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2IndexField
	{
		
		/// <summary>
		/// Indicates that this field supports operations on `array_value`s.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayConfig")]
		public System.Nullable<GoogleFirestoreAdminV1beta2IndexFieldArrayConfig> ArrayConfig { get; set; }
		
		/// <summary>
		/// Can be __name__. For single field indexes, this must match the name of the field or may be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldPath")]
		public string FieldPath { get; set; }
		
		/// <summary>
		/// Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<GoogleFirestoreAdminV1beta2IndexFieldOrder> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleFirestoreAdminV1beta2IndexFieldArrayConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARRAY_CONFIG_UNSPECIFIED")]
		ARRAY_CONFIG_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleFirestoreAdminV1beta2IndexFieldOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDER_UNSPECIFIED")]
		ORDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASCENDING")]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESCENDING")]
		DESCENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleFirestoreAdminV1beta2IndexQueryScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUERY_SCOPE_UNSPECIFIED")]
		QUERY_SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLLECTION")]
		COLLECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLLECTION_GROUP")]
		COLLECTION_GROUP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleFirestoreAdminV1beta2IndexState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATE_UNSPECIFIED")]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY")]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEEDS_REPAIR")]
		NEEDS_REPAIR = 3,
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.UpdateField.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2FieldOperationMetadata
	{
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesProgress")]
		public GoogleFirestoreAdminV1beta2Progress BytesProgress { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentProgress")]
		public GoogleFirestoreAdminV1beta2Progress DocumentProgress { get; set; }
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The field resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// A list of IndexConfigDelta, which describe the intent of this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexConfigDeltas")]
		public GoogleFirestoreAdminV1beta2IndexConfigDelta[] IndexConfigDeltas { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The state of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleFirestoreAdminV1RestoreDatabaseMetadataOperationState State { get; set; }
	}
	
	/// <summary>
	/// Information about an index configuration change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2IndexConfigDelta
	{
		
		/// <summary>
		/// Specifies how the index is changing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public System.Nullable<GoogleFirestoreAdminV1beta2IndexConfigDeltaChangeType> ChangeType { get; set; }
		
		/// <summary>
		/// Cloud Firestore indexes enable simple and complex queries against documents in a database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public GoogleFirestoreAdminV1beta2Index Index { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleFirestoreAdminV1beta2IndexConfigDeltaChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHANGE_TYPE_UNSPECIFIED")]
		CHANGE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADD")]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVE")]
		REMOVE = 2,
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.ImportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2ImportDocumentsMetadata
	{
		
		/// <summary>
		/// Which collection ids are being imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The location of the documents being imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUriPrefix")]
		public string InputUriPrefix { get; set; }
		
		/// <summary>
		/// The state of the import operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationState")]
		public GoogleFirestoreAdminV1RestoreDatabaseMetadataOperationState OperationState { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleFirestoreAdminV1beta2Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDocuments")]
		public GoogleFirestoreAdminV1beta2Progress ProgressDocuments { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The request for FirestoreAdmin.ImportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2ImportDocumentsRequest
	{
		
		/// <summary>
		/// Which collection ids to import. Unspecified means all collections included in the import.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// Location of the exported files. This must match the output_uri_prefix of an ExportDocumentsResponse from an export that has completed successfully. See: google.firestore.admin.v1beta2.ExportDocumentsResponse.output_uri_prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUriPrefix")]
		public string InputUriPrefix { get; set; }
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.CreateIndex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2IndexOperationMetadata
	{
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The index resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleFirestoreAdminV1beta2Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDocuments")]
		public GoogleFirestoreAdminV1beta2Progress ProgressDocuments { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The state of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleFirestoreAdminV1RestoreDatabaseMetadataOperationState State { get; set; }
	}
	
	/// <summary>
	/// The response for FirestoreAdmin.ListFields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2ListFieldsResponse
	{
		
		/// <summary>
		/// The requested fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public GoogleFirestoreAdminV1beta2Field[] Fields { get; set; }
		
		/// <summary>
		/// A page token that may be used to request another page of results. If blank, this is the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response for FirestoreAdmin.ListIndexes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleFirestoreAdminV1beta2ListIndexesResponse
	{
		
		/// <summary>
		/// The requested indexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexes")]
		public GoogleFirestoreAdminV1beta2Index[] Indexes { get; set; }
		
		/// <summary>
		/// A page token that may be used to request another page of results. If blank, this is the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleLongrunningOperation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a composite index.
		/// Firestore_projects_databases_collectionGroups_indexes_delete v1beta2/{name}
		/// </summary>
		/// <param name="name">A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firestore_projects_databases_collectionGroups_indexes_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a composite index.
		/// Firestore_projects_databases_collectionGroups_indexes_get v1beta2/{name}
		/// </summary>
		/// <param name="name">A name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1beta2Index> Firestore_projects_databases_collectionGroups_indexes_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirestoreAdminV1beta2Index>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: "index_config" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
		/// Firestore_projects_databases_collectionGroups_fields_patch v1beta2/{name}
		/// </summary>
		/// <param name="name">A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\`address.city\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.</param>
		/// <param name="updateMask">A mask, relative to the field. If specified, only configuration specified by this field_mask will be updated in the field.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_collectionGroups_fields_patchAsync(string name, string updateMask, GoogleFirestoreAdminV1beta2Field requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
		/// Firestore_projects_databases_exportDocuments v1beta2/{name}:exportDocuments
		/// </summary>
		/// <param name="name">Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_exportDocumentsAsync(string name, GoogleFirestoreAdminV1beta2ExportDocumentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":exportDocuments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.
		/// Firestore_projects_databases_importDocuments v1beta2/{name}:importDocuments
		/// </summary>
		/// <param name="name">Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_importDocumentsAsync(string name, GoogleFirestoreAdminV1beta2ImportDocumentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":importDocuments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`.
		/// Firestore_projects_databases_collectionGroups_fields_list v1beta2/{parent}/fields
		/// </summary>
		/// <param name="parent">A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`</param>
		/// <param name="filter">The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`.</param>
		/// <param name="pageSize">The number of results to return.</param>
		/// <param name="pageToken">A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1beta2ListFieldsResponse> Firestore_projects_databases_collectionGroups_fields_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fields&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirestoreAdminV1beta2ListFieldsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists composite indexes.
		/// Firestore_projects_databases_collectionGroups_indexes_list v1beta2/{parent}/indexes
		/// </summary>
		/// <param name="parent">A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`</param>
		/// <param name="filter">The filter to apply to list results.</param>
		/// <param name="pageSize">The number of results to return.</param>
		/// <param name="pageToken">A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1beta2ListIndexesResponse> Firestore_projects_databases_collectionGroups_indexes_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/indexes&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleFirestoreAdminV1beta2ListIndexesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.
		/// Firestore_projects_databases_collectionGroups_indexes_create v1beta2/{parent}/indexes
		/// </summary>
		/// <param name="parent">A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_collectionGroups_indexes_createAsync(string parent, GoogleFirestoreAdminV1beta2Index requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta2/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/indexes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleLongrunningOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
