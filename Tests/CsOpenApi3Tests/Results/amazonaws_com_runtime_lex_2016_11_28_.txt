//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAlias")]
		public string BotAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="recentIntentSummaryView")]
		public IntentSummary[] RecentIntentSummaryView { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public DialogAction DialogAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
	}
	
	/// <summary>
	/// Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checkpointLabel")]
		public string CheckpointLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public StringMap Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationStatus")]
		public ConfirmationStatus ConfirmationStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialogActionType")]
		public DialogActionType DialogActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentState")]
		public FulfillmentState FulfillmentState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotToElicit")]
		public string SlotToElicit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConfirmationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Confirmed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Denied = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DialogActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitIntent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfirmIntent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitSlot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Close = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delegate = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FulfillmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fulfilled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyForFulfillment = 2,
	}
	
	/// <summary>
	/// Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the <code>DialogAction</code> data type to set the interaction to a specific state, or to return the interaction to a previous state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DialogAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DialogActionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public StringMap Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotToElicit")]
		public string SlotToElicit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentState")]
		public FulfillmentState FulfillmentState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageFormat")]
		public MessageFormatType MessageFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessageFormatType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlainText = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomPayload = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSML = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Composite = 3,
	}
	
	/// <summary>
	/// A context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the <code>PutContent</code>, <code>PutText</code>, or <code>PutSession</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeToLive")]
		public ActiveContextTimeToLive TimeToLive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ActiveContextParametersMap Parameters { get; set; }
	}
	
	/// <summary>
	/// The length of time or number of turns that a context remains active.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveContextTimeToLive
	{
		
		[System.Runtime.Serialization.DataMember(Name="timeToLiveInSeconds")]
		public System.Nullable<System.Int32> TimeToLiveInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="turnsToLive")]
		public System.Nullable<System.Int32> TurnsToLive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveContextParametersMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostContentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioStream")]
		public string AudioStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedMediaTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotAcceptableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DependencyFailedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadGatewayException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoopDetectedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostTextResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidence")]
		public IntentConfidence NluIntentConfidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alternativeIntents")]
		public PredictedIntent[] AlternativeIntents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public StringMap Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentimentResponse")]
		public SentimentResponse SentimentResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageFormat")]
		public MessageFormatType MessageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogState")]
		public DialogState DialogState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotToElicit")]
		public string SlotToElicit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseCard")]
		public ResponseCard ResponseCard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botVersion")]
		public string BotVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
	}
	
	/// <summary>
	/// Provides a score that indicates the confidence that Amazon Lex has that an intent is the one that satisfies the user's intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntentConfidence
	{
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	/// <summary>
	/// An intent that Amazon Lex suggests satisfies the user's intent. Includes the name of the intent, the confidence that Amazon Lex has that the user's intent is satisfied, and the slots defined for the intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PredictedIntent
	{
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nluIntentConfidence")]
		public IntentConfidence NluIntentConfidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public StringMap Slots { get; set; }
	}
	
	/// <summary>
	/// <p>The sentiment expressed in an utterance.</p> <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field structure contains the result of the analysis.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sentimentLabel")]
		public string SentimentLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentimentScore")]
		public string SentimentScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DialogState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitIntent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfirmIntent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitSlot = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fulfilled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyForFulfillment = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// If you configure a response card when creating your bots, Amazon Lex substitutes the session attributes and slot values that are available, and then returns it. The response card can also come from a Lambda function ( <code>dialogCodeHook</code> and <code>fulfillmentActivity</code> on an intent).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseCard
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public ContentType ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genericAttachments")]
		public GenericAttachment[] GenericAttachments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/vnd.amazonaws.card.generic")]
		application_vnd_amazonaws_card_generic = 0,
	}
	
	/// <summary>
	/// Represents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenericAttachment
	{
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subTitle")]
		public string SubTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachmentLinkUrl")]
		public string AttachmentLinkUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buttons")]
		public Button[] Buttons { get; set; }
	}
	
	/// <summary>
	/// Represents an option to be shown on the client platform (Facebook, Slack, etc.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Button
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioStream")]
		public string AudioStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostContentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputStream")]
		public string InputStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostTextRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public StringMap RequestAttributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputText")]
		public string InputText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSessionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public DialogAction DialogAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recentIntentSummaryView")]
		public IntentSummary[] RecentIntentSummaryView { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Removes session information for a specified bot, alias, and user ID.
		/// DeleteSession bot/{botName}/alias/{botAlias}/user/{userId}/session
		/// </summary>
		/// <param name="botName">The name of the bot that contains the session data.</param>
		/// <param name="botAlias">The alias in use for the bot that contains the session data.</param>
		/// <param name="userId">The identifier of the user associated with the session data.
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSessionResponse> DeleteSessionAsync(string botName, string botAlias, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bot/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/alias/"+ (botAlias==null? "" : System.Uri.EscapeDataString(botAlias))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteSessionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing Sessions</a>.</p>
		/// PutSession bot/{botName}/alias/{botAlias}/user/{userId}/session
		/// </summary>
		/// <param name="botName">The name of the bot that contains the session data.</param>
		/// <param name="botAlias">The alias in use for the bot that contains the session data.</param>
		/// <param name="userId">The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<PutSessionResponse> PutSessionAsync(string botName, string botAlias, string userId, PutSessionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bot/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/alias/"+ (botAlias==null? "" : System.Uri.EscapeDataString(botAlias))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutSessionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns session information for a specified bot, alias, and user ID.
		/// GetSession bot/{botName}/alias/{botAlias}/user/{userId}/session/
		/// </summary>
		/// <param name="botName">The name of the bot that contains the session data.</param>
		/// <param name="botAlias">The alias in use for the bot that contains the session data.</param>
		/// <param name="userId">The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. 
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <param name="checkpointLabelFilter"><p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code> structure. </p> <p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set to that string are returned.</p>
		/// Min length: 1
		/// Max length: 255
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSessionResponse> GetSessionAsync(string botName, string botAlias, string userId, string checkpointLabelFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bot/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/alias/"+ (botAlias==null? "" : System.Uri.EscapeDataString(botAlias))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/session/&checkpointLabelFilter=" + (checkpointLabelFilter==null? "" : System.Uri.EscapeDataString(checkpointLabelFilter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSessionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. </p> <p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p> <p> In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: </p> <ul> <li> <p> For a user input "I would like a pizza," Amazon Lex might return a response with a message eliciting slot data (for example, <code>PizzaSize</code>): "What size pizza would you like?". </p> </li> <li> <p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: "Order the pizza?". </p> </li> <li> <p> After the user replies "Yes" to the confirmation prompt, Amazon Lex might return a conclusion statement: "Thank you, your cheese pizza has been ordered.". </p> </li> </ul> <p> Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: </p> <ul> <li> <p> If the message is to elicit slot data, Amazon Lex returns the following context information: </p> <ul> <li> <p> <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code> </p> </li> <li> <p> <code>x-amz-lex-intent-name</code> header set to the intent name in the current context </p> </li> <li> <p> <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code> is eliciting information </p> </li> <li> <p> <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent with their current values </p> </li> </ul> </li> <li> <p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code> header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code> header is omitted. </p> </li> <li> <p> If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted. </p> </li> </ul> <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing Conversation Context</a>. </p>
		/// PostContent bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type
		/// </summary>
		/// <param name="botName">Name of the Amazon Lex bot.</param>
		/// <param name="botAlias">Alias of the Amazon Lex bot.</param>
		/// <param name="userId"><p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the <code>userID</code> field.</p> <p>To decide the user ID to use for your application, consider the following factors.</p> <ul> <li> <p>The <code>userID</code> field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.</p> </li> <li> <p>If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.</p> </li> <li> <p>If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.</p> </li> <li> <p>A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.</p> </li> </ul>
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<PostContentResponse> PostContentAsync(string botName, string botAlias, string userId, PostContentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bot/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/alias/"+ (botAlias==null? "" : System.Uri.EscapeDataString(botAlias))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/content#Content-Type";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostContentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. </p> <p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an optional <code>responseCard</code> to display. Consider the following example messages: </p> <ul> <li> <p> For a user input "I would like a pizza", Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): "What size pizza would you like?" </p> </li> <li> <p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation "Proceed with the pizza order?". </p> </li> <li> <p> After the user replies to a confirmation prompt with a "yes", Amazon Lex might return a conclusion statement: "Thank you, your cheese pizza has been ordered.". </p> </li> </ul> <p> Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a "yes" or "no" user response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the <code>slotToElicit</code>, <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the response. Consider the following examples: </p> <ul> <li> <p>If the message is to elicit slot data, Amazon Lex returns the following context information:</p> <ul> <li> <p> <code>dialogState</code> set to ElicitSlot </p> </li> <li> <p> <code>intentName</code> set to the intent name in the current context </p> </li> <li> <p> <code>slotToElicit</code> set to the slot name for which the <code>message</code> is eliciting information </p> </li> <li> <p> <code>slots</code> set to a map of slots, configured for the intent, with currently known values </p> </li> </ul> </li> <li> <p> If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent and <code>SlotToElicit</code> is set to null. </p> </li> <li> <p>If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent and <code>slotToElicit</code> is set to null. </p> </li> </ul> <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing Conversation Context</a>. </p>
		/// PostText bot/{botName}/alias/{botAlias}/user/{userId}/text
		/// </summary>
		/// <param name="botName">The name of the Amazon Lex bot.</param>
		/// <param name="botAlias">The alias of the Amazon Lex bot.</param>
		/// <param name="userId"><p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the <code>userID</code> field.</p> <p>To decide the user ID to use for your application, consider the following factors.</p> <ul> <li> <p>The <code>userID</code> field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.</p> </li> <li> <p>If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.</p> </li> <li> <p>If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.</p> </li> <li> <p>A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.</p> </li> </ul>
		/// Min length: 2
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<PostTextResponse> PostTextAsync(string botName, string botAlias, string userId, PostTextPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bot/"+ (botName==null? "" : System.Uri.EscapeDataString(botName))+"/alias/"+ (botAlias==null? "" : System.Uri.EscapeDataString(botAlias))+"/user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/text";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostTextResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class PutSessionPostBody
	{
		
		/// <summary>
		/// Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public System.Collections.Generic.Dictionary<string, string> SessionAttributes { get; set; }
		
		/// <summary>
		/// Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the <code>DialogAction</code> data type to set the interaction to a specific state, or to return the interaction to a previous state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public PutSessionPostBodyDialogAction DialogAction { get; set; }
		
		/// <summary>
		/// <p>A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.</p> <p>An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:</p> <ul> <li> <p> <code>intentName</code> </p> </li> <li> <p>slot names</p> </li> <li> <p> <code>slotToElict</code> </p> </li> </ul> <p>If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code> request, the contents of the new summary view replaces the old summary view. For example, if a <code>GetSession</code> request returns three intents in the summary view and you call <code>PutSession</code> with one intent in the summary view, the next call to <code>GetSession</code> will only return one intent.</p>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentIntentSummaryView")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public IntentSummary[] RecentIntentSummaryView { get; set; }
		
		/// <summary>
		/// <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public ActiveContext[] ActiveContexts { get; set; }
	}
	
	public class PutSessionPostBodyDialogAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DialogActionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intentName")]
		public string IntentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public StringMap Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotToElicit")]
		public string SlotToElicit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfillmentState")]
		public FulfillmentState FulfillmentState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageFormat")]
		public MessageFormatType MessageFormat { get; set; }
	}
	
	public class PostContentPostBody
	{
		
		/// <summary>
		/// <p> User input in PCM or Opus audio format or text format as described in the <code>Content-Type</code> HTTP header. </p> <p>You can stream audio data to Amazon Lex or you can create a local buffer that captures all of the audio data before sending. In general, you get better performance if you stream audio data rather than buffering the data locally.</p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputStream")]
		public string InputStream { get; set; }
	}
	
	public class PostTextPostBody
	{
		
		/// <summary>
		/// <p>Application-specific information passed between Amazon Lex and a client application.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting Session Attributes</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public System.Collections.Generic.Dictionary<string, string> SessionAttributes { get; set; }
		
		/// <summary>
		/// <p>Request-specific information passed between Amazon Lex and a client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting Request Attributes</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public System.Collections.Generic.Dictionary<string, string> RequestAttributes { get; set; }
		
		/// <summary>
		/// The text that the user entered (Amazon Lex interprets this text).
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputText")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string InputText { get; set; }
		
		/// <summary>
		/// <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public ActiveContext[] ActiveContexts { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
