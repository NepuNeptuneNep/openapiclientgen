//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public JobExecution Execution { get; set; }
	}
	
	/// <summary>
	/// Contains data about a job execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public DetailsMap StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedAt")]
		public System.Nullable<System.Int32> QueuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.Nullable<System.Int32> StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.Nullable<System.Int32> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approximateSecondsBeforeTimedOut")]
		public System.Nullable<System.Int32> ApproximateSecondsBeforeTimedOut { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionNumber")]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionNumber")]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobDocument")]
		public string JobDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUEUED")]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMED_OUT")]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVED")]
		REMOVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetailsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminalStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPendingJobExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="inProgressJobs")]
		public JobExecutionSummary[] InProgressJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedJobs")]
		public JobExecutionSummary[] QueuedJobs { get; set; }
	}
	
	/// <summary>
	/// Contains a subset of information about a job execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queuedAt")]
		public System.Nullable<System.Int32> QueuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.Nullable<System.Int32> StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.Nullable<System.Int32> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionNumber")]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionNumber")]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartNextPendingJobExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public JobExecution Execution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateJobExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionState")]
		public JobExecutionState ExecutionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobDocument")]
		public string JobDocument { get; set; }
	}
	
	/// <summary>
	/// Contains data about the state of a job execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobExecutionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public DetailsMap StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionNumber")]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidStateTransitionException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobExecutionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPendingJobExecutionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartNextPendingJobExecutionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public DetailsMap StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTimeoutInMinutes")]
		public System.Nullable<System.Int32> StepTimeoutInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateJobExecutionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public DetailsMap StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepTimeoutInMinutes")]
		public System.Nullable<System.Int32> StepTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeJobExecutionState")]
		public System.Nullable<System.Boolean> IncludeJobExecutionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeJobDocument")]
		public System.Nullable<System.Boolean> IncludeJobDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionNumber")]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets details of a job execution.
		/// DescribeJobExecution things/{thingName}/jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The unique identifier assigned to this job when it was created.</param>
		/// <param name="thingName">The thing name associated with the device the job execution is running on.</param>
		/// <param name="includeJobDocument">Optional. When set to true, the response contains the job document. The default is false.</param>
		/// <param name="executionNumber">Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobExecutionResponse> DescribeJobExecutionAsync(string jobId, string thingName, bool includeJobDocument, int executionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&includeJobDocument="+includeJobDocument+"&executionNumber="+executionNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeJobExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the status of a job execution.
		/// UpdateJobExecution things/{thingName}/jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The unique identifier assigned to this job when it was created.</param>
		/// <param name="thingName">The name of the thing associated with the device.</param>
		/// <returns>Success</returns>
		public async Task<UpdateJobExecutionResponse> UpdateJobExecutionAsync(string jobId, string thingName, UpdateJobExecutionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateJobExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the list of all jobs for a thing that are not in a terminal status.
		/// GetPendingJobExecutions things/{thingName}/jobs
		/// </summary>
		/// <param name="thingName">The name of the thing that is executing the job.</param>
		/// <returns>Success</returns>
		public async Task<GetPendingJobExecutionsResponse> GetPendingJobExecutionsAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPendingJobExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets and starts the next pending (status IN_PROGRESS or QUEUED) job execution for a thing.
		/// StartNextPendingJobExecution things/{thingName}/jobs/$next
		/// </summary>
		/// <param name="thingName">The name of the thing associated with the device.</param>
		/// <returns>Success</returns>
		public async Task<StartNextPendingJobExecutionResponse> StartNextPendingJobExecutionAsync(string thingName, StartNextPendingJobExecutionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "things/"+ (thingName==null? "" : System.Uri.EscapeDataString(thingName))+"/jobs/$next";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartNextPendingJobExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class UpdateJobExecutionPostBody
	{
		
		/// <summary>
		/// The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobExecutionStatus Status { get; set; }
		
		/// <summary>
		///  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public System.Collections.Generic.Dictionary<string, string> StatusDetails { get; set; }
		
		/// <summary>
		/// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepTimeoutInMinutes")]
		public System.Nullable<System.Int32> StepTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedVersion")]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		/// <summary>
		/// Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeJobExecutionState")]
		public System.Nullable<System.Boolean> IncludeJobExecutionState { get; set; }
		
		/// <summary>
		/// Optional. When set to true, the response contains the job document. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeJobDocument")]
		public System.Nullable<System.Boolean> IncludeJobDocument { get; set; }
		
		/// <summary>
		/// Optional. A number that identifies a particular job execution on a particular device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionNumber")]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
	}
	
	public class StartNextPendingJobExecutionPutBody
	{
		
		/// <summary>
		/// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetails")]
		public System.Collections.Generic.Dictionary<string, string> StatusDetails { get; set; }
		
		/// <summary>
		/// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in field <code>stepTimeoutInMinutes</code>) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepTimeoutInMinutes")]
		public System.Nullable<System.Int32> StepTimeoutInMinutes { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
