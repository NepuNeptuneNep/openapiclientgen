//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAccessTokenResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiresTime")]
		public System.DateTimeOffset ExpiresTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessTokenId")]
		public string AccessTokenId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDevEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Information about a repository that will be cloned to a Dev Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
	}
	
	/// <summary>
	/// Information about the configuration of an integrated development environment (IDE) for a Dev Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="runtime")]
		public string Runtime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProjectResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSourceRepositoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSourceRepositoryBranchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headCommitId")]
		public string HeadCommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAccessTokenResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDevEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProjectResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSourceRepositoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSpaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDevEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creatorId")]
		public string CreatorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DevEnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public DevEnvironmentRepositorySummary[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ides")]
		public Ide[] Ides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public InstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		public int InactivityTimeoutMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persistentStorage")]
		public PersistentStorage PersistentStorage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DevEnvironmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 7,
	}
	
	/// <summary>
	/// Information about the source repsitory for a Dev Environment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevEnvironmentRepositorySummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositoryName")]
		public string RepositoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
	}
	
	/// <summary>
	/// Information about an integrated development environment (IDE) used in a Dev Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Ide
	{
		
		[System.Runtime.Serialization.DataMember(Name="runtime")]
		public string Runtime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.small")]
		dev_standard1_small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.medium")]
		dev_standard1_medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.large")]
		dev_standard1_large = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.xlarge")]
		dev_standard1_xlarge = 3,
	}
	
	/// <summary>
	/// Information about the persistent storage for a Dev Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PersistentStorage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sizeInGiB")]
		public int SizeInGiB { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProjectResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSourceRepositoryResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSourceRepositoryCloneUrlsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="https")]
		public string Https { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSpaceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSubscriptionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionType")]
		public string SubscriptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountName")]
		public string AwsAccountName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUserDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryEmail")]
		public EmailAddress PrimaryEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about an email address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccessTokensResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AccessTokenSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a specified personal access token (PAT).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokenSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresTime")]
		public System.DateTimeOffset ExpiresTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevEnvironmentSessionsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DevEnvironmentSessionSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about active sessions for a Dev Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevEnvironmentSessionSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="devEnvironmentId")]
		public string DevEnvironmentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedTime")]
		public System.DateTimeOffset StartedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevEnvironmentsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DevEnvironmentSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a Dev Environment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevEnvironmentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creatorId")]
		public string CreatorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DevEnvironmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public DevEnvironmentRepositorySummary[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ides")]
		public Ide[] Ides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public InstanceType InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		public int InactivityTimeoutMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persistentStorage")]
		public PersistentStorage PersistentStorage { get; set; }
	}
	
	/// <summary>
	/// Information about a filter used to limit results of a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparisonOperator")]
		public string ComparisonOperator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventLogsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EventLogEntry[] Items { get; set; }
	}
	
	/// <summary>
	/// Information about an entry in an event log of Amazon CodeCatalyst activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventLogEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventCategory")]
		public string EventCategory { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventSource")]
		public string EventSource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTime")]
		public System.DateTimeOffset EventTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public OperationType OperationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public UserIdentity UserIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectInformation")]
		public ProjectInformation ProjectInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestPayload")]
		public EventPayload RequestPayload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responsePayload")]
		public EventPayload ResponsePayload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceIpAddress")]
		public string SourceIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userAgent")]
		public string UserAgent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUTATION = 1,
	}
	
	/// <summary>
	/// Information about a user whose activity is recorded in an event for a space.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserIdentity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public UserType UserType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountId")]
		public string AwsAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_ACCOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	/// <summary>
	/// Information about a project in a space.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Information about the payload of an event recording Amazon CodeCatalyst activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProjectsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ProjectSummary[] Items { get; set; }
	}
	
	/// <summary>
	/// Information about a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// nformation about the filter used to narrow the results returned in a list of projects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectListFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public FilterKey Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparisonOperator")]
		public ComparisonOperator ComparisonOperator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hasAccessTo = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSourceRepositoriesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ListSourceRepositoriesItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a source repository returned in a list of source repositories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSourceRepositoriesItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdTime")]
		public System.DateTimeOffset CreatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSourceRepositoryBranchesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ListSourceRepositoryBranchesItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Information about a branch of a source repository returned in a list of branches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSourceRepositoryBranchesItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTime")]
		public System.DateTimeOffset LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headCommitId")]
		public string HeadCommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSpacesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SpaceSummary[] Items { get; set; }
	}
	
	/// <summary>
	/// Information about an space.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpaceSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="regionName")]
		public string RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDevEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DevEnvironmentStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDevEnvironmentSessionResponse
	{
		
		/// <summary>
		/// Information about connection details for a Dev Environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessDetails")]
		public DevEnvironmentAccessDetails AccessDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Information about connection details for a Dev Environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevEnvironmentAccessDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streamUrl")]
		public string StreamUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenValue")]
		public string TokenValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DevEnvironmentSessionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSH = 1,
	}
	
	/// <summary>
	/// Information about the commands that will be run on a Dev Environment when an SSH session begins.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteCommandSessionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string[] Arguments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDevEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DevEnvironmentStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDevEnvironmentSessionResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDevEnvironmentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ides")]
		public IdeConfiguration[] Ides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		public System.Nullable<System.Int32> InactivityTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="spaceName")]
		public string SpaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSpaceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifySessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAccessTokenRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresTime")]
		public System.DateTimeOffset ExpiresTime { get; set; }
	}
	
	/// <summary>
	/// Information about the configuration of persistent storage for a Dev Environment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PersistentStorageConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sizeInGiB")]
		public int SizeInGiB { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDevEnvironmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public RepositoryInput[] Repositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ides")]
		public IdeConfiguration[] Ides { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		public System.Nullable<System.Int32> InactivityTimeoutMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persistentStorage")]
		public PersistentStorageConfiguration PersistentStorage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSourceRepositoryBranchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="headCommitId")]
		public string HeadCommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSourceRepositoryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAccessTokenRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDevEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSourceRepositoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSpaceRequest
	{
	}
	
	/// <summary>
	/// Information about the configuration of a Dev Environment session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevEnvironmentSessionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionType")]
		public DevEnvironmentSessionType SessionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executeCommandSessionConfiguration")]
		public ExecuteCommandSessionConfiguration ExecuteCommandSessionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDevEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProjectRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSourceRepositoryCloneUrlsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSourceRepositoryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSpaceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSubscriptionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetUserDetailsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAccessTokensRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevEnvironmentSessionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDevEnvironmentsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventLogsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProjectsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ProjectListFilter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSourceRepositoriesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSourceRepositoryBranchesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSpacesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDevEnvironmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="ides")]
		public IdeConfiguration[] Ides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		public System.Nullable<System.Int32> InactivityTimeoutMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDevEnvironmentSessionRequest
	{
		
		/// <summary>
		/// Information about the configuration of a Dev Environment session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionConfiguration")]
		public DevEnvironmentSessionConfiguration SessionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDevEnvironmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDevEnvironmentSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDevEnvironmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ides")]
		public IdeConfiguration[] Ides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		public System.Nullable<System.Int32> InactivityTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProjectRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSpaceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a personal access token (PAT) for the current user. A personal access token (PAT) is similar to a password. It is associated with your user identity for use across all spaces and projects in Amazon CodeCatalyst. You use PATs to access CodeCatalyst from resources that include integrated development environments (IDEs) and Git-based source repositories. PATs represent you in Amazon CodeCatalyst and you can manage them in your user settings.For more information, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/ipa-tokens-keys.html">Managing personal access tokens in Amazon CodeCatalyst</a>.
		/// CreateAccessToken v1/accessTokens
		/// </summary>
		public async Task CreateAccessTokenAsync(CreateAccessTokenPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accessTokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all personal access tokens (PATs) associated with the user who calls the API. You can only list PATs associated with your Amazon Web Services Builder ID.
		/// ListAccessTokens v1/accessTokens
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAccessTokensResponse> ListAccessTokensAsync(string maxResults, string nextToken, ListAccessTokensPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accessTokens?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAccessTokensResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Dev Environment in Amazon CodeCatalyst, a cloud-based development environment that you can use to quickly work on the code stored in the source repositories of your project. </p> <note> <p>When created in the Amazon CodeCatalyst console, by default a Dev Environment is configured to have a 2 core processor, 4GB of RAM, and 16GB of persistent storage. None of these defaults apply to a Dev Environment created programmatically.</p> </note>
		/// CreateDevEnvironment v1/spaces/{spaceName}/projects/{projectName}/devEnvironments
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		public async Task CreateDevEnvironmentAsync(string spaceName, string projectName, CreateDevEnvironmentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of Dev Environments in a project.
		/// ListDevEnvironments v1/spaces/{spaceName}/projects/{projectName}/devEnvironments
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevEnvironmentsResponse> ListDevEnvironmentsAsync(string spaceName, string projectName, string maxResults, string nextToken, ListDevEnvironmentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDevEnvironmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a project in a specified space.
		/// CreateProject v1/spaces/{spaceName}/projects
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		public async Task CreateProjectAsync(string spaceName, CreateProjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of projects.
		/// ListProjects v1/spaces/{spaceName}/projects
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProjectsResponse> ListProjectsAsync(string spaceName, string maxResults, string nextToken, ListProjectsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProjectsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an empty Git-based source repository in a specified project. The repository is created with an initial empty commit with a default branch named <code>main</code>.
		/// CreateSourceRepository v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{name}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="name">The name of the source repository. For more information about name requirements, see <a href="https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html">Quotas for source repositories</a>.
		/// Min length: 1
		/// Max length: 100
		// </param>
		public async Task CreateSourceRepositoryAsync(string spaceName, string projectName, string name, CreateSourceRepositoryPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/sourceRepositories/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a source repository in Amazon CodeCatalyst. You cannot use this API to delete a linked repository. It can only be used to delete a Amazon CodeCatalyst source repository.
		/// DeleteSourceRepository v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{name}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="name">The name of the source repository.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSourceRepositoryResponse> DeleteSourceRepositoryAsync(string spaceName, string projectName, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/sourceRepositories/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSourceRepositoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a source repository.
		/// GetSourceRepository v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{name}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="name">The name of the source repository.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSourceRepositoryResponse> GetSourceRepositoryAsync(string spaceName, string projectName, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/sourceRepositories/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSourceRepositoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a branch in a specified source repository in Amazon CodeCatalyst. </p> <note> <p>This API only creates a branch in a source repository hosted in Amazon CodeCatalyst. You cannot use this API to create a branch in a linked repository.</p> </note>
		/// CreateSourceRepositoryBranch v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{sourceRepositoryName}/branches/{name}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="sourceRepositoryName">The name of the repository where you want to create a branch.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="name">The name for the branch you're creating.
		/// Min length: 1
		/// Max length: 100
		// </param>
		public async Task CreateSourceRepositoryBranchAsync(string spaceName, string projectName, string sourceRepositoryName, string name, CreateSourceRepositoryBranchPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/sourceRepositories/"+ (sourceRepositoryName==null? "" : System.Uri.EscapeDataString(sourceRepositoryName))+"/branches/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a specified personal access token (PAT). A personal access token can only be deleted by the user who created it.
		/// DeleteAccessToken v1/accessTokens/{id}
		/// </summary>
		/// <param name="id">The ID of the personal access token to delete. You can find the IDs of all PATs associated with your Amazon Web Services Builder ID in a space by calling <a>ListAccessTokens</a>.
		/// Min length: 1
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteAccessTokenResponse> DeleteAccessTokenAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/accessTokens/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAccessTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Dev Environment.
		/// DeleteDevEnvironment v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="id">The system-generated unique ID of the Dev Environment you want to delete. To retrieve a list of Dev Environment IDs, use <a>ListDevEnvironments</a>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDevEnvironmentResponse> DeleteDevEnvironmentAsync(string spaceName, string projectName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDevEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a Dev Environment for a source repository in a project. Dev Environments are specific to the user who creates them.
		/// GetDevEnvironment v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="id">The system-generated unique ID of the Dev Environment for which you want to view information. To retrieve a list of Dev Environment IDs, use <a>ListDevEnvironments</a>.</param>
		/// <returns>Success</returns>
		public async Task<GetDevEnvironmentResponse> GetDevEnvironmentAsync(string spaceName, string projectName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDevEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes one or more values for a Dev Environment. Updating certain values of the Dev Environment will cause a restart.
		/// UpdateDevEnvironment v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="id">The system-generated unique ID of the Dev Environment. </param>
		/// <returns>Success</returns>
		public async Task<UpdateDevEnvironmentResponse> UpdateDevEnvironmentAsync(string spaceName, string projectName, string id, UpdateDevEnvironmentPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDevEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a project in a space.
		/// DeleteProject v1/spaces/{spaceName}/projects/{name}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="name">The name of the project in the space. To retrieve a list of project names, use <a>ListProjects</a>.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteProjectResponse> DeleteProjectAsync(string spaceName, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a project.
		/// GetProject v1/spaces/{spaceName}/projects/{name}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="name">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task<GetProjectResponse> GetProjectAsync(string spaceName, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes one or more values for a project.
		/// UpdateProject v1/spaces/{spaceName}/projects/{name}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="name">The name of the project.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProjectResponse> UpdateProjectAsync(string spaceName, string name, UpdateProjectPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProjectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a space.</p> <important> <p>Deleting a space cannot be undone. Additionally, since space names must be unique across Amazon CodeCatalyst, you cannot reuse names of deleted spaces.</p> </important>
		/// DeleteSpace v1/spaces/{name}
		/// </summary>
		/// <param name="name">The name of the space. To retrieve a list of space names, use <a>ListSpaces</a>.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSpaceResponse> DeleteSpaceAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSpaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about an space.
		/// GetSpace v1/spaces/{name}
		/// </summary>
		/// <param name="name">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSpaceResponse> GetSpaceAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSpaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes one or more values for a space.
		/// UpdateSpace v1/spaces/{name}
		/// </summary>
		/// <param name="name">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSpaceResponse> UpdateSpaceAsync(string name, UpdateSpacePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSpaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the URLs that can be used with a Git client to clone a source repository.
		/// GetSourceRepositoryCloneUrls v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{sourceRepositoryName}/cloneUrls
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="sourceRepositoryName">The name of the source repository.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSourceRepositoryCloneUrlsResponse> GetSourceRepositoryCloneUrlsAsync(string spaceName, string projectName, string sourceRepositoryName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/sourceRepositories/"+ (sourceRepositoryName==null? "" : System.Uri.EscapeDataString(sourceRepositoryName))+"/cloneUrls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSourceRepositoryCloneUrlsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the Amazon Web Services account used for billing purposes and the billing plan for the space.
		/// GetSubscription v1/spaces/{spaceName}/subscription
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSubscriptionResponse> GetSubscriptionAsync(string spaceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/subscription";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSubscriptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a user.
		/// GetUserDetails userDetails
		/// </summary>
		/// <param name="id">The system-generated unique ID of the user. 
		/// Min length: 1
		/// Max length: 256
		// </param>
		/// <param name="userName">The name of the user as displayed in Amazon CodeCatalyst.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetUserDetailsResponse> GetUserDetailsAsync(string id, string userName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userDetails?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUserDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of active sessions for a Dev Environment in a project.
		/// ListDevEnvironmentSessions v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{devEnvironmentId}/sessions
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="devEnvironmentId">The system-generated unique ID of the Dev Environment.</param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevEnvironmentSessionsResponse> ListDevEnvironmentSessionsAsync(string spaceName, string projectName, string devEnvironmentId, string maxResults, string nextToken, ListDevEnvironmentSessionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (devEnvironmentId==null? "" : System.Uri.EscapeDataString(devEnvironmentId))+"/sessions&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDevEnvironmentSessionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of events that occurred during a specified time period in a space. You can use these events to audit user and system activity in a space.
		/// ListEventLogs v1/spaces/{spaceName}/eventLogs
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEventLogsResponse> ListEventLogsAsync(string spaceName, string maxResults, string nextToken, ListEventLogsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/eventLogs&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEventLogsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of source repositories in a project.
		/// ListSourceRepositories v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSourceRepositoriesResponse> ListSourceRepositoriesAsync(string spaceName, string projectName, string maxResults, string nextToken, ListSourceRepositoriesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/sourceRepositories&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSourceRepositoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of branches in a specified source repository.
		/// ListSourceRepositoryBranches v1/spaces/{spaceName}/projects/{projectName}/sourceRepositories/{sourceRepositoryName}/branches
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="sourceRepositoryName">The name of the source repository.
		/// Min length: 1
		/// Max length: 100
		// </param>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSourceRepositoryBranchesResponse> ListSourceRepositoryBranchesAsync(string spaceName, string projectName, string sourceRepositoryName, string maxResults, string nextToken, ListSourceRepositoryBranchesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/sourceRepositories/"+ (sourceRepositoryName==null? "" : System.Uri.EscapeDataString(sourceRepositoryName))+"/branches&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSourceRepositoryBranchesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of spaces.
		/// ListSpaces v1/spaces
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSpacesResponse> ListSpacesAsync(string nextToken, ListSpacesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSpacesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a specified Dev Environment and puts it into an active state.
		/// StartDevEnvironment v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/start
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="id">The system-generated unique ID of the Dev Environment. </param>
		/// <returns>Success</returns>
		public async Task<StartDevEnvironmentResponse> StartDevEnvironmentAsync(string spaceName, string projectName, string id, StartDevEnvironmentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartDevEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a session for a specified Dev Environment.
		/// StartDevEnvironmentSession v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/session
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="id">The system-generated unique ID of the Dev Environment.</param>
		/// <returns>Success</returns>
		public async Task<StartDevEnvironmentSessionResponse> StartDevEnvironmentSessionAsync(string spaceName, string projectName, string id, StartDevEnvironmentSessionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartDevEnvironmentSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pauses a specified Dev Environment and places it in a non-running state. Stopped Dev Environments do not consume compute minutes.
		/// StopDevEnvironment v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/stop
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="id">The system-generated unique ID of the Dev Environment. </param>
		/// <returns>Success</returns>
		public async Task<StopDevEnvironmentResponse> StopDevEnvironmentAsync(string spaceName, string projectName, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopDevEnvironmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a session for a specified Dev Environment.
		/// StopDevEnvironmentSession v1/spaces/{spaceName}/projects/{projectName}/devEnvironments/{id}/session/{sessionId}
		/// </summary>
		/// <param name="spaceName">The name of the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="projectName">The name of the project in the space.
		/// Min length: 3
		/// Max length: 63
		// </param>
		/// <param name="id">The system-generated unique ID of the Dev Environment. To obtain this ID, use <a>ListDevEnvironments</a>.</param>
		/// <param name="sessionId">The system-generated unique ID of the Dev Environment session. This ID is returned by <a>StartDevEnvironmentSession</a>.
		/// Min length: 1
		/// Max length: 96
		// </param>
		/// <returns>Success</returns>
		public async Task<StopDevEnvironmentSessionResponse> StopDevEnvironmentSessionAsync(string spaceName, string projectName, string id, string sessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/spaces/"+ (spaceName==null? "" : System.Uri.EscapeDataString(spaceName))+"/projects/"+ (projectName==null? "" : System.Uri.EscapeDataString(projectName))+"/devEnvironments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/session/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopDevEnvironmentSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies whether the calling user has a valid Amazon CodeCatalyst login and session. If successful, this returns the ID of the user in Amazon CodeCatalyst.
		/// VerifySession session
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VerifySessionResponse> VerifySessionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VerifySessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateAccessTokenPutBody
	{
		
		/// <summary>
		/// The friendly name of the personal access token.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The date and time the personal access token expires, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresTime")]
		public System.Nullable<System.DateTimeOffset> ExpiresTime { get; set; }
	}
	
	public class ListAccessTokensPostBody
	{
		
		/// <summary>
		/// The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 10)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
	}
	
	public class CreateDevEnvironmentPutBody
	{
		
		/// <summary>
		/// The source repository that contains the branch to clone into the Dev Environment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositories")]
		public RepositoryInput[] Repositories { get; set; }
		
		/// <summary>
		/// A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The user-defined alias for a Dev Environment.
		/// Min length: 1
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9]+(?:[-_\.][a-zA-Z0-9]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+(?:[-_\.][a-zA-Z0-9]+)*")]
		public string Alias { get; set; }
		
		/// <summary>
		/// <p>Information about the integrated development environment (IDE) configured for a Dev Environment.</p> <note> <p>An IDE is required to create a Dev Environment. For Dev Environment creation, this field contains configuration information and must be provided. </p> </note>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ides")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public IdeConfiguration[] Ides { get; set; }
		
		/// <summary>
		/// The Amazon EC2 instace type to use for the Dev Environment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public CreateDevEnvironmentPutBodyInstanceType InstanceType { get; set; }
		
		/// <summary>
		/// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
		/// Minimum: 0
		/// Maximum: 1200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 1200)]
		public System.Nullable<System.Int32> InactivityTimeoutMinutes { get; set; }
		
		/// <summary>
		/// Information about the configuration of persistent storage for a Dev Environment. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persistentStorage")]
		public CreateDevEnvironmentPutBodyPersistentStorage PersistentStorage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateDevEnvironmentPutBodyInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.small")]
		dev_standard1_small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.medium")]
		dev_standard1_medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.large")]
		dev_standard1_large = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.xlarge")]
		dev_standard1_xlarge = 3,
	}
	
	public class CreateDevEnvironmentPutBodyPersistentStorage
	{
		
		[System.Runtime.Serialization.DataMember(Name="sizeInGiB")]
		public System.Nullable<System.Int32> SizeInGiB { get; set; }
	}
	
	public class ListDevEnvironmentsPostBody
	{
		
		/// <summary>
		/// Information about filters to apply to narrow the results returned in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class CreateProjectPutBody
	{
		
		/// <summary>
		/// The friendly name of the project that will be displayed to users.
		/// Required
		/// Min length: 3
		/// Max length: 63
		/// Pattern: [a-zA-Z0-9]+(?:[-_\. ][a-zA-Z0-9]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+(?:[-_\. ][a-zA-Z0-9]+)*")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
		/// Min length: 0
		/// Max length: 200
		/// Pattern: [a-zA-Z0-9]+(?:[-_a-zA-Z0-9.,;:/\+=?&$%    ])*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+(?:[-_a-zA-Z0-9.,;:/\+=?&$%    ])*")]
		public string Description { get; set; }
	}
	
	public class ListProjectsPostBody
	{
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Information about filters to apply to narrow the results returned in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ProjectListFilter[] Filters { get; set; }
	}
	
	public class CreateSourceRepositoryPutBody
	{
		
		/// <summary>
		/// The description of the source repository.
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
	}
	
	public class CreateSourceRepositoryBranchPutBody
	{
		
		/// <summary>
		/// The commit ID in an existing branch from which you want to create the new branch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headCommitId")]
		public string HeadCommitId { get; set; }
	}
	
	public class UpdateDevEnvironmentPatchBody
	{
		
		/// <summary>
		/// The user-specified alias for the Dev Environment. Changing this value will not cause a restart.
		/// Min length: 0
		/// Max length: 128
		/// Pattern: $|^[a-zA-Z0-9]+(?:[-_\.][a-zA-Z0-9]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"$|^[a-zA-Z0-9]+(?:[-_\.][a-zA-Z0-9]+)*")]
		public string Alias { get; set; }
		
		/// <summary>
		/// Information about the integrated development environment (IDE) configured for a Dev Environment.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ides")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public IdeConfiguration[] Ides { get; set; }
		
		/// <summary>
		/// <p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note> <p>Changing this value will cause a restart of the Dev Environment if it is running.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public System.Nullable<UpdateDevEnvironmentPatchBodyInstanceType> InstanceType { get; set; }
		
		/// <summary>
		/// <p>The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.</p> <note> <p>Changing this value will cause a restart of the Dev Environment if it is running.</p> </note>
		/// Minimum: 0
		/// Maximum: 1200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 1200)]
		public System.Nullable<System.Int32> InactivityTimeoutMinutes { get; set; }
		
		/// <summary>
		/// A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect.
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateDevEnvironmentPatchBodyInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.small")]
		dev_standard1_small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.medium")]
		dev_standard1_medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.large")]
		dev_standard1_large = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.xlarge")]
		dev_standard1_xlarge = 3,
	}
	
	public class UpdateProjectPatchBody
	{
		
		/// <summary>
		/// The description of the project.
		/// Min length: 0
		/// Max length: 200
		/// Pattern: [a-zA-Z0-9]+(?:[-_a-zA-Z0-9.,;:/\+=?&$%    ])*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+(?:[-_a-zA-Z0-9.,;:/\+=?&$%    ])*")]
		public string Description { get; set; }
	}
	
	public class UpdateSpacePatchBody
	{
		
		/// <summary>
		/// The description of the space.
		/// Min length: 0
		/// Max length: 200
		/// Pattern: [a-zA-Z0-9]+(?:[-_a-zA-Z0-9.,;:/\+=?&$%    ])*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9]+(?:[-_a-zA-Z0-9.,;:/\+=?&$%    ])*")]
		public string Description { get; set; }
	}
	
	public class ListDevEnvironmentSessionsPostBody
	{
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListEventLogsPostBody
	{
		
		/// <summary>
		/// The date and time when you want to start retrieving events, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// The time after which you do not want any events retrieved, in coordinated universal time (UTC) timestamp format as specified in <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// The name of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListSourceRepositoriesPostBody
	{
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListSourceRepositoryBranchesPostBody
	{
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to show in a single call to this API. If the number of results is larger than the number you specified, the response will include a <code>NextToken</code> element, which you can use to obtain additional results.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListSpacesPostBody
	{
		
		/// <summary>
		/// A token returned from a call to this API to indicate the next batch of results to return, if any.
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string NextToken { get; set; }
	}
	
	public class StartDevEnvironmentPutBody
	{
		
		/// <summary>
		/// Information about the integrated development environment (IDE) configured for a Dev Environment. 
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ides")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public IdeConfiguration[] Ides { get; set; }
		
		/// <summary>
		/// The Amazon EC2 instace type to use for the Dev Environment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public System.Nullable<StartDevEnvironmentPutBodyInstanceType> InstanceType { get; set; }
		
		/// <summary>
		/// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
		/// Minimum: 0
		/// Maximum: 1200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inactivityTimeoutMinutes")]
		[System.ComponentModel.DataAnnotations.Range(0, 1200)]
		public System.Nullable<System.Int32> InactivityTimeoutMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StartDevEnvironmentPutBodyInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.small")]
		dev_standard1_small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.medium")]
		dev_standard1_medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.large")]
		dev_standard1_large = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dev.standard1.xlarge")]
		dev_standard1_xlarge = 3,
	}
	
	public class StartDevEnvironmentSessionPutBody
	{
		
		/// <summary>
		/// Information about the configuration of a Dev Environment session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionConfiguration")]
		public StartDevEnvironmentSessionPutBodySessionConfiguration SessionConfiguration { get; set; }
	}
	
	public class StartDevEnvironmentSessionPutBodySessionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionType")]
		public DevEnvironmentSessionType SessionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executeCommandSessionConfiguration")]
		public ExecuteCommandSessionConfiguration ExecuteCommandSessionConfiguration { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
