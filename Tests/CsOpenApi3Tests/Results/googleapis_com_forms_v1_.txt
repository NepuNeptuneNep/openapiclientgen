//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The submitted answer for a question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Answer
	{
		
		/// <summary>
		/// All submitted files for a FileUpload question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUploadAnswers")]
		public FileUploadAnswers FileUploadAnswers { get; set; }
		
		/// <summary>
		/// Grade information associated with a respondent's answer to a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grade")]
		public Grade Grade { get; set; }
		
		/// <summary>
		/// Output only. The question's ID. See also Question.question_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionId")]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// A question's answers as text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textAnswers")]
		public TextAnswers TextAnswers { get; set; }
	}
	
	/// <summary>
	/// All submitted files for a FileUpload question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileUploadAnswers
	{
		
		/// <summary>
		/// Output only. All submitted files for a FileUpload question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public FileUploadAnswer[] Answers { get; set; }
	}
	
	/// <summary>
	/// Info for a single file submitted to a file upload question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileUploadAnswer
	{
		
		/// <summary>
		/// Output only. The ID of the Google Drive file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public string FileId { get; set; }
		
		/// <summary>
		/// Output only. The file name, as stored in Google Drive on upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Output only. The MIME type of the file, as stored in Google Drive on upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// Grade information associated with a respondent's answer to a question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Grade
	{
		
		/// <summary>
		/// Output only. Whether the question was answered correctly or not. A zero-point score is not enough to infer incorrectness, since a correctly answered question could be worth zero points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correct")]
		public System.Nullable<System.Boolean> Correct { get; set; }
		
		/// <summary>
		/// Feedback for a respondent about their response to a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public Feedback Feedback { get; set; }
		
		/// <summary>
		/// Output only. The numeric score awarded for the answer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	/// <summary>
	/// Feedback for a respondent about their response to a question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Feedback
	{
		
		/// <summary>
		/// Additional information provided as part of the feedback, often used to point the respondent to more reading and resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material")]
		public ExtraMaterial[] Material { get; set; }
		
		/// <summary>
		/// Required. The main text of the feedback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Supplementary material to the feedback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExtraMaterial
	{
		
		/// <summary>
		/// Link for text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public TextLink Link { get; set; }
		
		/// <summary>
		/// Link to a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public VideoLink Video { get; set; }
	}
	
	/// <summary>
	/// Link for text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextLink
	{
		
		/// <summary>
		/// Required. Display text for the URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayText")]
		public string DisplayText { get; set; }
		
		/// <summary>
		/// Required. The URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Link to a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoLink
	{
		
		/// <summary>
		/// Required. The display text for the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayText")]
		public string DisplayText { get; set; }
		
		/// <summary>
		/// The URI of a YouTube video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	/// <summary>
	/// A question's answers as text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextAnswers
	{
		
		/// <summary>
		/// Output only. Answers to a question. For multiple-value ChoiceQuestions, each answer is a separate value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public TextAnswer[] Answers { get; set; }
	}
	
	/// <summary>
	/// An answer to a question represented as text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextAnswer
	{
		
		/// <summary>
		/// Output only. The answer value. Formatting used for different kinds of question: * ChoiceQuestion * `RADIO` or `DROP_DOWN`: A single string corresponding to the option that was selected. * `CHECKBOX`: Multiple strings corresponding to each option that was selected. * TextQuestion: The text that the user entered. * ScaleQuestion: A string containing the number that was selected. * DateQuestion * Without time or year: MM-DD e.g. "05-19" * With year: YYYY-MM-DD e.g. "1986-05-19" * With time: MM-DD HH:MM e.g. "05-19 14:51" * With year and time: YYYY-MM-DD HH:MM e.g. "1986-05-19 14:51" * TimeQuestion: String with time or duration in HH:MM format e.g. "14:51" * RowQuestion within QuestionGroupItem: The answer for each row of a QuestionGroupItem is represented as a separate Answer. Each will contain one string for `RADIO`-type choices or multiple strings for `CHECKBOX` choices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A batch of updates to perform on a form. All the specified updates are made or none of them are.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpdateFormRequest
	{
		
		/// <summary>
		/// Whether to return an updated version of the model in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeFormInResponse")]
		public System.Nullable<System.Boolean> IncludeFormInResponse { get; set; }
		
		/// <summary>
		/// Required. The update requests of this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public Request[] Requests { get; set; }
		
		/// <summary>
		/// Provides control over how write requests are executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeControl")]
		public WriteControl WriteControl { get; set; }
	}
	
	/// <summary>
	/// The kinds of update requests that can be made.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Request
	{
		
		/// <summary>
		/// Create an item in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createItem")]
		public CreateItemRequest CreateItem { get; set; }
		
		/// <summary>
		/// Delete an item in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteItem")]
		public DeleteItemRequest DeleteItem { get; set; }
		
		/// <summary>
		/// Move an item in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moveItem")]
		public MoveItemRequest MoveItem { get; set; }
		
		/// <summary>
		/// Update Form's Info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateFormInfo")]
		public UpdateFormInfoRequest UpdateFormInfo { get; set; }
		
		/// <summary>
		/// Update an item in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateItem")]
		public UpdateItemRequest UpdateItem { get; set; }
		
		/// <summary>
		/// Update Form's FormSettings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateSettings")]
		public UpdateSettingsRequest UpdateSettings { get; set; }
	}
	
	/// <summary>
	/// Create an item in a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateItemRequest
	{
		
		/// <summary>
		/// A single item of the form. `kind` defines which kind of item it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public Item Item { get; set; }
		
		/// <summary>
		/// A specific location in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// A single item of the form. `kind` defines which kind of item it is.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Item
	{
		
		/// <summary>
		/// The description of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An item containing an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageItem")]
		public ImageItem ImageItem { get; set; }
		
		/// <summary>
		/// The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// A page break. The title and description of this item are shown at the top of the new page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageBreakItem")]
		public PageBreakItem PageBreakItem { get; set; }
		
		/// <summary>
		/// Defines a question that comprises multiple questions grouped together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionGroupItem")]
		public QuestionGroupItem QuestionGroupItem { get; set; }
		
		/// <summary>
		/// A form item containing a single question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionItem")]
		public QuestionItem QuestionItem { get; set; }
		
		/// <summary>
		/// A text item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textItem")]
		public TextItem TextItem { get; set; }
		
		/// <summary>
		/// The title of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// An item containing a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoItem")]
		public VideoItem VideoItem { get; set; }
	}
	
	/// <summary>
	/// An item containing an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageItem
	{
		
		/// <summary>
		/// Data representing an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
	}
	
	/// <summary>
	/// Data representing an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// A description of the image that is shown on hover and read by screenreaders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altText")]
		public string AltText { get; set; }
		
		/// <summary>
		/// Output only. A URI from which you can download the image; this is valid only for a limited time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUri")]
		public string ContentUri { get; set; }
		
		/// <summary>
		/// Properties of the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MediaProperties Properties { get; set; }
		
		/// <summary>
		/// Input only. The source URI is the URI used to insert the image. The source URI can be empty when fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUri")]
		public string SourceUri { get; set; }
	}
	
	/// <summary>
	/// Properties of the media.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaProperties
	{
		
		/// <summary>
		/// Position of the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public System.Nullable<MediaPropertiesAlignment> Alignment { get; set; }
		
		/// <summary>
		/// The width of the media in pixels. When the media is displayed, it is scaled to the smaller of this value or the width of the displayed form. The original aspect ratio of the media is preserved. If a width is not specified when the media is added to the form, it is set to the width of the media source. Width must be between 0 and 740, inclusive. Setting width to 0 or unspecified is only permitted when updating the media source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MediaPropertiesAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 3,
	}
	
	/// <summary>
	/// A page break. The title and description of this item are shown at the top of the new page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageBreakItem
	{
	}
	
	/// <summary>
	/// Defines a question that comprises multiple questions grouped together.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuestionGroupItem
	{
		
		/// <summary>
		/// A grid of choices (radio or check boxes) with each row constituting a separate question. Each row has the same choices, which are shown as the columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid")]
		public Grid Grid { get; set; }
		
		/// <summary>
		/// Data representing an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// Required. A list of questions that belong in this question group. A question must only belong to one group. The `kind` of the group may affect what types of questions are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public Question[] Questions { get; set; }
	}
	
	/// <summary>
	/// A grid of choices (radio or check boxes) with each row constituting a separate question. Each row has the same choices, which are shown as the columns.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Grid
	{
		
		/// <summary>
		/// A radio/checkbox/dropdown question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public ChoiceQuestion Columns { get; set; }
		
		/// <summary>
		/// If `true`, the questions are randomly ordered. In other words, the rows appear in a different order for every respondent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffleQuestions")]
		public System.Nullable<System.Boolean> ShuffleQuestions { get; set; }
	}
	
	/// <summary>
	/// A radio/checkbox/dropdown question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoiceQuestion
	{
		
		/// <summary>
		/// Required. List of options that a respondent must choose from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Option[] Options { get; set; }
		
		/// <summary>
		/// Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffle")]
		public System.Nullable<System.Boolean> Shuffle { get; set; }
		
		/// <summary>
		/// Required. The type of choice question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ChoiceQuestionType> Type { get; set; }
	}
	
	/// <summary>
	/// An option for a Choice question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Option
	{
		
		/// <summary>
		/// Section navigation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goToAction")]
		public System.Nullable<OptionGoToAction> GoToAction { get; set; }
		
		/// <summary>
		/// Item ID of section header to go to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="goToSectionId")]
		public string GoToSectionId { get; set; }
		
		/// <summary>
		/// Data representing an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// Whether the option is "other". Currently only applies to `RADIO` and `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOther")]
		public System.Nullable<System.Boolean> IsOther { get; set; }
		
		/// <summary>
		/// Required. The choice as presented to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OptionGoToAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GO_TO_ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_SECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTART_FORM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMIT_FORM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChoiceQuestionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHOICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RADIO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKBOX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_DOWN = 3,
	}
	
	/// <summary>
	/// Any question. The specific type of question is known by its `kind`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Question
	{
		
		/// <summary>
		/// A radio/checkbox/dropdown question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="choiceQuestion")]
		public ChoiceQuestion ChoiceQuestion { get; set; }
		
		/// <summary>
		/// A date question. Date questions default to just month + day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateQuestion")]
		public DateQuestion DateQuestion { get; set; }
		
		/// <summary>
		/// A file upload question. The API currently does not support creating file upload questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUploadQuestion")]
		public FileUploadQuestion FileUploadQuestion { get; set; }
		
		/// <summary>
		/// Grading for a single question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grading")]
		public Grading Grading { get; set; }
		
		/// <summary>
		/// Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionId")]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// Whether the question must be answered in order for a respondent to submit their response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Configuration for a question that is part of a question group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowQuestion")]
		public RowQuestion RowQuestion { get; set; }
		
		/// <summary>
		/// A scale question. The user has a range of numeric values to choose from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleQuestion")]
		public ScaleQuestion ScaleQuestion { get; set; }
		
		/// <summary>
		/// A text-based question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textQuestion")]
		public TextQuestion TextQuestion { get; set; }
		
		/// <summary>
		/// A time question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeQuestion")]
		public TimeQuestion TimeQuestion { get; set; }
	}
	
	/// <summary>
	/// A date question. Date questions default to just month + day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateQuestion
	{
		
		/// <summary>
		/// Whether to include the time as part of the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeTime")]
		public System.Nullable<System.Boolean> IncludeTime { get; set; }
		
		/// <summary>
		/// Whether to include the year as part of the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeYear")]
		public System.Nullable<System.Boolean> IncludeYear { get; set; }
	}
	
	/// <summary>
	/// A file upload question. The API currently does not support creating file upload questions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileUploadQuestion
	{
		
		/// <summary>
		/// Required. The ID of the Drive folder where uploaded files are stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderId")]
		public string FolderId { get; set; }
		
		/// <summary>
		/// Maximum number of bytes allowed for any single file uploaded to this question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFileSize")]
		public string MaxFileSize { get; set; }
		
		/// <summary>
		/// Maximum number of files that can be uploaded for this question in a single response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxFiles")]
		public System.Nullable<System.Int32> MaxFiles { get; set; }
		
		/// <summary>
		/// File types accepted by this question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="types")]
		public string[] Types { get; set; }
	}
	
	/// <summary>
	/// Grading for a single question
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Grading
	{
		
		/// <summary>
		/// The answer key for a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correctAnswers")]
		public CorrectAnswers CorrectAnswers { get; set; }
		
		/// <summary>
		/// Feedback for a respondent about their response to a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalFeedback")]
		public Feedback GeneralFeedback { get; set; }
		
		/// <summary>
		/// Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointValue")]
		public System.Nullable<System.Int32> PointValue { get; set; }
		
		/// <summary>
		/// Feedback for a respondent about their response to a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whenRight")]
		public Feedback WhenRight { get; set; }
		
		/// <summary>
		/// Feedback for a respondent about their response to a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whenWrong")]
		public Feedback WhenWrong { get; set; }
	}
	
	/// <summary>
	/// The answer key for a question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CorrectAnswers
	{
		
		/// <summary>
		/// A list of correct answers. A quiz response can be automatically graded based on these answers. For single-valued questions, a response is marked correct if it matches any value in this list (in other words, multiple correct answers are possible). For multiple-valued (`CHECKBOX`) questions, a response is marked correct if it contains exactly the values in this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public CorrectAnswer[] Answers { get; set; }
	}
	
	/// <summary>
	/// A single correct answer for a question. For multiple-valued (`CHECKBOX`) questions, several `CorrectAnswer`s may be needed to represent a single correct response option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CorrectAnswer
	{
		
		/// <summary>
		/// Required. The correct answer value. See the documentation for TextAnswer.value for details on how various value types are formatted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Configuration for a question that is part of a question group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RowQuestion
	{
		
		/// <summary>
		/// Required. The title for the single row in the QuestionGroupItem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A scale question. The user has a range of numeric values to choose from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScaleQuestion
	{
		
		/// <summary>
		/// Required. The highest possible value for the scale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="high")]
		public System.Nullable<System.Int32> High { get; set; }
		
		/// <summary>
		/// The label to display describing the highest point on the scale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highLabel")]
		public string HighLabel { get; set; }
		
		/// <summary>
		/// Required. The lowest possible value for the scale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="low")]
		public System.Nullable<System.Int32> Low { get; set; }
		
		/// <summary>
		/// The label to display describing the lowest point on the scale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowLabel")]
		public string LowLabel { get; set; }
	}
	
	/// <summary>
	/// A text-based question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextQuestion
	{
		
		/// <summary>
		/// Whether the question is a paragraph question or not. If not, the question is a short text question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraph")]
		public System.Nullable<System.Boolean> Paragraph { get; set; }
	}
	
	/// <summary>
	/// A time question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeQuestion
	{
		
		/// <summary>
		/// `true` if the question is about an elapsed time. Otherwise it is about a time of day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Boolean> Duration { get; set; }
	}
	
	/// <summary>
	/// A form item containing a single question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuestionItem
	{
		
		/// <summary>
		/// Data representing an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
		
		/// <summary>
		/// Any question. The specific type of question is known by its `kind`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="question")]
		public Question Question { get; set; }
	}
	
	/// <summary>
	/// A text item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TextItem
	{
	}
	
	/// <summary>
	/// An item containing a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VideoItem
	{
		
		/// <summary>
		/// The text displayed below the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		/// <summary>
		/// Data representing a video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public Video Video { get; set; }
	}
	
	/// <summary>
	/// Data representing a video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Video
	{
		
		/// <summary>
		/// Properties of the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public MediaProperties Properties { get; set; }
		
		/// <summary>
		/// Required. A YouTube URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	/// <summary>
	/// A specific location in a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The index of an item in the form. This must be in the range [0..*N*), where *N* is the number of items in the form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
	}
	
	/// <summary>
	/// Delete an item in a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteItemRequest
	{
		
		/// <summary>
		/// A specific location in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// Move an item in a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MoveItemRequest
	{
		
		/// <summary>
		/// A specific location in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newLocation")]
		public Location NewLocation { get; set; }
		
		/// <summary>
		/// A specific location in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalLocation")]
		public Location OriginalLocation { get; set; }
	}
	
	/// <summary>
	/// Update Form's Info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFormInfoRequest
	{
		
		/// <summary>
		/// The general information for a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public Info Info { get; set; }
		
		/// <summary>
		/// Required. Only values named in this mask are changed. At least one field must be specified. The root `info` is implied and should not be specified. A single `"*"` can be used as short-hand for updating every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// The general information for a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Info
	{
		
		/// <summary>
		/// The description of the form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The title of the document which is visible in Drive. If `Info.title` is empty, `document_title` may appear in its place in the Google Forms UI and be visible to responders. `document_title` can be set on create, but cannot be modified by a batchUpdate request. Please use the [Google Drive API](https://developers.google.com/drive/api/v3/reference/files/update) if you need to programmatically update `document_title`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentTitle")]
		public string DocumentTitle { get; set; }
		
		/// <summary>
		/// Required. The title of the form which is visible to responders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Update an item in a form.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateItemRequest
	{
		
		/// <summary>
		/// A single item of the form. `kind` defines which kind of item it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public Item Item { get; set; }
		
		/// <summary>
		/// A specific location in a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Required. Only values named in this mask are changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Update Form's FormSettings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSettingsRequest
	{
		
		/// <summary>
		/// A form's settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public FormSettings Settings { get; set; }
		
		/// <summary>
		/// Required. Only values named in this mask are changed. At least one field must be specified. The root `settings` is implied and should not be specified. A single `"*"` can be used as short-hand for updating every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// A form's settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormSettings
	{
		
		/// <summary>
		/// Settings related to quiz forms and grading. These must be updated with the UpdateSettingsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quizSettings")]
		public QuizSettings QuizSettings { get; set; }
	}
	
	/// <summary>
	/// Settings related to quiz forms and grading. These must be updated with the UpdateSettingsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuizSettings
	{
		
		/// <summary>
		/// Whether this form is a quiz or not. When true, responses are graded based on question Grading. Upon setting to false, all question Grading is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isQuiz")]
		public System.Nullable<System.Boolean> IsQuiz { get; set; }
	}
	
	/// <summary>
	/// Provides control over how write requests are executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WriteControl
	{
		
		/// <summary>
		/// The revision ID of the form that the write request is applied to. If this is not the latest revision of the form, the request is not processed and returns a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredRevisionId")]
		public string RequiredRevisionId { get; set; }
		
		/// <summary>
		/// The target revision ID of the form that the write request is applied to. If changes have occurred after this revision, the changes in this update request are transformed against those changes. This results in a new revision of the form that incorporates both the changes in the request and the intervening changes, with the server resolving conflicting changes. The target revision ID may only be used to write to recent versions of a form. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 (Bad Request Error). The request may be retried after reading the latest version of the form. In most cases a target revision ID remains valid for several minutes after it is read, but for frequently-edited forms this window may be shorter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetRevisionId")]
		public string TargetRevisionId { get; set; }
	}
	
	/// <summary>
	/// Response to a BatchUpdateFormRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpdateFormResponse
	{
		
		/// <summary>
		/// A Google Forms document. A form is created in Drive, and deleting a form or changing its access protections is done via the [Drive API](https://developers.google.com/drive/api/v3/about-sdk).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public Form Form { get; set; }
		
		/// <summary>
		/// The reply of the updates. This maps 1:1 with the update requests, although replies to some requests may be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public Response[] Replies { get; set; }
		
		/// <summary>
		/// Provides control over how write requests are executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeControl")]
		public WriteControl WriteControl { get; set; }
	}
	
	/// <summary>
	/// A Google Forms document. A form is created in Drive, and deleting a form or changing its access protections is done via the [Drive API](https://developers.google.com/drive/api/v3/about-sdk).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Form
	{
		
		/// <summary>
		/// Output only. The form ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formId")]
		public string FormId { get; set; }
		
		/// <summary>
		/// The general information for a form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public Info Info { get; set; }
		
		/// <summary>
		/// Required. A list of the form's items, which can include section headers, questions, embedded media, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedSheetId")]
		public string LinkedSheetId { get; set; }
		
		/// <summary>
		/// Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responderUri")]
		public string ResponderUri { get; set; }
		
		/// <summary>
		/// Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// A form's settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public FormSettings Settings { get; set; }
	}
	
	/// <summary>
	/// A single response from an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Response
	{
		
		/// <summary>
		/// The result of creating an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createItem")]
		public CreateItemResponse CreateItem { get; set; }
	}
	
	/// <summary>
	/// The result of creating an item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateItemResponse
	{
		
		/// <summary>
		/// The ID of the created item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public string ItemId { get; set; }
		
		/// <summary>
		/// The ID of the question created as part of this item, for a question group it lists IDs of all the questions created for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionId")]
		public string[] QuestionId { get; set; }
	}
	
	/// <summary>
	/// A Pub/Sub topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudPubsubTopic
	{
		
		/// <summary>
		/// Required. A fully qualified Pub/Sub topic name to publish the events to. This topic must be owned by the calling project and already exist in Pub/Sub.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicName")]
		public string TopicName { get; set; }
	}
	
	/// <summary>
	/// Create a new watch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWatchRequest
	{
		
		/// <summary>
		/// A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watch")]
		public Watch Watch { get; set; }
		
		/// <summary>
		/// The ID to use for the watch. If specified, the ID must not already be in use. If not specified, an ID is generated. This value should be 4-63 characters, and valid characters are /a-z-/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watchId")]
		public string WatchId { get; set; }
	}
	
	/// <summary>
	/// A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Watch
	{
		
		/// <summary>
		/// Output only. Timestamp of when this was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public System.Nullable<WatchErrorType> ErrorType { get; set; }
		
		/// <summary>
		/// Required. Which event type to watch for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<WatchEventType> EventType { get; set; }
		
		/// <summary>
		/// Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<WatchState> State { get; set; }
		
		/// <summary>
		/// The target for notification delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public WatchTarget Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WatchErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT_NOT_AUTHORIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_USER_ACCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_ERRORS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WatchEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEMA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSES = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WatchState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 2,
	}
	
	/// <summary>
	/// The target for notification delivery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WatchTarget
	{
		
		/// <summary>
		/// A Pub/Sub topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public CloudPubsubTopic Topic { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// A form response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormResponse
	{
		
		/// <summary>
		/// Output only. The actual answers to the questions, keyed by question_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answers")]
		public System.Collections.Generic.Dictionary<string, Answer> Answers { get; set; }
		
		/// <summary>
		/// Output only. Timestamp for the first time the response was submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The form ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formId")]
		public string FormId { get; set; }
		
		/// <summary>
		/// Output only. Timestamp for the most recent time the response was submitted. Does not track changes to grades.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSubmittedTime")]
		public string LastSubmittedTime { get; set; }
		
		/// <summary>
		/// Output only. The email address (if collected) for the respondent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="respondentEmail")]
		public string RespondentEmail { get; set; }
		
		/// <summary>
		/// Output only. The response ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseId")]
		public string ResponseId { get; set; }
		
		/// <summary>
		/// Output only. The total number of points the respondent received for their submission Only set if the form was a quiz and the response was graded. This includes points automatically awarded via autograding adjusted by any manual corrections entered by the form owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalScore")]
		public System.Nullable<System.Double> TotalScore { get; set; }
	}
	
	/// <summary>
	/// Response to a ListFormResponsesRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFormResponsesResponse
	{
		
		/// <summary>
		/// If set, there are more responses. To get the next page of responses, provide this as `page_token` in a future request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The returned form responses. Note: The `formId` field is not returned in the `FormResponse` object for list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public FormResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// The response of a ListWatchesRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWatchesResponse
	{
		
		/// <summary>
		/// The returned watches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watches")]
		public Watch[] Watches { get; set; }
	}
	
	/// <summary>
	/// Renew an existing Watch for seven days.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewWatchRequest
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a new form using the title given in the provided form message in the request. *Important:* Only the form.info.title and form.info.document_title fields are copied to the new form. All other fields including the form description, items and settings are disallowed. To create a new form and add items, you must first call forms.create to create an empty form with a title and (optional) document title, and then call forms.update to add the items.
		/// Forms_forms_create v1/forms
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Form> Forms_forms_createAsync(Form requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Form>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a form.
		/// Forms_forms_get v1/forms/{formId}
		/// </summary>
		/// <param name="formId">Required. The form ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Form> Forms_forms_getAsync(string formId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Form>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List a form's responses.
		/// Forms_forms_responses_list v1/forms/{formId}/responses
		/// </summary>
		/// <param name="formId">Required. ID of the Form whose responses to list.</param>
		/// <param name="filter">Which form responses to return. Currently, the only supported filters are: * timestamp > *N* which means to get all form responses submitted after (but not at) timestamp *N*. * timestamp >= *N* which means to get all form responses submitted at and after timestamp *N*. For both supported filters, timestamp must be formatted in RFC3339 UTC "Zulu" format. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".</param>
		/// <param name="pageSize">The maximum number of responses to return. The service may return fewer than this value. If unspecified or zero, at most 5000 responses are returned.</param>
		/// <param name="pageToken">A page token returned by a previous list response. If this field is set, the form and the values of the filter must be the same as for the original request.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFormResponsesResponse> Forms_forms_responses_listAsync(string formId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId))+"/responses&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFormResponsesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get one response from the form.
		/// Forms_forms_responses_get v1/forms/{formId}/responses/{responseId}
		/// </summary>
		/// <param name="formId">Required. The form ID.</param>
		/// <param name="responseId">Required. The response ID within the form.</param>
		/// <returns>Successful response</returns>
		public async Task<FormResponse> Forms_forms_responses_getAsync(string formId, string responseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId))+"/responses/"+ (responseId==null? "" : System.Uri.EscapeDataString(responseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of the watches owned by the invoking project. The maximum number of watches is two: For each invoker, the limit is one for each event type per form.
		/// Forms_forms_watches_list v1/forms/{formId}/watches
		/// </summary>
		/// <param name="formId">Required. ID of the Form whose watches to list.</param>
		/// <returns>Successful response</returns>
		public async Task<ListWatchesResponse> Forms_forms_watches_listAsync(string formId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId))+"/watches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWatchesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new watch. If a watch ID is provided, it must be unused. For each invoking project, the per form limit is one watch per Watch.EventType. A watch expires seven days after it is created (see Watch.expire_time).
		/// Forms_forms_watches_create v1/forms/{formId}/watches
		/// </summary>
		/// <param name="formId">Required. ID of the Form to watch.</param>
		/// <returns>Successful response</returns>
		public async Task<Watch> Forms_forms_watches_createAsync(string formId, CreateWatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId))+"/watches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Watch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a watch.
		/// Forms_forms_watches_delete v1/forms/{formId}/watches/{watchId}
		/// </summary>
		/// <param name="formId">Required. The ID of the Form.</param>
		/// <param name="watchId">Required. The ID of the Watch to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Forms_forms_watches_deleteAsync(string formId, string watchId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId))+"/watches/"+ (watchId==null? "" : System.Uri.EscapeDataString(watchId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Renew an existing watch for seven days. The state of the watch after renewal is `ACTIVE`, and the `expire_time` is seven days from the renewal. Renewing a watch in an error state (e.g. `SUSPENDED`) succeeds if the error is no longer present, but fail otherwise. After a watch has expired, RenewWatch returns `NOT_FOUND`.
		/// Forms_forms_watches_renew v1/forms/{formId}/watches/{watchId}:renew
		/// </summary>
		/// <param name="formId">Required. The ID of the Form.</param>
		/// <param name="watchId">Required. The ID of the Watch to renew.</param>
		/// <returns>Successful response</returns>
		public async Task<Watch> Forms_forms_watches_renewAsync(string formId, string watchId, RenewWatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId))+"/watches/"+ (watchId==null? "" : System.Uri.EscapeDataString(watchId))+":renew";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Watch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change the form with a batch of updates.
		/// Forms_forms_batchUpdate v1/forms/{formId}:batchUpdate
		/// </summary>
		/// <param name="formId">Required. The form ID.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateFormResponse> Forms_forms_batchUpdateAsync(string formId, BatchUpdateFormRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/forms/"+ (formId==null? "" : System.Uri.EscapeDataString(formId))+":batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateFormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
