//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List hypernyms
		/// Lists all hypernyms related to a family. A hypernym is a parent concent. E.g. "vehicle" is a hypernym of "truck".
		/// ListHypernyms hypernyms
		/// </summary>
		/// <param name="family">(Required) a numeric identifier of the family</param>
		/// <param name="maxLevel">(Required) maximum distance from the family</param>
		/// <returns>Hypernyms of Darth Vader</returns>
		public async Task<string[]> ListHypernymsAsync(string family, string maxLevel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hypernyms?family=" + (family==null? "" : System.Uri.EscapeDataString(family))+"&maxLevel=" + (maxLevel==null? "" : System.Uri.EscapeDataString(maxLevel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List hyponyms
		/// Lists all hyponyms related to a family. A hyponym is a child concent. E.g. "truck" is a hypernym of "vehicle".
		/// ListHyponyms hyponyms
		/// </summary>
		/// <param name="family">(Required) a numeric identifier of the family</param>
		/// <param name="maxLevel">(Required) maximum distance from the family</param>
		/// <returns>response</returns>
		public async Task ListHyponymsAsync(string family, string maxLevel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "hyponyms?family=" + (family==null? "" : System.Uri.EscapeDataString(family))+"&maxLevel=" + (maxLevel==null? "" : System.Uri.EscapeDataString(maxLevel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List inflected forms
		/// List inflected forms
		/// ListInflectedForms inflections
		/// </summary>
		/// <param name="language">(Required) The language code</param>
		/// <param name="lexeme">(Required) The lexeme to inspect</param>
		/// <param name="family">(Required) The family to inspect</param>
		/// <returns>Inflected forms of "United States" in Russian</returns>
		public async Task<ListInflectedFormsReturn[]> ListInflectedFormsAsync(string language, string lexeme, string family, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "inflections?language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&lexeme=" + (lexeme==null? "" : System.Uri.EscapeDataString(lexeme))+"&family=" + (family==null? "" : System.Uri.EscapeDataString(family));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInflectedFormsReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get family details
		/// Fetches and outputs metadata for a family from the Tisane language models.
		/// GetFamilyDetails lm/family
		/// </summary>
		/// <param name="id">(Required) a numeric identifier of the family</param>
		/// <returns>Details of the family for 'plot twist'</returns>
		public async Task<GetFamilyDetailsReturn> GetFamilyDetailsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lm/family?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetFamilyDetailsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List word senses
		/// Fetches and outputs all senses related to a word.
		/// ListWordSenses senses
		/// </summary>
		/// <param name="language">(Required) a standard culture code (ISO-639 language code with an optional country extension)</param>
		/// <param name="word">(Required) the word to inspect</param>
		/// <returns>Interpretations of "couscous"</returns>
		public async Task<ListWordSensesReturn[]> ListWordSensesAsync(string language, string word, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "senses?language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&word=" + (word==null? "" : System.Uri.EscapeDataString(word));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWordSensesReturn[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List feature values
		/// Lists feature values for a particular category of features. This allows obtaining all the values such as entity types, subtypes, abuse types and tags, and more.
		/// 
		/// Returns the values as a JSON array of strings.
		/// ListFeatureValues values
		/// </summary>
		/// <param name="language">(Required) Language code</param>
		/// <param name="type">(Required) Feature type</param>
		/// <param name="description">(Required) Feature list name (localized)</param>
		/// <returns>List entity subtypes</returns>
		public async Task<string[]> ListFeatureValuesAsync(string language, string type, string description, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "values?language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListInflectedFormsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public ListInflectedFormsReturnFeatures[] ListInflectedFormsReturnFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLemma")]
		public System.Nullable<System.Boolean> IsLemma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class ListInflectedFormsReturnFeatures
	{
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Double> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class GetFamilyDetailsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hypernyms")]
		public string[] Hypernyms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permId")]
		public string PermId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wikidata")]
		public string Wikidata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wordnet30")]
		public string Wordnet30 { get; set; }
	}
	
	public class ListWordSensesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="families")]
		public ListWordSensesReturnFamilies[] ListWordSensesReturnFamilies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public ListWordSensesReturnFeatures[] ListWordSensesReturnFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Double> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLemma")]
		public System.Nullable<System.Boolean> IsLemma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legacyMapId")]
		public System.Nullable<System.Double> LegacyMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lemma")]
		public string Lemma { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lexemeId")]
		public System.Nullable<System.Double> LexemeId { get; set; }
	}
	
	public class ListWordSensesReturnFamilies
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public string Definition { get; set; }
	}
	
	public class ListWordSensesReturnFeatures
	{
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Double> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
