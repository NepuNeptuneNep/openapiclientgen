//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelFlowExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="invalidExecutions")]
		public string[] InvalidExecutions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectorProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileArn")]
		public string ConnectorProfileArn { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required by each connector. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorProfileProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AmplitudeConnectorProfileProperties Amplitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatadogConnectorProfileProperties Datadog { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynatraceConnectorProfileProperties Dynatrace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GoogleAnalyticsConnectorProfileProperties GoogleAnalytics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HoneycodeConnectorProfileProperties Honeycode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InforNexusConnectorProfileProperties InforNexus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoConnectorProfileProperties Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedshiftConnectorProfileProperties Redshift { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceConnectorProfileProperties Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowConnectorProfileProperties ServiceNow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingularConnectorProfileProperties Singular { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlackConnectorProfileProperties Slack { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowflakeConnectorProfileProperties Snowflake { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrendmicroConnectorProfileProperties Trendmicro { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VeevaConnectorProfileProperties Veeva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskConnectorProfileProperties Zendesk { get; set; }
		
		/// <summary>
		///  The connector-specific profile properties required when using SAPOData. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SAPODataConnectorProfileProperties SAPOData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomConnectorProfileProperties CustomConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PardotConnectorProfileProperties Pardot { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Amplitude. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmplitudeConnectorProfileProperties
	{
	}
	
	/// <summary>
	///  The connector-specific profile properties required by Datadog. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatadogConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required by Dynatrace. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynatraceConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required by Google Analytics. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleAnalyticsConnectorProfileProperties
	{
	}
	
	/// <summary>
	///  The connector-specific properties required when using Amazon Honeycode. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HoneycodeConnectorProfileProperties
	{
	}
	
	/// <summary>
	///  The connector-specific profile properties required by Infor Nexus. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InforNexusConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Marketo. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketoConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties when using Amazon Redshift. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedshiftConnectorProfileProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="databaseUrl")]
		public string DatabaseUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataApiRoleArn")]
		public string DataApiRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRedshiftServerless")]
		public System.Nullable<System.Boolean> IsRedshiftServerless { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clusterIdentifier")]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workgroupName")]
		public string WorkgroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Salesforce. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesforceConnectorProfileProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSandboxEnvironment")]
		public System.Nullable<System.Boolean> IsSandboxEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usePrivateLinkForMetadataAndAuthorization")]
		public System.Nullable<System.Boolean> UsePrivateLinkForMetadataAndAuthorization { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using ServiceNow. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceNowConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Singular. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingularConnectorProfileProperties
	{
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Slack. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Snowflake. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnowflakeConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="warehouse")]
		public string Warehouse { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public string Stage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateLinkServiceName")]
		public string PrivateLinkServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Trend Micro. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendmicroConnectorProfileProperties
	{
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Veeva. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VeevaConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using Zendesk. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZendeskConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile properties required when using SAPOData. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SAPODataConnectorProfileProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationHostUrl")]
		public string ApplicationHostUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationServicePath")]
		public string ApplicationServicePath { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="portNumber")]
		public int PortNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientNumber")]
		public string ClientNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logonLanguage")]
		public string LogonLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateLinkServiceName")]
		public string PrivateLinkServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthProperties")]
		public OAuthProperties OAuthProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableSSO")]
		public System.Nullable<System.Boolean> DisableSSO { get; set; }
	}
	
	/// <summary>
	///  The OAuth properties required for OAuth type authentication. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuthProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenUrl")]
		public string TokenUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authCodeUrl")]
		public string AuthCodeUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oAuthScopes")]
		public string[] OAuthScopes { get; set; }
	}
	
	/// <summary>
	/// The profile properties required by the custom connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomConnectorProfileProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="profileProperties")]
		public ProfilePropertiesMap ProfileProperties { get; set; }
		
		/// <summary>
		/// The OAuth 2.0 properties required for OAuth 2.0 authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oAuth2Properties")]
		public OAuth2Properties OAuth2Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfilePropertiesMap
	{
	}
	
	/// <summary>
	/// The OAuth 2.0 properties required for OAuth 2.0 authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuth2Properties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenUrl")]
		public string TokenUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oAuth2GrantType")]
		public OAuth2GrantType OAuth2GrantType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenUrlCustomProperties")]
		public TokenUrlCustomProperties TokenUrlCustomProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OAuth2GrantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLIENT_CREDENTIALS")]
		CLIENT_CREDENTIALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTHORIZATION_CODE")]
		AUTHORIZATION_CODE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JWT_BEARER")]
		JWT_BEARER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokenUrlCustomProperties
	{
	}
	
	/// <summary>
	/// The connector-specific profile properties required when using Salesforce Pardot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PardotConnectorProfileProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceUrl")]
		public string InstanceUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSandboxEnvironment")]
		public System.Nullable<System.Boolean> IsSandboxEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessUnitId")]
		public string BusinessUnitId { get; set; }
	}
	
	/// <summary>
	///  The connector-specific credentials required by a connector. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorProfileCredentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AmplitudeConnectorProfileCredentials Amplitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatadogConnectorProfileCredentials Datadog { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynatraceConnectorProfileCredentials Dynatrace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GoogleAnalyticsConnectorProfileCredentials GoogleAnalytics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HoneycodeConnectorProfileCredentials Honeycode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InforNexusConnectorProfileCredentials InforNexus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoConnectorProfileCredentials Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedshiftConnectorProfileCredentials Redshift { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceConnectorProfileCredentials Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowConnectorProfileCredentials ServiceNow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingularConnectorProfileCredentials Singular { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlackConnectorProfileCredentials Slack { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowflakeConnectorProfileCredentials Snowflake { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrendmicroConnectorProfileCredentials Trendmicro { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VeevaConnectorProfileCredentials Veeva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskConnectorProfileCredentials Zendesk { get; set; }
		
		/// <summary>
		///  The connector-specific profile credentials required when using SAPOData. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SAPODataConnectorProfileCredentials SAPOData { get; set; }
		
		/// <summary>
		/// The connector-specific profile credentials that are required when using the custom connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomConnectorProfileCredentials CustomConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PardotConnectorProfileCredentials Pardot { get; set; }
	}
	
	/// <summary>
	///  The connector-specific credentials required when using Amplitude. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmplitudeConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretKey")]
		public string SecretKey { get; set; }
	}
	
	/// <summary>
	///  The connector-specific credentials required by Datadog. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatadogConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationKey")]
		public string ApplicationKey { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required by Dynatrace. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynatraceConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiToken")]
		public string ApiToken { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required by Google Analytics. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleAnalyticsConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
	}
	
	/// <summary>
	///  Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorOAuthRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="authCode")]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectUri")]
		public string RedirectUri { get; set; }
	}
	
	/// <summary>
	///  The connector-specific credentials required when using Amazon Honeycode. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HoneycodeConnectorProfileCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		///  Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required by Infor Nexus. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InforNexusConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKeyId")]
		public string AccessKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretAccessKey")]
		public string SecretAccessKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datakey")]
		public string Datakey { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required by Marketo. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketoConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Amazon Redshift. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedshiftConnectorProfileCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Salesforce. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesforceConnectorProfileCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientCredentialsArn")]
		public string ClientCredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuth2GrantType")]
		public OAuth2GrantType OAuth2GrantType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jwtToken")]
		public string JwtToken { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using ServiceNow. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceNowConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Singular. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingularConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Slack. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Snowflake. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnowflakeConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Trend Micro. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendmicroConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiSecretKey")]
		public string ApiSecretKey { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Veeva. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VeevaConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using Zendesk. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZendeskConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
	}
	
	/// <summary>
	///  The connector-specific profile credentials required when using SAPOData. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SAPODataConnectorProfileCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public BasicAuthCredentials BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthCredentials")]
		public OAuthCredentials OAuthCredentials { get; set; }
	}
	
	/// <summary>
	///  The basic auth credentials required for basic authentication. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BasicAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	///  The OAuth credentials required for OAuth type authentication. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
	}
	
	/// <summary>
	/// The connector-specific profile credentials that are required when using the custom connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomConnectorProfileCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public AuthenticationType AuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basic")]
		public BasicAuthCredentials Basic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauth2")]
		public OAuth2Credentials Oauth2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public ApiKeyCredentials ApiKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public CustomAuthCredentials Custom { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OAUTH2")]
		OAUTH2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APIKEY")]
		APIKEY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC")]
		BASIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 3,
	}
	
	/// <summary>
	/// The OAuth 2.0 credentials required for OAuth 2.0 authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuth2Credentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		///  Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
	}
	
	/// <summary>
	/// The API key credentials required for API key authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiKeyCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiSecretKey")]
		public string ApiSecretKey { get; set; }
	}
	
	/// <summary>
	/// The custom credentials required for custom authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomAuthCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customAuthenticationType")]
		public string CustomAuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialsMap")]
		public CredentialsMap CredentialsMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CredentialsMap
	{
	}
	
	/// <summary>
	/// The connector-specific profile credentials required when using Salesforce Pardot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PardotConnectorProfileCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		/// <summary>
		///  Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oAuthRequest")]
		public ConnectorOAuthRequest OAuthRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientCredentialsArn")]
		public string ClientCredentialsArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorAuthenticationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flowArn")]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowStatus")]
		public FlowStatus FlowStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FlowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Active")]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Deprecated")]
		Deprecated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Deleted")]
		Deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Draft")]
		Draft = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Errored")]
		Errored = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Suspended")]
		Suspended = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Scheduled")]
		Scheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Event")]
		Event = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OnDemand")]
		OnDemand = 2,
	}
	
	/// <summary>
	///  Specifies the configuration details that control the trigger for a flow. Currently, these settings only apply to the <code>Scheduled</code> trigger type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TriggerProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledTriggerProperties Scheduled { get; set; }
	}
	
	/// <summary>
	///  Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduledTriggerProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduleExpression")]
		public string ScheduleExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPullMode")]
		public DataPullMode DataPullMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleStartTime")]
		public System.DateTimeOffset ScheduleStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleEndTime")]
		public System.DateTimeOffset ScheduleEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleOffset")]
		public System.Nullable<System.Int32> ScheduleOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstExecutionFrom")]
		public System.DateTimeOffset FirstExecutionFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowErrorDeactivationThreshold")]
		public System.Nullable<System.Int32> FlowErrorDeactivationThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataPullMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Incremental")]
		Incremental = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Complete")]
		Complete = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Salesforce")]
		Salesforce = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Singular")]
		Singular = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Slack")]
		Slack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Redshift")]
		Redshift = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3")]
		S3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Marketo")]
		Marketo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Googleanalytics")]
		Googleanalytics = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Zendesk")]
		Zendesk = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Servicenow")]
		Servicenow = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Datadog")]
		Datadog = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Trendmicro")]
		Trendmicro = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Snowflake")]
		Snowflake = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dynatrace")]
		Dynatrace = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Infornexus")]
		Infornexus = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amplitude")]
		Amplitude = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Veeva")]
		Veeva = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EventBridge")]
		EventBridge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LookoutMetrics")]
		LookoutMetrics = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Upsolver")]
		Upsolver = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Honeycode")]
		Honeycode = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CustomerProfiles")]
		CustomerProfiles = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAPOData")]
		SAPOData = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CustomConnector")]
		CustomConnector = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pardot")]
		Pardot = 23,
	}
	
	/// <summary>
	///  Specifies the information that is required to query a particular connector. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceConnectorProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AmplitudeSourceProperties Amplitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatadogSourceProperties Datadog { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynatraceSourceProperties Dynatrace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GoogleAnalyticsSourceProperties GoogleAnalytics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InforNexusSourceProperties InforNexus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoSourceProperties Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3SourceProperties S3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceSourceProperties Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowSourceProperties ServiceNow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingularSourceProperties Singular { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlackSourceProperties Slack { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrendmicroSourceProperties Trendmicro { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VeevaSourceProperties Veeva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskSourceProperties Zendesk { get; set; }
		
		/// <summary>
		///  The properties that are applied when using SAPOData as a flow source. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SAPODataSourceProperties SAPOData { get; set; }
		
		/// <summary>
		/// The properties that are applied when the custom connector is being used as a source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomConnectorSourceProperties CustomConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PardotSourceProperties Pardot { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amplitude is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmplitudeSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Datadog is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatadogSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Dynatrace is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynatraceSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Google Analytics is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleAnalyticsSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Infor Nexus is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InforNexusSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Marketo is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketoSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amazon S3 is being used as the flow source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3SourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		/// <summary>
		///  When you use Amazon S3 as the source, the configuration format that you provide the flow input data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3InputFormatConfig")]
		public S3InputFormatConfig S3InputFormatConfig { get; set; }
	}
	
	/// <summary>
	///  When you use Amazon S3 as the source, the configuration format that you provide the flow input data. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3InputFormatConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3InputFileType")]
		public S3InputFileType S3InputFileType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum S3InputFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CSV")]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JSON")]
		JSON = 1,
	}
	
	/// <summary>
	///  The properties that are applied when Salesforce is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesforceSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableDynamicFieldUpdate")]
		public System.Nullable<System.Boolean> EnableDynamicFieldUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeDeletedRecords")]
		public System.Nullable<System.Boolean> IncludeDeletedRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataTransferApi")]
		public SalesforceDataTransferApi DataTransferApi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SalesforceDataTransferApi
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATIC")]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BULKV2")]
		BULKV2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REST_SYNC")]
		REST_SYNC = 2,
	}
	
	/// <summary>
	///  The properties that are applied when ServiceNow is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceNowSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Singular is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingularSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Slack is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when using Trend Micro as a flow source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendmicroSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when using Veeva as a flow source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VeevaSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentType")]
		public string DocumentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeSourceFiles")]
		public System.Nullable<System.Boolean> IncludeSourceFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeRenditions")]
		public System.Nullable<System.Boolean> IncludeRenditions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeAllVersions")]
		public System.Nullable<System.Boolean> IncludeAllVersions { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when using Zendesk as a flow source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZendeskSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when using SAPOData as a flow source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SAPODataSourceProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectPath")]
		public string ObjectPath { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when the custom connector is being used as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomConnectorSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public CustomProperties CustomProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataTransferApi")]
		public DataTransferApi DataTransferApi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomProperties
	{
	}
	
	/// <summary>
	/// The API of the connector application that Amazon AppFlow uses to transfer your data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataTransferApi
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataTransferApiType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataTransferApiType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYNC")]
		SYNC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASYNC")]
		ASYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTOMATIC")]
		AUTOMATIC = 2,
	}
	
	/// <summary>
	/// The properties that are applied when Salesforce Pardot is being used as a source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PardotSourceProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	///  Specifies the configuration used when importing incremental records from the source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncrementalPullConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="datetimeTypeFieldName")]
		public string DatetimeTypeFieldName { get; set; }
	}
	
	/// <summary>
	///  Contains information about the configuration of destination connectors present in the flow. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationFlowConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationConnectorProperties")]
		public DestinationConnectorProperties DestinationConnectorProperties { get; set; }
	}
	
	/// <summary>
	///  This stores the information that is required to query a particular connector. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationConnectorProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDestinationProperties Redshift { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationProperties S3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceDestinationProperties Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowflakeDestinationProperties Snowflake { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventBridgeDestinationProperties EventBridge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LookoutMetricsDestinationProperties LookoutMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpsolverDestinationProperties Upsolver { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HoneycodeDestinationProperties Honeycode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerProfilesDestinationProperties CustomerProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskDestinationProperties Zendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoDestinationProperties Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomConnectorDestinationProperties CustomConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SAPODataDestinationProperties SAPOData { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amazon Redshift is being used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedshiftDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intermediateBucketName")]
		public string IntermediateBucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
	}
	
	/// <summary>
	///  The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorHandlingConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="failOnFirstDestinationError")]
		public System.Nullable<System.Boolean> FailOnFirstDestinationError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amazon S3 is used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3DestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		/// <summary>
		///  The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3OutputFormatConfig")]
		public S3OutputFormatConfig S3OutputFormatConfig { get; set; }
	}
	
	/// <summary>
	///  The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3OutputFormatConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public FileType FileType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefixConfig")]
		public PrefixConfig PrefixConfig { get; set; }
		
		/// <summary>
		///  The aggregation settings that you can use to customize the output format of your flow data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationConfig")]
		public AggregationConfig AggregationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preserveSourceDataTyping")]
		public System.Nullable<System.Boolean> PreserveSourceDataTyping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CSV")]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JSON")]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARQUET")]
		PARQUET = 2,
	}
	
	/// <summary>
	/// Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrefixConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="prefixType")]
		public PrefixType PrefixType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefixFormat")]
		public PrefixFormat PrefixFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathPrefixHierarchy")]
		public PathPrefix[] PathPrefixHierarchy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrefixType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILENAME")]
		FILENAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATH")]
		PATH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATH_AND_FILENAME")]
		PATH_AND_FILENAME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrefixFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YEAR")]
		YEAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTH")]
		MONTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAY")]
		DAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOUR")]
		HOUR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MINUTE")]
		MINUTE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PathPrefix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTION_ID")]
		EXECUTION_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCHEMA_VERSION")]
		SCHEMA_VERSION = 1,
	}
	
	/// <summary>
	///  The aggregation settings that you can use to customize the output format of your flow data. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AggregationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public AggregationType AggregationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetFileSize")]
		public System.Nullable<System.Int32> TargetFileSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None")]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SingleFile")]
		SingleFile = 1,
	}
	
	/// <summary>
	///  The properties that are applied when Salesforce is being used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesforceDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idFieldNames")]
		public string[] IdFieldNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="writeOperationType")]
		public WriteOperationType WriteOperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataTransferApi")]
		public SalesforceDataTransferApi DataTransferApi { get; set; }
	}
	
	/// <summary>
	///  The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WriteOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSERT")]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPSERT")]
		UPSERT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE")]
		UPDATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 3,
	}
	
	/// <summary>
	///  The properties that are applied when Snowflake is being used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnowflakeDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intermediateBucketName")]
		public string IntermediateBucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amazon EventBridge is being used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventBridgeDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		///  The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amazon Lookout for Metrics is used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LookoutMetricsDestinationProperties
	{
	}
	
	/// <summary>
	///  The properties that are applied when Upsolver is used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsolverDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3OutputFormatConfig")]
		public UpsolverS3OutputFormatConfig S3OutputFormatConfig { get; set; }
	}
	
	/// <summary>
	///  The configuration that determines how Amazon AppFlow formats the flow output data when Upsolver is used as the destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsolverS3OutputFormatConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public FileType FileType { get; set; }
		
		/// <summary>
		/// Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefixConfig")]
		public PrefixConfig PrefixConfig { get; set; }
		
		/// <summary>
		///  The aggregation settings that you can use to customize the output format of your flow data. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationConfig")]
		public AggregationConfig AggregationConfig { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amazon Honeycode is used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HoneycodeDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		///  The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
	}
	
	/// <summary>
	///  The properties that are applied when Amazon Connect Customer Profiles is used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerProfilesDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectTypeName")]
		public string ObjectTypeName { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when Zendesk is used as a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZendeskDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		///  A list of field names that can be used as an ID field when performing a write operation. 
		/// Minimum items: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idFieldNames")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		public string[] IdFieldNames { get; set; }
		
		/// <summary>
		///  The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
		
		/// <summary>
		///  The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeOperationType")]
		public WriteOperationType WriteOperationType { get; set; }
	}
	
	/// <summary>
	/// The properties that Amazon AppFlow applies when you use Marketo as a flow destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketoDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		///  The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when the custom connector is being used as a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomConnectorDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="writeOperationType")]
		public WriteOperationType WriteOperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="idFieldNames")]
		public string[] IdFieldNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public CustomProperties CustomProperties { get; set; }
	}
	
	/// <summary>
	/// The properties that are applied when using SAPOData as a flow destination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SAPODataDestinationProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectPath")]
		public string ObjectPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successResponseHandlingConfig")]
		public SuccessResponseHandlingConfig SuccessResponseHandlingConfig { get; set; }
		
		/// <summary>
		///  A list of field names that can be used as an ID field when performing a write operation. 
		/// Minimum items: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idFieldNames")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		public string[] IdFieldNames { get; set; }
		
		/// <summary>
		///  The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorHandlingConfig")]
		public ErrorHandlingConfig ErrorHandlingConfig { get; set; }
		
		/// <summary>
		///  The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeOperationType")]
		public WriteOperationType WriteOperationType { get; set; }
	}
	
	/// <summary>
	/// <p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p> <p>For example, this setting would determine where to write the response from the destination connector upon a successful insert operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuccessResponseHandlingConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucketPrefix")]
		public string BucketPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
	}
	
	/// <summary>
	///  A class for modeling different type of tasks. Task implementation varies based on the <code>TaskType</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Task_
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFields")]
		public string[] SourceFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorOperator")]
		public ConnectorOperator ConnectorOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationField")]
		public string DestinationField { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskType")]
		public TaskType TaskType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskProperties")]
		public TaskPropertiesMap TaskProperties { get; set; }
	}
	
	/// <summary>
	///  The operation to be performed on the provided source fields. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorOperator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AmplitudeConnectorOperator Amplitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatadogConnectorOperator Datadog { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatadogConnectorOperator Dynatrace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GoogleAnalyticsConnectorOperator GoogleAnalytics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatadogConnectorOperator InforNexus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoConnectorOperator Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3ConnectorOperator S3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceConnectorOperator Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowConnectorOperator ServiceNow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingularConnectorOperator Singular { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlackConnectorOperator Slack { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingularConnectorOperator Trendmicro { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VeevaConnectorOperator Veeva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskConnectorOperator Zendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceConnectorOperator SAPOData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VeevaConnectorOperator CustomConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PardotConnectorOperator Pardot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmplitudeConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DatadogConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleAnalyticsConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MarketoConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum S3ConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUAL_TO")]
		NOT_EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SalesforceConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUAL_TO")]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceNowConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUAL_TO")]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SingularConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SlackConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VeevaConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUAL_TO")]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ZendeskConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PardotConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Arithmetic")]
		Arithmetic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Filter")]
		Filter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Map")]
		Map = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Map_all")]
		Map_all = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mask")]
		Mask = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Merge")]
		Merge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Passthrough")]
		Passthrough = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Truncate")]
		Truncate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Validate")]
		Validate = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Partition")]
		Partition = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskPropertiesMap
	{
	}
	
	/// <summary>
	/// <p>Specifies the configuration that Amazon AppFlow uses when it catalogs your data with the Glue Data Catalog. When Amazon AppFlow catalogs your data, it stores metadata in Data Catalog tables. This metadata represents the data that's transferred by the flow that you configure with these settings.</p> <note> <p>You can configure a flow with these settings only when the flow destination is Amazon S3.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlueDataCatalogConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tablePrefix")]
		public string TablePrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConnectorProfileResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFlowResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorConfiguration")]
		public ConnectorConfiguration ConnectorConfiguration { get; set; }
	}
	
	/// <summary>
	///  The configuration settings related to a given connector. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="canUseAsSource")]
		public System.Nullable<System.Boolean> CanUseAsSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canUseAsDestination")]
		public System.Nullable<System.Boolean> CanUseAsDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedDestinationConnectors")]
		public ConnectorType[] SupportedDestinationConnectors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedSchedulingFrequencies")]
		public ScheduleFrequencyType[] SupportedSchedulingFrequencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrivateLinkEnabled")]
		public System.Nullable<System.Boolean> IsPrivateLinkEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrivateLinkEndpointUrlRequired")]
		public System.Nullable<System.Boolean> IsPrivateLinkEndpointUrlRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedTriggerTypes")]
		public TriggerType[] SupportedTriggerTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorMetadata")]
		public ConnectorMetadata ConnectorMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorDescription")]
		public string ConnectorDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorOwner")]
		public string ConnectorOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorVersion")]
		public string ConnectorVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorArn")]
		public string ConnectorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorModes")]
		public string[] ConnectorModes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationConfig")]
		public AuthenticationConfig AuthenticationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorRuntimeSettings")]
		public ConnectorRuntimeSetting[] ConnectorRuntimeSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedApiVersions")]
		public string[] SupportedApiVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedOperators")]
		public Operators[] SupportedOperators { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedWriteOperations")]
		public WriteOperationType[] SupportedWriteOperations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningType")]
		public ConnectorProvisioningType ConnectorProvisioningType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningConfig")]
		public ConnectorProvisioningConfig ConnectorProvisioningConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logoURL")]
		public string LogoURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredAt")]
		public System.DateTimeOffset RegisteredAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredBy")]
		public string RegisteredBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedDataTransferTypes")]
		public SupportedDataTransferType[] SupportedDataTransferTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedDataTransferApis")]
		public DataTransferApi[] SupportedDataTransferApis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScheduleFrequencyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BYMINUTE")]
		BYMINUTE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOURLY")]
		HOURLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAILY")]
		DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEEKLY")]
		WEEKLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTHLY")]
		MONTHLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONCE")]
		ONCE = 5,
	}
	
	/// <summary>
	///  A structure to specify connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AmplitudeMetadata Amplitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatadogMetadata Datadog { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynatraceMetadata Dynatrace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GoogleAnalyticsMetadata GoogleAnalytics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InforNexusMetadata InforNexus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MarketoMetadata Marketo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedshiftMetadata Redshift { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3Metadata S3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SalesforceMetadata Salesforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowMetadata ServiceNow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SingularMetadata Singular { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SlackMetadata Slack { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowflakeMetadata Snowflake { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrendmicroMetadata Trendmicro { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VeevaMetadata Veeva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ZendeskMetadata Zendesk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventBridgeMetadata EventBridge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpsolverMetadata Upsolver { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerProfilesMetadata CustomerProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HoneycodeMetadata Honeycode { get; set; }
		
		/// <summary>
		///  The connector metadata specific to SAPOData. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SAPODataMetadata SAPOData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PardotMetadata Pardot { get; set; }
	}
	
	/// <summary>
	///  The connector metadata specific to Amplitude. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmplitudeMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Datadog. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatadogMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Dynatrace. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DynatraceMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Google Analytics. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleAnalyticsMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="oAuthScopes")]
		public string[] OAuthScopes { get; set; }
	}
	
	/// <summary>
	///  The connector metadata specific to Infor Nexus. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InforNexusMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Marketo. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarketoMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Amazon Redshift. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RedshiftMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Amazon S3. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Metadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Salesforce. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesforceMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="oAuthScopes")]
		public string[] OAuthScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataTransferApis")]
		public SalesforceDataTransferApi[] DataTransferApis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauth2GrantTypesSupported")]
		public OAuth2GrantType[] Oauth2GrantTypesSupported { get; set; }
	}
	
	/// <summary>
	///  The connector metadata specific to ServiceNow. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceNowMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Singular. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingularMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Slack. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="oAuthScopes")]
		public string[] OAuthScopes { get; set; }
	}
	
	/// <summary>
	///  The connector metadata specific to Snowflake. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnowflakeMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="supportedRegions")]
		public string[] SupportedRegions { get; set; }
	}
	
	/// <summary>
	///  The connector metadata specific to Trend Micro. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendmicroMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Veeva. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VeevaMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Zendesk. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ZendeskMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="oAuthScopes")]
		public string[] OAuthScopes { get; set; }
	}
	
	/// <summary>
	///  The connector metadata specific to Amazon EventBridge. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventBridgeMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Upsolver. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpsolverMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Amazon Connect Customer Profiles. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerProfilesMetadata
	{
	}
	
	/// <summary>
	///  The connector metadata specific to Amazon Honeycode. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HoneycodeMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="oAuthScopes")]
		public string[] OAuthScopes { get; set; }
	}
	
	/// <summary>
	///  The connector metadata specific to SAPOData. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SAPODataMetadata
	{
	}
	
	/// <summary>
	/// The connector metadata specific to Salesforce Pardot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PardotMetadata
	{
	}
	
	/// <summary>
	/// Contains information about the authentication config that the connector supports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="isBasicAuthSupported")]
		public System.Nullable<System.Boolean> IsBasicAuthSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isApiKeyAuthSupported")]
		public System.Nullable<System.Boolean> IsApiKeyAuthSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOAuth2Supported")]
		public System.Nullable<System.Boolean> IsOAuth2Supported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCustomAuthSupported")]
		public System.Nullable<System.Boolean> IsCustomAuthSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oAuth2Defaults")]
		public OAuth2Defaults OAuth2Defaults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customAuthConfigs")]
		public CustomAuthConfig[] CustomAuthConfigs { get; set; }
	}
	
	/// <summary>
	/// Contains the default values required for OAuth 2.0 authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuth2Defaults
	{
		
		[System.Runtime.Serialization.DataMember(Name="oauthScopes")]
		public string[] OauthScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenUrls")]
		public string[] TokenUrls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authCodeUrls")]
		public string[] AuthCodeUrls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauth2GrantTypesSupported")]
		public OAuth2GrantType[] Oauth2GrantTypesSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauth2CustomProperties")]
		public OAuth2CustomParameter[] Oauth2CustomProperties { get; set; }
	}
	
	/// <summary>
	/// Custom parameter required for OAuth 2.0 authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OAuth2CustomParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSensitiveField")]
		public System.Nullable<System.Boolean> IsSensitiveField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorSuppliedValues")]
		public string[] ConnectorSuppliedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OAuth2CustomPropType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OAuth2CustomPropType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOKEN_URL")]
		TOKEN_URL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTH_URL")]
		AUTH_URL = 1,
	}
	
	/// <summary>
	/// Configuration information required for custom authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomAuthConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="customAuthenticationType")]
		public string CustomAuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authParameters")]
		public AuthParameter[] AuthParameters { get; set; }
	}
	
	/// <summary>
	/// Information about required authentication parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSensitiveField")]
		public System.Nullable<System.Boolean> IsSensitiveField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorSuppliedValues")]
		public string[] ConnectorSuppliedValues { get; set; }
	}
	
	/// <summary>
	/// Contains information about the connector runtime settings that are required for flow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorRuntimeSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorSuppliedValueOptions")]
		public string[] ConnectorSuppliedValueOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Operators
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUAL_TO")]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 20,
	}
	
	/// <summary>
	/// The type of provisioning that the connector supports, such as Lambda.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectorProvisioningType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAMBDA")]
		LAMBDA = 0,
	}
	
	/// <summary>
	/// Contains information about the configuration of the connector being registered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorProvisioningConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="lambda")]
		public LambdaConnectorProvisioningConfig Lambda { get; set; }
	}
	
	/// <summary>
	/// Contains information about the configuration of the lambda which is being registered as the connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LambdaConnectorProvisioningConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lambdaArn")]
		public string LambdaArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SupportedDataTransferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECORD")]
		RECORD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FILE")]
		FILE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorEntityResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorEntityFields")]
		public ConnectorEntityField[] ConnectorEntityFields { get; set; }
	}
	
	/// <summary>
	///  Describes the data model of a connector field. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorEntityField
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIdentifier")]
		public string ParentIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPrimaryKey")]
		public System.Nullable<System.Boolean> IsPrimaryKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeprecated")]
		public System.Nullable<System.Boolean> IsDeprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedFieldTypeDetails")]
		public SupportedFieldTypeDetails SupportedFieldTypeDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceProperties")]
		public SourceFieldProperties SourceProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationProperties")]
		public DestinationFieldProperties DestinationProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public CustomProperties CustomProperties { get; set; }
	}
	
	/// <summary>
	///  Contains details regarding all the supported <code>FieldTypes</code> and their corresponding <code>filterOperators</code> and <code>supportedValues</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedFieldTypeDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="v1")]
		public FieldTypeDetails V1 { get; set; }
	}
	
	/// <summary>
	///  Contains details regarding the supported field type and the operators that can be applied for filtering. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldTypeDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fieldType")]
		public string FieldType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filterOperators")]
		public Operator[] FilterOperators { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedValues")]
		public string[] SupportedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueRegexPattern")]
		public string ValueRegexPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedDateFormat")]
		public string SupportedDateFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldValueRange")]
		public Range FieldValueRange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldLengthRange")]
		public Range FieldLengthRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Operator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUAL_TO")]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 20,
	}
	
	/// <summary>
	/// The range of values that the property supports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Range
	{
		
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Double> Minimum { get; set; }
	}
	
	/// <summary>
	///  The properties that can be applied to a field when the connector is being used as a source. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceFieldProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="isRetrievable")]
		public System.Nullable<System.Boolean> IsRetrievable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isQueryable")]
		public System.Nullable<System.Boolean> IsQueryable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTimestampFieldForIncrementalQueries")]
		public System.Nullable<System.Boolean> IsTimestampFieldForIncrementalQueries { get; set; }
	}
	
	/// <summary>
	///  The properties that can be applied to a field when connector is being used as a destination. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinationFieldProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="isCreatable")]
		public System.Nullable<System.Boolean> IsCreatable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNullable")]
		public System.Nullable<System.Boolean> IsNullable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUpsertable")]
		public System.Nullable<System.Boolean> IsUpsertable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUpdatable")]
		public System.Nullable<System.Boolean> IsUpdatable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultedOnCreate")]
		public System.Nullable<System.Boolean> IsDefaultedOnCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedWriteOperations")]
		public WriteOperationType[] SupportedWriteOperations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileDetails")]
		public ConnectorProfile[] ConnectorProfileDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Describes an instance of a connector. This includes the provided name, credentials ARN, connection-mode, and so on. To keep the API intuitive and extensible, the fields that are common to all types of connector profiles are explicitly specified at the top level. The rest of the connector-specific properties are available via the <code>connectorProfileProperties</code> field. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileArn")]
		public string ConnectorProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectionMode")]
		public ConnectionMode ConnectionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialsArn")]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileProperties")]
		public ConnectorProfileProperties ConnectorProfileProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateConnectionProvisioningState")]
		public PrivateConnectionProvisioningState PrivateConnectionProvisioningState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Public")]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Private")]
		Private = 1,
	}
	
	/// <summary>
	///  Specifies the private connection provisioning state. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrivateConnectionProvisioningState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PrivateConnectionProvisioningStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureCause")]
		public PrivateConnectionProvisioningFailureCause FailureCause { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrivateConnectionProvisioningStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED")]
		CREATED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrivateConnectionProvisioningFailureCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTOR_AUTHENTICATION")]
		CONNECTOR_AUTHENTICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTOR_SERVER")]
		CONNECTOR_SERVER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_SERVER")]
		INTERNAL_SERVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS_DENIED")]
		ACCESS_DENIED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION")]
		VALIDATION = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorConfigurations")]
		public ConnectorConfigurationsMap ConnectorConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectors")]
		public ConnectorDetail[] Connectors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorConfigurationsMap
	{
	}
	
	/// <summary>
	/// Information about the registered connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorDescription")]
		public string ConnectorDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorName")]
		public string ConnectorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorOwner")]
		public string ConnectorOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorVersion")]
		public string ConnectorVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationType")]
		public string ApplicationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredAt")]
		public System.DateTimeOffset RegisteredAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredBy")]
		public string RegisteredBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningType")]
		public ConnectorProvisioningType ConnectorProvisioningType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorModes")]
		public string[] ConnectorModes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedDataTransferTypes")]
		public SupportedDataTransferType[] SupportedDataTransferTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flowArn")]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsArn")]
		public string KmsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowStatus")]
		public FlowStatus FlowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowStatusMessage")]
		public string FlowStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceFlowConfig")]
		public SourceFlowConfig SourceFlowConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationFlowConfigList")]
		public DestinationFlowConfig[] DestinationFlowConfigList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunExecutionDetails")]
		public ExecutionDetails LastRunExecutionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerConfig")]
		public TriggerConfig TriggerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Task_[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public string LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadataCatalogConfig")]
		public MetadataCatalogConfig MetadataCatalogConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunMetadataCatalogDetails")]
		public MetadataCatalogDetail[] LastRunMetadataCatalogDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public System.Nullable<System.Int32> SchemaVersion { get; set; }
	}
	
	/// <summary>
	///  Contains information about the configuration of the source connector used in the flow. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceFlowConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceConnectorProperties")]
		public SourceConnectorProperties SourceConnectorProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incrementalPullConfig")]
		public IncrementalPullConfig IncrementalPullConfig { get; set; }
	}
	
	/// <summary>
	///  Describes the details of the flow run, including the timestamp, status, and message. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="mostRecentExecutionMessage")]
		public string MostRecentExecutionMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mostRecentExecutionTime")]
		public System.DateTimeOffset MostRecentExecutionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mostRecentExecutionStatus")]
		public ExecutionStatus MostRecentExecutionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Successful")]
		Successful = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Error")]
		Error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CancelStarted")]
		CancelStarted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Canceled")]
		Canceled = 4,
	}
	
	/// <summary>
	///  The trigger settings that determine how and when Amazon AppFlow runs the specified flow. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TriggerConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public TriggerType TriggerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerProperties")]
		public TriggerProperties TriggerProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	/// <summary>
	/// Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetadataCatalogConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="glueDataCatalog")]
		public GlueDataCatalogConfig GlueDataCatalog { get; set; }
	}
	
	/// <summary>
	/// Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetadataCatalogDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="catalogType")]
		public CatalogType CatalogType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableRegistrationOutput")]
		public RegistrationOutput TableRegistrationOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partitionRegistrationOutput")]
		public RegistrationOutput PartitionRegistrationOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GLUE")]
		GLUE = 0,
	}
	
	/// <summary>
	/// <p>Describes the status of an attempt from Amazon AppFlow to register a resource.</p> <p>When you run a flow that you've configured to use a metadata catalog, Amazon AppFlow registers a metadata table and data partitions with that catalog. This operation provides the status of that registration attempt. The operation also indicates how many related resources Amazon AppFlow created or updated.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegistrationOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExecutionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowExecutionRecordsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flowExecutions")]
		public ExecutionRecord[] FlowExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Specifies information about the past flow run instances for a given flow. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public ExecutionStatus ExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionResult")]
		public ExecutionResult ExecutionResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPullStartTime")]
		public System.DateTimeOffset DataPullStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPullEndTime")]
		public System.DateTimeOffset DataPullEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadataCatalogDetails")]
		public MetadataCatalogDetail[] MetadataCatalogDetails { get; set; }
	}
	
	/// <summary>
	///  Specifies the end result of the flow run. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public ErrorInfo ErrorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bytesProcessed")]
		public System.Nullable<System.Int32> BytesProcessed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bytesWritten")]
		public System.Nullable<System.Int32> BytesWritten { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordsProcessed")]
		public System.Nullable<System.Int32> RecordsProcessed { get; set; }
	}
	
	/// <summary>
	///  Provides details in the event of a failed flow, including the failure count and the related error messages. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="putFailuresCount")]
		public System.Nullable<System.Int32> PutFailuresCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionMessage")]
		public string ExecutionMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConnectorEntitiesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorEntityMap")]
		public ConnectorEntityMap ConnectorEntityMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorEntityMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConnectorsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectors")]
		public ConnectorDetail[] Connectors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFlowsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flows")]
		public FlowDefinition[] Flows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The properties of the flow, such as its source, destination, trigger type, and so on. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlowDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="flowArn")]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowStatus")]
		public FlowStatus FlowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceConnectorType")]
		public ConnectorType SourceConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceConnectorLabel")]
		public string SourceConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationConnectorType")]
		public ConnectorType DestinationConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationConnectorLabel")]
		public string DestinationConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public TriggerType TriggerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedAt")]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public string LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunExecutionDetails")]
		public ExecutionDetails LastRunExecutionDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorArn")]
		public string ConnectorArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetConnectorMetadataCacheResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flowArn")]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowStatus")]
		public FlowStatus FlowStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flowArn")]
		public string FlowArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowStatus")]
		public FlowStatus FlowStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsupportedOperationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnregisterConnectorResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConnectorProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileArn")]
		public string ConnectorProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConnectorRegistrationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorArn")]
		public string ConnectorArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flowStatus")]
		public FlowStatus FlowStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelFlowExecutionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionIds")]
		public string[] ExecutionIds { get; set; }
	}
	
	/// <summary>
	///  The high-level entity that can be queried in Amazon AppFlow. For example, a Salesforce entity might be an <i>Account</i> or <i>Opportunity</i>, whereas a ServiceNow entity might be an <i>Incident</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorEntity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasNestedEntities")]
		public System.Nullable<System.Boolean> HasNestedEntities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DynatraceConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InforNexusConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TrendmicroConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SAPODataConnectorOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROJECTION")]
		PROJECTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN")]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN")]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETWEEN")]
		BETWEEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LESS_THAN_OR_EQUAL_TO")]
		LESS_THAN_OR_EQUAL_TO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GREATER_THAN_OR_EQUAL_TO")]
		GREATER_THAN_OR_EQUAL_TO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUAL_TO")]
		EQUAL_TO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUAL_TO")]
		NOT_EQUAL_TO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION")]
		ADDITION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTIPLICATION")]
		MULTIPLICATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIVISION")]
		DIVISION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBTRACTION")]
		SUBTRACTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_ALL")]
		MASK_ALL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_FIRST_N")]
		MASK_FIRST_N = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LAST_N")]
		MASK_LAST_N = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NULL")]
		VALIDATE_NON_NULL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_ZERO")]
		VALIDATE_NON_ZERO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NON_NEGATIVE")]
		VALIDATE_NON_NEGATIVE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATE_NUMERIC")]
		VALIDATE_NUMERIC = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_OP")]
		NO_OP = 20,
	}
	
	/// <summary>
	///  Defines the connector-specific configuration and credentials for the connector profile. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectorProfileConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileProperties")]
		public ConnectorProfileProperties ConnectorProfileProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileCredentials")]
		public ConnectorProfileCredentials ConnectorProfileCredentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectorProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsArn")]
		public string KmsArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionMode")]
		public ConnectionMode ConnectionMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileConfig")]
		public ConnectorProfileConfig ConnectorProfileConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFlowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsArn")]
		public string KmsArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggerConfig")]
		public TriggerConfig TriggerConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFlowConfig")]
		public SourceFlowConfig SourceFlowConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationFlowConfigList")]
		public DestinationFlowConfig[] DestinationFlowConfigList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Task_[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadataCatalogConfig")]
		public MetadataCatalogConfig MetadataCatalogConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConnectorProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceDelete")]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteFlowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceDelete")]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorEntityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorEntityName")]
		public string ConnectorEntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorProfilesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileNames")]
		public string[] ConnectorProfileNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConnectorsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorTypes")]
		public ConnectorType[] ConnectorTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowExecutionRecordsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeFlowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConnectorEntitiesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entitiesPath")]
		public string EntitiesPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConnectorsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFlowsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperatorPropertiesKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUE")]
		VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALUES")]
		VALUES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_TYPE")]
		DATA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPPER_BOUND")]
		UPPER_BOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOWER_BOUND")]
		LOWER_BOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOURCE_DATA_TYPE")]
		SOURCE_DATA_TYPE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESTINATION_DATA_TYPE")]
		DESTINATION_DATA_TYPE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION_ACTION")]
		VALIDATION_ACTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_VALUE")]
		MASK_VALUE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MASK_LENGTH")]
		MASK_LENGTH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRUNCATE_LENGTH")]
		TRUNCATE_LENGTH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MATH_OPERATION_FIELDS_ORDER")]
		MATH_OPERATION_FIELDS_ORDER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONCAT_FORMAT")]
		CONCAT_FORMAT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBFIELD_CATEGORY_MAP")]
		SUBFIELD_CATEGORY_MAP = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE_SOURCE_FIELDS_LIST")]
		EXCLUDE_SOURCE_FIELDS_LIST = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE_NEW_FIELDS")]
		INCLUDE_NEW_FIELDS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORDERED_PARTITION_KEYS_LIST")]
		ORDERED_PARTITION_KEYS_LIST = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterConnectorRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningType")]
		public ConnectorProvisioningType ConnectorProvisioningType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningConfig")]
		public ConnectorProvisioningConfig ConnectorProvisioningConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetConnectorMetadataCacheRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorEntityName")]
		public string ConnectorEntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entitiesPath")]
		public string EntitiesPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartFlowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopFlowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnregisterConnectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceDelete")]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConnectorProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionMode")]
		public ConnectionMode ConnectionMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileConfig")]
		public ConnectorProfileConfig ConnectorProfileConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConnectorRegistrationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		public string ConnectorLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Contains information about the configuration of the connector being registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningConfig")]
		public ConnectorProvisioningConfig ConnectorProvisioningConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateFlowRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		public string FlowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggerConfig")]
		public TriggerConfig TriggerConfig { get; set; }
		
		/// <summary>
		///  Contains information about the configuration of the source connector used in the flow. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFlowConfig")]
		public SourceFlowConfig SourceFlowConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationFlowConfigList")]
		public DestinationFlowConfig[] DestinationFlowConfigList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Task_[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadataCatalogConfig")]
		public MetadataCatalogConfig MetadataCatalogConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Cancels active runs for a flow.</p> <p>You can cancel all of the active runs for a flow, or you can cancel specific runs by providing their IDs.</p> <p>You can cancel a flow run only when the run is in progress. You can't cancel a run that has already completed or failed. You also can't cancel a run that's scheduled to occur but hasn't started yet. To prevent a scheduled run, you can deactivate the flow with the <code>StopFlow</code> action.</p> <p>You cannot resume a run after you cancel it.</p> <p>When you send your request, the status for each run becomes <code>CancelStarted</code>. When the cancellation completes, the status becomes <code>Canceled</code>.</p> <note> <p>When you cancel a run, you still incur charges for any data that the run already processed before the cancellation. If the run had already written some data to the flow destination, then that data remains in the destination. If you configured the flow to use a batch API (such as the Salesforce Bulk API 2.0), then the run will finish reading or writing its entire batch of data after the cancellation. For these operations, the data processing charges for Amazon AppFlow apply. For the pricing information, see <a href="http://aws.amazon.com/appflow/pricing/">Amazon AppFlow pricing</a>.</p> </note>
		/// CancelFlowExecutions cancel-flow-executions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelFlowExecutionsResponse> CancelFlowExecutionsAsync(CancelFlowExecutionsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cancel-flow-executions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelFlowExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new connector profile associated with your Amazon Web Services account. There is a soft quota of 100 connector profiles per Amazon Web Services account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. In each connector profile that you create, you can provide the credentials and properties for only one connector.
		/// CreateConnectorProfile create-connector-profile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConnectorProfileResponse> CreateConnectorProfileAsync(CreateConnectorProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "create-connector-profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConnectorProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once.
		/// CreateFlow create-flow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFlowResponse> CreateFlowAsync(CreateFlowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "create-flow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateFlowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables you to delete an existing connector profile.
		/// DeleteConnectorProfile delete-connector-profile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteConnectorProfileResponse> DeleteConnectorProfileAsync(DeleteConnectorProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "delete-connector-profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteConnectorProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time.
		/// DeleteFlow delete-flow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteFlowResponse> DeleteFlowAsync(DeleteFlowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "delete-flow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteFlowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the given custom connector registered in your Amazon Web Services account. This API can be used for custom connectors that are registered in your account and also for Amazon authored connectors.
		/// DescribeConnector describe-connector
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConnectorResponse> DescribeConnectorAsync(DescribeConnectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "describe-connector";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides details regarding the entity used with the connector, with a description of the data model for each field in that entity.
		/// DescribeConnectorEntity describe-connector-entity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConnectorEntityResponse> DescribeConnectorEntityAsync(DescribeConnectorEntityPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "describe-connector-entity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConnectorEntityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Returns a list of <code>connector-profile</code> details matching the provided <code>connector-profile</code> names and <code>connector-types</code>. Both input lists are optional, and you can use them to filter the result. </p> <p>If no names or <code>connector-types</code> are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.</p>
		/// DescribeConnectorProfiles describe-connector-profiles
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConnectorProfilesResponse> DescribeConnectorProfilesAsync(string maxResults, string nextToken, DescribeConnectorProfilesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "describe-connector-profiles?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConnectorProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the connectors vended by Amazon AppFlow for specified connector types. If you don't specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a <code>nextToken</code> object, which can be be passed in to the next call to the <code>DescribeConnectors</code> API operation to retrieve the next page.
		/// DescribeConnectors describe-connectors
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeConnectorsResponse> DescribeConnectorsAsync(string maxResults, string nextToken, DescribeConnectorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "describe-connectors?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConnectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a description of the specified flow.
		/// DescribeFlow describe-flow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFlowResponse> DescribeFlowAsync(DescribeFlowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "describe-flow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFlowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Fetches the execution history of the flow.
		/// DescribeFlowExecutionRecords describe-flow-execution-records
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeFlowExecutionRecordsResponse> DescribeFlowExecutionRecordsAsync(string maxResults, string nextToken, DescribeFlowExecutionRecordsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "describe-flow-execution-records?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFlowExecutionRecordsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for <i>Account</i> and <i>Opportunity</i> entities, or query ServiceNow for the <i>Incident</i> entity.
		/// ListConnectorEntities list-connector-entities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListConnectorEntitiesResponse> ListConnectorEntitiesAsync(ListConnectorEntitiesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-connector-entities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConnectorEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of all registered custom connectors in your Amazon Web Services account. This API lists only custom connectors registered in this account, not the Amazon Web Services authored connectors.
		/// ListConnectors list-connectors
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListConnectorsResponse> ListConnectorsAsync(string maxResults, string nextToken, ListConnectorsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-connectors?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConnectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all of the flows associated with your account.
		/// ListFlows list-flows
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFlowsResponse> ListFlowsAsync(string maxResults, string nextToken, ListFlowsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-flows?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFlowsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the tags that are associated with a specified flow.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) of the specified flow. 
		/// Max length: 512
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a tag to the specified flow.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) of the flow that you want to tag. 
		/// Max length: 512
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers a new custom connector with your Amazon Web Services account. Before you can register the connector, you must deploy the associated AWS lambda function in your account.
		/// RegisterConnector register-connector
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterConnectorResponse> RegisterConnectorAsync(RegisterConnectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "register-connector";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Resets metadata about your connector entities that Amazon AppFlow stored in its cache. Use this action when you want Amazon AppFlow to return the latest information about the data that you have in a source application.</p> <p>Amazon AppFlow returns metadata about your entities when you use the ListConnectorEntities or DescribeConnectorEntities actions. Following these actions, Amazon AppFlow caches the metadata to reduce the number of API requests that it must send to the source application. Amazon AppFlow automatically resets the cache once every hour, but you can use this action when you want to get the latest metadata right away.</p>
		/// ResetConnectorMetadataCache reset-connector-metadata-cache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResetConnectorMetadataCacheResponse> ResetConnectorMetadataCacheAsync(ResetConnectorMetadataCachePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reset-connector-metadata-cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResetConnectorMetadataCacheResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow.
		/// StartFlow start-flow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartFlowResponse> StartFlowAsync(StartFlowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "start-flow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartFlowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deactivates the existing flow. For on-demand flows, this operation returns an <code>unsupportedOperationException</code> error message. For schedule and event-triggered flows, this operation deactivates the flow.
		/// StopFlow stop-flow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopFlowResponse> StopFlowAsync(StopFlowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stop-flow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopFlowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unregisters the custom connector registered in your account that matches the connector label provided in the request.
		/// UnregisterConnector unregister-connector
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UnregisterConnectorResponse> UnregisterConnectorAsync(UnregisterConnectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "unregister-connector";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnregisterConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a tag from the specified flow.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) of the flow that you want to untag. 
		/// Max length: 512
		// </param>
		/// <param name="tagKeys"> The tag keys associated with the tag that you want to remove from your flow. 
		/// Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a given connector profile associated with your account.
		/// UpdateConnectorProfile update-connector-profile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateConnectorProfileResponse> UpdateConnectorProfileAsync(UpdateConnectorProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "update-connector-profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateConnectorProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a custom connector that you've previously registered. This operation updates the connector with one of the following:</p> <ul> <li> <p>The latest version of the AWS Lambda function that's assigned to the connector</p> </li> <li> <p>A new AWS Lambda function that you specify</p> </li> </ul>
		/// UpdateConnectorRegistration update-connector-registration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateConnectorRegistrationResponse> UpdateConnectorRegistrationAsync(UpdateConnectorRegistrationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "update-connector-registration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateConnectorRegistrationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing flow.
		/// UpdateFlow update-flow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateFlowResponse> UpdateFlowAsync(UpdateFlowPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "update-flow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateFlowResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CancelFlowExecutionsPostBody
	{
		
		/// <summary>
		/// The name of a flow with active runs that you want to cancel.
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
		
		/// <summary>
		/// <p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p> <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionIds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] ExecutionIds { get; set; }
	}
	
	public class CreateConnectorProfilePostBody
	{
		
		/// <summary>
		///  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. 
		/// Required
		/// Max length: 256
		/// Pattern: [\w/!@#+=.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w/!@#+=.-]+")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		///  The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws:kms:.*:[0-9]+:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws:kms:.*:[0-9]+:.*")]
		public string KmsArn { get; set; }
		
		/// <summary>
		///  The type of connector, such as Salesforce, Amplitude, and so on. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		/// <summary>
		/// The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string ConnectorLabel { get; set; }
		
		/// <summary>
		///  Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionMode")]
		public ConnectionMode ConnectionMode { get; set; }
		
		/// <summary>
		///  Defines the connector-specific configuration and credentials for the connector profile. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileConfig")]
		public CreateConnectorProfilePostBodyConnectorProfileConfig ConnectorProfileConfig { get; set; }
		
		/// <summary>
		/// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateConnectorProfile</code>. The token is active for 8 hours.</p>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [ -~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[ -~]+")]
		public string ClientToken { get; set; }
	}
	
	public class CreateConnectorProfilePostBodyConnectorProfileConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileProperties")]
		public ConnectorProfileProperties ConnectorProfileProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileCredentials")]
		public ConnectorProfileCredentials ConnectorProfileCredentials { get; set; }
	}
	
	public class CreateFlowPostBody
	{
		
		/// <summary>
		///  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
		
		/// <summary>
		///  A description of the flow you want to create. 
		/// Max length: 2048
		/// Pattern: [\w!@#\-.?,\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w!@#\-.?,\s]*")]
		public string Description { get; set; }
		
		/// <summary>
		///  The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. 
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws:kms:.*:[0-9]+:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"arn:aws:kms:.*:[0-9]+:.*")]
		public string KmsArn { get; set; }
		
		/// <summary>
		///  The trigger settings that determine how and when Amazon AppFlow runs the specified flow. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggerConfig")]
		public CreateFlowPostBodyTriggerConfig TriggerConfig { get; set; }
		
		/// <summary>
		///  Contains information about the configuration of the source connector used in the flow. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFlowConfig")]
		public CreateFlowPostBodySourceFlowConfig SourceFlowConfig { get; set; }
		
		/// <summary>
		///  The configuration that controls how Amazon AppFlow places data in the destination connector. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationFlowConfigList")]
		public DestinationFlowConfig[] DestinationFlowConfigList { get; set; }
		
		/// <summary>
		///  A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Task_[] Tasks { get; set; }
		
		/// <summary>
		///  The tags used to organize, track, or control access for your flow. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataCatalogConfig")]
		public CreateFlowPostBodyMetadataCatalogConfig MetadataCatalogConfig { get; set; }
		
		/// <summary>
		/// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateFlow</code>. The token is active for 8 hours.</p>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [ -~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[ -~]+")]
		public string ClientToken { get; set; }
	}
	
	public class CreateFlowPostBodyTriggerConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public TriggerType TriggerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerProperties")]
		public TriggerProperties TriggerProperties { get; set; }
	}
	
	public class CreateFlowPostBodySourceFlowConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceConnectorProperties")]
		public SourceConnectorProperties SourceConnectorProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incrementalPullConfig")]
		public IncrementalPullConfig IncrementalPullConfig { get; set; }
	}
	
	public class CreateFlowPostBodyMetadataCatalogConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="glueDataCatalog")]
		public GlueDataCatalogConfig GlueDataCatalog { get; set; }
	}
	
	public class DeleteConnectorProfilePostBody
	{
		
		/// <summary>
		///  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. 
		/// Required
		/// Max length: 256
		/// Pattern: [\w/!@#+=.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w/!@#+=.-]+")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		///  Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceDelete")]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	public class DeleteFlowPostBody
	{
		
		/// <summary>
		///  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
		
		/// <summary>
		///  Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceDelete")]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	public class DescribeConnectorPostBody
	{
		
		/// <summary>
		/// The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		/// <summary>
		/// The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string ConnectorLabel { get; set; }
	}
	
	public class DescribeConnectorEntityPostBody
	{
		
		/// <summary>
		///  The entity name for that connector. 
		/// Required
		/// Max length: 1024
		/// Pattern: \S+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorEntityName")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string ConnectorEntityName { get; set; }
		
		/// <summary>
		///  The type of connector application, such as Salesforce, Amplitude, and so on. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		/// <summary>
		///  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 
		/// Max length: 256
		/// Pattern: [\w/!@#+=.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w/!@#+=.-]+")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		/// The version of the API that's used by the connector.
		/// Max length: 256
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string ApiVersion { get; set; }
	}
	
	public class DescribeConnectorProfilesPostBody
	{
		
		/// <summary>
		///  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProfileNames")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] ConnectorProfileNames { get; set; }
		
		/// <summary>
		///  The type of connector, such as Salesforce, Amplitude, and so on. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		/// <summary>
		/// The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string ConnectorLabel { get; set; }
		
		/// <summary>
		///  Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). 
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  The pagination token for the next page of data. 
		/// Max length: 2048
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string NextToken { get; set; }
	}
	
	public class DescribeConnectorsPostBody
	{
		
		/// <summary>
		///  The type of connector, such as Salesforce, Amplitude, and so on. 
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorTypes")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ConnectorType[] ConnectorTypes { get; set; }
		
		/// <summary>
		/// The maximum number of items that should be returned in the result set. The default is 20.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  The pagination token for the next page of data. 
		/// Max length: 2048
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string NextToken { get; set; }
	}
	
	public class DescribeFlowPostBody
	{
		
		/// <summary>
		///  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
	}
	
	public class DescribeFlowExecutionRecordsPostBody
	{
		
		/// <summary>
		///  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
		
		/// <summary>
		///  Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). 
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  The pagination token for the next page of data. 
		/// Max length: 2048
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string NextToken { get; set; }
	}
	
	public class ListConnectorEntitiesPostBody
	{
		
		/// <summary>
		///  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. 
		/// Max length: 256
		/// Pattern: [\w/!@#+=.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w/!@#+=.-]+")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		///  The type of connector, such as Salesforce, Amplitude, and so on. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		/// <summary>
		///  This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. 
		/// Max length: 256
		/// Pattern: [\s\w/!@#+=,.-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entitiesPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\w/!@#+=,.-]*")]
		public string EntitiesPath { get; set; }
		
		/// <summary>
		/// The version of the API that's used by the connector.
		/// Max length: 256
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The maximum number of items that the operation returns in the response.
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.
		/// Max length: 2048
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string NextToken { get; set; }
	}
	
	public class ListConnectorsPostBody
	{
		
		/// <summary>
		/// Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The pagination token for the next page of data.
		/// Max length: 2048
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string NextToken { get; set; }
	}
	
	public class ListFlowsPostBody
	{
		
		/// <summary>
		///  Specifies the maximum number of items that should be returned in the result set. 
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  The pagination token for next page of data. 
		/// Max length: 2048
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string NextToken { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		///  The tags used to organize, track, or control access for your flow. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class RegisterConnectorPostBody
	{
		
		/// <summary>
		///  The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string ConnectorLabel { get; set; }
		
		/// <summary>
		/// A description about the connector that's being registered.
		/// Max length: 1024
		/// Pattern: [\s\w/!@#+=.-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\w/!@#+=.-]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of provisioning that the connector supports, such as Lambda.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningType")]
		public ConnectorProvisioningType ConnectorProvisioningType { get; set; }
		
		/// <summary>
		/// Contains information about the configuration of the connector being registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningConfig")]
		public RegisterConnectorPostBodyConnectorProvisioningConfig ConnectorProvisioningConfig { get; set; }
		
		/// <summary>
		/// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>RegisterConnector</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>RegisterConnector</code>. The token is active for 8 hours.</p>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [ -~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[ -~]+")]
		public string ClientToken { get; set; }
	}
	
	public class RegisterConnectorPostBodyConnectorProvisioningConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="lambda")]
		public LambdaConnectorProvisioningConfig Lambda { get; set; }
	}
	
	public class ResetConnectorMetadataCachePostBody
	{
		
		/// <summary>
		/// <p>The name of the connector profile that you want to reset cached metadata for.</p> <p>You can omit this parameter if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you must include this parameter in your request.</p>
		/// Max length: 256
		/// Pattern: [\w/!@#+=.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w/!@#+=.-]+")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		/// <p>The type of connector to reset cached metadata for.</p> <p>You must include this parameter in your request if you're resetting the cache for any of the following connectors: Amazon Connect, Amazon EventBridge, Amazon Lookout for Metrics, Amazon S3, or Upsolver. If you're resetting the cache for any other connector, you can omit this parameter from your request. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		/// <summary>
		/// <p>Use this parameter if you want to reset cached metadata about the details for an individual entity.</p> <p>If you don't include this parameter in your request, Amazon AppFlow only resets cached metadata about entity names, not entity details.</p>
		/// Max length: 1024
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorEntityName")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string ConnectorEntityName { get; set; }
		
		/// <summary>
		/// <p>Use this parameter only if you’re resetting the cached metadata about a nested entity. Only some connectors support nested entities. A nested entity is one that has another entity as a parent. To use this parameter, specify the name of the parent entity.</p> <p>To look up the parent-child relationship of entities, you can send a ListConnectorEntities request that omits the entitiesPath parameter. Amazon AppFlow will return a list of top-level entities. For each one, it indicates whether the entity has nested entities. Then, in a subsequent ListConnectorEntities request, you can specify a parent entity name for the entitiesPath parameter. Amazon AppFlow will return a list of the child entities for that parent.</p>
		/// Max length: 256
		/// Pattern: [\s\w/!@#+=,.-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entitiesPath")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\w/!@#+=,.-]*")]
		public string EntitiesPath { get; set; }
		
		/// <summary>
		/// <p>The API version that you specified in the connector profile that you’re resetting cached metadata for. You must use this parameter only if the connector supports multiple API versions or if the connector type is CustomConnector.</p> <p>To look up how many versions a connector supports, use the DescribeConnectors action. In the response, find the value that Amazon AppFlow returns for the connectorVersion parameter.</p> <p>To look up the connector type, use the DescribeConnectorProfiles action. In the response, find the value that Amazon AppFlow returns for the connectorType parameter.</p> <p>To look up the API version that you specified in a connector profile, use the DescribeConnectorProfiles action.</p>
		/// Max length: 256
		/// Pattern: \S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\S+")]
		public string ApiVersion { get; set; }
	}
	
	public class StartFlowPostBody
	{
		
		/// <summary>
		///  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
		
		/// <summary>
		/// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>StartFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs for flows that run on a schedule or based on an event. However, the error doesn't occur for flows that run on demand. You set the conditions that initiate your flow for the <code>triggerConfig</code> parameter.</p> <p>If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>StartFlow</code>. The token is active for 8 hours.</p>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [ -~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[ -~]+")]
		public string ClientToken { get; set; }
	}
	
	public class StopFlowPostBody
	{
		
		/// <summary>
		///  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
	}
	
	public class UnregisterConnectorPostBody
	{
		
		/// <summary>
		/// The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string ConnectorLabel { get; set; }
		
		/// <summary>
		/// Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forceDelete")]
		public System.Nullable<System.Boolean> ForceDelete { get; set; }
	}
	
	public class UpdateConnectorProfilePostBody
	{
		
		/// <summary>
		///  The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. 
		/// Required
		/// Max length: 256
		/// Pattern: [\w/!@#+=.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w/!@#+=.-]+")]
		public string ConnectorProfileName { get; set; }
		
		/// <summary>
		///  Indicates the connection mode and if it is public or private. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectionMode")]
		public ConnectionMode ConnectionMode { get; set; }
		
		/// <summary>
		///  Defines the connector-specific configuration and credentials for the connector profile. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorProfileConfig")]
		public UpdateConnectorProfilePostBodyConnectorProfileConfig ConnectorProfileConfig { get; set; }
		
		/// <summary>
		/// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorProfile</code>. The token is active for 8 hours.</p>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [ -~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[ -~]+")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateConnectorProfilePostBodyConnectorProfileConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileProperties")]
		public ConnectorProfileProperties ConnectorProfileProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileCredentials")]
		public ConnectorProfileCredentials ConnectorProfileCredentials { get; set; }
	}
	
	public class UpdateConnectorRegistrationPostBody
	{
		
		/// <summary>
		/// The name of the connector. The name is unique for each connector registration in your AWS account.
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorLabel")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string ConnectorLabel { get; set; }
		
		/// <summary>
		/// A description about the update that you're applying to the connector.
		/// Max length: 1024
		/// Pattern: [\s\w/!@#+=.-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\w/!@#+=.-]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// Contains information about the configuration of the connector being registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorProvisioningConfig")]
		public UpdateConnectorRegistrationPostBodyConnectorProvisioningConfig ConnectorProvisioningConfig { get; set; }
		
		/// <summary>
		/// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorRegistration</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorRegistration</code>. The token is active for 8 hours.</p>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [ -~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[ -~]+")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateConnectorRegistrationPostBodyConnectorProvisioningConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="lambda")]
		public LambdaConnectorProvisioningConfig Lambda { get; set; }
	}
	
	public class UpdateFlowPostBody
	{
		
		/// <summary>
		///  The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. 
		/// Required
		/// Max length: 256
		/// Pattern: [a-zA-Z0-9][\w!@#.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flowName")]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9][\w!@#.-]+")]
		public string FlowName { get; set; }
		
		/// <summary>
		///  A description of the flow. 
		/// Max length: 2048
		/// Pattern: [\w!@#\-.?,\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\w!@#\-.?,\s]*")]
		public string Description { get; set; }
		
		/// <summary>
		///  The trigger settings that determine how and when Amazon AppFlow runs the specified flow. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="triggerConfig")]
		public UpdateFlowPostBodyTriggerConfig TriggerConfig { get; set; }
		
		/// <summary>
		///  Contains information about the configuration of the source connector used in the flow. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceFlowConfig")]
		public UpdateFlowPostBodySourceFlowConfig SourceFlowConfig { get; set; }
		
		/// <summary>
		///  The configuration that controls how Amazon AppFlow transfers data to the destination connector. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationFlowConfigList")]
		public DestinationFlowConfig[] DestinationFlowConfigList { get; set; }
		
		/// <summary>
		///  A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Task_[] Tasks { get; set; }
		
		/// <summary>
		/// Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataCatalogConfig")]
		public UpdateFlowPostBodyMetadataCatalogConfig MetadataCatalogConfig { get; set; }
		
		/// <summary>
		/// <p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateFlow</code>. The token is active for 8 hours.</p>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [ -~]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[ -~]+")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateFlowPostBodyTriggerConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public TriggerType TriggerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerProperties")]
		public TriggerProperties TriggerProperties { get; set; }
	}
	
	public class UpdateFlowPostBodySourceFlowConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorType")]
		public ConnectorType ConnectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorProfileName")]
		public string ConnectorProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceConnectorProperties")]
		public SourceConnectorProperties SourceConnectorProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incrementalPullConfig")]
		public IncrementalPullConfig IncrementalPullConfig { get; set; }
	}
	
	public class UpdateFlowPostBodyMetadataCatalogConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="glueDataCatalog")]
		public GlueDataCatalogConfig GlueDataCatalog { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
