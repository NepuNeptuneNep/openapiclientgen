//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Article
	{
		
		[System.Runtime.Serialization.DataMember(Name="abstract")]
		public string Abstract { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public string Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_date")]
		public string Created_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="des_facet")]
		public string[] Des_facet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geo_facet")]
		public string[] Geo_facet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="item_type")]
		public string Item_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kicker")]
		public string Kicker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="material_type_facet")]
		public string Material_type_facet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multimedia")]
		public ArticleMultimedia[] ArticleMultimedia { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_facet")]
		public string[] Org_facet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_facet")]
		public string[] Per_facet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="published_date")]
		public string Published_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_urls")]
		public ArticleRelated_urls[] ArticleRelated_urls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section")]
		public string Section { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="short_url")]
		public string Short_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subsection")]
		public string Subsection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnail_standard")]
		public string Thumbnail_standard { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_date")]
		public string Updated_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ArticleMultimedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="caption")]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public string Subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class ArticleRelated_urls
	{
		
		[System.Runtime.Serialization.DataMember(Name="suggested_link_text")]
		public string Suggested_link_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Top Stories
		/// The Top Stories API returns a list of articles and associated images currently on the specified section.  Support JSON and JSONP.
		/// 
		/// StoriesGetBySectionAndFormatAndCallback {section}.{format}
		/// </summary>
		/// <param name="section">The section the story appears in.</param>
		/// <param name="format">if this is JSONP or JSON</param>
		/// <param name="callback">The name of the function the API call results will be passed to. Required when using JSONP. This parameter has only one valid value per section. The format is {section_name}TopStoriesCallback.
		///</param>
		/// <returns>An array of articles</returns>
		public async Task<StoriesGetBySectionAndFormatAndCallbackReturn> StoriesGetBySectionAndFormatAndCallbackAsync(StoriesGetBySectionAndFormatAndCallbackSection section, StoriesGetBySectionAndFormatAndCallbackFormat format, string callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+section+"."+format+"?callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StoriesGetBySectionAndFormatAndCallbackReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum StoriesGetBySectionAndFormatAndCallbackSection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		home = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		opinion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		world = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		national = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		politics = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		upshot = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nyregion = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		business = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		technology = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		science = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		health = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sports = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arts = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		books = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		movies = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		theater = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sundayreview = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fashion = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tmagazine = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		food = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		travel = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		magazine = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		realestate = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		automobiles = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		obituaries = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insider = 25,
	}
	
	public enum StoriesGetBySectionAndFormatAndCallbackFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jsonp = 1,
	}
	
	public class StoriesGetBySectionAndFormatAndCallbackReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Article[] Results { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
