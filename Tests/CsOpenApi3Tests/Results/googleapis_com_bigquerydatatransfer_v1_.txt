//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A request to determine whether the user has valid credentials. This method is used to limit the number of OAuth popups in the user interface. The user id is inferred from the API call context. If the data source has the Google+ authorization type, this method returns false, as it cannot be determined whether the credentials are already valid merely based on the user id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckValidCredsRequest
	{
	}
	
	/// <summary>
	/// A response indicating whether the credentials exist and are valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckValidCredsResponse
	{
		
		/// <summary>
		/// If set to `true`, the credentials exist and are valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasValidCreds")]
		public System.Nullable<System.Boolean> HasValidCreds { get; set; }
	}
	
	/// <summary>
	/// Defines the properties and custom parameters for a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataSource
	{
		
		/// <summary>
		/// Indicates the type of authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationType")]
		public System.Nullable<DataSourceAuthorizationType> AuthorizationType { get; set; }
		
		/// <summary>
		/// Data source client id which should be used to receive refresh token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRefreshType")]
		public System.Nullable<DataSourceDataRefreshType> DataRefreshType { get; set; }
		
		/// <summary>
		/// Data source id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Default data refresh window on days. Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDataRefreshWindowDays")]
		public System.Nullable<System.Int32> DefaultDataRefreshWindowDays { get; set; }
		
		/// <summary>
		/// Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultSchedule")]
		public string DefaultSchedule { get; set; }
		
		/// <summary>
		/// User friendly data source description string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// User friendly data source name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Url for the help document for this data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpUrl")]
		public string HelpUrl { get; set; }
		
		/// <summary>
		/// Disables backfilling and manual run scheduling for the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualRunsDisabled")]
		public System.Nullable<System.Boolean> ManualRunsDisabled { get; set; }
		
		/// <summary>
		/// The minimum interval for scheduler to schedule runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumScheduleInterval")]
		public string MinimumScheduleInterval { get; set; }
		
		/// <summary>
		/// Output only. Data source resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Data source parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public DataSourceParameter[] Parameters { get; set; }
		
		/// <summary>
		/// Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to `true`, user can override default schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsCustomSchedule")]
		public System.Nullable<System.Boolean> SupportsCustomSchedule { get; set; }
		
		/// <summary>
		/// Deprecated. This field has no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsMultipleTransfers")]
		public System.Nullable<System.Boolean> SupportsMultipleTransfers { get; set; }
		
		/// <summary>
		/// Deprecated. This field has no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferType")]
		public System.Nullable<DataSourceTransferType> TransferType { get; set; }
		
		/// <summary>
		/// The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDeadlineSeconds")]
		public System.Nullable<System.Int32> UpdateDeadlineSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DataSourceAuthorizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZATION_CODE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_PLUS_AUTHORIZATION_CODE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_PARTY_OAUTH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DataSourceDataRefreshType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_REFRESH_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLIDING_WINDOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_SLIDING_WINDOW = 2,
	}
	
	/// <summary>
	/// A parameter used to define custom fields in a data source definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataSourceParameter
	{
		
		/// <summary>
		/// All possible values for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public string[] AllowedValues { get; set; }
		
		/// <summary>
		/// If true, it should not be used in new transfers, and it should not be visible to users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Parameter description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Parameter display name in the user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Deprecated. This field has no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public DataSourceParameter[] Fields { get; set; }
		
		/// <summary>
		/// Cannot be changed after initial creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="immutable")]
		public System.Nullable<System.Boolean> Immutable { get; set; }
		
		/// <summary>
		/// For integer and double values specifies maximum allowed value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// For integer and double values specifies minimum allowed value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public System.Nullable<System.Double> MinValue { get; set; }
		
		/// <summary>
		/// Parameter identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paramId")]
		public string ParamId { get; set; }
		
		/// <summary>
		/// Deprecated. This field has no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurse")]
		public System.Nullable<System.Boolean> Recurse { get; set; }
		
		/// <summary>
		/// Deprecated. This field has no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeated")]
		public System.Nullable<System.Boolean> Repeated { get; set; }
		
		/// <summary>
		/// Is parameter required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// Parameter type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DataSourceParameterType> Type { get; set; }
		
		/// <summary>
		/// Description of the requirements for this field, in case the user input does not fulfill the regex pattern or min/max values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationDescription")]
		public string ValidationDescription { get; set; }
		
		/// <summary>
		/// URL to a help document to further explain the naming requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationHelpUrl")]
		public string ValidationHelpUrl { get; set; }
		
		/// <summary>
		/// Regular expression which can be used for parameter validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validationRegex")]
		public string ValidationRegex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DataSourceParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECORD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLUS_PAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIST = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DataSourceTransferType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING = 2,
	}
	
	/// <summary>
	/// Represents preferences for sending email notifications for transfer run events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailPreferences
	{
		
		/// <summary>
		/// If true, email notifications will be sent on transfer run failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFailureEmail")]
		public System.Nullable<System.Boolean> EnableFailureEmail { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Represents the encryption configuration for a transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionConfiguration
	{
		
		/// <summary>
		/// The name of the KMS key used for encrypting BigQuery data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// A request to enroll a set of data sources so they are visible in the BigQuery UI's `Transfer` tab.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrollDataSourcesRequest
	{
		
		/// <summary>
		/// Data sources that are enrolled. It is required to provide at least one data source id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceIds")]
		public string[] DataSourceIds { get; set; }
	}
	
	/// <summary>
	/// Returns list of supported data sources and their metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataSourcesResponse
	{
		
		/// <summary>
		/// List of supported data sources and their transfer settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSources")]
		public DataSource[] DataSources { get; set; }
		
		/// <summary>
		/// Output only. The next-pagination token. For multiple-page list results, this token can be used as the `ListDataSourcesRequest.page_token` to request the next page of list results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The returned list of pipelines in the project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransferConfigsResponse
	{
		
		/// <summary>
		/// Output only. The next-pagination token. For multiple-page list results, this token can be used as the `ListTransferConfigsRequest.page_token` to request the next page of list results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. The stored pipeline transfer configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferConfigs")]
		public TransferConfig[] TransferConfigs { get; set; }
	}
	
	/// <summary>
	/// Represents a data transfer configuration. A transfer configuration contains all metadata needed to perform a data transfer. For example, `destination_dataset_id` specifies where data should be stored. When a new transfer configuration is created, the specified `destination_dataset_id` is created when needed and shared with the appropriate data source service account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferConfig
	{
		
		/// <summary>
		/// The number of days to look back to automatically refresh the data. For example, if `data_refresh_window_days = 10`, then every day BigQuery reingests data for [today-10, today-1], rather than ingesting data for just [today-1]. Only valid if the data source supports the feature. Set the value to 0 to use the default value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRefreshWindowDays")]
		public System.Nullable<System.Int32> DataRefreshWindowDays { get; set; }
		
		/// <summary>
		/// Data source ID. This cannot be changed once data transfer is created. The full list of available data source IDs can be returned through an API call: https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Output only. Region in which BigQuery dataset is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetRegion")]
		public string DatasetRegion { get; set; }
		
		/// <summary>
		/// The BigQuery target dataset id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationDatasetId")]
		public string DestinationDatasetId { get; set; }
		
		/// <summary>
		/// Is this config disabled. When set to true, no runs are scheduled for a given transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// User specified display name for the data transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Represents preferences for sending email notifications for transfer run events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailPreferences")]
		public EmailPreferences EmailPreferences { get; set; }
		
		/// <summary>
		/// Represents the encryption configuration for a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Next time when data transfer will run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRunTime")]
		public string NextRunTime { get; set; }
		
		/// <summary>
		/// Pub/Sub topic where notifications will be sent after transfer runs associated with this transfer config finish. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationPubsubTopic")]
		public string NotificationPubsubTopic { get; set; }
		
		/// <summary>
		/// Information about a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerInfo")]
		public UserInfo OwnerInfo { get; set; }
		
		/// <summary>
		/// Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, object> Params { get; set; }
		
		/// <summary>
		/// Data transfer schedule. If the data source does not support a custom schedule, this should be empty. If it is empty, the default value for the data source will be used. The specified times are in UTC. Examples of valid format: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`. See more explanation about the format here: https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format NOTE: The minimum interval time between recurring transfers depends on the data source; refer to the documentation for your data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public string Schedule { get; set; }
		
		/// <summary>
		/// Options customizing the data transfer schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleOptions")]
		public ScheduleOptions ScheduleOptions { get; set; }
		
		/// <summary>
		/// Output only. State of the most recently updated transfer run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<TransferConfigState> State { get; set; }
		
		/// <summary>
		/// Output only. Data transfer modification time. Ignored by server on input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Deprecated. Unique ID of the user on whose behalf transfer is done.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Information about a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInfo
	{
		
		/// <summary>
		/// E-mail address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// Options customizing the data transfer schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleOptions
	{
		
		/// <summary>
		/// If true, automatic scheduling of data transfer runs for this configuration will be disabled. The runs can be started on ad-hoc basis using StartManualTransferRuns API. When automatic scheduling is disabled, the TransferConfig.schedule field will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableAutoScheduling")]
		public System.Nullable<System.Boolean> DisableAutoScheduling { get; set; }
		
		/// <summary>
		/// Defines time to stop scheduling transfer runs. A transfer run cannot be scheduled at or after the end time. The end time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Specifies time to start scheduling transfer runs. The first run will be scheduled at or after the start time according to a recurrence pattern defined in the schedule string. The start time can be changed at any moment. The time when a data transfer can be trigerred manually is not limited by this option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransferConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 5,
	}
	
	/// <summary>
	/// The returned list transfer run messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransferLogsResponse
	{
		
		/// <summary>
		/// Output only. The next-pagination token. For multiple-page list results, this token can be used as the `GetTransferRunLogRequest.page_token` to request the next page of list results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. The stored pipeline transfer messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferMessages")]
		public TransferMessage[] TransferMessages { get; set; }
	}
	
	/// <summary>
	/// Represents a user facing message for a particular data transfer run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferMessage
	{
		
		/// <summary>
		/// Message text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public string MessageText { get; set; }
		
		/// <summary>
		/// Time when message was logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageTime")]
		public string MessageTime { get; set; }
		
		/// <summary>
		/// Message severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<TransferMessageSeverity> Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TransferMessageSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	/// <summary>
	/// The returned list of pipelines in the project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTransferRunsResponse
	{
		
		/// <summary>
		/// Output only. The next-pagination token. For multiple-page list results, this token can be used as the `ListTransferRunsRequest.page_token` to request the next page of list results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. The stored pipeline transfer runs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferRuns")]
		public TransferRun[] TransferRuns { get; set; }
	}
	
	/// <summary>
	/// Represents a data transfer run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferRun
	{
		
		/// <summary>
		/// Output only. Data source id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Output only. The BigQuery target dataset id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationDatasetId")]
		public string DestinationDatasetId { get; set; }
		
		/// <summary>
		/// Represents preferences for sending email notifications for transfer run events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailPreferences")]
		public EmailPreferences EmailPreferences { get; set; }
		
		/// <summary>
		/// Output only. Time when transfer run ended. Parameter ignored by server for input requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorStatus")]
		public Status ErrorStatus { get; set; }
		
		/// <summary>
		/// The resource name of the transfer run. Transfer run names have the form `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`. The name is ignored when creating a transfer run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Pub/Sub topic where a notification will be sent after this transfer run finishes. The format for specifying a pubsub topic is: `projects/{project}/topics/{topic}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationPubsubTopic")]
		public string NotificationPubsubTopic { get; set; }
		
		/// <summary>
		/// Output only. Parameters specific to each data source. For more information see the bq tab in the 'Setting up a data transfer' section for each data source. For example the parameters for Cloud Storage transfers are listed here: https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, object> Params { get; set; }
		
		/// <summary>
		/// For batch transfer runs, specifies the date and time of the data should be ingested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runTime")]
		public string RunTime { get; set; }
		
		/// <summary>
		/// Output only. Describes the schedule of this transfer run if it was created as part of a regular schedule. For batch transfer runs that are scheduled manually, this is empty. NOTE: the system might choose to delay the schedule depending on the current load, so `schedule_time` doesn't always match this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public string Schedule { get; set; }
		
		/// <summary>
		/// Minimum time after which a transfer run can be started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduleTime")]
		public string ScheduleTime { get; set; }
		
		/// <summary>
		/// Output only. Time when transfer run was started. Parameter ignored by server for input requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Data transfer run state. Ignored for input requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public TransferConfigState State { get; set; }
		
		/// <summary>
		/// Output only. Last time the data transfer run state was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Deprecated. Unique ID of the user on whose behalf transfer is done.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A request to schedule transfer runs for a time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleTransferRunsRequest
	{
		
		/// <summary>
		/// Required. End time of the range of transfer runs. For example, `"2017-05-30T00:00:00+00:00"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required. Start time of the range of transfer runs. For example, `"2017-05-25T00:00:00+00:00"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// A response to schedule transfer runs for a time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleTransferRunsResponse
	{
		
		/// <summary>
		/// The transfer runs that were scheduled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public TransferRun[] Runs { get; set; }
	}
	
	/// <summary>
	/// A request to start manual transfer runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartManualTransferRunsRequest
	{
		
		/// <summary>
		/// A run_time timestamp for historical data files or reports that are scheduled to be transferred by the scheduled transfer run. requested_run_time must be a past time and cannot include future time values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedRunTime")]
		public string RequestedRunTime { get; set; }
		
		/// <summary>
		/// A specification for a time range, this will request transfer runs with run_time between start_time (inclusive) and end_time (exclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedTimeRange")]
		public TimeRange RequestedTimeRange { get; set; }
	}
	
	/// <summary>
	/// A specification for a time range, this will request transfer runs with run_time between start_time (inclusive) and end_time (exclusive).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeRange
	{
		
		/// <summary>
		/// End time of the range of transfer runs. For example, `"2017-05-30T00:00:00+00:00"`. The end_time must not be in the future. Creates transfer runs where run_time is in the range between start_time (inclusive) and end_time (exclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Start time of the range of transfer runs. For example, `"2017-05-25T00:00:00+00:00"`. The start_time must be strictly less than the end_time. Creates transfer runs where run_time is in the range between start_time (inclusive) and end_time (exclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// A response to start manual transfer runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartManualTransferRunsResponse
	{
		
		/// <summary>
		/// The transfer runs that were created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public TransferRun[] Runs { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes the specified transfer run.
		/// Bigquerydatatransfer_projects_transferConfigs_runs_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The field will contain name of the resource requested, for example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Bigquerydatatransfer_projects_transferConfigs_runs_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the particular transfer run.
		/// Bigquerydatatransfer_projects_transferConfigs_runs_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The field will contain name of the resource requested, for example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<TransferRun> Bigquerydatatransfer_projects_transferConfigs_runs_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransferRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a data transfer configuration. All fields must be set, even if they are not updated.
		/// Bigquerydatatransfer_projects_transferConfigs_patch v1/{name}
		/// </summary>
		/// <param name="name">The resource name of the transfer config. Transfer config names have the form either `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or `projects/{project_id}/transferConfigs/{config_id}`, where `config_id` is usually a UUID, even though it is not guaranteed or required. The name is ignored when creating a transfer config.</param>
		/// <param name="authorizationCode">Optional OAuth2 authorization code to use with this transfer configuration. This is required only if `transferConfig.dataSourceId` is 'youtube_channel' and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain authorization_code, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=client_id&scope=data_source_scopes * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to update the transfer config.</param>
		/// <param name="serviceAccountName">Optional service account email. If this field is set, the transfer config will be created with this service account's credentials. It requires that the requesting user calling this API has permissions to act as this service account. Note that not all data sources support service account credentials when creating a transfer config. For the latest list of data sources, read about [using service accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).</param>
		/// <param name="updateMask">Required. Required list of fields to be updated in this request.</param>
		/// <param name="versionInfo">Optional version info. This is required only if `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain version info, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=client_id&scope=data_source_scopes * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to update the transfer config.</param>
		/// <returns>Successful response</returns>
		public async Task<TransferConfig> Bigquerydatatransfer_projects_transferConfigs_patchAsync(string name, string authorizationCode, string serviceAccountName, string updateMask, string versionInfo, TransferConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&authorizationCode=" + (authorizationCode==null? "" : System.Uri.EscapeDataString(authorizationCode))+"&serviceAccountName=" + (serviceAccountName==null? "" : System.Uri.EscapeDataString(serviceAccountName))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&versionInfo=" + (versionInfo==null? "" : System.Uri.EscapeDataString(versionInfo));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransferConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Bigquerydatatransfer_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Bigquerydatatransfer_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns true if valid credentials exist for the given data source and requesting user.
		/// Bigquerydatatransfer_projects_locations_dataSources_checkValidCreds v1/{name}:checkValidCreds
		/// </summary>
		/// <param name="name">Required. The data source in the form: `projects/{project_id}/dataSources/{data_source_id}` or `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<CheckValidCredsResponse> Bigquerydatatransfer_projects_locations_dataSources_checkValidCredsAsync(string name, CheckValidCredsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":checkValidCreds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CheckValidCredsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
		/// Bigquerydatatransfer_projects_locations_enrollDataSources v1/{name}:enrollDataSources
		/// </summary>
		/// <param name="name">The name of the project resource in the form: `projects/{project_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Bigquerydatatransfer_projects_locations_enrollDataSourcesAsync(string name, EnrollDataSourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":enrollDataSources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists supported data sources and returns their settings.
		/// Bigquerydatatransfer_projects_locations_dataSources_list v1/{parent}/dataSources
		/// </summary>
		/// <param name="parent">Required. The BigQuery project id for which data sources should be returned. Must be in the form: `projects/{project_id}` or `projects/{project_id}/locations/{location_id}`</param>
		/// <param name="pageSize">Page size. The default page size is the maximum value of 1000 results.</param>
		/// <param name="pageToken">Pagination token, which can be used to request a specific page of `ListDataSourcesRequest` list results. For multiple-page results, `ListDataSourcesResponse` outputs a `next_page` token, which can be used as the `page_token` value to request the next page of list results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDataSourcesResponse> Bigquerydatatransfer_projects_locations_dataSources_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/dataSources&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDataSourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about running and completed transfer runs.
		/// Bigquerydatatransfer_projects_transferConfigs_runs_list v1/{parent}/runs
		/// </summary>
		/// <param name="parent">Required. Name of transfer configuration for which transfer runs should be retrieved. Format of transfer configuration resource name is: `projects/{project_id}/transferConfigs/{config_id}` or `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.</param>
		/// <param name="pageSize">Page size. The default page size is the maximum value of 1000 results.</param>
		/// <param name="pageToken">Pagination token, which can be used to request a specific page of `ListTransferRunsRequest` list results. For multiple-page results, `ListTransferRunsResponse` outputs a `next_page` token, which can be used as the `page_token` value to request the next page of list results.</param>
		/// <param name="runAttempt">Indicates how run attempts are to be pulled.</param>
		/// <param name="states">When specified, only transfer runs with requested states are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTransferRunsResponse> Bigquerydatatransfer_projects_transferConfigs_runs_listAsync(string parent, int pageSize, string pageToken, Bigquerydatatransfer_projects_transferConfigs_runs_listRunAttempt runAttempt, TransferConfigState[] states, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/runs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&runAttempt=" + runAttempt+"&"+string.Join("&", states.Select(z => $"states={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransferRunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about all transfer configs owned by a project in the specified location.
		/// Bigquerydatatransfer_projects_transferConfigs_list v1/{parent}/transferConfigs
		/// </summary>
		/// <param name="parent">Required. The BigQuery project id for which transfer configs should be returned: `projects/{project_id}` or `projects/{project_id}/locations/{location_id}`</param>
		/// <param name="dataSourceIds">When specified, only configurations of requested data sources are returned.</param>
		/// <param name="pageSize">Page size. The default page size is the maximum value of 1000 results.</param>
		/// <param name="pageToken">Pagination token, which can be used to request a specific page of `ListTransfersRequest` list results. For multiple-page results, `ListTransfersResponse` outputs a `next_page` token, which can be used as the `page_token` value to request the next page of list results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTransferConfigsResponse> Bigquerydatatransfer_projects_transferConfigs_listAsync(string parent, string[] dataSourceIds, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/transferConfigs&"+string.Join("&", dataSourceIds.Select(z => $"dataSourceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransferConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new data transfer configuration.
		/// Bigquerydatatransfer_projects_transferConfigs_create v1/{parent}/transferConfigs
		/// </summary>
		/// <param name="parent">Required. The BigQuery project id where the transfer configuration should be created. Must be in the format projects/{project_id}/locations/{location_id} or projects/{project_id}. If specified location and location of the destination bigquery dataset do not match - the request will fail.</param>
		/// <param name="authorizationCode">Optional OAuth2 authorization code to use with this transfer configuration. This is required only if `transferConfig.dataSourceId` is 'youtube_channel' and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain authorization_code, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=client_id&scope=data_source_scopes * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.</param>
		/// <param name="serviceAccountName">Optional service account email. If this field is set, the transfer config will be created with this service account's credentials. It requires that the requesting user calling this API has permissions to act as this service account. Note that not all data sources support service account credentials when creating a transfer config. For the latest list of data sources, read about [using service accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).</param>
		/// <param name="versionInfo">Optional version info. This is required only if `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials are needed, as indicated by `CheckValidCreds`. In order to obtain version info, make a request to the following URL: https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=client_id&scope=data_source_scopes * The client_id is the OAuth client_id of the a data source as returned by ListDataSources method. * data_source_scopes are the scopes returned by ListDataSources method. Note that this should not be set when `service_account_name` is used to create the transfer config.</param>
		/// <returns>Successful response</returns>
		public async Task<TransferConfig> Bigquerydatatransfer_projects_transferConfigs_createAsync(string parent, string authorizationCode, string serviceAccountName, string versionInfo, TransferConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/transferConfigs&authorizationCode=" + (authorizationCode==null? "" : System.Uri.EscapeDataString(authorizationCode))+"&serviceAccountName=" + (serviceAccountName==null? "" : System.Uri.EscapeDataString(serviceAccountName))+"&versionInfo=" + (versionInfo==null? "" : System.Uri.EscapeDataString(versionInfo));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransferConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns log messages for the transfer run.
		/// Bigquerydatatransfer_projects_transferConfigs_runs_transferLogs_list v1/{parent}/transferLogs
		/// </summary>
		/// <param name="parent">Required. Transfer run name in the form: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`</param>
		/// <param name="messageTypes">Message types to return. If not populated - INFO, WARNING and ERROR messages are returned.</param>
		/// <param name="pageSize">Page size. The default page size is the maximum value of 1000 results.</param>
		/// <param name="pageToken">Pagination token, which can be used to request a specific page of `ListTransferLogsRequest` list results. For multiple-page results, `ListTransferLogsResponse` outputs a `next_page` token, which can be used as the `page_token` value to request the next page of list results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTransferLogsResponse> Bigquerydatatransfer_projects_transferConfigs_runs_transferLogs_listAsync(string parent, TransferMessageSeverity[] messageTypes, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/transferLogs&"+string.Join("&", messageTypes.Select(z => $"messageTypes={z}"))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTransferLogsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.
		/// Bigquerydatatransfer_projects_transferConfigs_scheduleRuns v1/{parent}:scheduleRuns
		/// </summary>
		/// <param name="parent">Required. Transfer configuration name in the form: `projects/{project_id}/transferConfigs/{config_id}` or `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ScheduleTransferRunsResponse> Bigquerydatatransfer_projects_transferConfigs_scheduleRunsAsync(string parent, ScheduleTransferRunsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":scheduleRuns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleTransferRunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.
		/// Bigquerydatatransfer_projects_transferConfigs_startManualRuns v1/{parent}:startManualRuns
		/// </summary>
		/// <param name="parent">Transfer configuration name in the form: `projects/{project_id}/transferConfigs/{config_id}` or `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<StartManualTransferRunsResponse> Bigquerydatatransfer_projects_transferConfigs_startManualRunsAsync(string parent, StartManualTransferRunsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":startManualRuns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartManualTransferRunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Bigquerydatatransfer_projects_transferConfigs_runs_listRunAttempt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_ATTEMPT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
