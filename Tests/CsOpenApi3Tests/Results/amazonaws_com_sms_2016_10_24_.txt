//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="appSummary")]
		public AppSummary AppSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroups")]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about the application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importedAppId")]
		public string ImportedAppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AppStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationConfigurationStatus")]
		public AppReplicationConfigurationStatus ReplicationConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationStatus")]
		public AppReplicationStatus ReplicationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationStatusMessage")]
		public string ReplicationStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestReplicationTime")]
		public System.DateTimeOffset LatestReplicationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchConfigurationStatus")]
		public AppReplicationConfigurationStatus LaunchConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchStatus")]
		public AppLaunchStatus LaunchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchStatusMessage")]
		public string LaunchStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchDetails")]
		public LaunchDetails LaunchDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.DateTimeOffset LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalServerGroups")]
		public System.Nullable<System.Int32> TotalServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalServers")]
		public System.Nullable<System.Int32> TotalServers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppReplicationConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CONFIGURED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_CONFIGURATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_INVALID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_REPLICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIALLY_REPLICATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATION_IN_PROGRESS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATION_FAILED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_FAILED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOPPING = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOP_FAILED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOPPED = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppLaunchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_CONFIGURATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_INVALID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_LAUNCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCHED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIALLY_LAUNCHED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_LAUNCH_IN_PROGRESS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_LAUNCH_FAILED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_FAILED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_IN_PROGRESS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_FAILED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 14,
	}
	
	/// <summary>
	/// Details about the latest launch of an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="latestLaunchTime")]
		public System.DateTimeOffset LatestLaunchTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackName")]
		public string StackName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackId")]
		public string StackId { get; set; }
	}
	
	/// <summary>
	/// Logical grouping of servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupId")]
		public string ServerGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverList")]
		public Server[] ServerList { get; set; }
	}
	
	/// <summary>
	/// Represents a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Server
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public string ServerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverType")]
		public ServerType ServerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmServer")]
		public VmServer VmServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationJobTerminated")]
		public System.Nullable<System.Boolean> ReplicationJobTerminated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_MACHINE = 0,
	}
	
	/// <summary>
	/// Represents a VM server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmServer
	{
		
		[System.Runtime.Serialization.DataMember(Name="vmServerAddress")]
		public VmServerAddress VmServerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmName")]
		public string VmName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmManagerName")]
		public string VmManagerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmManagerType")]
		public VmManagerType VmManagerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmPath")]
		public string VmPath { get; set; }
	}
	
	/// <summary>
	/// Represents a VM server location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VmServerAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="vmManagerId")]
		public string VmManagerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VmManagerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSPHERE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCVMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HYPERV-MANAGER")]
		HYPERVMinusMANAGER = 2,
	}
	
	/// <summary>
	/// Key/value pair that can be assigned to an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroups")]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedOperationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MissingRequiredParameterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationNotPermittedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReplicationJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReplicationJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public string ServerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seedReplicationTime")]
		public System.DateTimeOffset SeedReplicationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runOnce")]
		public System.Nullable<System.Boolean> RunOnce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public LicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecentAmisToKeep")]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerCannotBeReplicatedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationJobAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoConnectorsAvailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemporarilyUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceStopAppReplication")]
		public System.Nullable<System.Boolean> ForceStopAppReplication { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceTerminateApp")]
		public System.Nullable<System.Boolean> ForceTerminateApp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppLaunchConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppReplicationConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppValidationConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppValidationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReplicationJobResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteReplicationJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationJobNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServerCatalogResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServerCatalogRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateConnectorResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateConnectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateChangeSetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	/// Location of an Amazon S3 object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateChangeSetRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changesetFormat")]
		public OutputFormat ChangesetFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateFormat")]
		public OutputFormat TemplateFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="appSummary")]
		public AppSummary AppSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroups")]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppLaunchConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoLaunch")]
		public System.Nullable<System.Boolean> AutoLaunch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupLaunchConfigurations")]
		public ServerGroupLaunchConfiguration[] ServerGroupLaunchConfigurations { get; set; }
	}
	
	/// <summary>
	/// Launch configuration for a server group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerGroupLaunchConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupId")]
		public string ServerGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchOrder")]
		public System.Nullable<System.Int32> LaunchOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverLaunchConfigurations")]
		public ServerLaunchConfiguration[] ServerLaunchConfigurations { get; set; }
	}
	
	/// <summary>
	/// Launch configuration for a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerLaunchConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public Server Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logicalId")]
		public string LogicalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public string Vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="securityGroup")]
		public string SecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2KeyName")]
		public string Ec2KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public UserData UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatePublicIpAddress")]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamInstanceProfileName")]
		public string IamInstanceProfileName { get; set; }
		
		/// <summary>
		/// Location of an Amazon S3 object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configureScript")]
		public S3Location ConfigureScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configureScriptType")]
		public ScriptType ConfigureScriptType { get; set; }
	}
	
	/// <summary>
	/// A script that runs on first launch of an Amazon EC2 instance. Used for configuring the server during launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScriptType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHELL_SCRIPT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWERSHELL_SCRIPT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppReplicationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupReplicationConfigurations")]
		public ServerGroupReplicationConfiguration[] ServerGroupReplicationConfigurations { get; set; }
	}
	
	/// <summary>
	/// Replication configuration for a server group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerGroupReplicationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupId")]
		public string ServerGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverReplicationConfigurations")]
		public ServerReplicationConfiguration[] ServerReplicationConfigurations { get; set; }
	}
	
	/// <summary>
	/// Replication configuration of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerReplicationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public Server Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverReplicationParameters")]
		public ServerReplicationParameters ServerReplicationParameters { get; set; }
	}
	
	/// <summary>
	/// The replication parameters for replicating a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerReplicationParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="seedTime")]
		public System.DateTimeOffset SeedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runOnce")]
		public System.Nullable<System.Boolean> RunOnce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public LicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecentAmisToKeep")]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppValidationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="appValidationConfigurations")]
		public AppValidationConfiguration[] AppValidationConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupValidationConfigurations")]
		public ServerGroupValidationConfiguration[] ServerGroupValidationConfigurations { get; set; }
	}
	
	/// <summary>
	/// Configuration for validating an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppValidationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="validationId")]
		public string ValidationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appValidationStrategy")]
		public AppValidationStrategy AppValidationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssmValidationParameters")]
		public SSMValidationParameters SsmValidationParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppValidationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSM = 0,
	}
	
	/// <summary>
	/// Contains validation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SSMValidationParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptType")]
		public ScriptType ScriptType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionTimeoutSeconds")]
		public System.Nullable<System.Int32> ExecutionTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputS3BucketName")]
		public string OutputS3BucketName { get; set; }
	}
	
	/// <summary>
	/// Contains the location of a validation script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		/// <summary>
		/// Location of an Amazon S3 object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	/// Configuration for validating an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerGroupValidationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupId")]
		public string ServerGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverValidationConfigurations")]
		public ServerValidationConfiguration[] ServerValidationConfigurations { get; set; }
	}
	
	/// <summary>
	/// Configuration for validating an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerValidationConfiguration
	{
		
		/// <summary>
		/// Represents a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server")]
		public Server Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationId")]
		public string ValidationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverValidationStrategy")]
		public ServerValidationStrategy ServerValidationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDataValidationParameters")]
		public UserDataValidationParameters UserDataValidationParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ServerValidationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USERDATA = 0,
	}
	
	/// <summary>
	/// Contains validation parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDataValidationParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptType")]
		public ScriptType ScriptType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppValidationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppValidationOutputResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="validationOutputList")]
		public ValidationOutput[] ValidationOutputList { get; set; }
	}
	
	/// <summary>
	/// Contains validation output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="validationId")]
		public string ValidationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ValidationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestValidationTime")]
		public System.DateTimeOffset LatestValidationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appValidationOutput")]
		public AppValidationOutput AppValidationOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverValidationOutput")]
		public ServerValidationOutput ServerValidationOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ValidationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	/// <summary>
	/// Output from validating an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppValidationOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="ssmOutput")]
		public SSMOutput SsmOutput { get; set; }
	}
	
	/// <summary>
	/// Contains the location of validation output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SSMOutput
	{
		
		/// <summary>
		/// Location of an Amazon S3 object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	/// Contains output from validating an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerValidationOutput
	{
		
		/// <summary>
		/// Represents a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="server")]
		public Server Server { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppValidationOutputRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectorsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorList")]
		public Connector[] ConnectorList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Connector
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConnectorStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capabilityList")]
		public ConnectorCapability[] CapabilityList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmManagerName")]
		public string VmManagerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmManagerType")]
		public VmManagerType VmManagerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmManagerId")]
		public string VmManagerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedOn")]
		public System.DateTimeOffset AssociatedOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConnectorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConnectorCapability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSPHERE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCVMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HYPERV-MANAGER")]
		HYPERVMinusMANAGER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT_BATCHING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_OPTIMIZED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectorsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReplicationJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationJobList")]
		public ReplicationJob[] ReplicationJobList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a replication job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationJob
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public string ServerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverType")]
		public ServerType ServerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmServer")]
		public VmServer VmServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seedReplicationTime")]
		public System.DateTimeOffset SeedReplicationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runOnce")]
		public System.Nullable<System.Boolean> RunOnce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextReplicationRunStartTime")]
		public System.DateTimeOffset NextReplicationRunStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public LicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestAmiId")]
		public string LatestAmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ReplicationJobState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecentAmisToKeep")]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationRunList")]
		public ReplicationRun[] ReplicationRunList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReplicationJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED_ON_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILING = 7,
	}
	
	/// <summary>
	/// Represents a replication run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationRunId")]
		public string ReplicationRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ReplicationRunState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ReplicationRunType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageDetails")]
		public ReplicationRunStageDetails StageDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amiId")]
		public string AmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledStartTime")]
		public System.DateTimeOffset ScheduledStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedTime")]
		public System.DateTimeOffset CompletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReplicationRunState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReplicationRunType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 1,
	}
	
	/// <summary>
	/// Details of the current stage of a replication run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationRunStageDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public string Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageProgress")]
		public string StageProgress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReplicationJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReplicationRunsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationJob")]
		public ReplicationJob ReplicationJob { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replicationRunList")]
		public ReplicationRun[] ReplicationRunList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReplicationRunsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedOn")]
		public System.DateTimeOffset LastModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverCatalogStatus")]
		public ServerCatalogStatus ServerCatalogStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverList")]
		public Server[] ServerList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ServerCatalogStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IMPORTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmServerAddressList")]
		public VmServerAddress[] VmServerAddressList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportAppCatalogResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportAppCatalogRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportServerCatalogResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportServerCatalogRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchAppResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchAppRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="apps")]
		public AppSummary[] Apps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appIds")]
		public string[] AppIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyAppValidationOutputResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyAppValidationOutputRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationContext")]
		public NotificationContext NotificationContext { get; set; }
	}
	
	/// <summary>
	/// Contains the status of validating an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="validationId")]
		public string ValidationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ValidationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppLaunchConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoLaunch")]
		public System.Nullable<System.Boolean> AutoLaunch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupLaunchConfigurations")]
		public ServerGroupLaunchConfiguration[] ServerGroupLaunchConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppReplicationConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupReplicationConfigurations")]
		public ServerGroupReplicationConfiguration[] ServerGroupReplicationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppValidationConfigurationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAppValidationConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appValidationConfigurations")]
		public AppValidationConfiguration[] AppValidationConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroupValidationConfigurations")]
		public ServerGroupValidationConfiguration[] ServerGroupValidationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAppReplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAppReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOnDemandAppReplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOnDemandAppReplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOnDemandReplicationRunResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="replicationRunId")]
		public string ReplicationRunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOnDemandReplicationRunRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReplicationRunLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DryRunOperationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopAppReplicationResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopAppReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateAppResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateAppRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="appSummary")]
		public AppSummary AppSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroups")]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverGroups")]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReplicationJobResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReplicationJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replicationJobId")]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextReplicationRunStartTime")]
		public System.DateTimeOffset NextReplicationRunStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public LicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleName")]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecentAmisToKeep")]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encrypted")]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kmsKeyId")]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AppLaunchConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_CONFIGURED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates an application. An application consists of one or more server groups. Each server group contain one or more servers.
		/// CreateApp #X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAppResponse> CreateAppAsync(CreateAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a replication job. The replication job schedules periodic replication runs to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image (AMI).
		/// CreateReplicationJob #X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateReplicationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateReplicationJobResponse> CreateReplicationJobAsync(CreateReplicationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateReplicationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateReplicationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified application. Optionally deletes the launched stack associated with the application and all Server Migration Service replication jobs for servers in the application.
		/// DeleteApp #X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAppResponse> DeleteAppAsync(DeleteAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the launch configuration for the specified application.
		/// DeleteAppLaunchConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAppLaunchConfigurationResponse> DeleteAppLaunchConfigurationAsync(DeleteAppLaunchConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAppLaunchConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the replication configuration for the specified application.
		/// DeleteAppReplicationConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAppReplicationConfigurationResponse> DeleteAppReplicationConfigurationAsync(DeleteAppReplicationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAppReplicationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the validation configuration for the specified application.
		/// DeleteAppValidationConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppValidationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAppValidationConfigurationResponse> DeleteAppValidationConfigurationAsync(DeleteAppValidationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppValidationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAppValidationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified replication job.</p> <p>After you delete a replication job, there are no further replication runs. Amazon Web Services deletes the contents of the Amazon S3 bucket used to store Server Migration Service artifacts. The AMIs created by the replication runs are not deleted.</p>
		/// DeleteReplicationJob #X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteReplicationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteReplicationJobResponse> DeleteReplicationJobAsync(DeleteReplicationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteReplicationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteReplicationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes all servers from your server catalog.
		/// DeleteServerCatalog #X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteServerCatalog
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteServerCatalogResponse> DeleteServerCatalogAsync(DeleteServerCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteServerCatalog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteServerCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates the specified connector from Server Migration Service.</p> <p>After you disassociate a connector, it is no longer available to support replication jobs.</p>
		/// DisassociateConnector #X-Amz-Target=AWSServerMigrationService_V2016_10_24.DisassociateConnector
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateConnectorResponse> DisassociateConnectorAsync(DisassociateConnectorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DisassociateConnector";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates a target change set for a currently launched stack and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
		/// GenerateChangeSet #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateChangeSet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GenerateChangeSetResponse> GenerateChangeSetAsync(GenerateChangeSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateChangeSet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenerateChangeSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates an CloudFormation template based on the current launch configuration and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
		/// GenerateTemplate #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GenerateTemplateResponse> GenerateTemplateAsync(GenerateTemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenerateTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve information about the specified application.
		/// GetApp #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppResponse> GetAppAsync(GetAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the application launch configuration associated with the specified application.
		/// GetAppLaunchConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppLaunchConfigurationResponse> GetAppLaunchConfigurationAsync(GetAppLaunchConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAppLaunchConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the application replication configuration associated with the specified application.
		/// GetAppReplicationConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppReplicationConfigurationResponse> GetAppReplicationConfigurationAsync(GetAppReplicationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAppReplicationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a configuration for validating an application.
		/// GetAppValidationConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppValidationConfigurationResponse> GetAppValidationConfigurationAsync(GetAppValidationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAppValidationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves output from validating an application.
		/// GetAppValidationOutput #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationOutput
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppValidationOutputResponse> GetAppValidationOutputAsync(GetAppValidationOutputRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationOutput";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAppValidationOutputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the connectors registered with the Server Migration Service.
		/// GetConnectors #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetConnectors
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetConnectorsResponse> GetConnectorsAsync(string maxResults, string nextToken, GetConnectorsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetConnectors?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the specified replication job or all of your replication jobs.
		/// GetReplicationJobs #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationJobs
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetReplicationJobsResponse> GetReplicationJobsAsync(string maxResults, string nextToken, GetReplicationJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationJobs?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReplicationJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the replication runs for the specified replication job.
		/// GetReplicationRuns #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationRuns
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetReplicationRunsResponse> GetReplicationRunsAsync(string maxResults, string nextToken, GetReplicationRunsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationRuns?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReplicationRunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the servers in your server catalog.</p> <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p>
		/// GetServers #X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetServers
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetServersResponse> GetServersAsync(string maxResults, string nextToken, GetServersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetServers?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows application import from Migration Hub.
		/// ImportAppCatalog #X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportAppCatalog
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportAppCatalogResponse> ImportAppCatalogAsync(ImportAppCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportAppCatalog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportAppCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gathers a complete list of on-premises servers. Connectors must be installed and monitoring all servers to import.</p> <p>This call returns immediately, but might take additional time to retrieve all the servers.</p>
		/// ImportServerCatalog #X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportServerCatalog
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportServerCatalogResponse> ImportServerCatalogAsync(ImportServerCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportServerCatalog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportServerCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Launches the specified application as a stack in CloudFormation.
		/// LaunchApp #X-Amz-Target=AWSServerMigrationService_V2016_10_24.LaunchApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LaunchAppResponse> LaunchAppAsync(LaunchAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.LaunchApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LaunchAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves summaries for all applications.
		/// ListApps #X-Amz-Target=AWSServerMigrationService_V2016_10_24.ListApps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAppsResponse> ListAppsAsync(ListAppsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ListApps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides information to Server Migration Service about whether application validation is successful.
		/// NotifyAppValidationOutput #X-Amz-Target=AWSServerMigrationService_V2016_10_24.NotifyAppValidationOutput
		/// </summary>
		/// <returns>Success</returns>
		public async Task<NotifyAppValidationOutputResponse> NotifyAppValidationOutputAsync(NotifyAppValidationOutputRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.NotifyAppValidationOutput";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotifyAppValidationOutputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the launch configuration for the specified application.
		/// PutAppLaunchConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAppLaunchConfigurationResponse> PutAppLaunchConfigurationAsync(PutAppLaunchConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAppLaunchConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the replication configuration for the specified application.
		/// PutAppReplicationConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAppReplicationConfigurationResponse> PutAppReplicationConfigurationAsync(PutAppReplicationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAppReplicationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a validation configuration for the specified application.
		/// PutAppValidationConfiguration #X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppValidationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAppValidationConfigurationResponse> PutAppValidationConfigurationAsync(PutAppValidationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppValidationConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAppValidationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts replicating the specified application by creating replication jobs for each server in the application.
		/// StartAppReplication #X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartAppReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartAppReplicationResponse> StartAppReplicationAsync(StartAppReplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartAppReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartAppReplicationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an on-demand replication run for the specified application.
		/// StartOnDemandAppReplication #X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandAppReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartOnDemandAppReplicationResponse> StartOnDemandAppReplicationAsync(StartOnDemandAppReplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandAppReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartOnDemandAppReplicationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an on-demand replication run for the specified replication job. This replication run starts immediately. This replication run is in addition to the ones already scheduled.</p> <p>There is a limit on the number of on-demand replications runs that you can request in a 24-hour period.</p>
		/// StartOnDemandReplicationRun #X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartOnDemandReplicationRunResponse> StartOnDemandReplicationRunAsync(StartOnDemandReplicationRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartOnDemandReplicationRunResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops replicating the specified application by deleting the replication job for each server in the application.
		/// StopAppReplication #X-Amz-Target=AWSServerMigrationService_V2016_10_24.StopAppReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopAppReplicationResponse> StopAppReplicationAsync(StopAppReplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StopAppReplication";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopAppReplicationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Terminates the stack for the specified application.
		/// TerminateApp #X-Amz-Target=AWSServerMigrationService_V2016_10_24.TerminateApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TerminateAppResponse> TerminateAppAsync(TerminateAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.TerminateApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TerminateAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified application.
		/// UpdateApp #X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAppResponse> UpdateAppAsync(UpdateAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateApp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified settings for the specified replication job.
		/// UpdateReplicationJob #X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateReplicationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateReplicationJobResponse> UpdateReplicationJobAsync(UpdateReplicationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateReplicationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateReplicationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum CreateAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.CreateApp")]
		AWSServerMigrationService_V2016_10_24_CreateApp = 0,
	}
	
	public enum CreateReplicationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.CreateReplicationJob")]
		AWSServerMigrationService_V2016_10_24_CreateReplicationJob = 0,
	}
	
	public enum DeleteAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.DeleteApp")]
		AWSServerMigrationService_V2016_10_24_DeleteApp = 0,
	}
	
	public enum DeleteAppLaunchConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration")]
		AWSServerMigrationService_V2016_10_24_DeleteAppLaunchConfiguration = 0,
	}
	
	public enum DeleteAppReplicationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration")]
		AWSServerMigrationService_V2016_10_24_DeleteAppReplicationConfiguration = 0,
	}
	
	public enum DeleteAppValidationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.DeleteAppValidationConfiguration")]
		AWSServerMigrationService_V2016_10_24_DeleteAppValidationConfiguration = 0,
	}
	
	public enum DeleteReplicationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.DeleteReplicationJob")]
		AWSServerMigrationService_V2016_10_24_DeleteReplicationJob = 0,
	}
	
	public enum DeleteServerCatalogX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.DeleteServerCatalog")]
		AWSServerMigrationService_V2016_10_24_DeleteServerCatalog = 0,
	}
	
	public enum DisassociateConnectorX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.DisassociateConnector")]
		AWSServerMigrationService_V2016_10_24_DisassociateConnector = 0,
	}
	
	public enum GenerateChangeSetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GenerateChangeSet")]
		AWSServerMigrationService_V2016_10_24_GenerateChangeSet = 0,
	}
	
	public enum GenerateTemplateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GenerateTemplate")]
		AWSServerMigrationService_V2016_10_24_GenerateTemplate = 0,
	}
	
	public enum GetAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetApp")]
		AWSServerMigrationService_V2016_10_24_GetApp = 0,
	}
	
	public enum GetAppLaunchConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration")]
		AWSServerMigrationService_V2016_10_24_GetAppLaunchConfiguration = 0,
	}
	
	public enum GetAppReplicationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration")]
		AWSServerMigrationService_V2016_10_24_GetAppReplicationConfiguration = 0,
	}
	
	public enum GetAppValidationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetAppValidationConfiguration")]
		AWSServerMigrationService_V2016_10_24_GetAppValidationConfiguration = 0,
	}
	
	public enum GetAppValidationOutputX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetAppValidationOutput")]
		AWSServerMigrationService_V2016_10_24_GetAppValidationOutput = 0,
	}
	
	public enum GetConnectorsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetConnectors")]
		AWSServerMigrationService_V2016_10_24_GetConnectors = 0,
	}
	
	public enum GetReplicationJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetReplicationJobs")]
		AWSServerMigrationService_V2016_10_24_GetReplicationJobs = 0,
	}
	
	public enum GetReplicationRunsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetReplicationRuns")]
		AWSServerMigrationService_V2016_10_24_GetReplicationRuns = 0,
	}
	
	public enum GetServersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.GetServers")]
		AWSServerMigrationService_V2016_10_24_GetServers = 0,
	}
	
	public enum ImportAppCatalogX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.ImportAppCatalog")]
		AWSServerMigrationService_V2016_10_24_ImportAppCatalog = 0,
	}
	
	public enum ImportServerCatalogX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.ImportServerCatalog")]
		AWSServerMigrationService_V2016_10_24_ImportServerCatalog = 0,
	}
	
	public enum LaunchAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.LaunchApp")]
		AWSServerMigrationService_V2016_10_24_LaunchApp = 0,
	}
	
	public enum ListAppsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.ListApps")]
		AWSServerMigrationService_V2016_10_24_ListApps = 0,
	}
	
	public enum NotifyAppValidationOutputX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.NotifyAppValidationOutput")]
		AWSServerMigrationService_V2016_10_24_NotifyAppValidationOutput = 0,
	}
	
	public enum PutAppLaunchConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration")]
		AWSServerMigrationService_V2016_10_24_PutAppLaunchConfiguration = 0,
	}
	
	public enum PutAppReplicationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration")]
		AWSServerMigrationService_V2016_10_24_PutAppReplicationConfiguration = 0,
	}
	
	public enum PutAppValidationConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.PutAppValidationConfiguration")]
		AWSServerMigrationService_V2016_10_24_PutAppValidationConfiguration = 0,
	}
	
	public enum StartAppReplicationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.StartAppReplication")]
		AWSServerMigrationService_V2016_10_24_StartAppReplication = 0,
	}
	
	public enum StartOnDemandAppReplicationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.StartOnDemandAppReplication")]
		AWSServerMigrationService_V2016_10_24_StartOnDemandAppReplication = 0,
	}
	
	public enum StartOnDemandReplicationRunX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun")]
		AWSServerMigrationService_V2016_10_24_StartOnDemandReplicationRun = 0,
	}
	
	public enum StopAppReplicationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.StopAppReplication")]
		AWSServerMigrationService_V2016_10_24_StopAppReplication = 0,
	}
	
	public enum TerminateAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.TerminateApp")]
		AWSServerMigrationService_V2016_10_24_TerminateApp = 0,
	}
	
	public enum UpdateAppX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.UpdateApp")]
		AWSServerMigrationService_V2016_10_24_UpdateApp = 0,
	}
	
	public enum UpdateReplicationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSServerMigrationService_V2016_10_24.UpdateReplicationJob")]
		AWSServerMigrationService_V2016_10_24_UpdateReplicationJob = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
