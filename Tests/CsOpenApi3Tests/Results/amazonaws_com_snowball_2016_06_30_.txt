//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelClusterResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KMSRequestFailedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidJobStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidResourceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelJobResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAddressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAddressRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
	}
	
	/// <summary>
	/// The address that you want the Snow device(s) associated with a specific job to be shipped to. Addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. Although no individual elements of the <code>Address</code> are required, if the address is invalid or unsupported, then an exception is thrown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateOrProvince { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrefectureOrDistrict { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Landmark { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRestricted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddressType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUST_PICKUP")]
		CUST_PICKUP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_SHIP")]
		AWS_SHIP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidAddressException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsupportedAddressException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntry[] JobListEntries { get; set; }
	}
	
	/// <summary>
	/// Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of an export job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobListEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobState JobState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMaster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="New")]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PreparingAppliance")]
		PreparingAppliance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PreparingShipment")]
		PreparingShipment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InTransitToCustomer")]
		InTransitToCustomer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WithCustomer")]
		WithCustomer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InTransitToAWS")]
		InTransitToAWS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WithAWSSortingFacility")]
		WithAWSSortingFacility = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WithAWS")]
		WithAWS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Complete")]
		Complete = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Listing")]
		Listing = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT")]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPORT")]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCAL_USE")]
		LOCAL_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SnowballType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDGE")]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDGE_C")]
		EDGE_C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDGE_CG")]
		EDGE_CG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDGE_S")]
		EDGE_S = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNC1_HDD")]
		SNC1_HDD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SNC1_SSD")]
		SNC1_SSD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="V3_5C")]
		V3_5C = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="V3_5S")]
		V3_5S = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RACK_5U_C")]
		RACK_5U_C = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnDeviceServiceConfiguration OnDeviceServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SnowballType SnowballType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShippingOption ShippingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ForwardingAddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteManagement RemoteManagement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InitialClusterSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceCreateJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LongTermPricingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballCapacity SnowballCapacityPreference { get; set; }
	}
	
	/// <summary>
	/// Contains an array of Amazon Web Services resource objects. Each object represents an Amazon S3 bucket, an Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3Resource[] S3Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaResource[] LambdaResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ec2AmiResource[] Ec2AmiResources { get; set; }
	}
	
	/// <summary>
	/// Each <code>S3Resource</code> object represents an Amazon S3 bucket that your transferred data will be exported from or imported into. For export jobs, this object can have an optional <code>KeyRange</code> value. The length of the range is defined at job creation, and has either an inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or both. Ranges are UTF-8 binary sorted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Resource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyRange KeyRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetOnDeviceService[] TargetOnDeviceServices { get; set; }
	}
	
	/// <summary>
	/// Contains a key range. For export jobs, a <code>S3Resource</code> object can have an optional <code>KeyRange</code> value. The length of the range is defined at job creation, and has either an inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or both. Ranges are UTF-8 binary sorted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BeginMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndMarker { get; set; }
	}
	
	/// <summary>
	/// An object that represents the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File System).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetOnDeviceService
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceServiceName ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType TransferOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceServiceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NFS_ON_DEVICE_SERVICE")]
		NFS_ON_DEVICE_SERVICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3_ON_DEVICE_SERVICE")]
		S3_ON_DEVICE_SERVICE = 1,
	}
	
	/// <summary>
	/// Identifies 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LambdaResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LambdaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventTriggerDefinition[] EventTriggers { get; set; }
	}
	
	/// <summary>
	/// The container for the <a>EventTriggerDefinition$EventResourceARN</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventTriggerDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EventResourceARN { get; set; }
	}
	
	/// <summary>
	/// A JSON-formatted object that contains the IDs for an Amazon Machine Image (AMI), including the Amazon EC2-compatible AMI ID and the Snow device AMI ID. Each AMI has these two IDs to simplify identifying the AMI in both the Amazon Web Services Cloud and on the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ec2AmiResource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnowballAmiId { get; set; }
	}
	
	/// <summary>
	/// An object that represents the metadata and configuration settings for services on an Amazon Web Services Snow Family device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnDeviceServiceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NFSOnDeviceServiceConfiguration NFSOnDeviceService { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TGWOnDeviceServiceConfiguration TGWOnDeviceService { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EKSOnDeviceServiceConfiguration EKSOnDeviceService { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3OnDeviceServiceConfiguration S3OnDeviceService { get; set; }
	}
	
	/// <summary>
	/// An object that represents the metadata and configuration settings for the NFS (Network File System) service on an Amazon Web Services Snow Family device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NFSOnDeviceServiceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StorageLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StorageUnit StorageUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StorageUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TB")]
		TB = 0,
	}
	
	/// <summary>
	/// An object that represents the metadata and configuration settings for the Storage Gateway service Tape Gateway type on an Amazon Web Services Snow Family device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TGWOnDeviceServiceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StorageLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StorageUnit StorageUnit { get; set; }
	}
	
	/// <summary>
	/// An object representing the metadata and configuration settings of EKS Anywhere on the Snow Family device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EKSOnDeviceServiceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KubernetesVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EKSAnywhereVersion { get; set; }
	}
	
	/// <summary>
	/// Amazon S3 compatible storage on Snow family devices configuration items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3OnDeviceServiceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StorageLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StorageUnit StorageUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ServiceSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FaultTolerance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SECOND_DAY")]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEXT_DAY")]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPRESS")]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STANDARD")]
		STANDARD = 3,
	}
	
	/// <summary>
	/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobState[] JobStatesToNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NotifyAll { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DevicePickupSnsTopicARN { get; set; }
	}
	
	/// <summary>
	/// The tax documents required in your Amazon Web Services Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaxDocuments
	{
		
		/// <summary>
		/// The tax documents required in Amazon Web Services Region in India.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public INDTaxDocuments IND { get; set; }
	}
	
	/// <summary>
	/// The tax documents required in Amazon Web Services Region in India.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class INDTaxDocuments
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GSTIN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RemoteManagement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED_ONLY")]
		INSTALLED_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED_AUTOSTART")]
		INSTALLED_AUTOSTART = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INSTALLED")]
		NOT_INSTALLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SnowballCapacity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T50")]
		T50 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T80")]
		T80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T100")]
		T100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T42")]
		T42 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T98")]
		T98 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T8")]
		T8 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T14")]
		T14 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T32")]
		T32 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoPreference")]
		NoPreference = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T240")]
		T240 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="T13")]
		T13 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidInputCombinationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ec2RequestFailedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateJobResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnDeviceServiceConfiguration OnDeviceServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballCapacity SnowballCapacityPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingOption ShippingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ForwardingAddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceConfiguration DeviceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteManagement RemoteManagement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LongTermPricingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImpactLevel ImpactLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PickupDetails PickupDetails { get; set; }
	}
	
	/// <summary>
	/// The container for <code>SnowconeDeviceConfiguration</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SnowconeDeviceConfiguration SnowconeDeviceConfiguration { get; set; }
	}
	
	/// <summary>
	/// Specifies the device configuration for an Snowcone job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SnowconeDeviceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WirelessConnection WirelessConnection { get; set; }
	}
	
	/// <summary>
	/// Configures the wireless connection on an Snowcone device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WirelessConnection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsWifiEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImpactLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL2")]
		IL2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL4")]
		IL4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL5")]
		IL5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL6")]
		IL6 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IL99")]
		IL99 = 4,
	}
	
	/// <summary>
	/// Information identifying the person picking up the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PickupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentificationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset IdentificationExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentificationIssuingOrg { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DevicePickupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLongTermPricingResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LongTermPricingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLongTermPricingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LongTermPricingType LongTermPricingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLongTermPricingAutoRenew { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SnowballType SnowballType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LongTermPricingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneYear")]
		OneYear = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ThreeYear")]
		ThreeYear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OneMonth")]
		OneMonth = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReturnShippingLabelResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingLabelStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShippingLabelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InProgress")]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TimedOut")]
		TimedOut = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Succeeded")]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateReturnShippingLabelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingOption ShippingOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReturnShippingLabelAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAddressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAddressRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAddressesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Address[] Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeAddressesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNextTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMetadata ClusterMetadata { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about a specific cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterState ClusterState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingOption ShippingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ForwardingAddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnDeviceServiceConfiguration OnDeviceServiceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClusterState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwaitingQuorum")]
		AwaitingQuorum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InUse")]
		InUse = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Complete")]
		Complete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobMetadata JobMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobMetadata[] SubJobMetadata { get; set; }
	}
	
	/// <summary>
	/// Contains information about a specific job including shipping information, job status, and other important metadata. This information is returned as a part of the response syntax of the <code>DescribeJob</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobState JobState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingDetails ShippingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballCapacity SnowballCapacityPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataTransfer DataTransferProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobLogs JobLogInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ForwardingAddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
		
		/// <summary>
		/// The container for <code>SnowconeDeviceConfiguration</code>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceConfiguration DeviceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteManagement RemoteManagement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LongTermPricingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnDeviceServiceConfiguration OnDeviceServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImpactLevel ImpactLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PickupDetails PickupDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnowballId { get; set; }
	}
	
	/// <summary>
	/// A job's shipping information, including inbound and outbound tracking numbers and shipping speed options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShippingDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingOption ShippingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Shipment InboundShipment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Shipment OutboundShipment { get; set; }
	}
	
	/// <summary>
	/// The <code>Status</code> and <code>TrackingNumber</code> information for an inbound or outbound shipment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Shipment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrackingNumber { get; set; }
	}
	
	/// <summary>
	/// Defines the real-time status of a Snow device's data transfer while the device is at Amazon Web Services. This data is only available while a job has a <code>JobState</code> value of <code>InProgress</code>, for both import and export jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataTransfer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesTransferred { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ObjectsTransferred { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalObjects { get; set; }
	}
	
	/// <summary>
	/// <p>Contains job logs. Whenever a Snow device is used to import data into or export data out of Amazon S3, you'll have the option of downloading a PDF job report. Job logs are returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type. The job logs can be accessed for up to 60 minutes after this request has been made. To access any of the job logs after 60 minutes have passed, you'll have to make another call to the <code>DescribeJob</code> action.</p> <p>For import jobs, the PDF job report becomes available at the end of the import process. For export jobs, your job report typically becomes available while the Snow device for your job part is being delivered to you.</p> <p>The job report provides you insight into the state of your Amazon S3 data transfer. The report includes details about your job or job part for your records.</p> <p>For deeper visibility into the status of your transferred objects, you can look at the two associated logs: a success log and a failure log. The logs are saved in comma-separated value (CSV) format, and the name of each log includes the ID of the job or job part that the log describes.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobCompletionReportURI { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobSuccessLogURI { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobFailureLogURI { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReturnShippingLabelResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingLabelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReturnShippingLabelURI { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeReturnShippingLabelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobManifestResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestURI { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobManifestRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobUnlockCodeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UnlockCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobUnlockCodeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSnowballUsageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnowballLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnowballsInUse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSnowballUsageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSoftwareUpdatesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdatesURI { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSoftwareUpdatesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListClusterJobsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntry[] JobListEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListClusterJobsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListClustersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterListEntry[] ClusterListEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains a cluster's state, a cluster's ID, and other important information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClusterListEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterState ClusterState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListClustersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCompatibleImagesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompatibleImage[] CompatibleImages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A JSON-formatted object that describes a compatible Amazon Machine Image (AMI), including the ID and name for a Snow device AMI. This AMI is compatible with the device's physical hardware requirements, and it should be able to be run in an SBE1 instance on the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompatibleImage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCompatibleImagesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntry[] JobListEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLongTermPricingResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LongTermPricingListEntry[] LongTermPricingEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Each <code>LongTermPricingListEntry</code> object contains information about a long-term pricing type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LongTermPricingListEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LongTermPricingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LongTermPricingEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LongTermPricingStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LongTermPricingType LongTermPricingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentActiveJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplacementJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLongTermPricingAutoRenew { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LongTermPricingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] JobIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLongTermPricingRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPickupLocationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Address[] Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPickupLocationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceVersionsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceVersion[] ServiceVersions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DependentService[] DependentServices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The version of the requested service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KUBERNETES")]
		KUBERNETES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EKS_ANYWHERE")]
		EKS_ANYWHERE = 1,
	}
	
	/// <summary>
	/// The name and version of the service dependant on the requested service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependentService
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceVersion ServiceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceVersionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DependentService[] DependentServices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateClusterResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnDeviceServiceConfiguration OnDeviceServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingOption ShippingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ForwardingAddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateJobResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OnDeviceServiceConfiguration OnDeviceServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingOption ShippingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnowballCapacity SnowballCapacityPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ForwardingAddressId { get; set; }
		
		/// <summary>
		/// Information identifying the person picking up the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PickupDetails PickupDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateJobShipmentStateResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateJobShipmentStateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShipmentState ShipmentState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShipmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVED")]
		RECEIVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETURNED")]
		RETURNED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLongTermPricingResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLongTermPricingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LongTermPricingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplacementJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLongTermPricingAutoRenew { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransferOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORT")]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPORT")]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCAL_USE")]
		LOCAL_USE = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels a cluster job. You can only cancel a cluster job while it's in the <code>AwaitingQuorum</code> status. You'll have at least an hour after creating a cluster job to cancel it.
		/// CancelCluster #X-Amz-Target=AWSIESnowballJobManagementService.CancelCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelClusterResult> CancelClusterAsync(CancelClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.CancelCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels the specified job. You can only cancel a job before its <code>JobState</code> value changes to <code>PreparingAppliance</code>. Requesting the <code>ListJobs</code> or <code>DescribeJob</code> action returns a job's <code>JobState</code> as part of the response element data returned.
		/// CancelJob #X-Amz-Target=AWSIESnowballJobManagementService.CancelJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelJobResult> CancelJobAsync(CancelJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.CancelJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an address for a Snow device to be shipped to. In most regions, addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. If the address is invalid or unsupported, then an exception is thrown.
		/// CreateAddress #X-Amz-Target=AWSIESnowballJobManagementService.CreateAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAddressResult> CreateAddressAsync(CreateAddressRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.CreateAddress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAddressResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an empty cluster. Each cluster supports five nodes. You use the <a>CreateJob</a> action separately to create the jobs for each of these nodes. The cluster does not ship until these five node jobs have been created.
		/// CreateCluster #X-Amz-Target=AWSIESnowballJobManagementService.CreateCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateClusterResult> CreateClusterAsync(CreateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.CreateCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a job to import or export data between Amazon S3 and your on-premises data center. Your Amazon Web Services account must have the right trust policies and permissions in place to create a job for a Snow device. If you're creating a job for a node in a cluster, you only need to provide the <code>clusterId</code> value; the other job attributes are inherited from the cluster. </p> <note> <p>Only the Snowball; Edge device type is supported when ordering clustered jobs.</p> <p>The device capacity is optional.</p> <p>Availability of device types differ by Amazon Web Services Region. For more information about Region availability, see <a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=ngi&amp;loc=4">Amazon Web Services Regional Services</a>.</p> </note> <p/> <p class="title"> <b>Snow Family devices and their capacities.</b> </p> <ul> <li> <p>Device type: <b>SNC1_SSD</b> </p> <ul> <li> <p>Capacity: T14</p> </li> <li> <p>Description: Snowcone </p> </li> </ul> <p/> </li> <li> <p>Device type: <b>SNC1_HDD</b> </p> <ul> <li> <p>Capacity: T8</p> </li> <li> <p>Description: Snowcone </p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE_S</b> </p> <ul> <li> <p>Capacity: T98</p> </li> <li> <p>Description: Snowball Edge Storage Optimized for data transfer only </p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE_CG</b> </p> <ul> <li> <p>Capacity: T42</p> </li> <li> <p>Description: Snowball Edge Compute Optimized with GPU</p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE_C</b> </p> <ul> <li> <p>Capacity: T42</p> </li> <li> <p>Description: Snowball Edge Compute Optimized without GPU</p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE</b> </p> <ul> <li> <p>Capacity: T100</p> </li> <li> <p>Description: Snowball Edge Storage Optimized with EC2 Compute</p> </li> </ul> <note> <p>This device is replaced with T98.</p> </note> <p/> </li> <li> <p>Device type: <b>STANDARD</b> </p> <ul> <li> <p>Capacity: T50</p> </li> <li> <p>Description: Original Snowball device</p> <note> <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region </p> </note> </li> </ul> <p/> </li> <li> <p>Device type: <b>STANDARD</b> </p> <ul> <li> <p>Capacity: T80</p> </li> <li> <p>Description: Original Snowball device</p> <note> <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region. </p> </note> </li> </ul> <p/> </li> <li> <p>Snow Family device type: <b>RACK_5U_C</b> </p> <ul> <li> <p>Capacity: T13 </p> </li> <li> <p>Description: Snowblade.</p> </li> </ul> </li> <li> <p>Device type: <b>V3_5S</b> </p> <ul> <li> <p>Capacity: T240</p> </li> <li> <p>Description: Snowball Edge Storage Optimized 210TB</p> </li> </ul> </li> </ul>
		/// CreateJob #X-Amz-Target=AWSIESnowballJobManagementService.CreateJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateJobResult> CreateJobAsync(CreateJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.CreateJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a job with the long-term usage option for a device. The long-term usage is a 1-year or 3-year long-term pricing type for the device. You are billed upfront, and Amazon Web Services provides discounts for long-term pricing.
		/// CreateLongTermPricing #X-Amz-Target=AWSIESnowballJobManagementService.CreateLongTermPricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLongTermPricingResult> CreateLongTermPricingAsync(CreateLongTermPricingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.CreateLongTermPricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLongTermPricingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a shipping label that will be used to return the Snow device to Amazon Web Services.
		/// CreateReturnShippingLabel #X-Amz-Target=AWSIESnowballJobManagementService.CreateReturnShippingLabel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateReturnShippingLabelResult> CreateReturnShippingLabelAsync(CreateReturnShippingLabelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.CreateReturnShippingLabel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateReturnShippingLabelResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Takes an <code>AddressId</code> and returns specific details about that address in the form of an <code>Address</code> object.
		/// DescribeAddress #X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAddressResult> DescribeAddressAsync(DescribeAddressRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAddressResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a specified number of <code>ADDRESS</code> objects. Calling this API in one of the US regions will return addresses from the list of all addresses associated with this account in all US regions.
		/// DescribeAddresses #X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddresses
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeAddressesResult> DescribeAddressesAsync(string MaxResults, string NextToken, DescribeAddressesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddresses?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeAddressesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific cluster including shipping information, cluster status, and other important metadata.
		/// DescribeCluster #X-Amz-Target=AWSIESnowballJobManagementService.DescribeCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeClusterResult> DescribeClusterAsync(DescribeClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.DescribeCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific job including shipping information, job status, and other important metadata.
		/// DescribeJob #X-Amz-Target=AWSIESnowballJobManagementService.DescribeJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeJobResult> DescribeJobAsync(DescribeJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.DescribeJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Information on the shipping label of a Snow device that is being returned to Amazon Web Services.
		/// DescribeReturnShippingLabel #X-Amz-Target=AWSIESnowballJobManagementService.DescribeReturnShippingLabel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeReturnShippingLabelResult> DescribeReturnShippingLabelAsync(DescribeReturnShippingLabelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.DescribeReturnShippingLabel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeReturnShippingLabelResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a link to an Amazon S3 presigned URL for the manifest file associated with the specified <code>JobId</code> value. You can access the manifest file for up to 60 minutes after this request has been made. To access the manifest file after 60 minutes have passed, you'll have to make another call to the <code>GetJobManifest</code> action.</p> <p>The manifest is an encrypted file that you can download after your job enters the <code>WithCustomer</code> status. This is the only valid status for calling this API as the manifest and <code>UnlockCode</code> code value are used for securing your device and should only be used when you have the device. The manifest is decrypted by using the <code>UnlockCode</code> code value, when you pass both values to the Snow device through the Snowball client when the client is started for the first time. </p> <p>As a best practice, we recommend that you don't save a copy of an <code>UnlockCode</code> value in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snow device associated with that job.</p> <p>The credentials of a given job, including its manifest file and unlock code, expire 360 days after the job is created.</p>
		/// GetJobManifest #X-Amz-Target=AWSIESnowballJobManagementService.GetJobManifest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetJobManifestResult> GetJobManifestAsync(GetJobManifestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.GetJobManifest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJobManifestResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the <code>UnlockCode</code> code value for the specified job. A particular <code>UnlockCode</code> value can be accessed for up to 360 days after the associated job has been created.</p> <p>The <code>UnlockCode</code> value is a 29-character code with 25 alphanumeric characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed along with the manifest to the Snow device through the Snowball client when the client is started for the first time. The only valid status for calling this API is <code>WithCustomer</code> as the manifest and <code>Unlock</code> code values are used for securing your device and should only be used when you have the device.</p> <p>As a best practice, we recommend that you don't save a copy of the <code>UnlockCode</code> in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snow device associated with that job.</p>
		/// GetJobUnlockCode #X-Amz-Target=AWSIESnowballJobManagementService.GetJobUnlockCode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetJobUnlockCodeResult> GetJobUnlockCodeAsync(GetJobUnlockCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.GetJobUnlockCode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJobUnlockCodeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the Snow Family service limit for your account, and also the number of Snow devices your account has in use.</p> <p>The default service limit for the number of Snow devices that you can have at one time is 1. If you want to increase your service limit, contact Amazon Web Services Support.</p>
		/// GetSnowballUsage #X-Amz-Target=AWSIESnowballJobManagementService.GetSnowballUsage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSnowballUsageResult> GetSnowballUsageAsync(GetSnowballUsageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.GetSnowballUsage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSnowballUsageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an Amazon S3 presigned URL for an update file associated with a specified <code>JobId</code>.
		/// GetSoftwareUpdates #X-Amz-Target=AWSIESnowballJobManagementService.GetSoftwareUpdates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSoftwareUpdatesResult> GetSoftwareUpdatesAsync(GetSoftwareUpdatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.GetSoftwareUpdates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSoftwareUpdatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>JobListEntry</code> objects of the specified length. Each <code>JobListEntry</code> object is for a job in the specified cluster and contains a job's state, a job's ID, and other information.
		/// ListClusterJobs #X-Amz-Target=AWSIESnowballJobManagementService.ListClusterJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListClusterJobsResult> ListClusterJobsAsync(string MaxResults, string NextToken, ListClusterJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.ListClusterJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClusterJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>ClusterListEntry</code> objects of the specified length. Each <code>ClusterListEntry</code> object contains a cluster's state, a cluster's ID, and other important status information.
		/// ListClusters #X-Amz-Target=AWSIESnowballJobManagementService.ListClusters
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListClustersResult> ListClustersAsync(string MaxResults, string NextToken, ListClustersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.ListClusters?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListClustersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This action returns a list of the different Amazon EC2-compatible Amazon Machine Images (AMIs) that are owned by your Amazon Web Services accountthat would be supported for use on a Snow device. Currently, supported AMIs are based on the Amazon Linux-2, Ubuntu 20.04 LTS - Focal, or Ubuntu 22.04 LTS - Jammy images, available on the Amazon Web Services Marketplace. Ubuntu 16.04 LTS - Xenial (HVM) images are no longer supported in the Market, but still supported for use on devices through Amazon EC2 VM Import/Export and running locally in AMIs.
		/// ListCompatibleImages #X-Amz-Target=AWSIESnowballJobManagementService.ListCompatibleImages
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCompatibleImagesResult> ListCompatibleImagesAsync(string MaxResults, string NextToken, ListCompatibleImagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.ListCompatibleImages?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCompatibleImagesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>JobListEntry</code> objects of the specified length. Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. Calling this API action in one of the US regions will return jobs from the list of all jobs associated with this account in all US regions.
		/// ListJobs #X-Amz-Target=AWSIESnowballJobManagementService.ListJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResult> ListJobsAsync(string MaxResults, string NextToken, ListJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.ListJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all long-term pricing types.
		/// ListLongTermPricing #X-Amz-Target=AWSIESnowballJobManagementService.ListLongTermPricing
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListLongTermPricingResult> ListLongTermPricingAsync(string MaxResults, string NextToken, ListLongTermPricingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.ListLongTermPricing?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLongTermPricingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of locations from which the customer can choose to pickup a device.
		/// ListPickupLocations #X-Amz-Target=AWSIESnowballJobManagementService.ListPickupLocations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPickupLocationsResult> ListPickupLocationsAsync(string MaxResults, string NextToken, ListPickupLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.ListPickupLocations?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPickupLocationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all supported versions for Snow on-device services. Returns an array of <code>ServiceVersion</code> object containing the supported versions for a particular service.
		/// ListServiceVersions #X-Amz-Target=AWSIESnowballJobManagementService.ListServiceVersions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListServiceVersionsResult> ListServiceVersionsAsync(ListServiceVersionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.ListServiceVersions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceVersionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// While a cluster's <code>ClusterState</code> value is in the <code>AwaitingQuorum</code> state, you can update some of the information associated with a cluster. Once the cluster changes to a different job state, usually 60 minutes after the cluster being created, this action is no longer available.
		/// UpdateCluster #X-Amz-Target=AWSIESnowballJobManagementService.UpdateCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateClusterResult> UpdateClusterAsync(UpdateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.UpdateCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// While a job's <code>JobState</code> value is <code>New</code>, you can update some of the information associated with a job. Once the job changes to a different job state, usually within 60 minutes of the job being created, this action is no longer available.
		/// UpdateJob #X-Amz-Target=AWSIESnowballJobManagementService.UpdateJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateJobResult> UpdateJobAsync(UpdateJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.UpdateJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the state when a shipment state changes to a different state.
		/// UpdateJobShipmentState #X-Amz-Target=AWSIESnowballJobManagementService.UpdateJobShipmentState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateJobShipmentStateResult> UpdateJobShipmentStateAsync(UpdateJobShipmentStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.UpdateJobShipmentState";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateJobShipmentStateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the long-term pricing type.
		/// UpdateLongTermPricing #X-Amz-Target=AWSIESnowballJobManagementService.UpdateLongTermPricing
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateLongTermPricingResult> UpdateLongTermPricingAsync(UpdateLongTermPricingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSIESnowballJobManagementService.UpdateLongTermPricing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateLongTermPricingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum CancelClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.CancelCluster")]
		AWSIESnowballJobManagementService_CancelCluster = 0,
	}
	
	public enum CancelJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.CancelJob")]
		AWSIESnowballJobManagementService_CancelJob = 0,
	}
	
	public enum CreateAddressX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.CreateAddress")]
		AWSIESnowballJobManagementService_CreateAddress = 0,
	}
	
	public enum CreateClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.CreateCluster")]
		AWSIESnowballJobManagementService_CreateCluster = 0,
	}
	
	public enum CreateJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.CreateJob")]
		AWSIESnowballJobManagementService_CreateJob = 0,
	}
	
	public enum CreateLongTermPricingX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.CreateLongTermPricing")]
		AWSIESnowballJobManagementService_CreateLongTermPricing = 0,
	}
	
	public enum CreateReturnShippingLabelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.CreateReturnShippingLabel")]
		AWSIESnowballJobManagementService_CreateReturnShippingLabel = 0,
	}
	
	public enum DescribeAddressX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.DescribeAddress")]
		AWSIESnowballJobManagementService_DescribeAddress = 0,
	}
	
	public enum DescribeAddressesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.DescribeAddresses")]
		AWSIESnowballJobManagementService_DescribeAddresses = 0,
	}
	
	public enum DescribeClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.DescribeCluster")]
		AWSIESnowballJobManagementService_DescribeCluster = 0,
	}
	
	public enum DescribeJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.DescribeJob")]
		AWSIESnowballJobManagementService_DescribeJob = 0,
	}
	
	public enum DescribeReturnShippingLabelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.DescribeReturnShippingLabel")]
		AWSIESnowballJobManagementService_DescribeReturnShippingLabel = 0,
	}
	
	public enum GetJobManifestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.GetJobManifest")]
		AWSIESnowballJobManagementService_GetJobManifest = 0,
	}
	
	public enum GetJobUnlockCodeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.GetJobUnlockCode")]
		AWSIESnowballJobManagementService_GetJobUnlockCode = 0,
	}
	
	public enum GetSnowballUsageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.GetSnowballUsage")]
		AWSIESnowballJobManagementService_GetSnowballUsage = 0,
	}
	
	public enum GetSoftwareUpdatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.GetSoftwareUpdates")]
		AWSIESnowballJobManagementService_GetSoftwareUpdates = 0,
	}
	
	public enum ListClusterJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.ListClusterJobs")]
		AWSIESnowballJobManagementService_ListClusterJobs = 0,
	}
	
	public enum ListClustersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.ListClusters")]
		AWSIESnowballJobManagementService_ListClusters = 0,
	}
	
	public enum ListCompatibleImagesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.ListCompatibleImages")]
		AWSIESnowballJobManagementService_ListCompatibleImages = 0,
	}
	
	public enum ListJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.ListJobs")]
		AWSIESnowballJobManagementService_ListJobs = 0,
	}
	
	public enum ListLongTermPricingX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.ListLongTermPricing")]
		AWSIESnowballJobManagementService_ListLongTermPricing = 0,
	}
	
	public enum ListPickupLocationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.ListPickupLocations")]
		AWSIESnowballJobManagementService_ListPickupLocations = 0,
	}
	
	public enum ListServiceVersionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.ListServiceVersions")]
		AWSIESnowballJobManagementService_ListServiceVersions = 0,
	}
	
	public enum UpdateClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.UpdateCluster")]
		AWSIESnowballJobManagementService_UpdateCluster = 0,
	}
	
	public enum UpdateJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.UpdateJob")]
		AWSIESnowballJobManagementService_UpdateJob = 0,
	}
	
	public enum UpdateJobShipmentStateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.UpdateJobShipmentState")]
		AWSIESnowballJobManagementService_UpdateJobShipmentState = 0,
	}
	
	public enum UpdateLongTermPricingX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSIESnowballJobManagementService.UpdateLongTermPricing")]
		AWSIESnowballJobManagementService_UpdateLongTermPricing = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
