//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Trips - trip details
		/// Trips - trip details
		/// TripsTripDetails mobilesdk/stage/track/get_track/v1
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TripsTripDetailsReturn> TripsTripDetailsAsync(string trackToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mobilesdk/stage/track/get_track/v1?trackToken=" + (trackToken==null? "" : System.Uri.EscapeDataString(trackToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TripsTripDetailsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// /v1/Scorings/consolidated
		/// /v1/Scorings/consolidated
		/// Slashv1SlashscoringsSlashconsolidated statistics/v1/Scorings/consolidated
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slashv1SlashscoringsSlashconsolidatedAsync(string DeviceToken, string StartDate, string EndDate, string Tag, string InstanceId, string AppId, string CompanyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Scorings/consolidated?DeviceToken=" + (DeviceToken==null? "" : System.Uri.EscapeDataString(DeviceToken))+"&StartDate=" + (StartDate==null? "" : System.Uri.EscapeDataString(StartDate))+"&EndDate=" + (EndDate==null? "" : System.Uri.EscapeDataString(EndDate))+"&Tag=" + (Tag==null? "" : System.Uri.EscapeDataString(Tag))+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&AppId=" + (AppId==null? "" : System.Uri.EscapeDataString(AppId))+"&CompanyId=" + (CompanyId==null? "" : System.Uri.EscapeDataString(CompanyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// /v1/Scorings/consolidated/daily
		/// /v1/Scorings/consolidated/daily
		/// Slashv1SlashscoringsSlashconsolidatedSlashdaily statistics/v1/Scorings/consolidated/daily
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Slashv1SlashscoringsSlashconsolidatedSlashdailyReturn> Slashv1SlashscoringsSlashconsolidatedSlashdailyAsync(string DeviceToken, string StartDate, string EndDate, string Tag, string InstanceId, string AppId, string CompanyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Scorings/consolidated/daily?DeviceToken=" + (DeviceToken==null? "" : System.Uri.EscapeDataString(DeviceToken))+"&StartDate=" + (StartDate==null? "" : System.Uri.EscapeDataString(StartDate))+"&EndDate=" + (EndDate==null? "" : System.Uri.EscapeDataString(EndDate))+"&Tag=" + (Tag==null? "" : System.Uri.EscapeDataString(Tag))+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&AppId=" + (AppId==null? "" : System.Uri.EscapeDataString(AppId))+"&CompanyId=" + (CompanyId==null? "" : System.Uri.EscapeDataString(CompanyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Slashv1SlashscoringsSlashconsolidatedSlashdailyReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// User safe scoring - Accumulated value - v1/Scorings/individual
		/// Safe driving score API. This API is a part of Telematics API that we provide to our clients.
		/// 
		/// Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients' driving style.
		/// Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event
		/// 
		/// [More details](https://docs.telematicssdk.com)
		/// UserSafeScoringAccumulatedValueV1SlashscoringsSlashindividual statistics/v1/Scorings/individual/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserSafeScoringAccumulatedValueV1SlashscoringsSlashindividualReturn> UserSafeScoringAccumulatedValueV1SlashscoringsSlashindividualAsync(string startDate, string endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Scorings/individual/?startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserSafeScoringAccumulatedValueV1SlashscoringsSlashindividualReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// User safe scoring - daily value - /v1/Scorings/individual/daily
		/// User safe scoring - daily value - /v1/Scorings/individual/daily
		/// UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdaily statistics/v1/Scorings/individual/daily
		/// </summary>
		/// <param name="Tag">Optional</param>
		/// <param name="StartDate">(Required) </param>
		/// <param name="EndDate">(Required) </param>
		/// <returns>Success</returns>
		public async Task<UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdailyReturn> UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdailyAsync(string Tag, string StartDate, string EndDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Scorings/individual/daily?Tag=" + (Tag==null? "" : System.Uri.EscapeDataString(Tag))+"&StartDate=" + (StartDate==null? "" : System.Uri.EscapeDataString(StartDate))+"&EndDate=" + (EndDate==null? "" : System.Uri.EscapeDataString(EndDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdailyReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// /v1/Statistics/consolidated
		/// /v1/Statistics/consolidated
		/// Slashv1SlashstatisticsSlashconsolidated statistics/v1/Statistics/consolidated
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slashv1SlashstatisticsSlashconsolidatedAsync(string DeviceToken, string StartDate, string EndDate, string Tag, string InstanceId, string AppId, string CompanyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Statistics/consolidated?DeviceToken=" + (DeviceToken==null? "" : System.Uri.EscapeDataString(DeviceToken))+"&StartDate=" + (StartDate==null? "" : System.Uri.EscapeDataString(StartDate))+"&EndDate=" + (EndDate==null? "" : System.Uri.EscapeDataString(EndDate))+"&Tag=" + (Tag==null? "" : System.Uri.EscapeDataString(Tag))+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&AppId=" + (AppId==null? "" : System.Uri.EscapeDataString(AppId))+"&CompanyId=" + (CompanyId==null? "" : System.Uri.EscapeDataString(CompanyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// /v1/Statistics/consolidated/daily
		/// /v1/Statistics/consolidated/daily
		/// Slashv1SlashstatisticsSlashconsolidatedSlashdaily statistics/v1/Statistics/consolidated/daily
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slashv1SlashstatisticsSlashconsolidatedSlashdailyAsync(string DeviceToken, string StartDate, string EndDate, string Tag, string InstanceId, string AppId, string CompanyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Statistics/consolidated/daily?DeviceToken=" + (DeviceToken==null? "" : System.Uri.EscapeDataString(DeviceToken))+"&StartDate=" + (StartDate==null? "" : System.Uri.EscapeDataString(StartDate))+"&EndDate=" + (EndDate==null? "" : System.Uri.EscapeDataString(EndDate))+"&Tag=" + (Tag==null? "" : System.Uri.EscapeDataString(Tag))+"&InstanceId=" + (InstanceId==null? "" : System.Uri.EscapeDataString(InstanceId))+"&AppId=" + (AppId==null? "" : System.Uri.EscapeDataString(AppId))+"&CompanyId=" + (CompanyId==null? "" : System.Uri.EscapeDataString(CompanyId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// User statistics - Accumulated value - /v1/Statistics/individual
		/// User statistics - Accumulated value - /v1/Statistics/individual
		/// UserStatisticsAccumulatedValueSlashv1SlashstatisticsSlashindividual statistics/v1/Statistics/individual/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserStatisticsAccumulatedValueSlashv1SlashstatisticsSlashindividualReturn> UserStatisticsAccumulatedValueSlashv1SlashstatisticsSlashindividualAsync(string startDate, string endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Statistics/individual/?startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserStatisticsAccumulatedValueSlashv1SlashstatisticsSlashindividualReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// User statistice - Daily value - v1/Statistics/individual/daily
		/// User statistice - Daily value - v1/Statistics/individual/daily
		/// UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdaily statistics/v1/Statistics/individual/daily/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdailyReturn> UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdailyAsync(string startDate, string endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statistics/v1/Statistics/individual/daily/?startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdailyReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class TripsTripDetailsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TripsTripDetailsReturnResult Result { get; set; }
	}
	
	public class TripsTripDetailsReturnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TripsTripDetailsReturnResultTrack Track { get; set; }
	}
	
	public class TripsTripDetailsReturnResultTrack
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccelerationCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TripsTripDetailsReturnResultTrackAddressFinishParts AddressFinishParts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TripsTripDetailsReturnResultTrackAddressStartParts AddressStartParts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BeaconId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CityFinish { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CityStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DecelerationCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DrivingTips { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EcoScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EcoScoreBrakes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EcoScoreDepreciation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EcoScoreFuel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EcoScoreTyres { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HighOverSpeedMileage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MidOverSpeedMileage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OriginChanged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TripsTripDetailsReturnResultTrackPoints[] TripsTripDetailsReturnResultTrackPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Rating100 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingAcceleration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingAcceleration100 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingBraking { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingBraking100 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingCornering { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingCornering100 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingPhoneDistraction100 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingPhoneUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingSpeeding { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingSpeeding100 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RatingTimeOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrackOriginCode { get; set; }
	}
	
	public class TripsTripDetailsReturnResultTrackAddressFinishParts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string House { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street { get; set; }
	}
	
	public class TripsTripDetailsReturnResultTrackAddressStartParts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string House { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street { get; set; }
	}
	
	public class TripsTripDetailsReturnResultTrackPoints
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AlertType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AlertValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Cornering { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Course { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Lateral { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MidSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PhoneUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PointDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Speed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SpeedLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpeedType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalMeters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Yaw { get; set; }
	}
	
	public class Slashv1SlashscoringsSlashconsolidatedSlashdailyReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Slashv1SlashscoringsSlashconsolidatedSlashdailyReturnResult[] Slashv1SlashscoringsSlashconsolidatedSlashdailyReturnResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	public class Slashv1SlashscoringsSlashconsolidatedSlashdailyReturnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccelerationScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BrakingScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CorneringScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DistractedScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OverallScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SpeedingScore { get; set; }
	}
	
	public class UserSafeScoringAccumulatedValueV1SlashscoringsSlashindividualReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSafeScoringAccumulatedValueV1SlashscoringsSlashindividualReturnResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	public class UserSafeScoringAccumulatedValueV1SlashscoringsSlashindividualReturnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccelerationScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BrakingScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CorneringScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DistractedScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OverallScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SpeedingScore { get; set; }
	}
	
	public class UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdailyReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdailyReturnResult[] UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdailyReturnResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	public class UserSafeScoringDailyValueSlashv1SlashscoringsSlashindividualSlashdailyReturnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccelerationScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BrakingScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CalcDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CorneringScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DistractedScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OverallScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SpeedingScore { get; set; }
	}
	
	public class UserStatisticsAccumulatedValueSlashv1SlashstatisticsSlashindividualReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserStatisticsAccumulatedValueSlashv1SlashstatisticsSlashindividualReturnResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	public class UserStatisticsAccumulatedValueSlashv1SlashstatisticsSlashindividualReturnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccelerationCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageSpeedKmh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageSpeedMileh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BreakingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CorneringCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DayDrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DriverTripsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxSpeedKmh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxSpeedMileh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MileageKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MileageMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NightDrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OtherTripsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageDistanceKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageDistanceMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageDurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageOverSpeedDistanceKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageOverSpeedDistanceMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageOverSpeedDurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RushHoursDrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalSpeedingKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalSpeedingMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TripsCount { get; set; }
	}
	
	public class UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdailyReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdailyReturnResult[] UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdailyReturnResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	public class UserStatisticeDailyValueV1SlashstatisticsSlashindividualSlashdailyReturnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AccelerationCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageSpeedKmh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageSpeedMileh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BreakingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CorneringCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DayDrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DriverTripsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxSpeedKmh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxSpeedMileh { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MileageKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MileageMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NightDrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OtherTripsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageDistanceKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageDistanceMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageDurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageOverSpeedDistanceKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageOverSpeedDistanceMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PhoneUsageOverSpeedDurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReportDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RushHoursDrivingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalSpeedingKm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalSpeedingMile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TripsCount { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
