//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Application related details of a job posting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationInfo
	{
		
		/// <summary>
		/// Optional but at least one of uris, emails or instruction must be specified. Use this field to specify email address(es) to which resumes or applications can be sent. The maximum number of allowed characters for each entry is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		/// <summary>
		/// Optional but at least one of uris, emails or instruction must be specified. Use this field to provide instructions, such as "Mail your application to ...", that a candidate can follow to apply for the job. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 3,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instruction")]
		public string Instruction { get; set; }
		
		/// <summary>
		/// Optional but at least one of uris, emails or instruction must be specified. Use this URI field to direct an applicant to a website, for example to link to an online application form. The maximum number of allowed characters for each entry is 2,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public string[] Uris { get; set; }
	}
	
	/// <summary>
	/// Input only. Batch delete jobs request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteJobsRequest
	{
		
		/// <summary>
		/// Required. The filter string specifies the jobs to be deleted. Supported operator: =, AND The fields eligible for filtering are: * `companyName` (Required) * `requisitionId` (Required) Sample Query: companyName = "projects/api-test-project/companies/123" AND requisitionId = "req-1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
	}
	
	/// <summary>
	/// Represents starting and ending value of a range in double.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketRange
	{
		
		/// <summary>
		/// Starting value of the bucket range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.Double> From { get; set; }
		
		/// <summary>
		/// Ending value of the bucket range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.Double> To { get; set; }
	}
	
	/// <summary>
	/// Represents count of jobs within one bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketizedCount
	{
		
		/// <summary>
		/// Number of jobs whose numeric field value fall into `range`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Represents starting and ending value of a range in double.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public BucketRange Range { get; set; }
	}
	
	/// <summary>
	/// An event issued when an end user interacts with the application that implements Cloud Talent Solution. Providing this information improves the quality of search and recommendation for the API clients, enabling the service to perform optimally. The number of events sent must be consistent with other calls, such as job searches, issued to the service by the client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientEvent
	{
		
		/// <summary>
		/// Required. The timestamp of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Required. A unique identifier, generated by the client application. This `event_id` is used to establish the relationship between different events (see parent_event_id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Optional. Extra information about this event. Used for storing information with no matching field in event payload, for example, user application specific context or details. At most 20 keys are supported. The maximum total size of all keys and values is 2 KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraInfo")]
		public System.Collections.Generic.Dictionary<string, string> ExtraInfo { get; set; }
		
		/// <summary>
		/// An event issued when a job seeker interacts with the application that implements Cloud Talent Solution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobEvent")]
		public JobEvent JobEvent { get; set; }
		
		/// <summary>
		/// Optional. The event_id of an event that resulted in the current event. For example, a Job view event usually follows a parent impression event: A job seeker first does a search where a list of jobs appears (impression). The job seeker then selects a result and views the description of a particular job (Job view).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentEventId")]
		public string ParentEventId { get; set; }
		
		/// <summary>
		/// Required. A unique ID generated in the API responses. It can be found in ResponseMetadata.request_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// An event issued when a job seeker interacts with the application that implements Cloud Talent Solution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobEvent
	{
		
		/// <summary>
		/// Required. The job name(s) associated with this event. For example, if this is an impression event, this field contains the identifiers of all jobs shown to the job seeker. If this was a view event, this field contains the identifier of the viewed job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public string[] Jobs { get; set; }
		
		/// <summary>
		/// Required. The type of the event (see JobEventType).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<JobEventType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW_REDIRECT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_START = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_FINISH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_QUICK_SUBMISSION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_REDIRECT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_START_FROM_SEARCH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_REDIRECT_FROM_SEARCH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_COMPANY_SUBMIT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOKMARK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTIFICATION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIRED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENT_CV = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERVIEW_GRANTED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INTERESTED = 16,
	}
	
	/// <summary>
	/// Input only. Parameters needed for commute search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommuteFilter
	{
		
		/// <summary>
		/// Optional. If true, jobs without "precise" addresses (street level addresses or GPS coordinates) might also be returned. For city and coarser level addresses, text matching is used. If this field is set to false or is not specified, only jobs that include precise addresses are returned by Commute Search. Note: If `allow_imprecise_addresses` is set to true, Commute Search is not able to calculate accurate commute times to jobs with city level and coarser address information. Jobs with imprecise addresses will return a `travel_duration` time of 0 regardless of distance from the job seeker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowImpreciseAddresses")]
		public System.Nullable<System.Boolean> AllowImpreciseAddresses { get; set; }
		
		/// <summary>
		/// Required. The method of transportation for which to calculate the commute time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commuteMethod")]
		public System.Nullable<CommuteFilterCommuteMethod> CommuteMethod { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureTime")]
		public TimeOfDay DepartureTime { get; set; }
		
		/// <summary>
		/// Optional. Specifies the traffic density to use when calculating commute time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roadTraffic")]
		public System.Nullable<CommuteFilterRoadTraffic> RoadTraffic { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startCoordinates")]
		public LatLng StartCoordinates { get; set; }
		
		/// <summary>
		/// Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="travelDuration")]
		public string TravelDuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommuteFilterCommuteMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMUTE_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WALKING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYCLING = 4,
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommuteFilterRoadTraffic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROAD_TRAFFIC_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAFFIC_FREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSY_HOUR = 2,
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Output only. Commute details related to this job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommuteInfo
	{
		
		/// <summary>
		/// Output only. A resource that represents a location with full geographic information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobLocation")]
		public Location JobLocation { get; set; }
		
		/// <summary>
		/// The number of seconds required to travel to the job location from the query location. A duration of 0 seconds indicates that the job is not reachable within the requested duration, but was returned as part of an expanded query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="travelDuration")]
		public string TravelDuration { get; set; }
	}
	
	/// <summary>
	/// Output only. A resource that represents a location with full geographic information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latLng")]
		public LatLng LatLng { get; set; }
		
		/// <summary>
		/// The type of a location, which corresponds to the address lines field of PostalAddress. For example, "Downtown, Atlanta, GA, USA" has a type of LocationType#NEIGHBORHOOD, and "Kansas City, KS, USA" has a type of LocationType#LOCALITY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public System.Nullable<LocationLocationType> LocationType { get; set; }
		
		/// <summary>
		/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalAddress")]
		public PostalAddress PostalAddress { get; set; }
		
		/// <summary>
		/// Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from LatLng covers the area associated with the job location. For example, currently, "Mountain View, CA, USA" has a radius of 6.17 miles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radiusInMiles")]
		public System.Nullable<System.Double> RadiusInMiles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LocationLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMINISTRATIVE_AREA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_ADMINISTRATIVE_AREA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCALITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTAL_CODE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_LOCALITY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_LOCALITY_1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUB_LOCALITY_2 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEIGHBORHOOD = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREET_ADDRESS = 10,
	}
	
	/// <summary>
	/// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostalAddress
	{
		
		/// <summary>
		/// Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLines")]
		public string[] AddressLines { get; set; }
		
		/// <summary>
		/// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrativeArea")]
		public string AdministrativeArea { get; set; }
		
		/// <summary>
		/// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Optional. The name of the organization at the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		/// <summary>
		/// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		/// <summary>
		/// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortingCode")]
		public string SortingCode { get; set; }
		
		/// <summary>
		/// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
	}
	
	/// <summary>
	/// A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Company
	{
		
		/// <summary>
		/// Optional. The URI to employer's career site or careers page on the employer's web site, for example, "https://careers.google.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="careerSiteUri")]
		public string CareerSiteUri { get; set; }
		
		/// <summary>
		/// Derived details about the company.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="derivedInfo")]
		public CompanyDerivedInfo DerivedInfo { get; set; }
		
		/// <summary>
		/// Required. The display name of the company, for example, "Google LLC".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. Equal Employment Opportunity legal disclaimer text to be associated with all jobs, and typically to be displayed in all roles. The maximum number of allowed characters is 500.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eeoText")]
		public string EeoText { get; set; }
		
		/// <summary>
		/// Required. Client side company identifier, used to uniquely identify the company. The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Optional. The street address of the company's main headquarters, which may be different from the job location. The service attempts to geolocate the provided address, and populates a more specific location wherever possible in DerivedInfo.headquarters_location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headquartersAddress")]
		public string HeadquartersAddress { get; set; }
		
		/// <summary>
		/// Optional. Set to true if it is the hiring agency that post jobs for other employers. Defaults to false if not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiringAgency")]
		public System.Nullable<System.Boolean> HiringAgency { get; set; }
		
		/// <summary>
		/// Optional. A URI that hosts the employer's company logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// Optional. This field is deprecated. Please set the searchability of the custom attribute in the Job.custom_attributes going forward. A list of keys of filterable Job.custom_attributes, whose corresponding `string_values` are used in keyword search. Jobs with `string_values` under these specified field keys are returned if any of the values matches the search keyword. Custom field values with parenthesis, brackets and special symbols won't be properly searchable, and those keyword queries need to be surrounded by quotes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordSearchableJobCustomAttributes")]
		public string[] KeywordSearchableJobCustomAttributes { get; set; }
		
		/// <summary>
		/// Required during company update. The resource name for a company. This is generated by the service when a company is created. The format is "projects/{project_id}/companies/{company_id}", for example, "projects/api-test-project/companies/foo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The employer's company size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<CompanySize> Size { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether a company is flagged to be suspended from public availability by the service when job content appears suspicious, abusive, or spammy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suspended")]
		public System.Nullable<System.Boolean> Suspended { get; set; }
		
		/// <summary>
		/// Optional. The URI representing the company's primary web site or home page, for example, "https://www.google.com". The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="websiteUri")]
		public string WebsiteUri { get; set; }
	}
	
	/// <summary>
	/// Derived details about the company.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompanyDerivedInfo
	{
		
		/// <summary>
		/// Output only. A resource that represents a location with full geographic information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headquartersLocation")]
		public Location HeadquartersLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompanySize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_SIZE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMEDIUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGGER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIANT = 7,
	}
	
	/// <summary>
	/// A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompensationEntry
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Money Amount { get; set; }
		
		/// <summary>
		/// Optional. Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedUnitsPerYear")]
		public System.Nullable<System.Double> ExpectedUnitsPerYear { get; set; }
		
		/// <summary>
		/// Compensation range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public CompensationRange Range { get; set; }
		
		/// <summary>
		/// Optional. Compensation type. Default is CompensationUnit.COMPENSATION_TYPE_UNSPECIFIED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CompensationEntryType> Type { get; set; }
		
		/// <summary>
		/// Optional. Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<CompensationEntryUnit> Unit { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// Compensation range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompensationRange
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCompensation")]
		public Money MaxCompensation { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCompensation")]
		public Money MinCompensation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompensationEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPENSATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BONUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNING_BONUS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFIT_SHARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMISSIONS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIPS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_COMPENSATION_TYPE = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompensationEntryUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPENSATION_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARLY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_TIME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_COMPENSATION_UNIT = 7,
	}
	
	/// <summary>
	/// Input only. Filter on job compensation type and amount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompensationFilter
	{
		
		/// <summary>
		/// Optional. If set to true, jobs with unspecified compensation range fields are included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeJobsWithUnspecifiedCompensationRange")]
		public System.Nullable<System.Boolean> IncludeJobsWithUnspecifiedCompensationRange { get; set; }
		
		/// <summary>
		/// Compensation range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public CompensationRange Range { get; set; }
		
		/// <summary>
		/// Required. Type of filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CompensationFilterType> Type { get; set; }
		
		/// <summary>
		/// Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public CompensationEntryUnit[] Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompensationFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIT_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIT_AND_AMOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALIZED_BASE_AMOUNT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALIZED_TOTAL_AMOUNT = 4,
	}
	
	/// <summary>
	/// Input only. Compensation based histogram request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompensationHistogramRequest
	{
		
		/// <summary>
		/// Input only. Use this field to specify bucketing option for the histogram search response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketingOption")]
		public NumericBucketingOption BucketingOption { get; set; }
		
		/// <summary>
		/// Required. Type of the request, representing which field the histogramming should be performed over. A single request can only specify one histogram of each `CompensationHistogramRequestType`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CompensationHistogramRequestType> Type { get; set; }
	}
	
	/// <summary>
	/// Input only. Use this field to specify bucketing option for the histogram search response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumericBucketingOption
	{
		
		/// <summary>
		/// Required. Two adjacent values form a histogram bucket. Values should be in ascending order. For example, if [5, 10, 15] are provided, four buckets are created: (-inf, 5), 5, 10), [10, 15), [15, inf). At most 20 [buckets_bound is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketBounds")]
		public double[] BucketBounds { get; set; }
		
		/// <summary>
		/// Optional. If set to true, the histogram result includes minimum/maximum value of the numeric field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresMinMax")]
		public System.Nullable<System.Boolean> RequiresMinMax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompensationHistogramRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALIZED_BASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALIZED_TOTAL = 3,
	}
	
	/// <summary>
	/// Output only. Compensation based histogram result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompensationHistogramResult
	{
		
		/// <summary>
		/// Output only. Custom numeric bucketing result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public NumericBucketingResult Result { get; set; }
		
		/// <summary>
		/// Type of the request, corresponding to CompensationHistogramRequest.type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CompensationHistogramRequestType Type { get; set; }
	}
	
	/// <summary>
	/// Output only. Custom numeric bucketing result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumericBucketingResult
	{
		
		/// <summary>
		/// Count within each bucket. Its size is the length of NumericBucketingOption.bucket_bounds plus 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counts")]
		public BucketizedCount[] Counts { get; set; }
		
		/// <summary>
		/// Stores the maximum value of the numeric field. Is populated only if [NumericBucketingOption.requires_min_max] is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// Stores the minimum value of the numeric field. Will be populated only if [NumericBucketingOption.requires_min_max] is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public System.Nullable<System.Double> MinValue { get; set; }
	}
	
	/// <summary>
	/// Job compensation details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompensationInfo
	{
		
		/// <summary>
		/// Compensation range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annualizedBaseCompensationRange")]
		public CompensationRange AnnualizedBaseCompensationRange { get; set; }
		
		/// <summary>
		/// Compensation range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annualizedTotalCompensationRange")]
		public CompensationRange AnnualizedTotalCompensationRange { get; set; }
		
		/// <summary>
		/// Optional. Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as ** base compensation entry ** for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public CompensationEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// Output only. Response of auto-complete query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteQueryResponse
	{
		
		/// <summary>
		/// Results of the matching job/company candidates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionResults")]
		public CompletionResult[] CompletionResults { get; set; }
		
		/// <summary>
		/// Output only. Additional information returned to client, such as debugging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Output only. Resource that represents completion results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompletionResult
	{
		
		/// <summary>
		/// The URI of the company image for CompletionType.COMPANY_NAME.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// The suggestion for the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestion")]
		public string Suggestion { get; set; }
		
		/// <summary>
		/// The completion topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CompletionResultType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompletionResultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TITLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_NAME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMBINED = 3,
	}
	
	/// <summary>
	/// Output only. Additional information returned to client, such as debugging information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseMetadata
	{
		
		/// <summary>
		/// A unique id associated with this call. This id is logged for tracking purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// The report event request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateClientEventRequest
	{
		
		/// <summary>
		/// An event issued when an end user interacts with the application that implements Cloud Talent Solution. Providing this information improves the quality of search and recommendation for the API clients, enabling the service to perform optimally. The number of events sent must be consistent with other calls, such as job searches, issued to the service by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientEvent")]
		public ClientEvent ClientEvent { get; set; }
	}
	
	/// <summary>
	/// Input only. The Request of the CreateCompany method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCompanyRequest
	{
		
		/// <summary>
		/// A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company")]
		public Company Company { get; set; }
	}
	
	/// <summary>
	/// Input only. Create job request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateJobRequest
	{
		
		/// <summary>
		/// A Job resource represents a job posting (also referred to as a "job listing" or "job requisition"). A job belongs to a Company, which is the hiring entity responsible for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// A Job resource represents a job posting (also referred to as a "job listing" or "job requisition"). A job belongs to a Company, which is the hiring entity responsible for the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Job
	{
		
		/// <summary>
		/// Optional but strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same company_name, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses "1600 Amphitheatre Parkway, Mountain View, CA, USA" and "London, UK" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public string[] Addresses { get; set; }
		
		/// <summary>
		/// Application related details of a job posting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationInfo")]
		public ApplicationInfo ApplicationInfo { get; set; }
		
		/// <summary>
		/// Output only. Display name of the company listing the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyDisplayName")]
		public string CompanyDisplayName { get; set; }
		
		/// <summary>
		/// Required. The resource name of the company listing the job, such as "projects/api-test-project/companies/foo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Job compensation details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compensationInfo")]
		public CompensationInfo CompensationInfo { get; set; }
		
		/// <summary>
		/// Optional. A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributes")]
		public System.Collections.Generic.Dictionary<string, CustomAttribute> CustomAttributes { get; set; }
		
		/// <summary>
		/// Optional. The desired education degrees for the job, such as Bachelors, Masters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="degreeTypes")]
		public string[] DegreeTypes { get; set; }
		
		/// <summary>
		/// Optional. The department or functional area within the company with the open position. The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// Output only. Derived details about the job posting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="derivedInfo")]
		public JobDerivedInfo DerivedInfo { get; set; }
		
		/// <summary>
		/// Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. The employment type(s) of a job, for example, full time or part time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employmentTypes")]
		public string[] EmploymentTypes { get; set; }
		
		/// <summary>
		/// Optional. A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incentives")]
		public string Incentives { get; set; }
		
		/// <summary>
		/// Optional. The benefits included with the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobBenefits")]
		public string[] JobBenefits { get; set; }
		
		/// <summary>
		/// Optional. The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobEndTime")]
		public string JobEndTime { get; set; }
		
		/// <summary>
		/// Optional. The experience level associated with the job, such as "Entry Level".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobLevel")]
		public System.Nullable<JobJobLevel> JobLevel { get; set; }
		
		/// <summary>
		/// Optional. The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobStartTime")]
		public string JobStartTime { get; set; }
		
		/// <summary>
		/// Optional. The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external" target="_blank" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-project/jobs/1234". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when this job posting was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postingCreateTime")]
		public string PostingCreateTime { get; set; }
		
		/// <summary>
		/// Optional but strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be deleted or listed by the DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the UpdateJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company_name, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with earlier expire time are cleaned first. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. Timestamp before the instant request is made is considered valid, the job will be treated as expired immediately. If this value is not provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value is not provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include expiry_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postingExpireTime")]
		public string PostingExpireTime { get; set; }
		
		/// <summary>
		/// Optional. The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postingPublishTime")]
		public string PostingPublishTime { get; set; }
		
		/// <summary>
		/// Optional. The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postingRegion")]
		public System.Nullable<JobPostingRegion> PostingRegion { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when this job posting was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postingUpdateTime")]
		public string PostingUpdateTime { get; set; }
		
		/// <summary>
		/// Input only. Options for job processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingOptions")]
		public ProcessingOptions ProcessingOptions { get; set; }
		
		/// <summary>
		/// Optional. A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promotionValue")]
		public System.Nullable<System.Int32> PromotionValue { get; set; }
		
		/// <summary>
		/// Optional. A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qualifications")]
		public string Qualifications { get; set; }
		
		/// <summary>
		/// Required. The requisition ID, also referred to as the posting ID, assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job is not allowed to be created if there is another job with the same [company_name], language_code and requisition_id. The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requisitionId")]
		public string RequisitionId { get; set; }
		
		/// <summary>
		/// Optional. A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsibilities")]
		public string Responsibilities { get; set; }
		
		/// <summary>
		/// Required. The title of the job, such as "Software Engineer" The maximum number of allowed characters is 500.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<JobVisibility> Visibility { get; set; }
	}
	
	/// <summary>
	/// Custom attribute values that are either filterable or non-filterable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomAttribute
	{
		
		/// <summary>
		/// Optional. If the `filterable` flag is true, the custom field values may be used for custom attribute filters JobQuery.custom_attribute_filter. If false, these values may not be used for custom attribute filters. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterable")]
		public System.Nullable<System.Boolean> Filterable { get; set; }
		
		/// <summary>
		/// Optional but exactly one of string_values or long_values must be specified. This field is used to perform number range search. (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`. Currently at most 1 long_values is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longValues")]
		public string[] LongValues { get; set; }
		
		/// <summary>
		/// Optional but exactly one of string_values or long_values must be specified. This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or `CASE_INSENSITIVE_MATCH`) search. For filterable `string_value`s, a maximum total number of 200 values is allowed, with each `string_value` has a byte size of no more than 500B. For unfilterable `string_values`, the maximum total byte size of unfilterable `string_values` is 50KB. Empty string is not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		public string[] StringValues { get; set; }
	}
	
	/// <summary>
	/// Output only. Derived details about the job posting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobDerivedInfo
	{
		
		/// <summary>
		/// Job categories derived from Job.title and Job.description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCategories")]
		public string[] JobCategories { get; set; }
		
		/// <summary>
		/// Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobJobLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTRY_LEVEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIENCED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTOR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTIVE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobPostingRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTING_REGION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMINISTRATIVE_AREA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELECOMMUTE = 3,
	}
	
	/// <summary>
	/// Input only. Options for job processing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcessingOptions
	{
		
		/// <summary>
		/// Optional. If set to `true`, the service does not attempt to resolve a more precise address for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableStreetAddressResolution")]
		public System.Nullable<System.Boolean> DisableStreetAddressResolution { get; set; }
		
		/// <summary>
		/// Optional. Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation is not disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlSanitization")]
		public System.Nullable<ProcessingOptionsHtmlSanitization> HtmlSanitization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProcessingOptionsHtmlSanitization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML_SANITIZATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML_SANITIZATION_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIMPLE_FORMATTING_ONLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED_WITH_GOOGLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED_WITH_PUBLIC = 3,
	}
	
	/// <summary>
	/// Custom attributes histogram request. An error is thrown if neither string_value_histogram or long_value_histogram_bucketing_option has been defined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomAttributeHistogramRequest
	{
		
		/// <summary>
		/// Required. Specifies the custom field key to perform a histogram on. If specified without `long_value_histogram_bucketing_option`, histogram on string values of the given `key` is triggered, otherwise histogram is performed on long values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Input only. Use this field to specify bucketing option for the histogram search response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longValueHistogramBucketingOption")]
		public NumericBucketingOption LongValueHistogramBucketingOption { get; set; }
		
		/// <summary>
		/// Optional. If set to true, the response includes the histogram value for each key as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValueHistogram")]
		public System.Nullable<System.Boolean> StringValueHistogram { get; set; }
	}
	
	/// <summary>
	/// Output only. Custom attribute histogram result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomAttributeHistogramResult
	{
		
		/// <summary>
		/// Stores the key of custom attribute the histogram is performed on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Output only. Custom numeric bucketing result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longValueHistogramResult")]
		public NumericBucketingResult LongValueHistogramResult { get; set; }
		
		/// <summary>
		/// Stores a map from the values of string custom field associated with `key` to the number of jobs with that value in this histogram result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValueHistogramResult")]
		public System.Collections.Generic.Dictionary<string, int> StringValueHistogramResult { get; set; }
	}
	
	/// <summary>
	/// Input only. Custom ranking information for SearchJobsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomRankingInfo
	{
		
		/// <summary>
		/// Required. Controls over how important the score of CustomRankingInfo.ranking_expression gets applied to job's final ranking position. An error is thrown if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importanceLevel")]
		public System.Nullable<CustomRankingInfoImportanceLevel> ImportanceLevel { get; set; }
		
		/// <summary>
		/// Required. Controls over how job documents get ranked on top of existing relevance score (determined by API algorithm). A combination of the ranking expression and relevance score is used to determine job's final ranking position. The syntax for this expression is a subset of Google SQL syntax. Supported operators are: +, -, *, /, where the left and right side of the operator is either a numeric Job.custom_attributes key, integer/double value or an expression that can be evaluated to a number. Parenthesis are supported to adjust calculation precedence. The expression must be < 200 characters in length. The expression is considered invalid for a job if the expression references custom attributes that are not populated on the job or if the expression results in a divide by zero. If an expression is invalid for a job, that job is demoted to the end of the results. Sample ranking expression (year + 25) * 0.25 - (freshness / 0.5)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rankingExpression")]
		public string RankingExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomRankingInfoImportanceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTANCE_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTREME = 6,
	}
	
	/// <summary>
	/// Device information collected from the job seeker, candidate, or other entity conducting the job search. Providing this information improves the quality of the search results across devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceInfo
	{
		
		/// <summary>
		/// Optional. Type of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public System.Nullable<DeviceInfoDeviceType> DeviceType { get; set; }
		
		/// <summary>
		/// Optional. A device-specific ID. The ID must be a unique identifier that distinguishes the device from other devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceInfoDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_WEB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 6,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Input only. Histogram facets to be specified in SearchJobsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramFacets
	{
		
		/// <summary>
		/// Optional. Specifies compensation field-based histogram requests. Duplicate values of CompensationHistogramRequest.type are not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compensationHistogramFacets")]
		public CompensationHistogramRequest[] CompensationHistogramFacets { get; set; }
		
		/// <summary>
		/// Optional. Specifies the custom attributes histogram requests. Duplicate values of CustomAttributeHistogramRequest.key are not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributeHistogramFacets")]
		public CustomAttributeHistogramRequest[] CustomAttributeHistogramFacets { get; set; }
		
		/// <summary>
		/// Optional. Specifies the simple type of histogram facets, for example, `COMPANY_SIZE`, `EMPLOYMENT_TYPE` etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleHistogramFacets")]
		public string[] SimpleHistogramFacets { get; set; }
	}
	
	/// <summary>
	/// Input Only. The histogram request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramQuery
	{
		
		/// <summary>
		/// An expression specifies a histogram request against matching resources (for example, jobs) for searches. Expression syntax is a aggregation function call with histogram facets and other options. Available aggregation function calls are: * `count(string_histogram_facet)`: Count the number of matching entity, for each distinct attribute value. * `count(numeric_histogram_facet, list of buckets)`: Count the number of matching entity within each bucket. A maximum of 200 histogram buckets are supported. Data types: * Histogram facet: facet names with format a-zA-Z+. * String: string like "any string with backslash escape for quote(\")." * Number: whole number and floating point number like 10, -1 and -0.01. * List: list of elements with comma(,) separator surrounded by square brackets. For example, [1, 2, 3] and ["one", "two", "three"]. Built-in constants: * MIN (minimum number similar to java Double.MIN_VALUE) * MAX (maximum number similar to java Double.MAX_VALUE) Built-in functions: * bucket(start, end[, label]): bucket built-in function creates a bucket with range of start, end). Note that the end is exclusive. For example, bucket(1, MAX, "positive number") or bucket(1, 10). Job histogram facets: * company_id: histogram by [Job.distributor_company_id. * company_display_name: histogram by Job.company_display_name. * employment_type: histogram by Job.employment_types. For example, "FULL_TIME", "PART_TIME". * company_size (DEPRECATED): histogram by CompanySize, for example, "SMALL", "MEDIUM", "BIG". * publish_time_in_day: histogram by the Job.publish_time in days. Must specify list of numeric buckets in spec. * publish_time_in_month: histogram by the Job.publish_time in months. Must specify list of numeric buckets in spec. * publish_time_in_year: histogram by the Job.publish_time in years. Must specify list of numeric buckets in spec. * degree_type: histogram by the Job.degree_type. For example, "Bachelors", "Masters". * job_level: histogram by the Job.job_level. For example, "Entry Level". * country: histogram by the country code of jobs. For example, "US", "FR". * admin1: histogram by the admin1 code of jobs, which is a global placeholder referring to the state, province, or the particular term a country uses to define the geographic structure below the country level. For example, "CA", "IL". * city: histogram by a combination of the "city name, admin1 code". For example, "Mountain View, CA", "New York, NY". * admin1_country: histogram by a combination of the "admin1 code, country". For example, "CA, US", "IL, US". * city_coordinate: histogram by the city center's GPS coordinates (latitude and longitude). For example, 37.4038522,-122.0987765. Since the coordinates of a city center can change, customers may need to refresh them periodically. * locale: histogram by the Job.language_code. For example, "en-US", "fr-FR". * language: histogram by the language subtag of the Job.language_code. For example, "en", "fr". * category: histogram by the JobCategory. For example, "COMPUTER_AND_IT", "HEALTHCARE". * base_compensation_unit: histogram by the CompensationUnit of base salary. For example, "WEEKLY", "MONTHLY". * base_compensation: histogram by the base salary. Must specify list of numeric buckets to group results by. * annualized_base_compensation: histogram by the base annualized salary. Must specify list of numeric buckets to group results by. * annualized_total_compensation: histogram by the total annualized salary. Must specify list of numeric buckets to group results by. * string_custom_attribute: histogram by string Job.custom_attributes. Values can be accessed via square bracket notations like string_custom_attribute["key1"]. * numeric_custom_attribute: histogram by numeric Job.custom_attributes. Values can be accessed via square bracket notations like numeric_custom_attribute["key1"]. Must specify list of numeric buckets to group results by. Example expressions: * count(admin1) * count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000), bucket(100000, MAX)]) * count(string_custom_attribute["some-string-custom-attribute"]) * count(numeric_custom_attribute["some-numeric-custom-attribute"], [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramQuery")]
		public string HistogramQuery1 { get; set; }
	}
	
	/// <summary>
	/// Output only. Histogram result that matches HistogramSpec specified in searches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramQueryResult
	{
		
		/// <summary>
		/// A map from the values of the facet associated with distinct values to the number of matching entries with corresponding value. The key format is: * (for string histogram) string values stored in the field. * (for named numeric bucket) name specified in `bucket()` function, like for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`. * (for anonymous numeric bucket) range formatted as `-`, for example, `0-1000`, `MIN-0`, and `0-MAX`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogram")]
		public System.Collections.Generic.Dictionary<string, string> Histogram { get; set; }
		
		/// <summary>
		/// Requested histogram expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramQuery")]
		public string HistogramQuery { get; set; }
	}
	
	/// <summary>
	/// Output only. Result of a histogram call. The response contains the histogram map for the search type specified by HistogramResult.field. The response is a map of each filter value to the corresponding count of jobs for that filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramResult
	{
		
		/// <summary>
		/// The Histogram search filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchType")]
		public System.Nullable<HistogramResultSearchType> SearchType { get; set; }
		
		/// <summary>
		/// A map from the values of field to the number of jobs with that value in this search result. Key: search type (filter names, such as the companyName). Values: the count of jobs that match the filter for this search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, int> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HistogramResultSearchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEARCH_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMPLOYMENT_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_SIZE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_PUBLISHED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDUCATION_LEVEL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIENCE_LEVEL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CITY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCALE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANGUAGE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CITY_COORDINATE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_1_COUNTRY = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_DISPLAY_NAME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE_COMPENSATION_UNIT = 16,
	}
	
	/// <summary>
	/// Output only. Histogram results that match HistogramFacets specified in SearchJobsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramResults
	{
		
		/// <summary>
		/// Specifies compensation field-based histogram results that match HistogramFacets.compensation_histogram_requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compensationHistogramResults")]
		public CompensationHistogramResult[] CompensationHistogramResults { get; set; }
		
		/// <summary>
		/// Specifies histogram results for custom attributes that match HistogramFacets.custom_attribute_histogram_facets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributeHistogramResults")]
		public CustomAttributeHistogramResult[] CustomAttributeHistogramResults { get; set; }
		
		/// <summary>
		/// Specifies histogram results that matches HistogramFacets.simple_histogram_facets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simpleHistogramResults")]
		public HistogramResult[] SimpleHistogramResults { get; set; }
	}
	
	/// <summary>
	/// Input only. The query required to perform a search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobQuery
	{
		
		/// <summary>
		/// Input only. Parameters needed for commute search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commuteFilter")]
		public CommuteFilter CommuteFilter { get; set; }
		
		/// <summary>
		/// Optional. This filter specifies the company Company.display_name of the jobs to search against. The company name must match the value exactly. Alternatively, the value being searched for can be wrapped in different match operators. `SUBSTRING_MATCH([value])` The company name must contain a case insensitive substring match of the value. Using this function may increase latency. Sample Value: `SUBSTRING_MATCH(google)` `MULTI_WORD_TOKEN_MATCH([value])` The value will be treated as a multi word token and the company name must contain a case insensitive match of the value. Using this function may increase latency. Sample Value: `MULTI_WORD_TOKEN_MATCH(google)` If a value isn't specified, jobs within the search results are associated with any company. If multiple values are specified, jobs within the search results may be associated with any of the specified companies. At most 20 company display name filters are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyDisplayNames")]
		public string[] CompanyDisplayNames { get; set; }
		
		/// <summary>
		/// Optional. This filter specifies the company entities to search against. If a value isn't specified, jobs are searched for against all companies. If multiple values are specified, jobs are searched against the companies specified. The format is "projects/{project_id}/companies/{company_id}", for example, "projects/api-test-project/companies/foo". At most 20 company filters are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyNames")]
		public string[] CompanyNames { get; set; }
		
		/// <summary>
		/// Input only. Filter on job compensation type and amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compensationFilter")]
		public CompensationFilter CompensationFilter { get; set; }
		
		/// <summary>
		/// Optional. This filter specifies a structured syntax to match against the Job.custom_attributes marked as `filterable`. The syntax for this expression is a subset of SQL syntax. Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the left of the operator is a custom field key and the right of the operator is a number or a quoted string. You must escape backslash (\\) and quote (\") characters. Supported functions are `LOWER([field_name])` to perform a case insensitive match and `EMPTY([field_name])` to filter on the existence of a key. Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100 comparisons or functions are allowed in the expression. The expression must be < 10000 bytes in length. Sample Query: `(LOWER(driving_license)="class \"a\"" OR EMPTY(driving_license)) AND driving_years > 10`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customAttributeFilter")]
		public string CustomAttributeFilter { get; set; }
		
		/// <summary>
		/// Optional. This flag controls the spell-check feature. If false, the service attempts to correct a misspelled query, for example, "enginee" is corrected to "engineer". Defaults to false: a spell check is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableSpellCheck")]
		public System.Nullable<System.Boolean> DisableSpellCheck { get; set; }
		
		/// <summary>
		/// Optional. The employment type filter specifies the employment type of jobs to search against, such as EmploymentType.FULL_TIME. If a value is not specified, jobs in the search results includes any employment type. If multiple values are specified, jobs in the search results include any of the specified employment types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="employmentTypes")]
		public string[] EmploymentTypes { get; set; }
		
		/// <summary>
		/// Optional. This filter specifies a list of job names to be excluded during search. At most 400 excluded job names are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedJobs")]
		public string[] ExcludedJobs { get; set; }
		
		/// <summary>
		/// Optional. The category filter specifies the categories of jobs to search against. See Category for more information. If a value is not specified, jobs from any category are searched against. If multiple values are specified, jobs from any of the specified categories are searched against.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobCategories")]
		public string[] JobCategories { get; set; }
		
		/// <summary>
		/// Optional. This filter specifies the locale of jobs to search against, for example, "en-US". If a value isn't specified, the search results can contain jobs in any locale. Language codes should be in BCP-47 format, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). At most 10 language code filters are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCodes")]
		public string[] LanguageCodes { get; set; }
		
		/// <summary>
		/// Optional. The location filter specifies geo-regions containing the jobs to search against. See LocationFilter for more information. If a location value isn't specified, jobs fitting the other search criteria are retrieved regardless of where they're located. If multiple values are specified, jobs are retrieved from any of the specified locations. If different values are specified for the LocationFilter.distance_in_miles parameter, the maximum provided distance is used for all locations. At most 5 location filters are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationFilters")]
		public LocationFilter[] LocationFilters { get; set; }
		
		/// <summary>
		/// Message representing a period of time between two timestamps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishTimeRange")]
		public TimestampRange PublishTimeRange { get; set; }
		
		/// <summary>
		/// Optional. The query string that matches against the job title, description, and location fields. The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// The language code of query. For example, "en-US". This field helps to better interpret the query. If a value isn't specified, the query language code is automatically detected, which may not be accurate. Language code should be in BCP-47 format, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryLanguageCode")]
		public string QueryLanguageCode { get; set; }
	}
	
	/// <summary>
	/// Input only. Geographic region of the search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationFilter
	{
		
		/// <summary>
		/// Optional. The address name, such as "Mountain View" or "Bay Area".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Optional. The distance_in_miles is applied when the location being searched for is identified as a city or smaller. When the location being searched for is a state or larger, this field is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distanceInMiles")]
		public System.Nullable<System.Double> DistanceInMiles { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latLng")]
		public LatLng LatLng { get; set; }
		
		/// <summary>
		/// Optional. CLDR region code of the country/region. This field may be used in two ways: 1) If telecommute preference is not set, this field is used address ambiguity of the user-input address. For example, "Liverpool" may refer to "Liverpool, NY, US" or "Liverpool, UK". This region code biases the address resolution toward a specific country or territory. If this field is not set, address resolution is biased toward the United States by default. 2) If telecommute preference is set to TELECOMMUTE_ALLOWED, the telecommute location filter will be limited to the region specified in this field. If this field is not set, the telecommute job locations will not be limited. See https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionCode")]
		public string RegionCode { get; set; }
		
		/// <summary>
		/// Optional. Allows the client to return jobs without a set location, specifically, telecommuting jobs (telecommuting is considered by the service as a special location). Job.posting_region indicates if a job permits telecommuting. If this field is set to TelecommutePreference.TELECOMMUTE_ALLOWED, telecommuting jobs are searched, and address and lat_lng are ignored. If not set or set to TelecommutePreference.TELECOMMUTE_EXCLUDED, the telecommute status of the jobs is ignored. Jobs that have PostingRegion.TELECOMMUTE and have additional Job.addresses may still be matched based on other location filters using address or latlng. This filter can be used by itself to search exclusively for telecommuting jobs, or it can be combined with another location filter to search for a combination of job locations, such as "Mountain View" or "telecommuting" jobs. However, when used in combination with other location filters, telecommuting jobs can be treated as less relevant than other jobs in the search response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telecommutePreference")]
		public System.Nullable<LocationFilterTelecommutePreference> TelecommutePreference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LocationFilterTelecommutePreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELECOMMUTE_PREFERENCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELECOMMUTE_EXCLUDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELECOMMUTE_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELECOMMUTE_JOBS_EXCLUDED = 3,
	}
	
	/// <summary>
	/// Message representing a period of time between two timestamps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimestampRange
	{
		
		/// <summary>
		/// End of the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Begin of the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Output only. The List companies response object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCompaniesResponse
	{
		
		/// <summary>
		/// Companies for the current client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companies")]
		public Company[] Companies { get; set; }
		
		/// <summary>
		/// Output only. Additional information returned to client, such as debugging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResponseMetadata Metadata { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Output only. List jobs response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// The Jobs for a given company. The maximum number of items returned is based on the limit field provided in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// Output only. Additional information returned to client, such as debugging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResponseMetadata Metadata { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Output only. Job entry with metadata inside SearchJobsResponse.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchingJob
	{
		
		/// <summary>
		/// Output only. Commute details related to this job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commuteInfo")]
		public CommuteInfo CommuteInfo { get; set; }
		
		/// <summary>
		/// A Job resource represents a job posting (also referred to as a "job listing" or "job requisition"). A job belongs to a Company, which is the hiring entity responsible for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
		
		/// <summary>
		/// A summary of the job with core information that's displayed on the search results listing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobSummary")]
		public string JobSummary { get; set; }
		
		/// <summary>
		/// Contains snippets of text from the Job.job_title field most closely matching a search query's keywords, if available. The matching query keywords are enclosed in HTML bold tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobTitleSnippet")]
		public string JobTitleSnippet { get; set; }
		
		/// <summary>
		/// Contains snippets of text from the Job.description and similar fields that most closely match a search query's keywords, if available. All HTML tags in the original fields are stripped when returned in this field, and matching query keywords are enclosed in HTML bold tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchTextSnippet")]
		public string SearchTextSnippet { get; set; }
	}
	
	/// <summary>
	/// Message representing input to a Mendel server for debug forcing. See go/mendel-debug-forcing for more details. Next ID: 2
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MendelDebugInput
	{
		
		/// <summary>
		/// When a request spans multiple servers, a MendelDebugInput may travel with the request and take effect in all the servers. This field is a map of namespaces to NamespacedMendelDebugInput protos. In a single server, up to two NamespacedMendelDebugInput protos are applied: 1. NamespacedMendelDebugInput with the global namespace (key == ""). 2. NamespacedMendelDebugInput with the server's namespace. When both NamespacedMendelDebugInput protos are present, they are merged. See go/mendel-debug-forcing for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespacedDebugInput")]
		public System.Collections.Generic.Dictionary<string, NamespacedDebugInput> NamespacedDebugInput { get; set; }
	}
	
	/// <summary>
	/// Next ID: 16
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamespacedDebugInput
	{
		
		/// <summary>
		/// Set of experiment names to be absolutely forced. These experiments will be forced without evaluating the conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absolutelyForcedExpNames")]
		public string[] AbsolutelyForcedExpNames { get; set; }
		
		/// <summary>
		/// Set of experiment tags to be absolutely forced. The experiments with these tags will be forced without evaluating the conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absolutelyForcedExpTags")]
		public string[] AbsolutelyForcedExpTags { get; set; }
		
		/// <summary>
		/// Set of experiment ids to be absolutely forced. These ids will be forced without evaluating the conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absolutelyForcedExps")]
		public int[] AbsolutelyForcedExps { get; set; }
		
		/// <summary>
		/// Set of experiment names to be conditionally forced. These experiments will be forced only if their conditions and their parent domain's conditions are true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditionallyForcedExpNames")]
		public string[] ConditionallyForcedExpNames { get; set; }
		
		/// <summary>
		/// Set of experiment tags to be conditionally forced. The experiments with these tags will be forced only if their conditions and their parent domain's conditions are true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditionallyForcedExpTags")]
		public string[] ConditionallyForcedExpTags { get; set; }
		
		/// <summary>
		/// Set of experiment ids to be conditionally forced. These ids will be forced only if their conditions and their parent domain's conditions are true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditionallyForcedExps")]
		public int[] ConditionallyForcedExps { get; set; }
		
		/// <summary>
		/// If true, disable automatic enrollment selection (at all diversion points). Automatic enrollment selection means experiment selection process based on the experiment's automatic enrollment condition. This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableAutomaticEnrollmentSelection")]
		public System.Nullable<System.Boolean> DisableAutomaticEnrollmentSelection { get; set; }
		
		/// <summary>
		/// Set of experiment names to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If a name corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpNames")]
		public string[] DisableExpNames { get; set; }
		
		/// <summary>
		/// Set of experiment tags to be disabled. All experiments that are tagged with one or more of these tags are disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExpTags")]
		public string[] DisableExpTags { get; set; }
		
		/// <summary>
		/// Set of experiment ids to be disabled. If an experiment is disabled, it is never selected nor forced. If an aggregate experiment is disabled, its partitions are disabled together. If an experiment with an enrollment is disabled, the enrollment is disabled together. If an ID corresponds to a domain, the domain itself and all descendant experiments and domains are disabled together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExps")]
		public int[] DisableExps { get; set; }
		
		/// <summary>
		/// If true, disable manual enrollment selection (at all diversion points). Manual enrollment selection means experiment selection process based on the request's manual enrollment states (a.k.a. opt-in experiments). This does not disable selection of forced experiments. Setting this field to false does not change anything in the experiment selection process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableManualEnrollmentSelection")]
		public System.Nullable<System.Boolean> DisableManualEnrollmentSelection { get; set; }
		
		/// <summary>
		/// If true, disable organic experiment selection (at all diversion points). Organic selection means experiment selection process based on traffic allocation and diversion condition evaluation. This does not disable selection of forced experiments. This is useful in cases when it is not known whether experiment selection behavior is responsible for a error or breakage. Disabling organic selection may help to isolate the cause of a given problem. Setting this field to false does not change anything in the experiment selection process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableOrganicSelection")]
		public System.Nullable<System.Boolean> DisableOrganicSelection { get; set; }
		
		/// <summary>
		/// Flags to force in a particular experiment state. Map from flag name to flag value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forcedFlags")]
		public System.Collections.Generic.Dictionary<string, string> ForcedFlags { get; set; }
		
		/// <summary>
		/// Rollouts to force in a particular experiment state. Map from rollout name to rollout value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forcedRollouts")]
		public System.Collections.Generic.Dictionary<string, bool> ForcedRollouts { get; set; }
		
		/// <summary>
		/// Sets different testing modes. See the documentation in the TestingMode message for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingMode")]
		public System.Nullable<NamespacedDebugInputTestingMode> TestingMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NamespacedDebugInputTestingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESTING_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESTING_MODE_ALL_OFF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESTING_MODE_ALL_ON = 2,
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Input only. Meta information related to the job searcher or entity conducting the job search. This information is used to improve the performance of the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestMetadata
	{
		
		/// <summary>
		/// Device information collected from the job seeker, candidate, or other entity conducting the job search. Providing this information improves the quality of the search results across devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceInfo")]
		public DeviceInfo DeviceInfo { get; set; }
		
		/// <summary>
		/// Required. The client-defined scope or source of the service call, which typically is the domain on which the service has been implemented and is currently being run. For example, if the service is being run by client *Foo, Inc.*, on job board www.foo.com and career site www.bar.com, then this field is set to "foo.com" for use on the job board, and "bar.com" for use on the career site. If this field isn't available for some reason, send "UNKNOWN". Any improvements to the model for a particular tenant site rely on this field being set correctly to a domain. The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required. A unique session identification string. A session is defined as the duration of an end user's interaction with the service over a certain period. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send "UNKNOWN". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to some unique session_id. The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Required. A unique user identification string, as determined by the client. To have the strongest positive impact on search quality make sure the client-level is unique. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send "UNKNOWN". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to a unique user_id. The maximum number of allowed characters is 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Input only. The Request body of the `SearchJobs` call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchJobsRequest
	{
		
		/// <summary>
		/// Input only. Custom ranking information for SearchJobsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRankingInfo")]
		public CustomRankingInfo CustomRankingInfo { get; set; }
		
		/// <summary>
		/// Optional. Controls whether to disable exact keyword match on Job.job_title, Job.description, Job.company_display_name, Job.locations, Job.qualifications. When disable keyword match is turned off, a keyword match returns jobs that do not match given category filters when there are matching keywords. For example, the query "program manager," a result is returned even if the job posting has the title "software developer," which does not fall into "program manager" ontology, but does have "program manager" appearing in its description. For queries like "cloud" that does not contain title or location specific ontology, jobs with "cloud" keyword matches are returned regardless of this flag's value. Please use Company.keyword_searchable_custom_fields or Company.keyword_searchable_custom_attributes if company specific globally matched custom field/attribute string values is needed. Enabling keyword match improves recall of subsequent search requests. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableKeywordMatch")]
		public System.Nullable<System.Boolean> DisableKeywordMatch { get; set; }
		
		/// <summary>
		/// Optional. Controls whether highly similar jobs are returned next to each other in the search results. Jobs are identified as highly similar based on their titles, job categories, and locations. Highly similar results are clustered so that only one representative job of the cluster is displayed to the job seeker higher up in the results, with the other jobs being displayed lower down in the results. Defaults to DiversificationLevel.SIMPLE if no value is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diversificationLevel")]
		public System.Nullable<SearchJobsRequestDiversificationLevel> DiversificationLevel { get; set; }
		
		/// <summary>
		/// Optional. Controls whether to broaden the search when it produces sparse results. Broadened queries append results to the end of the matching results list. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBroadening")]
		public System.Nullable<System.Boolean> EnableBroadening { get; set; }
		
		/// <summary>
		/// Input only. Histogram facets to be specified in SearchJobsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramFacets")]
		public HistogramFacets HistogramFacets { get; set; }
		
		/// <summary>
		/// Optional. Expression based histogram requests for jobs matching JobQuery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramQueries")]
		public HistogramQuery[] HistogramQueries { get; set; }
		
		/// <summary>
		/// Input only. The query required to perform a search query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobQuery")]
		public JobQuery JobQuery { get; set; }
		
		/// <summary>
		/// Optional. The desired job attributes returned for jobs in the search response. Defaults to JobView.SMALL if no value is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobView")]
		public System.Nullable<SearchJobsRequestJobView> JobView { get; set; }
		
		/// <summary>
		/// Optional. An integer that specifies the current offset (that is, starting result location, amongst the jobs deemed by the API as relevant) in search results. This field is only considered if page_token is unset. The maximum allowed value is 5000. Otherwise an error is thrown. For example, 0 means to return results starting from the first matching job, and 10 means to return from the 11th job. This can be used for pagination, (for example, pageSize = 10 and offset = 10 means to return from the second page).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// Optional. The criteria determining how search results are sorted. Default is "relevance desc". Supported options are: * `"relevance desc"`: By relevance descending, as determined by the API algorithms. Relevance thresholding of query results is only available with this ordering. * `"posting_publish_time desc"`: By Job.posting_publish_time descending. * `"posting_update_time desc"`: By Job.posting_update_time descending. * `"title"`: By Job.title ascending. * `"title desc"`: By Job.title descending. * `"annualized_base_compensation"`: By job's CompensationInfo.annualized_base_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `"annualized_base_compensation desc"`: By job's CompensationInfo.annualized_base_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `"annualized_total_compensation"`: By job's CompensationInfo.annualized_total_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `"annualized_total_compensation desc"`: By job's CompensationInfo.annualized_total_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `"custom_ranking desc"`: By the relevance score adjusted to the SearchJobsRequest.custom_ranking_info.ranking_expression with weight factor assigned by SearchJobsRequest.custom_ranking_info.importance_level in descending order. * Location sorting: Use the special syntax to order jobs by distance: "`distance_from('Hawaii')`": Order by distance from Hawaii. "`distance_from(19.89, 155.5)`": Order by distance from a coordinate. "`distance_from('Hawaii'), distance_from('Puerto Rico')`": Order by multiple locations. See details below. "`distance_from('Hawaii'), distance_from(19.89, 155.5)`": Order by multiple locations. See details below. The string can have a maximum of 256 characters. When multiple distance centers are provided, a job that is close to any of the distance centers would have a high rank. When a job has multiple locations, the job location closest to one of the distance centers will be used. Jobs that don't have locations will be ranked at the bottom. Distance is calculated with a precision of 11.3 meters (37.4 feet). Diversification strategy is still applied unless explicitly disabled in diversification_level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public string OrderBy { get; set; }
		
		/// <summary>
		/// Optional. A limit on the number of jobs returned in the search results. Increasing this value above the default value of 10 can increase search response time. The value can be between 1 and 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Optional. The token specifying the current offset within search results. See SearchJobsResponse.next_page_token for an explanation of how to obtain the next set of query results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Input only. Meta information related to the job searcher or entity conducting the job search. This information is used to improve the performance of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestMetadata")]
		public RequestMetadata RequestMetadata { get; set; }
		
		/// <summary>
		/// This field is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirePreciseResultSize")]
		public System.Nullable<System.Boolean> RequirePreciseResultSize { get; set; }
		
		/// <summary>
		/// Optional. Mode of a search. Defaults to SearchMode.JOB_SEARCH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchMode")]
		public System.Nullable<SearchJobsRequestSearchMode> SearchMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchJobsRequestDiversificationLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVERSIFICATION_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIMPLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchJobsRequestJobView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_ID_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_MINIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_SMALL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_VIEW_FULL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SearchJobsRequestSearchMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEARCH_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_SEARCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEATURED_JOB_SEARCH = 2,
	}
	
	/// <summary>
	/// Output only. Response for SearchJob method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchJobsResponse
	{
		
		/// <summary>
		/// If query broadening is enabled, we may append additional results from the broadened query. This number indicates how many of the jobs returned in the jobs field are from the broadened query. These results are always at the end of the jobs list. In particular, a value of 0, or if the field isn't set, all the jobs in the jobs list are from the original (without broadening) query. If this field is non-zero, subsequent requests with offset after this result set should contain all broadened results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="broadenedQueryJobsCount")]
		public System.Nullable<System.Int32> BroadenedQueryJobsCount { get; set; }
		
		/// <summary>
		/// An estimation of the number of jobs that match the specified query. This number is not guaranteed to be accurate. For accurate results, see SearchJobsResponse.total_size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedTotalSize")]
		public System.Nullable<System.Int32> EstimatedTotalSize { get; set; }
		
		/// <summary>
		/// The histogram results that match with specified SearchJobsRequest.histogram_queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramQueryResults")]
		public HistogramQueryResult[] HistogramQueryResults { get; set; }
		
		/// <summary>
		/// Output only. Histogram results that match HistogramFacets specified in SearchJobsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramResults")]
		public HistogramResults HistogramResults { get; set; }
		
		/// <summary>
		/// The location filters that the service applied to the specified query. If any filters are lat-lng based, the JobLocation.location_type is JobLocation.LocationType#LOCATION_TYPE_UNSPECIFIED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationFilters")]
		public Location[] LocationFilters { get; set; }
		
		/// <summary>
		/// The Job entities that match the specified SearchJobsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchingJobs")]
		public MatchingJob[] MatchingJobs { get; set; }
		
		/// <summary>
		/// Output only. Additional information returned to client, such as debugging information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ResponseMetadata Metadata { get; set; }
		
		/// <summary>
		/// The token that specifies the starting position of the next page of results. This field is empty if there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Output only. Spell check result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spellCorrection")]
		public SpellingCorrection SpellCorrection { get; set; }
		
		/// <summary>
		/// The precise result count with limit 100,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Output only. Spell check result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpellingCorrection
	{
		
		/// <summary>
		/// Indicates if the query was corrected by the spell checker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corrected")]
		public System.Nullable<System.Boolean> Corrected { get; set; }
		
		/// <summary>
		/// Correction output consisting of the corrected keyword string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correctedText")]
		public string CorrectedText { get; set; }
	}
	
	/// <summary>
	/// Input only. Request for updating a specified company.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCompanyRequest
	{
		
		/// <summary>
		/// A Company resource represents a company in the service. A company is the entity that owns job postings, that is, the hiring entity responsible for employing applicants for the job position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="company")]
		public Company Company { get; set; }
		
		/// <summary>
		/// Optional but strongly recommended for the best service experience. If update_mask is provided, only the specified fields in company are updated. Otherwise all the fields are updated. A field mask to specify the company fields to be updated. Only top level fields of Company are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Input only. Update job request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateJobRequest
	{
		
		/// <summary>
		/// A Job resource represents a job posting (also referred to as a "job listing" or "job requisition"). A job belongs to a Company, which is the hiring entity responsible for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
		
		/// <summary>
		/// Optional but strongly recommended to be provided for the best service experience. If update_mask is provided, only the specified fields in job are updated. Otherwise all the fields are updated. A field mask to restrict the fields that are updated. Only top level fields of Job are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.
		/// Jobs_projects_jobs_delete v3p1beta1/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of the job to be deleted. The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-project/jobs/1234".</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Jobs_projects_jobs_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Jobs_projects_operations_get v3p1beta1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Jobs_projects_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.
		/// Jobs_projects_jobs_patch v3p1beta1/{name}
		/// </summary>
		/// <param name="name">Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is "projects/{project_id}/jobs/{job_id}", for example, "projects/api-test-project/jobs/1234". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Jobs_projects_jobs_patchAsync(string name, UpdateJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Job>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Completes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.
		/// Jobs_projects_complete v3p1beta1/{name}:complete
		/// </summary>
		/// <param name="name">Required. Resource name of project the completion is performed within. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <param name="companyName">Optional. If provided, restricts completion to specified company. The format is "projects/{project_id}/companies/{company_id}", for example, "projects/api-test-project/companies/foo".</param>
		/// <param name="languageCode">Deprecated. Use language_codes instead. Optional. The language of the query. This is the BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). For CompletionType.JOB_TITLE type, only open jobs with the same language_code are returned. For CompletionType.COMPANY_NAME type, only companies having open jobs with the same language_code are returned. For CompletionType.COMBINED type, only open jobs with the same language_code or companies having open jobs with the same language_code are returned. The maximum number of allowed characters is 255.</param>
		/// <param name="languageCodes">Optional. The list of languages of the query. This is the BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). For CompletionType.JOB_TITLE type, only open jobs with the same language_codes are returned. For CompletionType.COMPANY_NAME type, only companies having open jobs with the same language_codes are returned. For CompletionType.COMBINED type, only open jobs with the same language_codes or companies having open jobs with the same language_codes are returned. The maximum number of allowed characters is 255.</param>
		/// <param name="pageSize">Required. Completion result count. The maximum allowed page size is 10.</param>
		/// <param name="query">Required. The query used to generate suggestions. The maximum number of allowed characters is 255.</param>
		/// <param name="scope">Optional. The scope of the completion. The defaults is CompletionScope.PUBLIC.</param>
		/// <param name="type">Optional. The completion topic. The default is CompletionType.COMBINED.</param>
		/// <returns>Successful response</returns>
		public async Task<CompleteQueryResponse> Jobs_projects_completeAsync(string name, string companyName, string languageCode, string[] languageCodes, int pageSize, string query, Jobs_projects_completeScope scope, CompletionResultType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":complete&companyName=" + (companyName==null? "" : System.Uri.EscapeDataString(companyName))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode))+"&"+string.Join("&", languageCodes.Select(z => $"languageCodes={System.Uri.EscapeDataString(z.ToString())}"))+"&pageSize="+pageSize+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&scope=" + scope+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CompleteQueryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report events issued when end user interacts with customer's application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.
		/// Jobs_projects_clientEvents_create v3p1beta1/{parent}/clientEvents
		/// </summary>
		/// <param name="parent">Parent project name.</param>
		/// <returns>Successful response</returns>
		public async Task<ClientEvent> Jobs_projects_clientEvents_createAsync(string parent, CreateClientEventRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/clientEvents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClientEvent>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all companies associated with the service account.
		/// Jobs_projects_companies_list v3p1beta1/{parent}/companies
		/// </summary>
		/// <param name="parent">Required. Resource name of the project under which the company is created. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <param name="pageSize">Optional. The maximum number of companies to be returned, at most 100. Default is 100 if a non-positive number is provided.</param>
		/// <param name="pageToken">Optional. The starting indicator from which to return results.</param>
		/// <param name="requireOpenJobs">Optional. Set to true if the companies requested must have open jobs. Defaults to false. If true, at most page_size of companies are fetched, among which only those with open jobs are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCompaniesResponse> Jobs_projects_companies_listAsync(string parent, int pageSize, string pageToken, bool requireOpenJobs, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/companies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&requireOpenJobs="+requireOpenJobs;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCompaniesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new company entity.
		/// Jobs_projects_companies_create v3p1beta1/{parent}/companies
		/// </summary>
		/// <param name="parent">Required. Resource name of the project under which the company is created. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <returns>Successful response</returns>
		public async Task<Company> Jobs_projects_companies_createAsync(string parent, CreateCompanyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/companies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Company>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists jobs by filter.
		/// Jobs_projects_jobs_list v3p1beta1/{parent}/jobs
		/// </summary>
		/// <param name="parent">Required. The resource name of the project under which the job is created. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <param name="filter">Required. The filter string specifies the jobs to be enumerated. Supported operator: =, AND The fields eligible for filtering are: * `companyName` * `requisitionId` * `status` Available values: OPEN, EXPIRED, ALL. Defaults to OPEN if no value is specified. At least one of `companyName` and `requisitionId` must present or an INVALID_ARGUMENT error is thrown. Sample Query: * companyName = "projects/api-test-project/companies/123" * companyName = "projects/api-test-project/companies/123" AND requisitionId = "req-1" * companyName = "projects/api-test-project/companies/123" AND status = "EXPIRED" * requisitionId = "req-1" * requisitionId = "req-1" AND status = "EXPIRED"</param>
		/// <param name="jobView">Optional. The desired job attributes returned for jobs in the search response. Defaults to JobView.JOB_VIEW_FULL if no value is specified.</param>
		/// <param name="pageSize">Optional. The maximum number of jobs to be returned per page of results. If job_view is set to JobView.JOB_VIEW_ID_ONLY, the maximum allowed page size is 1000. Otherwise, the maximum allowed page size is 100. Default is 100 if empty or a number < 1 is specified.</param>
		/// <param name="pageToken">Optional. The starting point of a query result.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Jobs_projects_jobs_listAsync(string parent, string filter, SearchJobsRequestJobView jobView, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&jobView=" + jobView+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.
		/// Jobs_projects_jobs_create v3p1beta1/{parent}/jobs
		/// </summary>
		/// <param name="parent">Required. The resource name of the project under which the job is created. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Jobs_projects_jobs_createAsync(string parent, CreateJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Job>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a list of Jobs by filter.
		/// Jobs_projects_jobs_batchDelete v3p1beta1/{parent}/jobs:batchDelete
		/// </summary>
		/// <param name="parent">Required. The resource name of the project under which the job is created. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Jobs_projects_jobs_batchDeleteAsync(string parent, BatchDeleteJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs:batchDelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.
		/// Jobs_projects_jobs_search v3p1beta1/{parent}/jobs:search
		/// </summary>
		/// <param name="parent">Required. The resource name of the project to search within. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <returns>Successful response</returns>
		public async Task<SearchJobsResponse> Jobs_projects_jobs_searchAsync(string parent, SearchJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs:search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), and has different algorithmic adjustments that are targeted to passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.
		/// Jobs_projects_jobs_searchForAlert v3p1beta1/{parent}/jobs:searchForAlert
		/// </summary>
		/// <param name="parent">Required. The resource name of the project to search within. The format is "projects/{project_id}", for example, "projects/api-test-project".</param>
		/// <returns>Successful response</returns>
		public async Task<SearchJobsResponse> Jobs_projects_jobs_searchForAlertAsync(string parent, SearchJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3p1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/jobs:searchForAlert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Jobs_projects_completeScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETION_SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TENANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
