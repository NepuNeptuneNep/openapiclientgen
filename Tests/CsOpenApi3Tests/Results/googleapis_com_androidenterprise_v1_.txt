//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// This represents an enterprise admin who can manage the enterprise in the managed Google Play store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Administrator
	{
		
		/// <summary>
		/// The admin's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// A token authorizing an admin to access an iframe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebToken
	{
		
		/// <summary>
		/// An opaque token to be passed to the Play front-end to generate an iframe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Specification for a token used to generate iframes. The token specifies what data the admin is allowed to modify and the URI the iframe is allowed to communiate with.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebTokenSpec
	{
		
		[System.Runtime.Serialization.DataMember(Name="managedConfigurations")]
		public AdministratorWebTokenSpecManagedConfigurations ManagedConfigurations { get; set; }
		
		/// <summary>
		/// The URI of the parent frame hosting the iframe. To prevent XSS, the iframe may not be hosted at other URIs. This URI must be https. Use whitespaces to separate multiple parent URIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// Deprecated. Use PlaySearch.approveApps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string[] Permission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playSearch")]
		public AdministratorWebTokenSpecPlaySearch PlaySearch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateApps")]
		public AdministratorWebTokenSpecPrivateApps PrivateApps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeBuilder")]
		public AdministratorWebTokenSpecStoreBuilder StoreBuilder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webApps")]
		public AdministratorWebTokenSpecWebApps WebApps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zeroTouch")]
		public AdministratorWebTokenSpecZeroTouch ZeroTouch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebTokenSpecManagedConfigurations
	{
		
		/// <summary>
		/// Whether the Managed Configuration page is displayed. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebTokenSpecPlaySearch
	{
		
		/// <summary>
		/// Allow access to the iframe in approve mode. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approveApps")]
		public System.Nullable<System.Boolean> ApproveApps { get; set; }
		
		/// <summary>
		/// Whether the managed Play Search apps page is displayed. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebTokenSpecPrivateApps
	{
		
		/// <summary>
		/// Whether the Private Apps page is displayed. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebTokenSpecStoreBuilder
	{
		
		/// <summary>
		/// Whether the Organize apps page is displayed. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebTokenSpecWebApps
	{
		
		/// <summary>
		/// Whether the Web Apps page is displayed. Default is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdministratorWebTokenSpecZeroTouch
	{
		
		/// <summary>
		/// Whether zero-touch embedded UI is usable with this token. If enabled, the admin can link zero-touch customers to this enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Represents the list of app restrictions available to be pre-configured for the product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppRestrictionsSchema
	{
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The set of restrictions that make up this schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public AppRestrictionsSchemaRestriction[] Restrictions { get; set; }
	}
	
	/// <summary>
	/// A restriction in the App Restriction Schema represents a piece of configuration that may be pre-applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppRestrictionsSchemaRestriction
	{
		
		/// <summary>
		/// A typed value for the restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public AppRestrictionsSchemaRestrictionRestrictionValue DefaultValue { get; set; }
		
		/// <summary>
		/// A longer description of the restriction, giving more detail of what it affects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// For choice or multiselect restrictions, the list of possible entries' human-readable names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public string[] Entry { get; set; }
		
		/// <summary>
		/// For choice or multiselect restrictions, the list of possible entries' machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryValue")]
		public string[] EntryValue { get; set; }
		
		/// <summary>
		/// The unique key that the product uses to identify the restriction, e.g. "com.google.android.gm.fieldname".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestedRestriction")]
		public AppRestrictionsSchemaRestriction[] NestedRestriction { get; set; }
		
		/// <summary>
		/// The type of the restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictionType")]
		public System.Nullable<AppRestrictionsSchemaRestrictionRestrictionType> RestrictionType { get; set; }
		
		/// <summary>
		/// The name of the restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A typed value for the restriction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppRestrictionsSchemaRestrictionRestrictionValue
	{
		
		/// <summary>
		/// The type of the value being provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AppRestrictionsSchemaRestrictionRestrictionValueType> Type { get; set; }
		
		/// <summary>
		/// The boolean value - this will only be present if type is bool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueBool")]
		public System.Nullable<System.Boolean> ValueBool { get; set; }
		
		/// <summary>
		/// The integer value - this will only be present if type is integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueInteger")]
		public System.Nullable<System.Int32> ValueInteger { get; set; }
		
		/// <summary>
		/// The list of string values - this will only be present if type is multiselect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueMultiselect")]
		public string[] ValueMultiselect { get; set; }
		
		/// <summary>
		/// The string value - this will be present for types string, choice and hidden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueString")]
		public string ValueString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AppRestrictionsSchemaRestrictionRestrictionValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bool")]
		_bool = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		choice = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multiselect = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hidden = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundle = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundleArray = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AppRestrictionsSchemaRestrictionRestrictionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bool")]
		_bool = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		choice = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multiselect = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hidden = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundle = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundleArray = 7,
	}
	
	/// <summary>
	/// An event generated when a new app version is uploaded to Google Play and its app restrictions schema changed. To fetch the app restrictions schema for an app, use Products.getAppRestrictionsSchema on the EMM API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppRestrictionsSchemaChangeEvent
	{
		
		/// <summary>
		/// The id of the product (e.g. "app:com.google.android.gm") for which the app restriction schema changed. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// List of states set by the app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppState
	{
		
		/// <summary>
		/// List of keyed app states. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyedAppState")]
		public KeyedAppState[] KeyedAppState { get; set; }
		
		/// <summary>
		/// The package name of the app. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	/// <summary>
	/// Represents a keyed app state containing a key, timestamp, severity level, optional description, and optional data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyedAppState
	{
		
		/// <summary>
		/// Additional field intended for machine-readable data. For example, a number or JSON object. To prevent XSS, we recommend removing any HTML from the data before displaying it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Key indicating what the app is providing a state for. The content of the key is set by the app's developer. To prevent XSS, we recommend removing any HTML from the key before displaying it. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Free-form, human-readable message describing the app state. For example, an error message. To prevent XSS, we recommend removing any HTML from the message before displaying it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Severity of the app state. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<KeyedAppStateSeverity> Severity { get; set; }
		
		/// <summary>
		/// Timestamp of when the app set the state in milliseconds since epoch. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTimestampMillis")]
		public string StateTimestampMillis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum KeyedAppStateSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severityUnknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severityInfo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severityError = 2,
	}
	
	/// <summary>
	/// An event generated when a new version of an app is uploaded to Google Play. Notifications are sent for new public versions only: alpha, beta, or canary versions do not generate this event. To fetch up-to-date version history for an app, use Products.Get on the EMM API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppUpdateEvent
	{
		
		/// <summary>
		/// The id of the product (e.g. "app:com.google.android.gm") that was updated. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// This represents a single version of the app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppVersion
	{
		
		/// <summary>
		/// True if this version is a production APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isProduction")]
		public System.Nullable<System.Boolean> IsProduction { get; set; }
		
		/// <summary>
		/// The SDK version this app targets, as specified in the manifest of the APK. See http://developer.android.com/guide/topics/manifest/uses-sdk-element.html
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSdkVersion")]
		public System.Nullable<System.Int32> TargetSdkVersion { get; set; }
		
		/// <summary>
		/// Deprecated, use trackId instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public System.Nullable<AppVersionTrack> Track { get; set; }
		
		/// <summary>
		/// Track ids that the app version is published in. Replaces the track field (deprecated), but doesn't include the production track (see isProduction instead).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackId")]
		public string[] TrackId { get; set; }
		
		/// <summary>
		/// Unique increasing identifier for the app version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
		
		/// <summary>
		/// The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be "1.4").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionString")]
		public string VersionString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AppVersionTrack
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appTrackUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		production = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		beta = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alpha = 3,
	}
	
	/// <summary>
	/// Information on an approval URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApprovalUrlInfo
	{
		
		/// <summary>
		/// A URL that displays a product's permissions and that can also be used to approve the product with the Products.approve call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalUrl")]
		public string ApprovalUrl { get; set; }
	}
	
	/// <summary>
	/// An AuthenticationToken is used by the EMM's device policy client on a device to provision the given EMM-managed user on that device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthenticationToken
	{
		
		/// <summary>
		/// The authentication token to be passed to the device policy client on the device where it can be used to provision the account for which this token was generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// The auto-install constraint. Defines a set of restrictions for installation. At least one of the fields must be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoInstallConstraint
	{
		
		/// <summary>
		/// Charging state constraint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chargingStateConstraint")]
		public System.Nullable<AutoInstallConstraintChargingStateConstraint> ChargingStateConstraint { get; set; }
		
		/// <summary>
		/// Device idle state constraint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdleStateConstraint")]
		public System.Nullable<AutoInstallConstraintDeviceIdleStateConstraint> DeviceIdleStateConstraint { get; set; }
		
		/// <summary>
		/// Network type constraint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkTypeConstraint")]
		public System.Nullable<AutoInstallConstraintNetworkTypeConstraint> NetworkTypeConstraint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoInstallConstraintChargingStateConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chargingStateConstraintUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chargingNotRequired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chargingRequired = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoInstallConstraintDeviceIdleStateConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceIdleStateConstraintUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceIdleNotRequired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceIdleRequired = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoInstallConstraintNetworkTypeConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		networkTypeConstraintUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anyNetwork = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmeteredNetwork = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoInstallPolicy
	{
		
		/// <summary>
		/// The constraints for auto-installing the app. You can specify a maximum of one constraint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoInstallConstraint")]
		public AutoInstallConstraint[] AutoInstallConstraint { get; set; }
		
		/// <summary>
		/// The auto-install mode. If unset, defaults to "doNotAutoInstall". An app is automatically installed regardless of a set maintenance window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoInstallMode")]
		public System.Nullable<AutoInstallPolicyAutoInstallMode> AutoInstallMode { get; set; }
		
		/// <summary>
		/// The priority of the install, as an unsigned integer. A lower number means higher priority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoInstallPriority")]
		public System.Nullable<System.Int32> AutoInstallPriority { get; set; }
		
		/// <summary>
		/// The minimum version of the app. If a lower version of the app is installed, then the app will be auto-updated according to the auto-install constraints, instead of waiting for the regular auto-update. You can set a minimum version code for at most 20 apps per device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumVersionCode")]
		public System.Nullable<System.Int32> MinimumVersionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoInstallPolicyAutoInstallMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoInstallModeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		doNotAutoInstall = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoInstallOnce = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forceAutoInstall = 3,
	}
	
	/// <summary>
	/// A configuration variables resource contains the managed configuration settings ID to be applied to a single user, as well as the variable set that is attributed to the user. The variable set will be used to replace placeholders in the managed configuration settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigurationVariables
	{
		
		/// <summary>
		/// The ID of the managed configurations settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mcmId")]
		public string McmId { get; set; }
		
		/// <summary>
		/// The variable set that is attributed to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableSet")]
		public VariableSet[] VariableSet { get; set; }
	}
	
	/// <summary>
	/// A variable set is a key-value pair of EMM-provided placeholders and its corresponding value, which is attributed to a user. For example, $FIRSTNAME could be a placeholder, and its value could be Alice. Placeholders should start with a '$' sign and should be alphanumeric only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VariableSet
	{
		
		/// <summary>
		/// The placeholder string; defined by EMM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeholder")]
		public string Placeholder { get; set; }
		
		/// <summary>
		/// The value of the placeholder, specific to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userValue")]
		public string UserValue { get; set; }
	}
	
	/// <summary>
	/// Response message for create enrollment token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEnrollmentTokenResponse
	{
		
		/// <summary>
		/// Enrollment token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentToken")]
		public string EnrollmentToken { get; set; }
	}
	
	/// <summary>
	/// A Devices resource represents a mobile device managed by the EMM and belonging to a specific enterprise user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Device
	{
		
		/// <summary>
		/// The Google Play Services Android ID for the device encoded as a lowercase hex string. For example, "123456789abcdef0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidId")]
		public string AndroidId { get; set; }
		
		/// <summary>
		/// The internal hardware codename of the device. This comes from android.os.Build.DEVICE. (field named "device" per logs/wireless/android/android_checkin.proto)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public string Device1 { get; set; }
		
		/// <summary>
		/// The build fingerprint of the device if known.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestBuildFingerprint")]
		public string LatestBuildFingerprint { get; set; }
		
		/// <summary>
		/// The manufacturer of the device. This comes from android.os.Build.MANUFACTURER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maker")]
		public string Maker { get; set; }
		
		/// <summary>
		/// Identifies the extent to which the device is controlled by a managed Google Play EMM in various deployment configurations. Possible values include: - "managedDevice", a device that has the EMM's device policy controller (DPC) as the device owner. - "managedProfile", a device that has a profile managed by the DPC (DPC is profile owner) in addition to a separate, personal profile that is unavailable to the DPC. - "containerApp", no longer used (deprecated). - "unmanagedProfile", a device that has been allowed (by the domain's admin, using the Admin Console to enable the privilege) to use managed Google Play, but the profile is itself not owned by a DPC. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementType")]
		public System.Nullable<DeviceManagementType> ManagementType { get; set; }
		
		/// <summary>
		/// The model name of the device. This comes from android.os.Build.MODEL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The device policy for a given managed device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// The product name of the device. This comes from android.os.Build.PRODUCT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// Device report updated with the latest app states for managed apps on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public DeviceReport Report { get; set; }
		
		/// <summary>
		/// Retail brand for the device, if set. See android.os.Build.BRAND
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retailBrand")]
		public string RetailBrand { get; set; }
		
		/// <summary>
		/// API compatibility version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdkVersion")]
		public System.Nullable<System.Int32> SdkVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceManagementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		managedDevice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		managedProfile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		containerApp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unmanagedProfile = 3,
	}
	
	/// <summary>
	/// The device policy for a given managed device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Controls when automatic app updates on the device can be applied. Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, autoUpdatePolicy has no effect. "choiceToTheUser" allows the device's user to configure the app update policy. "always" enables auto updates. "never" disables auto updates. "wifiOnly" enables auto updates only when the device is connected to wifi.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpdatePolicy")]
		public System.Nullable<PolicyAutoUpdatePolicy> AutoUpdatePolicy { get; set; }
		
		/// <summary>
		/// Whether the device reports app states to the EMM. The default value is "deviceReportDisabled".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceReportPolicy")]
		public System.Nullable<PolicyDeviceReportPolicy> DeviceReportPolicy { get; set; }
		
		/// <summary>
		/// Maintenance window for managed Google Play Accounts. This allows Play store to update the apps on the foreground in the designated window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindow")]
		public MaintenanceWindow MaintenanceWindow { get; set; }
		
		/// <summary>
		/// The availability granted to the device for the specified products. "all" gives the device access to all products, regardless of approval status. "all" does not enable automatic visibility of "alpha" or "beta" tracks. "whitelist" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productAvailabilityPolicy")]
		public System.Nullable<PolicyProductAvailabilityPolicy> ProductAvailabilityPolicy { get; set; }
		
		/// <summary>
		/// The list of product policies. The productAvailabilityPolicy needs to be set to WHITELIST or ALL for the product policies to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productPolicy")]
		public ProductPolicy[] ProductPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PolicyAutoUpdatePolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoUpdatePolicyUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		choiceToTheUser = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		never = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wifiOnly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		always = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PolicyDeviceReportPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceReportPolicyUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceReportDisabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceReportEnabled = 2,
	}
	
	/// <summary>
	/// Maintenance window for managed Google Play Accounts. This allows Play store to update the apps on the foreground in the designated window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceWindow
	{
		
		/// <summary>
		/// Duration of the maintenance window, in milliseconds. The duration must be between 30 minutes and 24 hours (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMs")]
		public string DurationMs { get; set; }
		
		/// <summary>
		/// Start time of the maintenance window, in milliseconds after midnight on the device. Windows can span midnight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeAfterMidnightMs")]
		public string StartTimeAfterMidnightMs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PolicyProductAvailabilityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productAvailabilityPolicyUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whitelist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 2,
	}
	
	/// <summary>
	/// The policy for a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoInstallPolicy")]
		public AutoInstallPolicy AutoInstallPolicy { get; set; }
		
		/// <summary>
		/// The auto-update mode for the product. When autoUpdateMode is used, it always takes precedence over the user's choice. So when a user makes changes to the device settings manually, these changes are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpdateMode")]
		public System.Nullable<ProductPolicyAutoUpdateMode> AutoUpdateMode { get; set; }
		
		/// <summary>
		/// An authentication URL configuration for the authenticator app of an identity provider. This helps to launch the identity provider's authenticator app during the authentication happening in a private app using Android WebView. Authenticator app should already be the default handler for the authentication url on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterpriseAuthenticationAppLinkConfigs")]
		public EnterpriseAuthenticationAppLinkConfig[] EnterpriseAuthenticationAppLinkConfigs { get; set; }
		
		/// <summary>
		/// A managed configuration resource contains the set of managed properties defined by the app developer in the app's managed configurations schema, as well as any configuration variables defined for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedConfiguration")]
		public ManagedConfiguration ManagedConfiguration { get; set; }
		
		/// <summary>
		/// The ID of the product. For example, "app:com.google.android.gm".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Grants the device visibility to the specified product release track(s), identified by trackIds. The list of release tracks of a product can be obtained by calling Products.Get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackIds")]
		public string[] TrackIds { get; set; }
		
		/// <summary>
		/// Deprecated. Use trackIds instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public AppVersionTrack[] Tracks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductPolicyAutoUpdateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoUpdateModeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoUpdateDefault = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoUpdatePostponed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoUpdateHighPriority = 3,
	}
	
	/// <summary>
	/// An authentication URL configuration for the authenticator app of an identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseAuthenticationAppLinkConfig
	{
		
		/// <summary>
		/// An authentication url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// A managed configuration resource contains the set of managed properties defined by the app developer in the app's managed configurations schema, as well as any configuration variables defined for the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedConfiguration
	{
		
		/// <summary>
		/// A configuration variables resource contains the managed configuration settings ID to be applied to a single user, as well as the variable set that is attributed to the user. The variable set will be used to replace placeholders in the managed configuration settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationVariables")]
		public ConfigurationVariables ConfigurationVariables { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The set of managed properties for this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedProperty")]
		public ManagedProperty[] ManagedProperty { get; set; }
		
		/// <summary>
		/// The ID of the product that the managed configuration is for, e.g. "app:com.google.android.gm".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// A managed property of a managed configuration. The property must match one of the properties in the app restrictions schema of the product. Exactly one of the value fields must be populated, and it must match the property's type in the app restrictions schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedProperty
	{
		
		/// <summary>
		/// The unique key that identifies the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The boolean value - this will only be present if type of the property is bool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueBool")]
		public System.Nullable<System.Boolean> ValueBool { get; set; }
		
		/// <summary>
		/// A bundle of managed properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueBundle")]
		public ManagedPropertyBundle ValueBundle { get; set; }
		
		/// <summary>
		/// The list of bundles of properties - this will only be present if type of the property is bundle_array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueBundleArray")]
		public ManagedPropertyBundle[] ValueBundleArray { get; set; }
		
		/// <summary>
		/// The integer value - this will only be present if type of the property is integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueInteger")]
		public System.Nullable<System.Int32> ValueInteger { get; set; }
		
		/// <summary>
		/// The string value - this will only be present if type of the property is string, choice or hidden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueString")]
		public string ValueString { get; set; }
		
		/// <summary>
		/// The list of string values - this will only be present if type of the property is multiselect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueStringArray")]
		public string[] ValueStringArray { get; set; }
	}
	
	/// <summary>
	/// A bundle of managed properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedPropertyBundle
	{
		
		/// <summary>
		/// The list of managed properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedProperty")]
		public ManagedProperty[] ManagedProperty { get; set; }
	}
	
	/// <summary>
	/// Device report updated with the latest app states for managed apps on the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceReport
	{
		
		/// <summary>
		/// List of app states set by managed apps on the device. App states are defined by the app's developers. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appState")]
		public AppState[] AppState { get; set; }
		
		/// <summary>
		/// The timestamp of the last report update in milliseconds since epoch. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestampMillis")]
		public string LastUpdatedTimestampMillis { get; set; }
	}
	
	/// <summary>
	/// An event generated when an updated device report is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceReportUpdateEvent
	{
		
		/// <summary>
		/// The Android ID of the device. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Device report updated with the latest app states for managed apps on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public DeviceReport Report { get; set; }
		
		/// <summary>
		/// The ID of the user. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// The state of a user's device, as accessed by the getState and setState methods on device resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceState
	{
		
		/// <summary>
		/// The state of the Google account on the device. "enabled" indicates that the Google account on the device can be used to access Google services (including Google Play), while "disabled" means that it cannot. A new device is initially in the "disabled" state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountState")]
		public System.Nullable<DeviceStateAccountState> AccountState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceStateAccountState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevicesListResponse
	{
		
		/// <summary>
		/// A managed device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device[] Device { get; set; }
	}
	
	/// <summary>
	/// An Enterprises resource represents the binding between an EMM and a specific organization. That binding can be instantiated in one of two different ways using this API as follows: - For Google managed domain customers, the process involves using Enterprises.enroll and Enterprises.setAccount (in conjunction with artifacts obtained from the Admin console and the Google API Console) and submitted to the EMM through a more-or-less manual process. - For managed Google Play Accounts customers, the process involves using Enterprises.generateSignupUrl and Enterprises.completeSignup in conjunction with the managed Google Play sign-up UI (Google-provided mechanism) to create the binding without manual steps. As an EMM, you can support either or both approaches in your EMM console. See Create an Enterprise for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Enterprise
	{
		
		/// <summary>
		/// Admins of the enterprise. This is only supported for enterprises created via the EMM-initiated flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="administrator")]
		public Administrator[] Administrator { get; set; }
		
		/// <summary>
		/// Contains settings for Google-provided user authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAuthenticationSettings")]
		public GoogleAuthenticationSettings GoogleAuthenticationSettings { get; set; }
		
		/// <summary>
		/// The unique ID for the enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the enterprise, for example, "Example, Inc".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The enterprise's primary domain, such as "example.com".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryDomain")]
		public string PrimaryDomain { get; set; }
	}
	
	/// <summary>
	/// Contains settings for Google-provided user authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAuthenticationSettings
	{
		
		/// <summary>
		/// Whether dedicated devices are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dedicatedDevicesAllowed")]
		public System.Nullable<GoogleAuthenticationSettingsDedicatedDevicesAllowed> DedicatedDevicesAllowed { get; set; }
		
		/// <summary>
		/// Whether Google authentication is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAuthenticationRequired")]
		public System.Nullable<GoogleAuthenticationSettingsGoogleAuthenticationRequired> GoogleAuthenticationRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAuthenticationSettingsDedicatedDevicesAllowed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicatedDevicesAllowedUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disallowed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allowed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAuthenticationSettingsGoogleAuthenticationRequired
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		googleAuthenticationRequiredUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notRequired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 2,
	}
	
	/// <summary>
	/// A service account that can be used to authenticate as the enterprise to API calls that require such authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterpriseAccount
	{
		
		/// <summary>
		/// The email address of the service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountEmail")]
		public string AccountEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterprisesListResponse
	{
		
		/// <summary>
		/// An enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterprise")]
		public Enterprise[] Enterprise { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnterprisesSendTestPushNotificationResponse
	{
		
		/// <summary>
		/// The message ID of the test push notification that was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The name of the Cloud Pub/Sub topic to which notifications for this enterprise's enrolled account will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topicName")]
		public string TopicName { get; set; }
	}
	
	/// <summary>
	/// The presence of an Entitlements resource indicates that a user has the right to use a particular app. Entitlements are user specific, not device specific. This allows a user with an entitlement to an app to install the app on all their devices. It's also possible for a user to hold an entitlement to an app without installing the app on any device. The API can be used to create an entitlement. As an option, you can also use the API to trigger the installation of an app on all a user's managed devices at the same time the entitlement is created. If the app is free, creating the entitlement also creates a group license for that app. For paid apps, creating the entitlement consumes one license, and that license remains consumed until the entitlement is removed. If the enterprise hasn't purchased enough licenses, then no entitlement is created and the installation fails. An entitlement is also not created for an app if the app requires permissions that the enterprise hasn't accepted. If an entitlement is deleted, the app may be uninstalled from a user's device. As a best practice, uninstall the app by calling Installs.delete() before deleting the entitlement. Entitlements for apps that a user pays for on an unmanaged profile have "userPurchase" as the entitlement reason. These entitlements cannot be removed via the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entitlement
	{
		
		/// <summary>
		/// The ID of the product that the entitlement is for. For example, "app:com.google.android.gm".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The reason for the entitlement. For example, "free" for free apps. This property is temporary: it will be replaced by the acquisition kind field of group licenses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<EntitlementReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntitlementReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groupLicense = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		userPurchase = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntitlementsListResponse
	{
		
		/// <summary>
		/// An entitlement of a user to a product (e.g. an app). For example, a free app that they have installed, or a paid app that they have been allocated a license to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entitlement")]
		public Entitlement[] Entitlement { get; set; }
	}
	
	/// <summary>
	/// Group license objects allow you to keep track of licenses (called entitlements) for both free and paid apps. For a free app, a group license is created when an enterprise admin first approves the product in Google Play or when the first entitlement for the product is created for a user via the API. For a paid app, a group license object is only created when an enterprise admin purchases the product in Google Play for the first time. Use the API to query group licenses. A Grouplicenses resource includes the total number of licenses purchased (paid apps only) and the total number of licenses currently in use. In other words, the total number of Entitlements that exist for the product. Only one group license object is created per product and group license objects are never deleted. If a product is unapproved, its group license remains. This allows enterprise admins to keep track of any remaining entitlements for the product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupLicense
	{
		
		/// <summary>
		/// How this group license was acquired. "bulkPurchase" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is "free" (for free products).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acquisitionKind")]
		public System.Nullable<GroupLicenseAcquisitionKind> AcquisitionKind { get; set; }
		
		/// <summary>
		/// Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public System.Nullable<GroupLicenseApproval> Approval { get; set; }
		
		/// <summary>
		/// The total number of provisioned licenses for this product. Returned by read operations, but ignored in write operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numProvisioned")]
		public System.Nullable<System.Int32> NumProvisioned { get; set; }
		
		/// <summary>
		/// The number of purchased licenses (possibly in multiple purchases). If this field is omitted, then there is no limit on the number of licenses that can be provisioned (for example, if the acquisition kind is "free").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numPurchased")]
		public System.Nullable<System.Int32> NumPurchased { get; set; }
		
		/// <summary>
		/// The permission approval status of the product. This field is only set if the product is approved. Possible states are: - "currentApproved", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), - "needsReapproval", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, - "allCurrentAndFutureApproved", the current permissions are approved and any future permission updates will be automatically approved without administrator review. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public System.Nullable<GroupLicensePermissions> Permissions { get; set; }
		
		/// <summary>
		/// The ID of the product that the license is for. For example, "app:com.google.android.gm".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupLicenseAcquisitionKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bulkPurchase = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupLicenseApproval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unapproved = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupLicensePermissions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currentApproved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		needsReapproval = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allCurrentAndFutureApproved = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupLicenseUsersListResponse
	{
		
		/// <summary>
		/// A user of an enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User[] User { get; set; }
	}
	
	/// <summary>
	/// A Users resource represents an account associated with an enterprise. The account may be specific to a device or to an individual user (who can then use the account across multiple devices). The account may provide access to managed Google Play only, or to other Google services, depending on the identity model: - The Google managed domain identity model requires synchronization to Google account sources (via primaryEmail). - The managed Google Play Accounts identity model provides a dynamic means for enterprises to create user or device accounts as needed. These accounts provide access to managed Google Play. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// A unique identifier you create for this user, such as "user342" or "asset#44418". Do not use personally identifiable information (PII) for this property. Must always be set for EMM-managed users. Not set for Google-managed users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountIdentifier")]
		public string AccountIdentifier { get; set; }
		
		/// <summary>
		/// The type of account that this user represents. A userAccount can be installed on multiple devices, but a deviceAccount is specific to a single device. An EMM-managed user (emmManaged) can be either type (userAccount, deviceAccount), but a Google-managed user (googleManaged) is always a userAccount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public System.Nullable<UserAccountType> AccountType { get; set; }
		
		/// <summary>
		/// The name that will appear in user interfaces. Setting this property is optional when creating EMM-managed users. If you do set this property, use something generic about the organization (such as "Example, Inc.") or your name (as EMM). Not used for Google-managed user accounts. @mutable androidenterprise.users.update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The unique ID for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The entity that manages the user. With googleManaged users, the source of truth is Google so EMMs have to make sure a Google Account exists for the user. With emmManaged users, the EMM is in charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementType")]
		public System.Nullable<UserManagementType> ManagementType { get; set; }
		
		/// <summary>
		/// The user's primary email address, for example, "jsmith@example.com". Will always be set for Google managed users and not set for EMM managed users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryEmail")]
		public string PrimaryEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		userAccount = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserManagementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		googleManaged = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		emmManaged = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupLicensesListResponse
	{
		
		/// <summary>
		/// A group license for a product approved for use in the enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupLicense")]
		public GroupLicense[] GroupLicense { get; set; }
	}
	
	/// <summary>
	/// The existence of an Installs resource indicates that an app is installed on a particular device (or that an install is pending). The API can be used to create an install resource using the update method. This triggers the actual install of the app on the device. If the user does not already have an entitlement for the app, then an attempt is made to create one. If this fails (for example, because the app is not free and there is no available license), then the creation of the install fails. The API can also be used to update an installed app. If the update method is used on an existing install, then the app will be updated to the latest available version. Note that it is not possible to force the installation of a specific version of an app: the version code is read-only. If a user installs an app themselves (as permitted by the enterprise), then again an install resource and possibly an entitlement resource are automatically created. The API can also be used to delete an install resource, which triggers the removal of the app from the device. Note that deleting an install does not automatically remove the corresponding entitlement, even if there are no remaining installs. The install resource will also be deleted if the user uninstalls the app themselves.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Install
	{
		
		/// <summary>
		/// Install state. The state "installPending" means that an install request has recently been made and download to the device is in progress. The state "installed" means that the app has been installed. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installState")]
		public System.Nullable<InstallInstallState> InstallState { get; set; }
		
		/// <summary>
		/// The ID of the product that the install is for. For example, "app:com.google.android.gm".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The version of the installed product. Guaranteed to be set only if the install state is "installed".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstallInstallState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		installed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		installPending = 1,
	}
	
	/// <summary>
	/// An event generated when an app installation failed on a device
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstallFailureEvent
	{
		
		/// <summary>
		/// The Android ID of the device. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Additional details on the failure if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureDetails")]
		public string FailureDetails { get; set; }
		
		/// <summary>
		/// The reason for the installation failure. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureReason")]
		public System.Nullable<InstallFailureEventFailureReason> FailureReason { get; set; }
		
		/// <summary>
		/// The id of the product (e.g. "app:com.google.android.gm") for which the install failure event occured. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The ID of the user. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstallFailureEventFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timeout = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstallsListResponse
	{
		
		/// <summary>
		/// An installation of an app for a user on a specific device. The existence of an install implies that the user must have an entitlement to the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="install")]
		public Install[] Install { get; set; }
	}
	
	/// <summary>
	/// A localized string with its locale.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalizedText
	{
		
		/// <summary>
		/// The BCP47 tag for a locale. (e.g. "en-US", "de").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// The text localized in the associated locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedConfigurationsForDeviceListResponse
	{
		
		/// <summary>
		/// A managed configuration for an app on a specific device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedConfigurationForDevice")]
		public ManagedConfiguration[] ManagedConfigurationForDevice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedConfigurationsForUserListResponse
	{
		
		/// <summary>
		/// A managed configuration for an app for a specific user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedConfigurationForUser")]
		public ManagedConfiguration[] ManagedConfigurationForUser { get; set; }
	}
	
	/// <summary>
	/// A managed configurations settings resource contains the set of managed properties that have been configured for an Android app to be applied to a set of users. The app's developer would have defined configurable properties in the managed configurations schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedConfigurationsSettings
	{
		
		/// <summary>
		/// The last updated time of the managed configuration settings in milliseconds since 1970-01-01T00:00:00Z.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestampMillis")]
		public string LastUpdatedTimestampMillis { get; set; }
		
		/// <summary>
		/// The ID of the managed configurations settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mcmId")]
		public string McmId { get; set; }
		
		/// <summary>
		/// The name of the managed configurations settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedConfigurationsSettingsListResponse
	{
		
		/// <summary>
		/// A managed configurations settings for an app that may be assigned to a group of users in an enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedConfigurationsSettings")]
		public ManagedConfigurationsSettings[] ManagedConfigurationsSettings { get; set; }
	}
	
	/// <summary>
	/// An event generated when a new device is ready to be managed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewDeviceEvent
	{
		
		/// <summary>
		/// The Android ID of the device. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Policy app on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dpcPackageName")]
		public string DpcPackageName { get; set; }
		
		/// <summary>
		/// Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations. Possible values include: - "managedDevice", a device where the DPC is set as device owner, - "managedProfile", a device where the DPC is set as profile owner. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managementType")]
		public System.Nullable<NewDeviceEventManagementType> ManagementType { get; set; }
		
		/// <summary>
		/// The ID of the user. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NewDeviceEventManagementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		managedDevice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		managedProfile = 1,
	}
	
	/// <summary>
	/// An event generated when new permissions are added to an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewPermissionsEvent
	{
		
		/// <summary>
		/// The set of permissions that the enterprise admin has already approved for this application. Use Permissions.Get on the EMM API to retrieve details about these permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvedPermissions")]
		public string[] ApprovedPermissions { get; set; }
		
		/// <summary>
		/// The id of the product (e.g. "app:com.google.android.gm") for which new permissions were added. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// The set of permissions that the app is currently requesting. Use Permissions.Get on the EMM API to retrieve details about these permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedPermissions")]
		public string[] RequestedPermissions { get; set; }
	}
	
	/// <summary>
	/// A notification of one event relating to an enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Notification
	{
		
		/// <summary>
		/// An event generated when a new app version is uploaded to Google Play and its app restrictions schema changed. To fetch the app restrictions schema for an app, use Products.getAppRestrictionsSchema on the EMM API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appRestrictionsSchemaChangeEvent")]
		public AppRestrictionsSchemaChangeEvent AppRestrictionsSchemaChangeEvent { get; set; }
		
		/// <summary>
		/// An event generated when a new version of an app is uploaded to Google Play. Notifications are sent for new public versions only: alpha, beta, or canary versions do not generate this event. To fetch up-to-date version history for an app, use Products.Get on the EMM API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appUpdateEvent")]
		public AppUpdateEvent AppUpdateEvent { get; set; }
		
		/// <summary>
		/// An event generated when an updated device report is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceReportUpdateEvent")]
		public DeviceReportUpdateEvent DeviceReportUpdateEvent { get; set; }
		
		/// <summary>
		/// The ID of the enterprise for which the notification is sent. This will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterpriseId")]
		public string EnterpriseId { get; set; }
		
		/// <summary>
		/// An event generated when an app installation failed on a device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installFailureEvent")]
		public InstallFailureEvent InstallFailureEvent { get; set; }
		
		/// <summary>
		/// An event generated when a new device is ready to be managed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newDeviceEvent")]
		public NewDeviceEvent NewDeviceEvent { get; set; }
		
		/// <summary>
		/// An event generated when new permissions are added to an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPermissionsEvent")]
		public NewPermissionsEvent NewPermissionsEvent { get; set; }
		
		/// <summary>
		/// Type of the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<NotificationNotificationType> NotificationType { get; set; }
		
		/// <summary>
		/// An event generated when a product's approval status is changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productApprovalEvent")]
		public ProductApprovalEvent ProductApprovalEvent { get; set; }
		
		/// <summary>
		/// An event generated whenever a product's availability changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productAvailabilityChangeEvent")]
		public ProductAvailabilityChangeEvent ProductAvailabilityChangeEvent { get; set; }
		
		/// <summary>
		/// The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampMillis")]
		public string TimestampMillis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NotificationNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		testNotification = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productApproval = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		installFailure = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appUpdate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newPermissions = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appRestricionsSchemaChange = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productAvailabilityChange = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		newDevice = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceReportUpdate = 9,
	}
	
	/// <summary>
	/// An event generated when a product's approval status is changed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductApprovalEvent
	{
		
		/// <summary>
		/// Whether the product was approved or unapproved. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<ProductApprovalEventApproved> Approved { get; set; }
		
		/// <summary>
		/// The id of the product (e.g. "app:com.google.android.gm") for which the approval status has changed. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductApprovalEventApproved
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unapproved = 2,
	}
	
	/// <summary>
	/// An event generated whenever a product's availability changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductAvailabilityChangeEvent
	{
		
		/// <summary>
		/// The new state of the product. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityStatus")]
		public System.Nullable<ProductAvailabilityChangeEventAvailabilityStatus> AvailabilityStatus { get; set; }
		
		/// <summary>
		/// The id of the product (e.g. "app:com.google.android.gm") for which the product availability changed. This field will always be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductAvailabilityChangeEventAvailabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		removed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unpublished = 3,
	}
	
	/// <summary>
	/// A resource returned by the PullNotificationSet API, which contains a collection of notifications for enterprises associated with the service account authenticated for the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationSet
	{
		
		/// <summary>
		/// The notifications received, or empty if no notifications are present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notification")]
		public Notification[] Notification { get; set; }
		
		/// <summary>
		/// The notification set ID, required to mark the notification as received with the Enterprises.AcknowledgeNotification API. This will be omitted if no notifications are present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSetId")]
		public string NotificationSetId { get; set; }
	}
	
	/// <summary>
	/// Information about the current page. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageInfo
	{
		
		/// <summary>
		/// Maximum number of results returned in one page. ! The number of results included in the API response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultPerPage")]
		public System.Nullable<System.Int32> ResultPerPage { get; set; }
		
		/// <summary>
		/// Index of the first result returned in the current page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// Total number of results available on the backend ! The total number of results in the result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	/// <summary>
	/// A Permissions resource represents some extra capability, to be granted to an Android app, which requires explicit consent. An enterprise admin must consent to these permissions on behalf of their users before an entitlement for the app can be created. The permissions collection is read-only. The information provided for each permission (localized name and description) is intended to be used in the MDM user interface when obtaining consent from the enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Permission
	{
		
		/// <summary>
		/// A longer description of the Permissions resource, giving more details of what it affects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An opaque string uniquely identifying the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
	}
	
	/// <summary>
	/// A Products resource represents an app in the Google Play store that is available to at least some users in the enterprise. (Some apps are restricted to a single enterprise, and no information about them is made available outside that enterprise.) The information provided for each product (localized name, icon, link to the full Google Play details page) is intended to allow a basic representation of the product within an EMM user interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Product
	{
		
		/// <summary>
		/// Represents the list of app restrictions available to be pre-configured for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appRestrictionsSchema")]
		public AppRestrictionsSchema AppRestrictionsSchema { get; set; }
		
		/// <summary>
		/// The tracks visible to the enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appTracks")]
		public TrackInfo[] AppTracks { get; set; }
		
		/// <summary>
		/// App versions currently available for this product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appVersion")]
		public AppVersion[] AppVersion { get; set; }
		
		/// <summary>
		/// The name of the author of the product (for example, the app developer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		/// <summary>
		/// The countries which this app is available in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableCountries")]
		public string[] AvailableCountries { get; set; }
		
		/// <summary>
		/// Deprecated, use appTracks instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableTracks")]
		public AppVersionTrack[] AvailableTracks { get; set; }
		
		/// <summary>
		/// The app category (e.g. RACING, SOCIAL, etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The content rating for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentRating")]
		public System.Nullable<ProductContentRating> ContentRating { get; set; }
		
		/// <summary>
		/// The localized promotional description, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A link to the (consumer) Google Play details page for the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailsUrl")]
		public string DetailsUrl { get; set; }
		
		/// <summary>
		/// How and to whom the package is made available. The value publicGoogleHosted means that the package is available through the Play store and not restricted to a specific enterprise. The value privateGoogleHosted means that the package is a private app (restricted to an enterprise) but hosted by Google. The value privateSelfHosted means that the package is a private app (restricted to an enterprise) and is privately hosted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distributionChannel")]
		public System.Nullable<ProductDistributionChannel> DistributionChannel { get; set; }
		
		/// <summary>
		/// Noteworthy features (if any) of this product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public string[] Features { get; set; }
		
		/// <summary>
		/// The localized full app store description, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullDescription")]
		public string FullDescription { get; set; }
		
		/// <summary>
		/// A link to an image that can be used as an icon for the product. This image is suitable for use at up to 512px x 512px.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// The approximate time (within 7 days) the app was last published, expressed in milliseconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedTimestampMillis")]
		public string LastUpdatedTimestampMillis { get; set; }
		
		/// <summary>
		/// The minimum Android SDK necessary to run the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minAndroidSdkVersion")]
		public System.Nullable<System.Int32> MinAndroidSdkVersion { get; set; }
		
		/// <summary>
		/// A list of permissions required by the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public ProductPermission[] Permissions { get; set; }
		
		/// <summary>
		/// A string of the form *app:<package name>*. For example, app:com.google.android.gm represents the Gmail app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Whether this product is free, free with in-app purchases, or paid. If the pricing is unknown, this means the product is not generally available anymore (even though it might still be available to people who own it).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productPricing")]
		public System.Nullable<ProductProductPricing> ProductPricing { get; set; }
		
		/// <summary>
		/// A description of the recent changes made to the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentChanges")]
		public string RecentChanges { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresContainerApp")]
		public System.Nullable<System.Boolean> RequiresContainerApp { get; set; }
		
		/// <summary>
		/// A list of screenshot links representing the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshotUrls")]
		public string[] ScreenshotUrls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingCertificate")]
		public ProductSigningCertificate SigningCertificate { get; set; }
		
		/// <summary>
		/// A link to a smaller image that can be used as an icon for the product. This image is suitable for use at up to 128px x 128px.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallIconUrl")]
		public string SmallIconUrl { get; set; }
		
		/// <summary>
		/// The name of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// A link to the managed Google Play details page for the product, for use by an Enterprise admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workDetailsUrl")]
		public string WorkDetailsUrl { get; set; }
	}
	
	/// <summary>
	/// Id to name association of a track.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackInfo
	{
		
		/// <summary>
		/// A modifiable name for a track. This is the visible name in the play developer console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackAlias")]
		public string TrackAlias { get; set; }
		
		/// <summary>
		/// Unmodifiable, unique track identifier. This identifier is the releaseTrackId in the url of the play developer console page that displays the track information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackId")]
		public string TrackId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductContentRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ratingUnknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preTeen = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		teen = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mature = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductDistributionChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicGoogleHosted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		privateGoogleHosted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		privateSelfHosted = 2,
	}
	
	/// <summary>
	/// A product permissions resource represents the set of permissions required by a specific app and whether or not they have been accepted by an enterprise admin. The API can be used to read the set of permissions, and also to update the set to indicate that permissions have been accepted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPermission
	{
		
		/// <summary>
		/// An opaque string uniquely identifying the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
		
		/// <summary>
		/// Whether the permission has been accepted or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ProductPermissionState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductPermissionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accepted = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductProductPricing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		freeWithInAppPurchase = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paid = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductSigningCertificate
	{
		
		/// <summary>
		/// The base64 urlsafe encoded SHA1 hash of the certificate. (This field is deprecated in favor of SHA2-256. It should not be used and may be removed at any time.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateHashSha1")]
		public string CertificateHashSha1 { get; set; }
		
		/// <summary>
		/// The base64 urlsafe encoded SHA2-256 hash of the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateHashSha256")]
		public string CertificateHashSha256 { get; set; }
	}
	
	/// <summary>
	/// Information about the permissions required by a specific app and whether they have been accepted by the enterprise.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPermissions
	{
		
		/// <summary>
		/// The permissions required by the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public ProductPermission[] Permission { get; set; }
		
		/// <summary>
		/// The ID of the app that the permissions relate to, e.g. "app:com.google.android.gm".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// A set of products.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductSet
	{
		
		/// <summary>
		/// The list of product IDs making up the set of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string[] ProductId { get; set; }
		
		/// <summary>
		/// The interpretation of this product set. "unknown" should never be sent and is ignored if received. "whitelist" means that the user is entitled to access the product set. "includeAll" means that all products are accessible, including products that are approved, products with revoked approval, and products that have never been approved. "allApproved" means that the user is entitled to access all products that are approved for the enterprise. If the value is "allApproved" or "includeAll", the productId field is ignored. If no value is provided, it is interpreted as "whitelist" for backwards compatibility. Further "allApproved" or "includeAll" does not enable automatic visibility of "alpha" or "beta" tracks for Android app. Use ProductVisibility to enable "alpha" or "beta" tracks per user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productSetBehavior")]
		public System.Nullable<ProductSetProductSetBehavior> ProductSetBehavior { get; set; }
		
		/// <summary>
		/// Additional list of product IDs making up the product set. Unlike the productID array, in this list It's possible to specify which tracks (alpha, beta, production) of a product are visible to the user. See ProductVisibility and its fields for more information. Specifying the same product ID both here and in the productId array is not allowed and it will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productVisibility")]
		public ProductVisibility[] ProductVisibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductSetProductSetBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whitelist = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		includeAll = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allApproved = 3,
	}
	
	/// <summary>
	/// A product to be made visible to a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductVisibility
	{
		
		/// <summary>
		/// The product ID to make visible to the user. Required for each item in the productVisibility list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Grants the user visibility to the specified product track(s), identified by trackIds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackIds")]
		public string[] TrackIds { get; set; }
		
		/// <summary>
		/// Deprecated. Use trackIds instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public AppVersionTrack[] Tracks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsApproveRequest
	{
		
		/// <summary>
		/// Information on an approval URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalUrlInfo")]
		public ApprovalUrlInfo ApprovalUrlInfo { get; set; }
		
		/// <summary>
		/// Sets how new permission requests for the product are handled. "allPermissions" automatically approves all current and future permissions for the product. "currentPermissionsOnly" approves the current set of permissions for the product, but any future permissions added through updates will require manual reapproval. If not specified, only the current set of permissions will be approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvedPermissions")]
		public System.Nullable<ProductsApproveRequestApprovedPermissions> ApprovedPermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProductsApproveRequestApprovedPermissions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currentPermissionsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allPermissions = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsGenerateApprovalUrlResponse
	{
		
		/// <summary>
		/// A URL that can be rendered in an iframe to display the permissions (if any) of a product. This URL can be used to approve the product only once and only within 24 hours of being generated, using the Products.approve call. If the product is currently unapproved and has no permissions, this URL will point to an empty page. If the product is currently approved, a URL will only be generated if that product has added permissions since it was last approved, and the URL will only display those new permissions that have not yet been accepted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductsListResponse
	{
		
		/// <summary>
		/// Information about the current page. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		/// <summary>
		/// Information about a product (e.g. an app) in the Google Play store, for display to an enterprise admin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product[] Product { get; set; }
		
		/// <summary>
		/// Pagination information returned by a List operation when token pagination is enabled. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned. When using token pagination, clients should use the next/previous token to get another page of the result. The presence or absence of next/previous token indicates whether a next/previous page is available and provides a mean of accessing this page. ListRequest.page_token should be set to either next_page_token or previous_page_token to access another page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
	}
	
	/// <summary>
	/// Pagination information returned by a List operation when token pagination is enabled. List operations that supports paging return only one "page" of results. This protocol buffer message describes the page that has been returned. When using token pagination, clients should use the next/previous token to get another page of the result. The presence or absence of next/previous token indicates whether a next/previous page is available and provides a mean of accessing this page. ListRequest.page_token should be set to either next_page_token or previous_page_token to access another page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenPagination
	{
		
		/// <summary>
		/// Tokens to pass to the standard list field 'page_token'. Whenever available, tokens are preferred over manipulating start_index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousPageToken")]
		public string PreviousPageToken { get; set; }
	}
	
	/// <summary>
	/// A service account identity, including the name and credentials that can be used to authenticate as the service account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccount
	{
		
		/// <summary>
		/// Credentials that can be used to authenticate as a service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public ServiceAccountKey Key { get; set; }
		
		/// <summary>
		/// The account name of the service account, in the form of an email address. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Credentials that can be used to authenticate as a service account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccountKey
	{
		
		/// <summary>
		/// The body of the private key credentials file, in string format. This is only populated when the ServiceAccountKey is created, and is not stored by Google.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// An opaque, unique identifier for this ServiceAccountKey. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Public key data for the credentials file. This is an X.509 cert. If you are using the googleCredentials key type, this is identical to the cert that can be retrieved by using the X.509 cert url inside of the credentials file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicData")]
		public string PublicData { get; set; }
		
		/// <summary>
		/// The file format of the generated key data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ServiceAccountKeyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceAccountKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		googleCredentials = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pkcs12 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccountKeysListResponse
	{
		
		/// <summary>
		/// The service account credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountKey")]
		public ServiceAccountKey[] ServiceAccountKey { get; set; }
	}
	
	/// <summary>
	/// A resource returned by the GenerateSignupUrl API, which contains the Signup URL and Completion Token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignupInfo
	{
		
		/// <summary>
		/// An opaque token that will be required, along with the Enterprise Token, for obtaining the enterprise resource from CompleteSignup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionToken")]
		public string CompletionToken { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A URL under which the Admin can sign up for an enterprise. The page pointed to cannot be rendered in an iframe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Definition of a managed Google Play store cluster, a list of products displayed as part of a store page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StoreCluster
	{
		
		/// <summary>
		/// Unique ID of this cluster. Assigned by the server. Immutable once assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public LocalizedText[] Name { get; set; }
		
		/// <summary>
		/// String (US-ASCII only) used to determine order of this cluster within the parent page's elements. Page elements are sorted in lexicographic order of this field. Duplicated values are allowed, but ordering between elements with duplicate order is undefined. The value of this field is never visible to a user, it is used solely for the purpose of defining an ordering. Maximum length is 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderInPage")]
		public string OrderInPage { get; set; }
		
		/// <summary>
		/// List of products in the order they are displayed in the cluster. There should not be duplicates within a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string[] ProductId { get; set; }
	}
	
	/// <summary>
	/// General setting for the managed Google Play store layout, currently only specifying the page to display the first time the store is opened.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StoreLayout
	{
		
		/// <summary>
		/// The ID of the store page to be used as the homepage. The homepage is the first page shown in the managed Google Play Store. Not specifying a homepage is equivalent to setting the store layout type to "basic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homepageId")]
		public string HomepageId { get; set; }
		
		/// <summary>
		/// The store layout type. By default, this value is set to "basic" if the homepageId field is not set, and to "custom" otherwise. If set to "basic", the layout will consist of all approved apps that have been whitelisted for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storeLayoutType")]
		public System.Nullable<StoreLayoutStoreLayoutType> StoreLayoutType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StoreLayoutStoreLayoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		basic = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StoreLayoutClustersListResponse
	{
		
		/// <summary>
		/// A store cluster of an enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public StoreCluster[] Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StoreLayoutPagesListResponse
	{
		
		/// <summary>
		/// A store page of an enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public StorePage[] Page { get; set; }
	}
	
	/// <summary>
	/// Definition of a managed Google Play store page, made of a localized name and links to other pages. A page also contains clusters defined as a subcollection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorePage
	{
		
		/// <summary>
		/// Unique ID of this page. Assigned by the server. Immutable once assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Ordered list of pages a user should be able to reach from this page. The list can't include this page. It is recommended that the basic pages are created first, before adding the links between pages. The API doesn't verify that the pages exist or the pages are reachable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string[] Link { get; set; }
		
		/// <summary>
		/// Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public LocalizedText[] Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsersListResponse
	{
		
		/// <summary>
		/// A user of an enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User[] User { get; set; }
	}
	
	/// <summary>
	/// A WebApps resource represents a web app created for an enterprise. Web apps are published to managed Google Play and can be distributed like other Android apps. On a user's device, a web app opens its specified URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebApp
	{
		
		/// <summary>
		/// The display mode of the web app. Possible values include: - "minimalUi", the device's status bar, navigation bar, the app's URL, and a refresh button are visible when the app is open. For HTTP URLs, you can only select this option. - "standalone", the device's status bar and navigation bar are visible when the app is open. - "fullScreen", the app opens in full screen mode, hiding the device's status and navigation bars. All browser UI elements, page URL, system status bar and back button are not visible, and the web app takes up the entirety of the available display area. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayMode")]
		public System.Nullable<WebAppDisplayMode> DisplayMode { get; set; }
		
		/// <summary>
		/// A list of icons representing this website. If absent, a default icon (for create) or the current icon (for update) will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public WebAppIcon[] Icons { get; set; }
		
		/// <summary>
		/// A flag whether the app has been published to the Play store yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublished")]
		public System.Nullable<System.Boolean> IsPublished { get; set; }
		
		/// <summary>
		/// The start URL, i.e. the URL that should load when the user opens the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startUrl")]
		public string StartUrl { get; set; }
		
		/// <summary>
		/// The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The current version of the app. Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app up-to-date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public string VersionCode { get; set; }
		
		/// <summary>
		/// The ID of the application. A string of the form "app:<package name>" where the package name always starts with the prefix "com.google.enterprise.webapp." followed by a random id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webAppId")]
		public string WebAppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebAppDisplayMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		displayModeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimalUi = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standalone = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fullScreen = 3,
	}
	
	/// <summary>
	/// Icon for a web app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebAppIcon
	{
		
		/// <summary>
		/// The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 "Base 64 Encoding with URL and Filename Safe Alphabet"). - The image type can be png or jpg. - The image should ideally be square. - The image should ideally have a size of 512x512. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageData")]
		public string ImageData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebAppsListResponse
	{
		
		/// <summary>
		/// The manifest describing a web app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webApp")]
		public WebApp[] WebApp { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Looks up an enterprise by domain name. This is only supported for enterprises created via the Google-initiated creation flow. Lookup of the id is not needed for enterprises created via the EMM-initiated flow since the EMM learns the enterprise ID in the callback specified in the Enterprises.generateSignupUrl call.
		/// Androidenterprise_enterprises_list androidenterprise/v1/enterprises
		/// </summary>
		/// <param name="domain">Required. The exact primary domain name of the enterprise to look up.</param>
		/// <returns>Successful response</returns>
		public async Task<EnterprisesListResponse> Androidenterprise_enterprises_listAsync(string domain, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises?domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EnterprisesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Acknowledges notifications that were received from Enterprises.PullNotificationSet to prevent subsequent calls from returning the same notifications.
		/// Androidenterprise_enterprises_acknowledgeNotificationSet androidenterprise/v1/enterprises/acknowledgeNotificationSet
		/// </summary>
		/// <param name="notificationSetId">The notification set ID as returned by Enterprises.PullNotificationSet. This must be provided.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_enterprises_acknowledgeNotificationSetAsync(string notificationSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/acknowledgeNotificationSet?notificationSetId=" + (notificationSetId==null? "" : System.Uri.EscapeDataString(notificationSetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Completes the signup flow, by specifying the Completion token and Enterprise token. This request must not be called multiple times for a given Enterprise Token.
		/// Androidenterprise_enterprises_completeSignup androidenterprise/v1/enterprises/completeSignup
		/// </summary>
		/// <param name="completionToken">The Completion token initially returned by GenerateSignupUrl.</param>
		/// <param name="enterpriseToken">The Enterprise token appended to the Callback URL.</param>
		/// <returns>Successful response</returns>
		public async Task<Enterprise> Androidenterprise_enterprises_completeSignupAsync(string completionToken, string enterpriseToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/completeSignup?completionToken=" + (completionToken==null? "" : System.Uri.EscapeDataString(completionToken))+"&enterpriseToken=" + (enterpriseToken==null? "" : System.Uri.EscapeDataString(enterpriseToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Enterprise>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enrolls an enterprise with the calling EMM.
		/// Androidenterprise_enterprises_enroll androidenterprise/v1/enterprises/enroll
		/// </summary>
		/// <param name="token">Required. The token provided by the enterprise to register the EMM.</param>
		/// <returns>Successful response</returns>
		public async Task<Enterprise> Androidenterprise_enterprises_enrollAsync(string token, Enterprise requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/enroll?token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Enterprise>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pulls and returns a notification set for the enterprises associated with the service account authenticated for the request. The notification set may be empty if no notification are pending. A notification set returned needs to be acknowledged within 20 seconds by calling Enterprises.AcknowledgeNotificationSet, unless the notification set is empty. Notifications that are not acknowledged within the 20 seconds will eventually be included again in the response to another PullNotificationSet request, and those that are never acknowledged will ultimately be deleted according to the Google Cloud Platform Pub/Sub system policy. Multiple requests might be performed concurrently to retrieve notifications, in which case the pending notifications (if any) will be split among each caller, if any are pending. If no notifications are present, an empty notification list is returned. Subsequent requests may return more notifications once they become available.
		/// Androidenterprise_enterprises_pullNotificationSet androidenterprise/v1/enterprises/pullNotificationSet
		/// </summary>
		/// <param name="requestMode">The request mode for pulling notifications. Specifying waitForNotifications will cause the request to block and wait until one or more notifications are present, or return an empty notification list if no notifications are present after some time. Specifying returnImmediately will cause the request to immediately return the pending notifications, or an empty list if no notifications are present. If omitted, defaults to waitForNotifications.</param>
		/// <returns>Successful response</returns>
		public async Task<NotificationSet> Androidenterprise_enterprises_pullNotificationSetAsync(Androidenterprise_enterprises_pullNotificationSetRequestMode requestMode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/pullNotificationSet?requestMode=" + requestMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a sign-up URL.
		/// Androidenterprise_enterprises_generateSignupUrl androidenterprise/v1/enterprises/signupUrl
		/// </summary>
		/// <param name="callbackUrl">The callback URL to which the Admin will be redirected after successfully creating an enterprise. Before redirecting there the system will add a single query parameter to this URL named "enterpriseToken" which will contain an opaque token to be used for the CompleteSignup request. Beware that this means that the URL will be parsed, the parameter added and then a new URL formatted, i.e. there may be some minor formatting changes and, more importantly, the URL must be well-formed so that it can be parsed.</param>
		/// <returns>Successful response</returns>
		public async Task<SignupInfo> Androidenterprise_enterprises_generateSignupUrlAsync(string callbackUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/signupUrl?callbackUrl=" + (callbackUrl==null? "" : System.Uri.EscapeDataString(callbackUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SignupInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the name and domain of an enterprise.
		/// Androidenterprise_enterprises_get androidenterprise/v1/enterprises/{enterpriseId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<Enterprise> Androidenterprise_enterprises_getAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Enterprise>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the account that will be used to authenticate to the API as the enterprise.
		/// Androidenterprise_enterprises_setAccount androidenterprise/v1/enterprises/{enterpriseId}/account
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<EnterpriseAccount> Androidenterprise_enterprises_setAccountAsync(string enterpriseId, EnterpriseAccount requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EnterpriseAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a token for device enrollment. The DPC can encode this token within the QR/NFC/zero-touch enrollment payload or fetch it before calling the on-device API to authenticate the user. The token can be generated for each device or reused across multiple devices.
		/// Androidenterprise_enterprises_createEnrollmentToken androidenterprise/v1/enterprises/{enterpriseId}/createEnrollmentToken
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="deviceType">Whether it’s a dedicated device or a knowledge worker device.</param>
		/// <returns>Successful response</returns>
		public async Task<CreateEnrollmentTokenResponse> Androidenterprise_enterprises_createEnrollmentTokenAsync(string enterpriseId, Androidenterprise_enterprises_createEnrollmentTokenDeviceType deviceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/createEnrollmentToken&deviceType=" + deviceType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateEnrollmentTokenResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a unique token to access an embeddable UI. To generate a web UI, pass the generated token into the managed Google Play javascript API. Each token may only be used to start one UI session. See the javascript API documentation for further information.
		/// Androidenterprise_enterprises_createWebToken androidenterprise/v1/enterprises/{enterpriseId}/createWebToken
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<AdministratorWebToken> Androidenterprise_enterprises_createWebTokenAsync(string enterpriseId, AdministratorWebTokenSpec requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/createWebToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdministratorWebToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves IDs of all products for which the enterprise has a group license. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_grouplicenses_list androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<GroupLicensesListResponse> Androidenterprise_grouplicenses_listAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/groupLicenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupLicensesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of an enterprise's group license for a product. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_grouplicenses_get androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="groupLicenseId">The ID of the product the group license is for, e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<GroupLicense> Androidenterprise_grouplicenses_getAsync(string enterpriseId, string groupLicenseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/groupLicenses/"+ (groupLicenseId==null? "" : System.Uri.EscapeDataString(groupLicenseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupLicense>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the IDs of the users who have been granted entitlements under the license. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_grouplicenseusers_list androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="groupLicenseId">The ID of the product the group license is for, e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<GroupLicenseUsersListResponse> Androidenterprise_grouplicenseusers_listAsync(string enterpriseId, string groupLicenseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/groupLicenses/"+ (groupLicenseId==null? "" : System.Uri.EscapeDataString(groupLicenseId))+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupLicenseUsersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finds approved products that match a query, or all approved products if there is no query. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_products_list androidenterprise/v1/enterprises/{enterpriseId}/products
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="approved">Specifies whether to search among all products (false) or among only products that have been approved (true). Only "true" is supported, and should be specified.</param>
		/// <param name="language">The BCP47 tag for the user's preferred language (e.g. "en-US", "de"). Results are returned in the language best matching the preferred language.</param>
		/// <param name="maxResults">Defines how many results the list operation should return. The default number depends on the resource collection.</param>
		/// <param name="query">The search query as typed in the Google Play store search box. If omitted, all approved apps will be returned (using the pagination parameters), including apps that are not available in the store (e.g. unpublished apps).</param>
		/// <param name="token">Defines the token of the page to return, usually taken from TokenPagination. This can only be used if token paging is enabled.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductsListResponse> Androidenterprise_products_listAsync(string enterpriseId, bool approved, string language, int maxResults, string query, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products&approved="+approved+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&maxResults="+maxResults+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of a product for display to an enterprise admin.
		/// Androidenterprise_products_get androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="productId">The ID of the product, e.g. "app:com.google.android.gm".</param>
		/// <param name="language">The BCP47 tag for the user's preferred language (e.g. "en-US", "de").</param>
		/// <returns>Successful response</returns>
		public async Task<Product> Androidenterprise_products_getAsync(string enterpriseId, string productId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Product>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the schema that defines the configurable properties for this product. All products have a schema, but this schema may be empty if no managed configurations have been defined. This schema can be used to populate a UI that allows an admin to configure the product. To apply a managed configuration based on the schema obtained using this API, see Managed Configurations through Play.
		/// Androidenterprise_products_getAppRestrictionsSchema androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="productId">The ID of the product.</param>
		/// <param name="language">The BCP47 tag for the user's preferred language (e.g. "en-US", "de").</param>
		/// <returns>Successful response</returns>
		public async Task<AppRestrictionsSchema> Androidenterprise_products_getAppRestrictionsSchemaAsync(string enterpriseId, string productId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/appRestrictionsSchema&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AppRestrictionsSchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approves the specified product and the relevant app permissions, if any. The maximum number of products that you can approve per enterprise customer is 1,000. To learn how to use managed Google Play to design and create a store layout to display approved products to your users, see Store Layout Design. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_products_approve androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="productId">The ID of the product.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_products_approveAsync(string enterpriseId, string productId, ProductsApproveRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a URL that can be rendered in an iframe to display the permissions (if any) of a product. An enterprise admin must view these permissions and accept them on behalf of their organization in order to approve that product. Admins should accept the displayed permissions by interacting with a separate UI element in the EMM console, which in turn should trigger the use of this URL as the approvalUrlInfo.approvalUrl property in a Products.approve call to approve the product. This URL can only be used to display permissions for up to 1 day. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_products_generateApprovalUrl androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="productId">The ID of the product.</param>
		/// <param name="languageCode">The BCP 47 language code used for permission names and descriptions in the returned iframe, for instance "en-US".</param>
		/// <returns>Successful response</returns>
		public async Task<ProductsGenerateApprovalUrlResponse> Androidenterprise_products_generateApprovalUrlAsync(string enterpriseId, string productId, string languageCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/generateApprovalUrl&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductsGenerateApprovalUrlResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the managed configurations settings for the specified app.
		/// Androidenterprise_managedconfigurationssettings_list androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="productId">The ID of the product for which the managed configurations settings applies to.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedConfigurationsSettingsListResponse> Androidenterprise_managedconfigurationssettings_listAsync(string enterpriseId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/managedConfigurationsSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedConfigurationsSettingsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Android app permissions required by this app.
		/// Androidenterprise_products_getPermissions androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="productId">The ID of the product.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductPermissions> Androidenterprise_products_getPermissionsAsync(string enterpriseId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductPermissions>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unapproves the specified product (and the relevant app permissions, if any) **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_products_unapprove androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="productId">The ID of the product.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_products_unapproveAsync(string enterpriseId, string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/unapprove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends a test notification to validate the EMM integration with the Google Cloud Pub/Sub service for this enterprise.
		/// Androidenterprise_enterprises_sendTestPushNotification androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<EnterprisesSendTestPushNotificationResponse> Androidenterprise_enterprises_sendTestPushNotificationAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/sendTestPushNotification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EnterprisesSendTestPushNotificationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a service account and credentials. The service account can be bound to the enterprise by calling setAccount. The service account is unique to this enterprise and EMM, and will be deleted if the enterprise is unbound. The credentials contain private key data and are not stored server-side. This method can only be called after calling Enterprises.Enroll or Enterprises.CompleteSignup, and before Enterprises.SetAccount; at other times it will return an error. Subsequent calls after the first will generate a new, unique set of credentials, and invalidate the previously generated credentials. Once the service account is bound to the enterprise, it can be managed using the serviceAccountKeys resource.
		/// Androidenterprise_enterprises_getServiceAccount androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="keyType">The type of credential to return with the service account. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<ServiceAccount> Androidenterprise_enterprises_getServiceAccountAsync(string enterpriseId, ServiceAccountKeyType keyType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/serviceAccount&keyType=" + keyType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all active credentials for the service account associated with this enterprise. Only the ID and key type are returned. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount.
		/// Androidenterprise_serviceaccountkeys_list androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<ServiceAccountKeysListResponse> Androidenterprise_serviceaccountkeys_listAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/serviceAccountKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceAccountKeysListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates new credentials for the service account associated with this enterprise. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount. Only the type of the key should be populated in the resource to be inserted.
		/// Androidenterprise_serviceaccountkeys_insert androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<ServiceAccountKey> Androidenterprise_serviceaccountkeys_insertAsync(string enterpriseId, ServiceAccountKey requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/serviceAccountKeys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ServiceAccountKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes and invalidates the specified credentials for the service account associated with this enterprise. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount.
		/// Androidenterprise_serviceaccountkeys_delete androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="keyId">The ID of the key.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_serviceaccountkeys_deleteAsync(string enterpriseId, string keyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/serviceAccountKeys/"+ (keyId==null? "" : System.Uri.EscapeDataString(keyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the store layout for the enterprise. If the store layout has not been set, returns "basic" as the store layout type and no homepage.
		/// Androidenterprise_enterprises_getStoreLayout androidenterprise/v1/enterprises/{enterpriseId}/storeLayout
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<StoreLayout> Androidenterprise_enterprises_getStoreLayoutAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreLayout>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the store layout for the enterprise. By default, storeLayoutType is set to "basic" and the basic store layout is enabled. The basic layout only contains apps approved by the admin, and that have been added to the available product set for a user (using the setAvailableProductSet call). Apps on the page are sorted in order of their product ID value. If you create a custom store layout (by setting storeLayoutType = "custom" and setting a homepage), the basic store layout is disabled.
		/// Androidenterprise_enterprises_setStoreLayout androidenterprise/v1/enterprises/{enterpriseId}/storeLayout
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<StoreLayout> Androidenterprise_enterprises_setStoreLayoutAsync(string enterpriseId, StoreLayout requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreLayout>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of all pages in the store.
		/// Androidenterprise_storelayoutpages_list androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<StoreLayoutPagesListResponse> Androidenterprise_storelayoutpages_listAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreLayoutPagesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new store page.
		/// Androidenterprise_storelayoutpages_insert androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<StorePage> Androidenterprise_storelayoutpages_insertAsync(string enterpriseId, StorePage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorePage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a store page.
		/// Androidenterprise_storelayoutpages_delete androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_storelayoutpages_deleteAsync(string enterpriseId, string pageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of a store page.
		/// Androidenterprise_storelayoutpages_get androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <returns>Successful response</returns>
		public async Task<StorePage> Androidenterprise_storelayoutpages_getAsync(string enterpriseId, string pageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorePage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the content of a store page.
		/// Androidenterprise_storelayoutpages_update androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <returns>Successful response</returns>
		public async Task<StorePage> Androidenterprise_storelayoutpages_updateAsync(string enterpriseId, string pageId, StorePage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StorePage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of all clusters on the specified page.
		/// Androidenterprise_storelayoutclusters_list androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <returns>Successful response</returns>
		public async Task<StoreLayoutClustersListResponse> Androidenterprise_storelayoutclusters_listAsync(string enterpriseId, string pageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"/clusters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreLayoutClustersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new cluster in a page.
		/// Androidenterprise_storelayoutclusters_insert androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <returns>Successful response</returns>
		public async Task<StoreCluster> Androidenterprise_storelayoutclusters_insertAsync(string enterpriseId, string pageId, StoreCluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"/clusters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreCluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a cluster.
		/// Androidenterprise_storelayoutclusters_delete androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <param name="clusterId">The ID of the cluster.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_storelayoutclusters_deleteAsync(string enterpriseId, string pageId, string clusterId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of a cluster.
		/// Androidenterprise_storelayoutclusters_get androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <param name="clusterId">The ID of the cluster.</param>
		/// <returns>Successful response</returns>
		public async Task<StoreCluster> Androidenterprise_storelayoutclusters_getAsync(string enterpriseId, string pageId, string clusterId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreCluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a cluster.
		/// Androidenterprise_storelayoutclusters_update androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="pageId">The ID of the page.</param>
		/// <param name="clusterId">The ID of the cluster.</param>
		/// <returns>Successful response</returns>
		public async Task<StoreCluster> Androidenterprise_storelayoutclusters_updateAsync(string enterpriseId, string pageId, string clusterId, StoreCluster requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/storeLayout/pages/"+ (pageId==null? "" : System.Uri.EscapeDataString(pageId))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StoreCluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unenrolls an enterprise from the calling EMM.
		/// Androidenterprise_enterprises_unenroll androidenterprise/v1/enterprises/{enterpriseId}/unenroll
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_enterprises_unenrollAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/unenroll";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Looks up a user by primary email address. This is only supported for Google-managed users. Lookup of the id is not needed for EMM-managed users because the id is already returned in the result of the Users.insert call.
		/// Androidenterprise_users_list androidenterprise/v1/enterprises/{enterpriseId}/users
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="email">Required. The exact primary email address of the user to look up.</param>
		/// <returns>Successful response</returns>
		public async Task<UsersListResponse> Androidenterprise_users_listAsync(string enterpriseId, string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users&email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UsersListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new EMM-managed user. The Users resource passed in the body of the request should include an accountIdentifier and an accountType. If a corresponding user already exists with the same account identifier, the user will be updated with the resource. In this case only the displayName field can be changed.
		/// Androidenterprise_users_insert androidenterprise/v1/enterprises/{enterpriseId}/users
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Androidenterprise_users_insertAsync(string enterpriseId, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deleted an EMM-managed user.
		/// Androidenterprise_users_delete androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_users_deleteAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a user's details.
		/// Androidenterprise_users_get androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Androidenterprise_users_getAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of an EMM-managed user. Can be used with EMM-managed users only (not Google managed users). Pass the new details in the Users resource in the request body. Only the displayName field can be changed. Other fields must either be unset or have the currently active value.
		/// Androidenterprise_users_update androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Androidenterprise_users_updateAsync(string enterpriseId, string userId, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates an authentication token which the device policy client can use to provision the given EMM-managed user account on a device. The generated token is single-use and expires after a few minutes. You can provision a maximum of 10 devices per user. This call only works with EMM-managed accounts.
		/// Androidenterprise_users_generateAuthenticationToken androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<AuthenticationToken> Androidenterprise_users_generateAuthenticationTokenAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/authenticationToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthenticationToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the set of products a user is entitled to access. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_users_getAvailableProductSet androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductSet> Androidenterprise_users_getAvailableProductSetAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/availableProductSet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the set of products that a user is entitled to access (referred to as *whitelisted* products). Only products that are approved or products that were previously approved (products with revoked approval) can be whitelisted. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_users_setAvailableProductSet androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<ProductSet> Androidenterprise_users_setAvailableProductSetAsync(string enterpriseId, string userId, ProductSet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/availableProductSet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes access to all devices currently provisioned to the user. The user will no longer be able to use the managed Play store on any of their managed devices. This call only works with EMM-managed accounts.
		/// Androidenterprise_users_revokeDeviceAccess androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_users_revokeDeviceAccessAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/deviceAccess";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the IDs of all of a user's devices.
		/// Androidenterprise_devices_list androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<DevicesListResponse> Androidenterprise_devices_listAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DevicesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of a device.
		/// Androidenterprise_devices_get androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful response</returns>
		public async Task<Device> Androidenterprise_devices_getAsync(string enterpriseId, string userId, string deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Device>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the device policy. To ensure the policy is properly enforced, you need to prevent unmanaged accounts from accessing Google Play by setting the allowed_accounts in the managed configuration for the Google Play package. See restrict accounts in Google Play. When provisioning a new device, you should set the device policy using this method before adding the managed Google Play Account to the device, otherwise the policy will not be applied for a short period of time after adding the account to the device.
		/// Androidenterprise_devices_update androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="updateMask">Mask that identifies which fields to update. If not set, all modifiable fields will be modified. When set in a query parameter, this field should be specified as updateMask=<field1>,<field2>,...</param>
		/// <returns>Successful response</returns>
		public async Task<Device> Androidenterprise_devices_updateAsync(string enterpriseId, string userId, string deviceId, string updateMask, Device requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Device>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a report containing any changes in app states on the device since the last report was generated. You can call this method up to 3 times every 24 hours for a given device. If you exceed the quota, then the Google Play EMM API returns HTTP 429 Too Many Requests.
		/// Androidenterprise_devices_forceReportUpload androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/forceReportUpload
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_devices_forceReportUploadAsync(string enterpriseId, string userId, string deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/forceReportUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of all apps installed on the specified device.
		/// Androidenterprise_installs_list androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <returns>Successful response</returns>
		public async Task<InstallsListResponse> Androidenterprise_installs_listAsync(string enterpriseId, string userId, string deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/installs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InstallsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests to remove an app from a device. A call to get or list will still show the app as installed on the device until it is actually removed. A successful response indicates that a removal request has been sent to the device. The call will be considered successful even if the app is not present on the device (e.g. it was never installed, or was removed by the user).
		/// Androidenterprise_installs_delete androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <param name="installId">The ID of the product represented by the install, e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_installs_deleteAsync(string enterpriseId, string userId, string deviceId, string installId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/installs/"+ (installId==null? "" : System.Uri.EscapeDataString(installId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of an installation of an app on a device.
		/// Androidenterprise_installs_get androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <param name="installId">The ID of the product represented by the install, e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<Install> Androidenterprise_installs_getAsync(string enterpriseId, string userId, string deviceId, string installId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/installs/"+ (installId==null? "" : System.Uri.EscapeDataString(installId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Install>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests to install the latest version of an app to a device. If the app is already installed, then it is updated to the latest version if necessary.
		/// Androidenterprise_installs_update androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <param name="installId">The ID of the product represented by the install, e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<Install> Androidenterprise_installs_updateAsync(string enterpriseId, string userId, string deviceId, string installId, Install requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/installs/"+ (installId==null? "" : System.Uri.EscapeDataString(installId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Install>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the per-device managed configurations for the specified device. Only the ID is set.
		/// Androidenterprise_managedconfigurationsfordevice_list androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedConfigurationsForDeviceListResponse> Androidenterprise_managedconfigurationsfordevice_listAsync(string enterpriseId, string userId, string deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/managedConfigurationsForDevice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedConfigurationsForDeviceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a per-device managed configuration for an app for the specified device.
		/// Androidenterprise_managedconfigurationsfordevice_delete androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <param name="managedConfigurationForDeviceId">The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_managedconfigurationsfordevice_deleteAsync(string enterpriseId, string userId, string deviceId, string managedConfigurationForDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/managedConfigurationsForDevice/"+ (managedConfigurationForDeviceId==null? "" : System.Uri.EscapeDataString(managedConfigurationForDeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of a per-device managed configuration.
		/// Androidenterprise_managedconfigurationsfordevice_get androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <param name="managedConfigurationForDeviceId">The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedConfiguration> Androidenterprise_managedconfigurationsfordevice_getAsync(string enterpriseId, string userId, string deviceId, string managedConfigurationForDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/managedConfigurationsForDevice/"+ (managedConfigurationForDeviceId==null? "" : System.Uri.EscapeDataString(managedConfigurationForDeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or updates a per-device managed configuration for an app for the specified device.
		/// Androidenterprise_managedconfigurationsfordevice_update androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The Android ID of the device.</param>
		/// <param name="managedConfigurationForDeviceId">The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedConfiguration> Androidenterprise_managedconfigurationsfordevice_updateAsync(string enterpriseId, string userId, string deviceId, string managedConfigurationForDeviceId, ManagedConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/managedConfigurationsForDevice/"+ (managedConfigurationForDeviceId==null? "" : System.Uri.EscapeDataString(managedConfigurationForDeviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves whether a device's access to Google services is enabled or disabled. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services. This is only supported for Google-managed users.
		/// Androidenterprise_devices_getState androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceState> Androidenterprise_devices_getStateAsync(string enterpriseId, string userId, string deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceState>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets whether a device's access to Google services is enabled or disabled. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services. This is only supported for Google-managed users.
		/// Androidenterprise_devices_setState androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceState> Androidenterprise_devices_setStateAsync(string enterpriseId, string userId, string deviceId, DeviceState requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeviceState>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all entitlements for the specified user. Only the ID is set. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_entitlements_list androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<EntitlementsListResponse> Androidenterprise_entitlements_listAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/entitlements";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EntitlementsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an entitlement to an app for a user. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_entitlements_delete androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="entitlementId">The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_entitlements_deleteAsync(string enterpriseId, string userId, string entitlementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/entitlements/"+ (entitlementId==null? "" : System.Uri.EscapeDataString(entitlementId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of an entitlement. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_entitlements_get androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="entitlementId">The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<Entitlement> Androidenterprise_entitlements_getAsync(string enterpriseId, string userId, string entitlementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/entitlements/"+ (entitlementId==null? "" : System.Uri.EscapeDataString(entitlementId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Entitlement>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or updates an entitlement to an app for a user. **Note:** This item has been deprecated. New integrations cannot use this method and can refer to our new recommendations.
		/// Androidenterprise_entitlements_update androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="entitlementId">The ID of the entitlement (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <param name="install">Set to true to also install the product on all the user's devices where possible. Failure to install on one or more devices will not prevent this operation from returning successfully, as long as the entitlement was successfully assigned to the user.</param>
		/// <returns>Successful response</returns>
		public async Task<Entitlement> Androidenterprise_entitlements_updateAsync(string enterpriseId, string userId, string entitlementId, bool install, Entitlement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/entitlements/"+ (entitlementId==null? "" : System.Uri.EscapeDataString(entitlementId))+"&install="+install;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Entitlement>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the per-user managed configurations for the specified user. Only the ID is set.
		/// Androidenterprise_managedconfigurationsforuser_list androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedConfigurationsForUserListResponse> Androidenterprise_managedconfigurationsforuser_listAsync(string enterpriseId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/managedConfigurationsForUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedConfigurationsForUserListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a per-user managed configuration for an app for the specified user.
		/// Androidenterprise_managedconfigurationsforuser_delete androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="managedConfigurationForUserId">The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_managedconfigurationsforuser_deleteAsync(string enterpriseId, string userId, string managedConfigurationForUserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/managedConfigurationsForUser/"+ (managedConfigurationForUserId==null? "" : System.Uri.EscapeDataString(managedConfigurationForUserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of a per-user managed configuration for an app for the specified user.
		/// Androidenterprise_managedconfigurationsforuser_get androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="managedConfigurationForUserId">The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedConfiguration> Androidenterprise_managedconfigurationsforuser_getAsync(string enterpriseId, string userId, string managedConfigurationForUserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/managedConfigurationsForUser/"+ (managedConfigurationForUserId==null? "" : System.Uri.EscapeDataString(managedConfigurationForUserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or updates the managed configuration settings for an app for the specified user. If you support the Managed configurations iframe, you can apply managed configurations to a user by specifying an mcmId and its associated configuration variables (if any) in the request. Alternatively, all EMMs can apply managed configurations by passing a list of managed properties.
		/// Androidenterprise_managedconfigurationsforuser_update androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="userId">The ID of the user.</param>
		/// <param name="managedConfigurationForUserId">The ID of the managed configuration (a product ID), e.g. "app:com.google.android.gm".</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedConfiguration> Androidenterprise_managedconfigurationsforuser_updateAsync(string enterpriseId, string userId, string managedConfigurationForUserId, ManagedConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/managedConfigurationsForUser/"+ (managedConfigurationForUserId==null? "" : System.Uri.EscapeDataString(managedConfigurationForUserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedConfiguration>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of all web apps for a given enterprise.
		/// Androidenterprise_webapps_list androidenterprise/v1/enterprises/{enterpriseId}/webApps
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<WebAppsListResponse> Androidenterprise_webapps_listAsync(string enterpriseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/webApps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebAppsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new web app for the enterprise.
		/// Androidenterprise_webapps_insert androidenterprise/v1/enterprises/{enterpriseId}/webApps
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <returns>Successful response</returns>
		public async Task<WebApp> Androidenterprise_webapps_insertAsync(string enterpriseId, WebApp requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/webApps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing web app.
		/// Androidenterprise_webapps_delete androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="webAppId">The ID of the web app.</param>
		/// <returns>Successful response</returns>
		public async Task Androidenterprise_webapps_deleteAsync(string enterpriseId, string webAppId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/webApps/"+ (webAppId==null? "" : System.Uri.EscapeDataString(webAppId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an existing web app.
		/// Androidenterprise_webapps_get androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="webAppId">The ID of the web app.</param>
		/// <returns>Successful response</returns>
		public async Task<WebApp> Androidenterprise_webapps_getAsync(string enterpriseId, string webAppId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/webApps/"+ (webAppId==null? "" : System.Uri.EscapeDataString(webAppId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing web app.
		/// Androidenterprise_webapps_update androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}
		/// </summary>
		/// <param name="enterpriseId">The ID of the enterprise.</param>
		/// <param name="webAppId">The ID of the web app.</param>
		/// <returns>Successful response</returns>
		public async Task<WebApp> Androidenterprise_webapps_updateAsync(string enterpriseId, string webAppId, WebApp requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/enterprises/"+ (enterpriseId==null? "" : System.Uri.EscapeDataString(enterpriseId))+"/webApps/"+ (webAppId==null? "" : System.Uri.EscapeDataString(webAppId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebApp>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details of an Android app permission for display to an enterprise admin.
		/// Androidenterprise_permissions_get androidenterprise/v1/permissions/{permissionId}
		/// </summary>
		/// <param name="permissionId">The ID of the permission.</param>
		/// <param name="language">The BCP47 tag for the user's preferred language (e.g. "en-US", "de")</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Androidenterprise_permissions_getAsync(string permissionId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "androidenterprise/v1/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Permission>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Androidenterprise_enterprises_pullNotificationSetRequestMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waitForNotifications = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		returnImmediately = 1,
	}
	
	public enum Androidenterprise_enterprises_createEnrollmentTokenDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicatedDevice = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		knowledgeWorker = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
