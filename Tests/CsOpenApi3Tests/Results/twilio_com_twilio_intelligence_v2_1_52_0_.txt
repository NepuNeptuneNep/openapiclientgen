//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Intelligencev2service
	{
		
		/// <summary>
		/// The unique SID identifier of the Account the Service belongs to.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Instructs the Speech Recognition service to automatically redact PII from all transcripts made on this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_redaction")]
		public System.Nullable<System.Boolean> Auto_redaction { get; set; }
		
		/// <summary>
		/// Instructs the Speech Recognition service to automatically transcribe all recordings made on the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_transcribe")]
		public System.Nullable<System.Boolean> Auto_transcribe { get; set; }
		
		/// <summary>
		/// Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models.
		///Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_logging")]
		public System.Nullable<System.Boolean> Data_logging { get; set; }
		
		/// <summary>
		/// The date that this Service was created, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date that this Service was updated, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// A human readable description of this resource, up to 64 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The default language code of the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		/// <summary>
		/// Instructs the Speech Recognition service to automatically redact PII from all transcripts media made on this service. The auto_redaction flag must be enabled, results in error otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_redaction")]
		public System.Nullable<System.Boolean> Media_redaction { get; set; }
		
		/// <summary>
		/// A 34 character string that uniquely identifies this Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		public string Sid { get; set; }
		
		/// <summary>
		/// Provides a unique and addressable name to be assigned to this Service, assigned by the developer, to be optionally used in addition to SID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique_name")]
		public string Unique_name { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The version number of this Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhook_http_method")]
		public System.Nullable<Intelligencev2serviceWebhook_http_method> Webhook_http_method { get; set; }
		
		/// <summary>
		/// The URL Twilio will request when executing the Webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhook_url")]
		public string Webhook_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Intelligencev2serviceWebhook_http_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GET")]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POST")]
		POST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NULL")]
		NULL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Intelligencev2transcript
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Media Channel describing Transcript Source and Participant Mapping
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public object Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_key")]
		public string Customer_key { get; set; }
		
		/// <summary>
		/// Data logging allows Twilio to improve the quality of the speech recognition & language understanding services through using customer data to refine, fine tune and evaluate machine learning models.
		///Note: Data logging cannot be activated via API, only via www.twilio.com, as it requires additional consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data_logging")]
		public System.Nullable<System.Boolean> Data_logging { get; set; }
		
		/// <summary>
		/// The date that this Transcript was created, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date that this Transcript was updated, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The duration of this Transcript's source
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// The default language code of the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language_code")]
		public string Language_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The date that this Transcript's media was started, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_start_time")]
		public System.Nullable<System.DateTimeOffset> Media_start_time { get; set; }
		
		/// <summary>
		/// If the transcript has been redacted, a redacted alternative of the transcript will be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redaction")]
		public System.Nullable<System.Boolean> Redaction { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Service.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GA[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// A 34 character string that uniquely identifies this Transcript.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GT[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Intelligencev2transcriptStatus> Status { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Intelligencev2transcriptStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Intelligencev2transcriptmedia
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Downloadable URL for media, if stored in Twilio AI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_url")]
		public string Media_url { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Service.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GA[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// The unique SID identifier of the Transcript.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GT[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Intelligencev2transcriptoperator_result
	{
		
		/// <summary>
		/// Boolean to tell if extract Language Understanding Processing model matches results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extract_match")]
		public System.Nullable<System.Boolean> Extract_match { get; set; }
		
		/// <summary>
		/// List of text extraction results. This might be available on classify-extract model outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extract_results")]
		public object Extract_results { get; set; }
		
		/// <summary>
		/// The labels probabilities. This might be available on conversation classify model outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label_probabilities")]
		public object Label_probabilities { get; set; }
		
		/// <summary>
		/// Percentage of 'matching' class needed to consider a sentence matches
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match_probability")]
		public System.Nullable<System.Double> Match_probability { get; set; }
		
		/// <summary>
		/// The name of the applied Language Understanding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Normalized output of extraction stage which matches Label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="normalized_result")]
		public string Normalized_result { get; set; }
		
		/// <summary>
		/// A 34 character string that identifies this Language Understanding operator sid.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^LY[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^LY[0-9a-fA-F]{32}$")]
		public string Operator_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator_type")]
		public System.Nullable<Intelligencev2transcriptoperator_resultOperator_type> Operator_type { get; set; }
		
		/// <summary>
		/// The 'matching' class. This might be available on conversation classify model outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicted_label")]
		public string Predicted_label { get; set; }
		
		/// <summary>
		/// Percentage of 'matching' class needed to consider a sentence matches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicted_probability")]
		public System.Nullable<System.Double> Predicted_probability { get; set; }
		
		/// <summary>
		/// Output of a text generation operator for example Conversation Sumamary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text_generation_results")]
		public object Text_generation_results { get; set; }
		
		/// <summary>
		/// A 34 character string that uniquely identifies this Transcript.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcript_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GT[0-9a-fA-F]{32}$")]
		public string Transcript_sid { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Boolean to tell if Utterance matches results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utterance_match")]
		public System.Nullable<System.Boolean> Utterance_match { get; set; }
		
		/// <summary>
		/// List of mapped utterance object which matches sentences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utterance_results")]
		public string[] Utterance_results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Intelligencev2transcriptoperator_resultOperator_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation_classify")]
		conversation_classify = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="utterance_classify")]
		utterance_classify = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="extract")]
		extract = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="extract_normalize")]
		extract_normalize = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pii_extract")]
		pii_extract = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Intelligencev2transcriptsentence
	{
		
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// Offset from the beginning of the transcript when this sentence ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.Double> End_time { get; set; }
		
		/// <summary>
		/// The channel number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_channel")]
		public System.Nullable<System.Int32> Media_channel { get; set; }
		
		/// <summary>
		/// The index of the sentence in the transcript.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentence_index")]
		public System.Nullable<System.Int32> Sentence_index { get; set; }
		
		/// <summary>
		/// A 34 character string that uniquely identifies this Sentence.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GX[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GX[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// Offset from the beginning of the transcript when this sentence starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Double> Start_time { get; set; }
		
		/// <summary>
		/// Transcript text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcript")]
		public string Transcript { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Operator_result_enum_operator_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="conversation_classify")]
		conversation_classify = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="utterance_classify")]
		utterance_classify = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="extract")]
		extract = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="extract_normalize")]
		extract_normalize = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pii_extract")]
		pii_extract = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Service_enum_http_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GET")]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POST")]
		POST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NULL")]
		NULL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Transcript_enum_call_direction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inbound")]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="outbound")]
		outbound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal")]
		_internal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Transcript_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="queued")]
		queued = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of all Services for an account.
		/// ListService v2/Services
		/// </summary>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListServiceReturn> ListServiceAsync(int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Services?PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific Service.
		/// DeleteService v2/Services/{Sid}
		/// </summary>
		/// <param name="Sid">A 34 character string that uniquely identifies this Service.</param>
		public async Task DeleteServiceAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Services/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a specific Service.
		/// FetchService v2/Services/{Sid}
		/// </summary>
		/// <param name="Sid">A 34 character string that uniquely identifies this Service.</param>
		/// <returns>OK</returns>
		public async Task<Intelligencev2service> FetchServiceAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Services/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Intelligencev2service>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of Transcripts for a given service.
		/// ListTranscript v2/Transcripts
		/// </summary>
		/// <param name="ServiceSid">The unique SID identifier of the Service.</param>
		/// <param name="BeforeStartTime">Filter by before StartTime.</param>
		/// <param name="AfterStartTime">Filter by after StartTime.</param>
		/// <param name="BeforeDateCreated">Filter by before DateCreated.</param>
		/// <param name="AfterDateCreated">Filter by after DateCreated.</param>
		/// <param name="Status">Filter by status.</param>
		/// <param name="LanguageCode">Filter by Language Code.</param>
		/// <param name="SourceSid">Filter by SourceSid.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListTranscriptReturn> ListTranscriptAsync(string ServiceSid, string BeforeStartTime, string AfterStartTime, string BeforeDateCreated, string AfterDateCreated, string Status, string LanguageCode, string SourceSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Transcripts?ServiceSid=" + (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"&BeforeStartTime=" + (BeforeStartTime==null? "" : System.Uri.EscapeDataString(BeforeStartTime))+"&AfterStartTime=" + (AfterStartTime==null? "" : System.Uri.EscapeDataString(AfterStartTime))+"&BeforeDateCreated=" + (BeforeDateCreated==null? "" : System.Uri.EscapeDataString(BeforeDateCreated))+"&AfterDateCreated=" + (AfterDateCreated==null? "" : System.Uri.EscapeDataString(AfterDateCreated))+"&Status=" + (Status==null? "" : System.Uri.EscapeDataString(Status))+"&LanguageCode=" + (LanguageCode==null? "" : System.Uri.EscapeDataString(LanguageCode))+"&SourceSid=" + (SourceSid==null? "" : System.Uri.EscapeDataString(SourceSid))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTranscriptReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a specific Transcript.
		/// DeleteTranscript v2/Transcripts/{Sid}
		/// </summary>
		/// <param name="Sid">A 34 character string that uniquely identifies this Transcript.</param>
		public async Task DeleteTranscriptAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Transcripts/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a specific Transcript.
		/// FetchTranscript v2/Transcripts/{Sid}
		/// </summary>
		/// <param name="Sid">A 34 character string that uniquely identifies this Transcript.</param>
		/// <returns>OK</returns>
		public async Task<Intelligencev2transcript> FetchTranscriptAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Transcripts/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Intelligencev2transcript>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get download URLs for media if possible
		/// FetchMedia v2/Transcripts/{Sid}/Media
		/// </summary>
		/// <param name="Sid">The unique SID identifier of the Transcript.</param>
		/// <param name="Redacted">Grant access to PII Redacted/Unredacted Media. If redaction is enabled, the default is `true` to access redacted media.</param>
		/// <returns>OK</returns>
		public async Task<Intelligencev2transcriptmedia> FetchMediaAsync(string Sid, bool Redacted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Transcripts/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid))+"/Media&Redacted="+Redacted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Intelligencev2transcriptmedia>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of Operator Results for the given Transcript.
		/// ListOperatorResult v2/Transcripts/{TranscriptSid}/OperatorResults
		/// </summary>
		/// <param name="TranscriptSid">A 34 character string that uniquely identifies this Transcript.</param>
		/// <param name="Redacted">Grant access to PII redacted/unredacted Language Understanding operator. If redaction is enabled, the default is True.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListOperatorResultReturn> ListOperatorResultAsync(string TranscriptSid, bool Redacted, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Transcripts/"+ (TranscriptSid==null? "" : System.Uri.EscapeDataString(TranscriptSid))+"/OperatorResults&Redacted="+Redacted+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperatorResultReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a specific Operator Result for the given Transcript.
		/// FetchOperatorResult v2/Transcripts/{TranscriptSid}/OperatorResults/{OperatorSid}
		/// </summary>
		/// <param name="TranscriptSid">A 34 character string that uniquely identifies this Transcript.</param>
		/// <param name="OperatorSid">A 34 character string that identifies this Language Understanding operator sid.</param>
		/// <param name="Redacted">Grant access to PII redacted/unredacted Language Understanding operator. If redaction is enabled, the default is True.</param>
		/// <returns>OK</returns>
		public async Task<Intelligencev2transcriptoperator_result> FetchOperatorResultAsync(string TranscriptSid, string OperatorSid, bool Redacted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Transcripts/"+ (TranscriptSid==null? "" : System.Uri.EscapeDataString(TranscriptSid))+"/OperatorResults/"+ (OperatorSid==null? "" : System.Uri.EscapeDataString(OperatorSid))+"&Redacted="+Redacted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Intelligencev2transcriptoperator_result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Transcript Sentences by TranscriptSid
		/// ListSentence v2/Transcripts/{TranscriptSid}/Sentences
		/// </summary>
		/// <param name="TranscriptSid">The unique SID identifier of the Transcript.</param>
		/// <param name="Redacted">Grant access to PII Redacted/Unredacted Sentences. If redaction is enabled, the default is `true` to access redacted sentences.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListSentenceReturn> ListSentenceAsync(string TranscriptSid, bool Redacted, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/Transcripts/"+ (TranscriptSid==null? "" : System.Uri.EscapeDataString(TranscriptSid))+"/Sentences&Redacted="+Redacted+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSentenceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListServiceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListServiceReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Intelligencev2service[] Services { get; set; }
	}
	
	public class ListServiceReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListTranscriptReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListTranscriptReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transcripts")]
		public Intelligencev2transcript[] Transcripts { get; set; }
	}
	
	public class ListTranscriptReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListOperatorResultReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListOperatorResultReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator_results")]
		public Intelligencev2transcriptoperator_result[] Operator_results { get; set; }
	}
	
	public class ListOperatorResultReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListSentenceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListSentenceReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentences")]
		public Intelligencev2transcriptsentence[] Sentences { get; set; }
	}
	
	public class ListSentenceReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
