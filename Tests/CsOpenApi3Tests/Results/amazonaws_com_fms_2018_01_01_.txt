//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateAdminAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidOperationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidInputException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateThirdPartyFirewallResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallAssociationStatus ThirdPartyFirewallStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThirdPartyFirewallAssociationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARD_COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFBOARDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFBOARD_COMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EXIST = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociateThirdPartyFirewallRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewall ThirdPartyFirewall { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThirdPartyFirewall
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PALO_ALTO_NETWORKS_CLOUD_NGFW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORTIGATE_CLOUD_NATIVE_FIREWALL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAssociateResourceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceSetIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FailedItem[] FailedItems { get; set; }
	}
	
	/// <summary>
	/// Details of a resource that failed when trying to update it's association to a resource set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailedItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string URI { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailedItemReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailedItemReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VALID_ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VALID_PARTITION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VALID_REGION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VALID_SERVICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VALID_RESOURCE_TYPE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VALID_ACCOUNT_ID = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchAssociateResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceSetIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDisassociateResourceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceSetIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FailedItem[] FailedItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDisassociateResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceSetIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAppsListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNotificationChannelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteAllPolicyResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProtocolsListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourceSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateAdminAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateThirdPartyFirewallResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallAssociationStatus ThirdPartyFirewallStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisassociateThirdPartyFirewallRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewall ThirdPartyFirewall { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAdminAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountRoleStatus RoleStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountRoleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DELETION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAdminAccountRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAdminScopeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdminScope AdminScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationStatus Status { get; set; }
	}
	
	/// <summary>
	/// Defines the resources that the Firewall Manager administrator can manage. For more information about administrative scope, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-administrators.html">Managing Firewall Manager administrators</a> in the <i>Firewall Manager Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdminScope
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountScope AccountScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationalUnitScope OrganizationalUnitScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RegionScope RegionScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTypeScope PolicyTypeScope { get; set; }
	}
	
	/// <summary>
	/// Configures the accounts within the administrator's Organizations organization that the specified Firewall Manager administrator can apply policies to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountScope
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllAccountsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeSpecifiedAccounts { get; set; }
	}
	
	/// <summary>
	/// Defines the Organizations organizational units (OUs) that the specified Firewall Manager administrator can apply policies to. For more information about OUs in Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing organizational units (OUs) </a> in the <i>Organizations User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrganizationalUnitScope
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OrganizationalUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllOrganizationalUnitsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeSpecifiedOrganizationalUnits { get; set; }
	}
	
	/// <summary>
	/// Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can manage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionScope
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Regions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllRegionsEnabled { get; set; }
	}
	
	/// <summary>
	/// Defines the policy types that the specified Firewall Manager administrator can manage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyTypeScope
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityServiceType[] PolicyTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllPolicyTypesEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SecurityServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAFV2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIELD_ADVANCED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUPS_COMMON = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUPS_CONTENT_AUDIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUPS_USAGE_AUDIT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_FIREWALL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS_FIREWALL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_FIREWALL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_NETWORK_FIREWALL = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrganizationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONBOARDING_COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFBOARDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFBOARDING_COMPLETE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAdminScopeRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAppsListResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppsListData AppsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppsListArn { get; set; }
	}
	
	/// <summary>
	/// An Firewall Manager applications list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppsListData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListUpdateToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public App[] AppsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PreviousAppsList PreviousAppsList { get; set; }
	}
	
	/// <summary>
	/// An individual Firewall Manager application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class App
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PreviousAppsList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAppsListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComplianceDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyComplianceDetail PolicyComplianceDetail { get; set; }
	}
	
	/// <summary>
	/// Describes the noncompliant resources in a member account for a specific Firewall Manager policy. A maximum of 100 entries are displayed. If more than 100 resources are noncompliant, <code>EvaluationLimitExceeded</code> is set to <code>True</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyComplianceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MemberAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceViolator[] Violators { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EvaluationLimitExceeded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpiredAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IssueInfoMap IssueInfoMap { get; set; }
	}
	
	/// <summary>
	/// Details of the resource that is not protected by the policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComplianceViolator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViolationReason ViolationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceViolatorMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ViolationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_ACL_MISSING_RULE_GROUP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_MISSING_WEB_ACL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_INCORRECT_WEB_ACL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_MISSING_SHIELD_PROTECTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_MISSING_SECURITY_GROUP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUP_UNUSED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUP_REDUNDANT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FMS_CREATED_SECURITY_GROUP_EDITED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_FIREWALL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_FIREWALL_SUBNET_IN_AZ = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_EXPECTED_ROUTE_TABLE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_FIREWALL_POLICY_MODIFIED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREWALL_SUBNET_IS_OUT_OF_SCOPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_FIREWALL_ROUTES = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_TARGET_GATEWAY_ROUTES = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ROUTE_CONFIGURATION = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_TARGET_GATEWAY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET_TRAFFIC_NOT_INSPECTED = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK_HOLE_ROUTE_DETECTED = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_MISSING_DNS_FIREWALL = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT = 27,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComplianceViolatorMetadata
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IssueInfoMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetComplianceDetailRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNotificationChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsRoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetNotificationChannelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	/// <summary>
	/// An Firewall Manager policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyUpdateToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SecurityServicePolicyData SecurityServicePolicyData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypeList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTag[] ResourceTags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ExcludeResourceTags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RemediationEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteUnusedFMManagedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerPolicyScopeMap IncludeMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerPolicyScopeMap ExcludeMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceSetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerPolicyStatus PolicyStatus { get; set; }
	}
	
	/// <summary>
	/// Details about the security service that is being used to protect the resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityServicePolicyData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SecurityServiceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManagedServiceData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyOption PolicyOption { get; set; }
	}
	
	/// <summary>
	/// Contains the Network Firewall firewall policy options to configure the policy's deployment model and third-party firewall policy settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallPolicy NetworkFirewallPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallPolicy ThirdPartyFirewallPolicy { get; set; }
	}
	
	/// <summary>
	/// Configures the firewall policy deployment model of Network Firewall. For information about Network Firewall deployment models, see <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/architectures.html">Network Firewall example architectures with routing</a> in the <i>Network Firewall Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FirewallDeploymentModel FirewallDeploymentModel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirewallDeploymentModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTRALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTRIBUTED = 1,
	}
	
	/// <summary>
	/// Configures the deployment model for the third-party firewall.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyFirewallPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FirewallDeploymentModel FirewallDeploymentModel { get; set; }
	}
	
	/// <summary>
	/// The resource tags that Firewall Manager uses to determine if a particular resource should be included or excluded from the Firewall Manager policy. Tags enable you to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value. Firewall Manager combines the tags with "AND" so that, if you add more than one tag to a policy scope, a resource must have all the specified tags to be included or excluded. For more information, see <a href="https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/tag-editor.html">Working with Tag Editor</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceTag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerPolicyScopeMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomerPolicyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_ADMIN_SCOPE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProtectionStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityServiceType ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProtectionStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MemberAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProtocolsListResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolsListData ProtocolsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProtocolsListArn { get; set; }
	}
	
	/// <summary>
	/// An Firewall Manager protocols list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProtocolsListData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListUpdateToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ProtocolsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PreviousProtocolsList PreviousProtocolsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PreviousProtocolsList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetProtocolsListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceSet ResourceSet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceSetArn { get; set; }
	}
	
	/// <summary>
	/// A set of resources to include in a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceSet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceTypeList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerPolicyStatus ResourceSetStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetResourceSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetThirdPartyFirewallAssociationStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallAssociationStatus ThirdPartyFirewallStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MarketplaceSubscriptionOnboardingStatus MarketplaceOnboardingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MarketplaceSubscriptionOnboardingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SUBSCRIPTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetThirdPartyFirewallAssociationStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewall ThirdPartyFirewall { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetViolationDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViolationDetail ViolationDetail { get; set; }
	}
	
	/// <summary>
	/// Violations for a resource based on the specified Firewall Manager policy and Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViolationDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceViolation[] ResourceViolations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceDescription { get; set; }
	}
	
	/// <summary>
	/// Violation detail based on resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AwsVPCSecurityGroupViolation AwsVPCSecurityGroupViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AwsEc2NetworkInterfaceViolation AwsEc2NetworkInterfaceViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AwsEc2InstanceViolation AwsEc2InstanceViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallMissingFirewallViolation NetworkFirewallMissingFirewallViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallMissingSubnetViolation NetworkFirewallMissingSubnetViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallMissingExpectedRTViolation NetworkFirewallMissingExpectedRTViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallPolicyModifiedViolation NetworkFirewallPolicyModifiedViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallInternetTrafficNotInspectedViolation NetworkFirewallInternetTrafficNotInspectedViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallInvalidRouteConfigurationViolation NetworkFirewallInvalidRouteConfigurationViolation { get; set; }
		
		/// <summary>
		/// Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallBlackHoleRouteDetectedViolation NetworkFirewallBlackHoleRouteDetectedViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallUnexpectedFirewallRoutesViolation NetworkFirewallUnexpectedFirewallRoutesViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallUnexpectedGatewayRoutesViolation NetworkFirewallUnexpectedGatewayRoutesViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallMissingExpectedRoutesViolation NetworkFirewallMissingExpectedRoutesViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsRuleGroupPriorityConflictViolation DnsRuleGroupPriorityConflictViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsDuplicateRuleGroupViolation DnsDuplicateRuleGroupViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsRuleGroupLimitExceededViolation DnsRuleGroupLimitExceededViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PossibleRemediationActions PossibleRemediationActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FirewallSubnetIsOutOfScopeViolation FirewallSubnetIsOutOfScopeViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteHasOutOfScopeEndpointViolation RouteHasOutOfScopeEndpointViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallMissingFirewallViolation ThirdPartyFirewallMissingFirewallViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallMissingSubnetViolation ThirdPartyFirewallMissingSubnetViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallMissingExpectedRouteTableViolation ThirdPartyFirewallMissingExpectedRouteTableViolation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FirewallSubnetMissingVPCEndpointViolation FirewallSubnetMissingVPCEndpointViolation { get; set; }
	}
	
	/// <summary>
	/// Violation detail for the rule violation in a security group when compared to the primary security group of the Firewall Manager policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsVPCSecurityGroupViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTargetDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartialMatch[] PartialMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupRemediationAction[] PossibleSecurityGroupRemediationActions { get; set; }
	}
	
	/// <summary>
	/// The reference rule that partially matches the <code>ViolationTarget</code> rule and violation reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartialMatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetViolationReasons { get; set; }
	}
	
	/// <summary>
	/// Remediation option for the rule specified in the <code>ViolationTarget</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityGroupRemediationAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationActionType RemediationActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupRuleDescription RemediationResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemediationActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFY = 1,
	}
	
	/// <summary>
	/// Describes a set of permissions for a security group rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityGroupRuleDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IPV4Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IPV6Range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
	}
	
	/// <summary>
	/// Violation detail for network interfaces associated with an EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsEc2NetworkInterfaceViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ViolatingSecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Violation detail for an EC2 instance resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AwsEc2InstanceViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AwsEc2NetworkInterfaceViolation[] AwsEc2NetworkInterfaceViolations { get; set; }
	}
	
	/// <summary>
	/// Violation detail for Network Firewall for a subnet that doesn't have a Firewall Manager managed firewall in its VPC. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallMissingFirewallViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetViolationReason { get; set; }
	}
	
	/// <summary>
	/// Violation detail for Network Firewall for an Availability Zone that's missing the expected Firewall Manager managed subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallMissingSubnetViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetViolationReason { get; set; }
	}
	
	/// <summary>
	/// Violation detail for Network Firewall for a subnet that's not associated to the expected Firewall Manager managed route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallMissingExpectedRTViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpectedRouteTable { get; set; }
	}
	
	/// <summary>
	/// Violation detail for Network Firewall for a firewall policy that has a different <a>NetworkFirewallPolicyDescription</a> than is required by the Firewall Manager policy. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallPolicyModifiedViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallPolicyDescription CurrentPolicyDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallPolicyDescription ExpectedPolicyDescription { get; set; }
	}
	
	/// <summary>
	/// The definition of the Network Firewall firewall policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallPolicyDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StatelessRuleGroup[] StatelessRuleGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatelessDefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatelessFragmentDefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatelessCustomActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatefulRuleGroup[] StatefulRuleGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StatefulDefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatefulEngineOptions StatefulEngineOptions { get; set; }
	}
	
	/// <summary>
	/// Network Firewall stateless rule group, used in a <a>NetworkFirewallPolicyDescription</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatelessRuleGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	/// <summary>
	/// Network Firewall stateful rule group, used in a <a>NetworkFirewallPolicyDescription</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatefulRuleGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallStatefulRuleGroupOverride Override { get; set; }
	}
	
	/// <summary>
	/// The setting that allows the policy owner to change the behavior of the rule group within a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallStatefulRuleGroupOverride
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFirewallOverrideAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkFirewallOverrideAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_TO_ALERT = 0,
	}
	
	/// <summary>
	/// Configuration settings for the handling of the stateful rule groups in a Network Firewall firewall policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatefulEngineOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RuleOrder RuleOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuleOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRICT_ORDER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_ACTION_ORDER = 1,
	}
	
	/// <summary>
	/// Violation detail for the subnet for which internet traffic that hasn't been inspected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallInternetTrafficNotInspectedViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ViolatingRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRouteTableUsedInDifferentAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentFirewallSubnetRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpectedFirewallEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpectedRoute[] ExpectedFirewallSubnetRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ActualFirewallSubnetRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentInternetGatewayRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpectedRoute[] ExpectedInternetGatewayRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ActualInternetGatewayRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Describes a route in a route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Route
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationType DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetType TargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPV4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPV6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFIX_LIST = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GATEWAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_GATEWAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_GATEWAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAT_GATEWAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_INTERFACE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_ENDPOINT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_PEERING_CONNECTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EGRESS_ONLY_INTERNET_GATEWAY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSIT_GATEWAY = 9,
	}
	
	/// <summary>
	/// Information about the expected route in the route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpectedRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpV4Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpV6Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContributingSubnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowedTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
	}
	
	/// <summary>
	/// Violation detail for the improperly configured subnet route. It's possible there is a missing route table route, or a configuration that causes traffic to cross an Availability Zone boundary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallInvalidRouteConfigurationViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AffectedSubnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRouteTableUsedInDifferentAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route ViolatingRoute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentFirewallSubnetRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpectedFirewallEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActualFirewallEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpectedFirewallSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActualFirewallSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpectedRoute[] ExpectedFirewallSubnetRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ActualFirewallSubnetRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentInternetGatewayRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpectedRoute[] ExpectedInternetGatewayRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ActualInternetGatewayRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallBlackHoleRouteDetectedViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ViolatingRoutes { get; set; }
	}
	
	/// <summary>
	/// Violation detail for an unexpected route that's present in a route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallUnexpectedFirewallRoutesViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ViolatingRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Violation detail for an unexpected gateway route that’s present in a route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallUnexpectedGatewayRoutesViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ViolatingRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Violation detail for an expected route missing in Network Firewall.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkFirewallMissingExpectedRoutesViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExpectedRoute[] ExpectedRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// A rule group that Firewall Manager tried to associate with a VPC has the same priority as a rule group that's already associated. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRuleGroupPriorityConflictViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTargetDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConflictingPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConflictingPolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnavailablePriorities { get; set; }
	}
	
	/// <summary>
	/// A DNS Firewall rule group that Firewall Manager tried to associate with a VPC is already associated with the VPC and can't be associated again. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsDuplicateRuleGroupViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTargetDescription { get; set; }
	}
	
	/// <summary>
	/// The VPC that Firewall Manager was applying a DNS Fireall policy to reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed due to the limit. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRuleGroupLimitExceededViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTargetDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRuleGroupsAlreadyAssociated { get; set; }
	}
	
	/// <summary>
	/// A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PossibleRemediationActions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PossibleRemediationAction[] Actions { get; set; }
	}
	
	/// <summary>
	/// A list of remediation actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PossibleRemediationAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemediationActionWithOrder[] OrderedRemediationActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultAction { get; set; }
	}
	
	/// <summary>
	/// An ordered list of actions you can take to remediate a violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemediationActionWithOrder
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationAction RemediationAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	/// <summary>
	/// Information about an individual action you can take to remediate a violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemediationAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2CreateRouteAction EC2CreateRouteAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2ReplaceRouteAction EC2ReplaceRouteAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2DeleteRouteAction EC2DeleteRouteAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2CopyRouteTableAction EC2CopyRouteTableAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2ReplaceRouteTableAssociationAction EC2ReplaceRouteTableAssociationAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2AssociateRouteTableAction EC2AssociateRouteTableAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2CreateRouteTableAction EC2CreateRouteTableAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FMSPolicyUpdateFirewallCreationConfigAction FMSPolicyUpdateFirewallCreationConfigAction { get; set; }
	}
	
	/// <summary>
	/// Information about the CreateRoute action in Amazon EC2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2CreateRouteAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget VpcEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget GatewayId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget RouteTableId { get; set; }
	}
	
	/// <summary>
	/// Describes a remediation action target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActionTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Information about the ReplaceRoute action in Amazon EC2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2ReplaceRouteAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget GatewayId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget RouteTableId { get; set; }
	}
	
	/// <summary>
	/// Information about the DeleteRoute action in Amazon EC2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2DeleteRouteAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIpv6CidrBlock { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget RouteTableId { get; set; }
	}
	
	/// <summary>
	/// An action that copies the EC2 route table for use in remediation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2CopyRouteTableAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget VpcId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget RouteTableId { get; set; }
	}
	
	/// <summary>
	/// Information about the ReplaceRouteTableAssociation action in Amazon EC2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2ReplaceRouteTableAssociationAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget AssociationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget RouteTableId { get; set; }
	}
	
	/// <summary>
	/// The action of associating an EC2 resource, such as a subnet or internet gateway, with a route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2AssociateRouteTableAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget GatewayId { get; set; }
	}
	
	/// <summary>
	/// Information about the CreateRouteTable action in Amazon EC2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2CreateRouteTableAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionTarget VpcId { get; set; }
	}
	
	/// <summary>
	/// Contains information about the actions that you can take to remediate scope violations caused by your policy's <code>FirewallCreationConfig</code>. <code>FirewallCreationConfig</code> is an optional configuration that you can use to choose which Availability Zones Firewall Manager creates Network Firewall endpoints in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FMSPolicyUpdateFirewallCreationConfigAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallCreationConfig { get; set; }
	}
	
	/// <summary>
	/// Contains details about the firewall subnet that violates the policy scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirewallSubnetIsOutOfScopeViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetAvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
	}
	
	/// <summary>
	/// Contains details about the route endpoint that violates the policy scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RouteHasOutOfScopeEndpointViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] ViolatingRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetAvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentFirewallSubnetRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] FirewallSubnetRoutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentInternetGatewayRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] InternetGatewayRoutes { get; set; }
	}
	
	/// <summary>
	/// The violation details about a third-party firewall's subnet that doesn't have a Firewall Manager managed firewall in its VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyFirewallMissingFirewallViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetViolationReason { get; set; }
	}
	
	/// <summary>
	/// The violation details for a third-party firewall for an Availability Zone that's missing the Firewall Manager managed subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyFirewallMissingSubnetViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetViolationReason { get; set; }
	}
	
	/// <summary>
	/// The violation details for a third-party firewall that's not associated with an Firewall Manager managed route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyFirewallMissingExpectedRouteTableViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ViolationTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpectedRouteTable { get; set; }
	}
	
	/// <summary>
	/// The violation details for a firewall subnet's VPC endpoint that's deleted or missing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirewallSubnetMissingVPCEndpointViolation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetAvailabilityZoneId { get; set; }
	}
	
	/// <summary>
	/// A collection of key:value pairs associated with an Amazon Web Services resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each Amazon Web Services resource. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetViolationDetailsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdminAccountsForOrganizationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdminAccountSummary[] AdminAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains high level information about the Firewall Manager administrator account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdminAccountSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultAdmin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdminAccountsForOrganizationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdminsManagingAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AdminAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdminsManagingAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAppsListsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppsListDataSummary[] AppsLists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details of the Firewall Manager applications list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppsListDataSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public App[] AppsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAppsListsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultLists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComplianceStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyComplianceStatus[] PolicyComplianceStatusList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Indicates whether the account is compliant with the specified policy. An account is considered noncompliant if it includes resources that are not protected by the policy, for WAF and Shield Advanced policies, or that are noncompliant with the policy, for security group policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyComplianceStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MemberAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResult[] EvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IssueInfoMap IssueInfoMap { get; set; }
	}
	
	/// <summary>
	/// Describes the compliance status for the account. An account is considered noncompliant if it includes resources that are not protected by the specified policy or that don't comply with the policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyComplianceStatusType ComplianceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ViolatorCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EvaluationLimitExceeded { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PolicyComplianceStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListComplianceStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDiscoveredResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DiscoveredResource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A resource in the organization that's available to be associated with a Firewall Manager resource set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiscoveredResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string URI { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDiscoveredResourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] MemberAccountIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMemberAccountsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MemberAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMemberAccountsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicySummary[] PolicyList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details of the Firewall Manager policy. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicySummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityServiceType SecurityServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemediationEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteUnusedFMManagedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerPolicyStatus PolicyStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPoliciesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProtocolsListsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolsListDataSummary[] ProtocolsLists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details of the Firewall Manager protocols list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProtocolsListDataSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProtocolsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProtocolsListsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultLists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceSetResourcesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details of a resource that is associated to an Firewall Manager resource set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resource
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string URI { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceSetResourcesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceSetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSetSummary[] ResourceSets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summarizes the resource sets used in a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceSetSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerPolicyStatus ResourceSetStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListResourceSetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListThirdPartyFirewallFirewallPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewallFirewallPolicy[] ThirdPartyFirewallFirewallPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Configures the third-party firewall's firewall policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyFirewallFirewallPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallPolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirewallPolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListThirdPartyFirewallFirewallPoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyFirewall ThirdPartyFirewall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutAdminAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdminScope AdminScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutAppsListResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppsListData AppsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppsListArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutAppsListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppsListData AppsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutNotificationChannelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnsRoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Policy Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProtocolsListResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolsListData ProtocolsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProtocolsListArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutProtocolsListRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProtocolsListData ProtocolsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourceSetResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceSet ResourceSet { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceSetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourceSetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceSet ResourceSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomerPolicyScopeIdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORG_UNIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DependentServiceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWSCONFIG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWSWAF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWSSHIELD_ADVANCED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWSVPC = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResourceSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_ADMIN_SCOPE = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Sets a Firewall Manager default administrator account. The Firewall Manager default administrator account can manage third-party firewalls and has full administrative scope that allows administration of all policy types, accounts, organizational units, and Regions. This account must be a member account of the organization in Organizations whose resources you want to protect.</p> <p>For information about working with Firewall Manager administrator accounts, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/fms-administrators.html">Managing Firewall Manager administrators</a> in the <i>Firewall Manager Developer Guide</i>.</p>
		/// AssociateAdminAccount #X-Amz-Target=AWSFMS_20180101.AssociateAdminAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task AssociateAdminAccountAsync(AssociateAdminAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.AssociateAdminAccount";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sets the Firewall Manager policy administrator as a tenant administrator of a third-party firewall service. A tenant is an instance of the third-party firewall service that's associated with your Amazon Web Services customer account.
		/// AssociateThirdPartyFirewall #X-Amz-Target=AWSFMS_20180101.AssociateThirdPartyFirewall
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateThirdPartyFirewallResponse> AssociateThirdPartyFirewallAsync(AssociateThirdPartyFirewallRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.AssociateThirdPartyFirewall";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AssociateThirdPartyFirewallResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Associate resources to a Firewall Manager resource set.
		/// BatchAssociateResource #X-Amz-Target=AWSFMS_20180101.BatchAssociateResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchAssociateResourceResponse> BatchAssociateResourceAsync(BatchAssociateResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.BatchAssociateResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BatchAssociateResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates resources from a Firewall Manager resource set.
		/// BatchDisassociateResource #X-Amz-Target=AWSFMS_20180101.BatchDisassociateResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDisassociateResourceResponse> BatchDisassociateResourceAsync(BatchDisassociateResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.BatchDisassociateResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BatchDisassociateResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes an Firewall Manager applications list.
		/// DeleteAppsList #X-Amz-Target=AWSFMS_20180101.DeleteAppsList
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteAppsListAsync(DeleteAppsListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.DeleteAppsList";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an Firewall Manager association with the IAM role and the Amazon Simple Notification Service (SNS) topic that is used to record Firewall Manager SNS logs.
		/// DeleteNotificationChannel #X-Amz-Target=AWSFMS_20180101.DeleteNotificationChannel
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteNotificationChannelAsync(DeleteNotificationChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.DeleteNotificationChannel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes an Firewall Manager policy.
		/// DeletePolicy #X-Amz-Target=AWSFMS_20180101.DeletePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeletePolicyAsync(DeletePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.DeletePolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes an Firewall Manager protocols list.
		/// DeleteProtocolsList #X-Amz-Target=AWSFMS_20180101.DeleteProtocolsList
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteProtocolsListAsync(DeleteProtocolsListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.DeleteProtocolsList";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the specified <a>ResourceSet</a>.
		/// DeleteResourceSet #X-Amz-Target=AWSFMS_20180101.DeleteResourceSet
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteResourceSetAsync(DeleteResourceSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.DeleteResourceSet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Disassociates an Firewall Manager administrator account. To set a different account as an Firewall Manager administrator, submit a <a>PutAdminAccount</a> request. To set an account as a default administrator account, you must submit an <a>AssociateAdminAccount</a> request.</p> <p>Disassociation of the default administrator account follows the first in, last out principle. If you are the default administrator, all Firewall Manager administrators within the organization must first disassociate their accounts before you can disassociate your account.</p>
		/// DisassociateAdminAccount #X-Amz-Target=AWSFMS_20180101.DisassociateAdminAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task DisassociateAdminAccountAsync(DisassociateAdminAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.DisassociateAdminAccount";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disassociates a Firewall Manager policy administrator from a third-party firewall tenant. When you call <code>DisassociateThirdPartyFirewall</code>, the third-party firewall vendor deletes all of the firewalls that are associated with the account.
		/// DisassociateThirdPartyFirewall #X-Amz-Target=AWSFMS_20180101.DisassociateThirdPartyFirewall
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateThirdPartyFirewallResponse> DisassociateThirdPartyFirewallAsync(DisassociateThirdPartyFirewallRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.DisassociateThirdPartyFirewall";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DisassociateThirdPartyFirewallResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the Organizations account that is associated with Firewall Manager as the Firewall Manager default administrator.
		/// GetAdminAccount #X-Amz-Target=AWSFMS_20180101.GetAdminAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAdminAccountResponse> GetAdminAccountAsync(GetAdminAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetAdminAccount";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAdminAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the specified account's administrative scope. The admistrative scope defines the resources that an Firewall Manager administrator can manage.
		/// GetAdminScope #X-Amz-Target=AWSFMS_20180101.GetAdminScope
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAdminScopeResponse> GetAdminScopeAsync(GetAdminScopeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetAdminScope";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAdminScopeResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the specified Firewall Manager applications list.
		/// GetAppsList #X-Amz-Target=AWSFMS_20180101.GetAppsList
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppsListResponse> GetAppsListAsync(GetAppsListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetAppsList";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAppsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns detailed compliance information about the specified member account. Details include resources that are in and out of compliance with the specified policy. </p> <ul> <li> <p>Resources are considered noncompliant for WAF and Shield Advanced policies if the specified policy has not been applied to them.</p> </li> <li> <p>Resources are considered noncompliant for security group policies if they are in scope of the policy, they violate one or more of the policy rules, and remediation is disabled or not possible.</p> </li> <li> <p>Resources are considered noncompliant for Network Firewall policies if a firewall is missing in the VPC, if the firewall endpoint isn't set up in an expected Availability Zone and subnet, if a subnet created by the Firewall Manager doesn't have the expected route table, and for modifications to a firewall policy that violate the Firewall Manager policy's rules.</p> </li> <li> <p>Resources are considered noncompliant for DNS Firewall policies if a DNS Firewall rule group is missing from the rule group associations for the VPC. </p> </li> </ul>
		/// GetComplianceDetail #X-Amz-Target=AWSFMS_20180101.GetComplianceDetail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetComplianceDetailResponse> GetComplianceDetailAsync(GetComplianceDetailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetComplianceDetail";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetComplianceDetailResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Information about the Amazon Simple Notification Service (SNS) topic that is used to record Firewall Manager SNS logs.
		/// GetNotificationChannel #X-Amz-Target=AWSFMS_20180101.GetNotificationChannel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetNotificationChannelResponse> GetNotificationChannelAsync(GetNotificationChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetNotificationChannel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetNotificationChannelResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the specified Firewall Manager policy.
		/// GetPolicy #X-Amz-Target=AWSFMS_20180101.GetPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPolicyResponse> GetPolicyAsync(GetPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetPolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetPolicyResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// If you created a Shield Advanced policy, returns policy-level attack summary information in the event of a potential DDoS attack. Other policy types are currently unsupported.
		/// GetProtectionStatus #X-Amz-Target=AWSFMS_20180101.GetProtectionStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetProtectionStatusResponse> GetProtectionStatusAsync(GetProtectionStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetProtectionStatus";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetProtectionStatusResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns information about the specified Firewall Manager protocols list.
		/// GetProtocolsList #X-Amz-Target=AWSFMS_20180101.GetProtocolsList
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetProtocolsListResponse> GetProtocolsListAsync(GetProtocolsListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetProtocolsList";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetProtocolsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about a specific resource set.
		/// GetResourceSet #X-Amz-Target=AWSFMS_20180101.GetResourceSet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetResourceSetResponse> GetResourceSetAsync(GetResourceSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetResourceSet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetResourceSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// The onboarding status of a Firewall Manager admin account to third-party firewall vendor tenant.
		/// GetThirdPartyFirewallAssociationStatus #X-Amz-Target=AWSFMS_20180101.GetThirdPartyFirewallAssociationStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetThirdPartyFirewallAssociationStatusResponse> GetThirdPartyFirewallAssociationStatusAsync(GetThirdPartyFirewallAssociationStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetThirdPartyFirewallAssociationStatus";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetThirdPartyFirewallAssociationStatusResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves violations for a resource based on the specified Firewall Manager policy and Amazon Web Services account.
		/// GetViolationDetails #X-Amz-Target=AWSFMS_20180101.GetViolationDetails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetViolationDetailsResponse> GetViolationDetailsAsync(GetViolationDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.GetViolationDetails";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetViolationDetailsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a <code>AdminAccounts</code> object that lists the Firewall Manager administrators within the organization that are onboarded to Firewall Manager by <a>AssociateAdminAccount</a>.</p> <p>This operation can be called only from the organization's management account.</p>
		/// ListAdminAccountsForOrganization #X-Amz-Target=AWSFMS_20180101.ListAdminAccountsForOrganization
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAdminAccountsForOrganizationResponse> ListAdminAccountsForOrganizationAsync(string MaxResults, string NextToken, ListAdminAccountsForOrganizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListAdminAccountsForOrganization?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdminAccountsForOrganizationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the accounts that are managing the specified Organizations member account. This is useful for any member account so that they can view the accounts who are managing their account. This operation only returns the managing administrators that have the requested account within their <a>AdminScope</a>.
		/// ListAdminsManagingAccount #X-Amz-Target=AWSFMS_20180101.ListAdminsManagingAccount
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAdminsManagingAccountResponse> ListAdminsManagingAccountAsync(string MaxResults, string NextToken, ListAdminsManagingAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListAdminsManagingAccount?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdminsManagingAccountResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of <code>AppsListDataSummary</code> objects.
		/// ListAppsLists #X-Amz-Target=AWSFMS_20180101.ListAppsLists
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAppsListsResponse> ListAppsListsAsync(string MaxResults, string NextToken, ListAppsListsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListAppsLists?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAppsListsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of <code>PolicyComplianceStatus</code> objects. Use <code>PolicyComplianceStatus</code> to get a summary of which member accounts are protected by the specified policy.
		/// ListComplianceStatus #X-Amz-Target=AWSFMS_20180101.ListComplianceStatus
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListComplianceStatusResponse> ListComplianceStatusAsync(string MaxResults, string NextToken, ListComplianceStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListComplianceStatus?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListComplianceStatusResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of resources in the organization's accounts that are available to be associated with a resource set.
		/// ListDiscoveredResources #X-Amz-Target=AWSFMS_20180101.ListDiscoveredResources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDiscoveredResourcesResponse> ListDiscoveredResourcesAsync(ListDiscoveredResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListDiscoveredResources";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListDiscoveredResourcesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns a <code>MemberAccounts</code> object that lists the member accounts in the administrator's Amazon Web Services organization.</p> <p>Either an Firewall Manager administrator or the organization's management account can make this request.</p>
		/// ListMemberAccounts #X-Amz-Target=AWSFMS_20180101.ListMemberAccounts
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMemberAccountsResponse> ListMemberAccountsAsync(string MaxResults, string NextToken, ListMemberAccountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListMemberAccounts?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListMemberAccountsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of <code>PolicySummary</code> objects.
		/// ListPolicies #X-Amz-Target=AWSFMS_20180101.ListPolicies
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPoliciesResponse> ListPoliciesAsync(string MaxResults, string NextToken, ListPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListPolicies?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPoliciesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of <code>ProtocolsListDataSummary</code> objects.
		/// ListProtocolsLists #X-Amz-Target=AWSFMS_20180101.ListProtocolsLists
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProtocolsListsResponse> ListProtocolsListsAsync(string MaxResults, string NextToken, ListProtocolsListsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListProtocolsLists?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListProtocolsListsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of resources that are currently associated to a resource set.
		/// ListResourceSetResources #X-Amz-Target=AWSFMS_20180101.ListResourceSetResources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResourceSetResourcesResponse> ListResourceSetResourcesAsync(ListResourceSetResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListResourceSetResources";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListResourceSetResourcesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an array of <code>ResourceSetSummary</code> objects.
		/// ListResourceSets #X-Amz-Target=AWSFMS_20180101.ListResourceSets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResourceSetsResponse> ListResourceSetsAsync(ListResourceSetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListResourceSets";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListResourceSetsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves the list of tags for the specified Amazon Web Services resource.
		/// ListTagsForResource #X-Amz-Target=AWSFMS_20180101.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListTagsForResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of all of the third-party firewall policies that are associated with the third-party firewall administrator's account.
		/// ListThirdPartyFirewallFirewallPolicies #X-Amz-Target=AWSFMS_20180101.ListThirdPartyFirewallFirewallPolicies
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListThirdPartyFirewallFirewallPoliciesResponse> ListThirdPartyFirewallFirewallPoliciesAsync(string MaxResults, string NextToken, ListThirdPartyFirewallFirewallPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.ListThirdPartyFirewallFirewallPolicies?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListThirdPartyFirewallFirewallPoliciesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates or updates an Firewall Manager administrator account. The account must be a member of the organization that was onboarded to Firewall Manager by <a>AssociateAdminAccount</a>. Only the organization's management account can create an Firewall Manager administrator account. When you create an Firewall Manager administrator account, the service checks to see if the account is already a delegated administrator within Organizations. If the account isn't a delegated administrator, Firewall Manager calls Organizations to delegate the account within Organizations. For more information about administrator accounts within Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts.html">Managing the Amazon Web Services Accounts in Your Organization</a>.
		/// PutAdminAccount #X-Amz-Target=AWSFMS_20180101.PutAdminAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutAdminAccountAsync(PutAdminAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.PutAdminAccount";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an Firewall Manager applications list.
		/// PutAppsList #X-Amz-Target=AWSFMS_20180101.PutAppsList
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAppsListResponse> PutAppsListAsync(PutAppsListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.PutAppsList";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutAppsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Designates the IAM role and Amazon Simple Notification Service (SNS) topic that Firewall Manager uses to record SNS logs.</p> <p>To perform this action outside of the console, you must first configure the SNS topic's access policy to allow the <code>SnsRoleName</code> to publish SNS logs. If the <code>SnsRoleName</code> provided is a role other than the <code>AWSServiceRoleForFMS</code> service-linked role, this role must have a trust relationship configured to allow the Firewall Manager service principal <code>fms.amazonaws.com</code> to assume this role. For information about configuring an SNS access policy, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-security_iam_service-with-iam.html#fms-security_iam_service-with-iam-roles-service">Service roles for Firewall Manager</a> in the <i>Firewall Manager Developer Guide</i>.</p>
		/// PutNotificationChannel #X-Amz-Target=AWSFMS_20180101.PutNotificationChannel
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutNotificationChannelAsync(PutNotificationChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.PutNotificationChannel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates an Firewall Manager policy.</p> <p>Firewall Manager provides the following types of policies: </p> <ul> <li> <p>An WAF policy (type WAFV2), which defines rule groups to run first in the corresponding WAF web ACL and rule groups to run last in the web ACL.</p> </li> <li> <p>An WAF Classic policy (type WAF), which defines a rule group. </p> </li> <li> <p>A Shield Advanced policy, which applies Shield Advanced protection to specified accounts and resources.</p> </li> <li> <p>A security group policy, which manages VPC security groups across your Amazon Web Services organization. </p> </li> <li> <p>An Network Firewall policy, which provides firewall rules to filter network traffic in specified Amazon VPCs.</p> </li> <li> <p>A DNS Firewall policy, which provides Route 53 Resolver DNS Firewall rules to filter DNS queries for specified VPCs.</p> </li> </ul> <p>Each policy is specific to one of the types. If you want to enforce more than one policy type across accounts, create multiple policies. You can create multiple policies for each type.</p> <p>You must be subscribed to Shield Advanced to create a Shield Advanced policy. For more information about subscribing to Shield Advanced, see <a href="https://docs.aws.amazon.com/waf/latest/DDOSAPIReference/API_CreateSubscription.html">CreateSubscription</a>.</p>
		/// PutPolicy #X-Amz-Target=AWSFMS_20180101.PutPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutPolicyResponse> PutPolicyAsync(PutPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.PutPolicy";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutPolicyResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an Firewall Manager protocols list.
		/// PutProtocolsList #X-Amz-Target=AWSFMS_20180101.PutProtocolsList
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutProtocolsListResponse> PutProtocolsListAsync(PutProtocolsListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.PutProtocolsList";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutProtocolsListResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates the resource set.</p> <p>An Firewall Manager resource set defines the resources to import into an Firewall Manager policy from another Amazon Web Services service.</p>
		/// PutResourceSet #X-Amz-Target=AWSFMS_20180101.PutResourceSet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutResourceSetResponse> PutResourceSetAsync(PutResourceSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.PutResourceSet";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutResourceSetResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Adds one or more tags to an Amazon Web Services resource.
		/// TagResource #X-Amz-Target=AWSFMS_20180101.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.TagResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes one or more tags from an Amazon Web Services resource.
		/// UntagResource #X-Amz-Target=AWSFMS_20180101.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWSFMS_20180101.UntagResource";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum AssociateAdminAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.AssociateAdminAccount")]
		AWSFMS_20180101_AssociateAdminAccount = 0,
	}
	
	public enum AssociateThirdPartyFirewallX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.AssociateThirdPartyFirewall")]
		AWSFMS_20180101_AssociateThirdPartyFirewall = 0,
	}
	
	public enum BatchAssociateResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.BatchAssociateResource")]
		AWSFMS_20180101_BatchAssociateResource = 0,
	}
	
	public enum BatchDisassociateResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.BatchDisassociateResource")]
		AWSFMS_20180101_BatchDisassociateResource = 0,
	}
	
	public enum DeleteAppsListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.DeleteAppsList")]
		AWSFMS_20180101_DeleteAppsList = 0,
	}
	
	public enum DeleteNotificationChannelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.DeleteNotificationChannel")]
		AWSFMS_20180101_DeleteNotificationChannel = 0,
	}
	
	public enum DeletePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.DeletePolicy")]
		AWSFMS_20180101_DeletePolicy = 0,
	}
	
	public enum DeleteProtocolsListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.DeleteProtocolsList")]
		AWSFMS_20180101_DeleteProtocolsList = 0,
	}
	
	public enum DeleteResourceSetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.DeleteResourceSet")]
		AWSFMS_20180101_DeleteResourceSet = 0,
	}
	
	public enum DisassociateAdminAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.DisassociateAdminAccount")]
		AWSFMS_20180101_DisassociateAdminAccount = 0,
	}
	
	public enum DisassociateThirdPartyFirewallX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.DisassociateThirdPartyFirewall")]
		AWSFMS_20180101_DisassociateThirdPartyFirewall = 0,
	}
	
	public enum GetAdminAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetAdminAccount")]
		AWSFMS_20180101_GetAdminAccount = 0,
	}
	
	public enum GetAdminScopeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetAdminScope")]
		AWSFMS_20180101_GetAdminScope = 0,
	}
	
	public enum GetAppsListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetAppsList")]
		AWSFMS_20180101_GetAppsList = 0,
	}
	
	public enum GetComplianceDetailX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetComplianceDetail")]
		AWSFMS_20180101_GetComplianceDetail = 0,
	}
	
	public enum GetNotificationChannelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetNotificationChannel")]
		AWSFMS_20180101_GetNotificationChannel = 0,
	}
	
	public enum GetPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetPolicy")]
		AWSFMS_20180101_GetPolicy = 0,
	}
	
	public enum GetProtectionStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetProtectionStatus")]
		AWSFMS_20180101_GetProtectionStatus = 0,
	}
	
	public enum GetProtocolsListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetProtocolsList")]
		AWSFMS_20180101_GetProtocolsList = 0,
	}
	
	public enum GetResourceSetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetResourceSet")]
		AWSFMS_20180101_GetResourceSet = 0,
	}
	
	public enum GetThirdPartyFirewallAssociationStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetThirdPartyFirewallAssociationStatus")]
		AWSFMS_20180101_GetThirdPartyFirewallAssociationStatus = 0,
	}
	
	public enum GetViolationDetailsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.GetViolationDetails")]
		AWSFMS_20180101_GetViolationDetails = 0,
	}
	
	public enum ListAdminAccountsForOrganizationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListAdminAccountsForOrganization")]
		AWSFMS_20180101_ListAdminAccountsForOrganization = 0,
	}
	
	public enum ListAdminsManagingAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListAdminsManagingAccount")]
		AWSFMS_20180101_ListAdminsManagingAccount = 0,
	}
	
	public enum ListAppsListsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListAppsLists")]
		AWSFMS_20180101_ListAppsLists = 0,
	}
	
	public enum ListComplianceStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListComplianceStatus")]
		AWSFMS_20180101_ListComplianceStatus = 0,
	}
	
	public enum ListDiscoveredResourcesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListDiscoveredResources")]
		AWSFMS_20180101_ListDiscoveredResources = 0,
	}
	
	public enum ListMemberAccountsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListMemberAccounts")]
		AWSFMS_20180101_ListMemberAccounts = 0,
	}
	
	public enum ListPoliciesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListPolicies")]
		AWSFMS_20180101_ListPolicies = 0,
	}
	
	public enum ListProtocolsListsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListProtocolsLists")]
		AWSFMS_20180101_ListProtocolsLists = 0,
	}
	
	public enum ListResourceSetResourcesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListResourceSetResources")]
		AWSFMS_20180101_ListResourceSetResources = 0,
	}
	
	public enum ListResourceSetsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListResourceSets")]
		AWSFMS_20180101_ListResourceSets = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListTagsForResource")]
		AWSFMS_20180101_ListTagsForResource = 0,
	}
	
	public enum ListThirdPartyFirewallFirewallPoliciesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.ListThirdPartyFirewallFirewallPolicies")]
		AWSFMS_20180101_ListThirdPartyFirewallFirewallPolicies = 0,
	}
	
	public enum PutAdminAccountX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.PutAdminAccount")]
		AWSFMS_20180101_PutAdminAccount = 0,
	}
	
	public enum PutAppsListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.PutAppsList")]
		AWSFMS_20180101_PutAppsList = 0,
	}
	
	public enum PutNotificationChannelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.PutNotificationChannel")]
		AWSFMS_20180101_PutNotificationChannel = 0,
	}
	
	public enum PutPolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.PutPolicy")]
		AWSFMS_20180101_PutPolicy = 0,
	}
	
	public enum PutProtocolsListX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.PutProtocolsList")]
		AWSFMS_20180101_PutProtocolsList = 0,
	}
	
	public enum PutResourceSetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.PutResourceSet")]
		AWSFMS_20180101_PutResourceSet = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.TagResource")]
		AWSFMS_20180101_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWSFMS_20180101.UntagResource")]
		AWSFMS_20180101_UntagResource = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
