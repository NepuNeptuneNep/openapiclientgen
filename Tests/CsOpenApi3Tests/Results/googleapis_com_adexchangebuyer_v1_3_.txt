//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Configuration data for an Ad Exchange buyer account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// Your bidder locations that have distinct URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidderLocation")]
		public AccountBidderLocation[] AccountBidderLocation { get; set; }
		
		/// <summary>
		/// The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingNid")]
		public string CookieMatchingNid { get; set; }
		
		/// <summary>
		/// The base URL used in cookie match requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatchingUrl")]
		public string CookieMatchingUrl { get; set; }
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#account")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#account";
		
		/// <summary>
		/// The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumActiveCreatives")]
		public System.Nullable<System.Int32> MaximumActiveCreatives { get; set; }
		
		/// <summary>
		/// The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumTotalQps")]
		public System.Nullable<System.Int32> MaximumTotalQps { get; set; }
		
		/// <summary>
		/// The number of creatives that this account inserted or bid with in the last 30 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberActiveCreatives")]
		public System.Nullable<System.Int32> NumberActiveCreatives { get; set; }
	}
	
	public class AccountBidderLocation
	{
		
		/// <summary>
		/// The maximum queries per second the Ad Exchange will send.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumQps")]
		public System.Nullable<System.Int32> MaximumQps { get; set; }
		
		/// <summary>
		/// The geographical region the Ad Exchange should send requests from. Only used by some quota systems, but always setting the value is recommended. Allowed values:  
		///- ASIA 
		///- EUROPE 
		///- US_EAST 
		///- US_WEST
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// The URL to which the Ad Exchange will send bid requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An account feed lists Ad Exchange buyer accounts that the user has access to. Each entry in the feed corresponds to a single buyer account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountsList
	{
		
		/// <summary>
		/// A list of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Account[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#accountsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#accountsList";
	}
	
	/// <summary>
	/// The configuration data for an Ad Exchange billing info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingInfo
	{
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		/// <summary>
		/// Account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// A list of adgroup IDs associated with this particular account. These IDs may show up as part of a realtime bidding BidRequest, which indicates a bid request for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingId")]
		public string[] BillingId { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#billingInfo")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#billingInfo";
	}
	
	/// <summary>
	/// A billing info feed lists Billing Info the Ad Exchange buyer account has access to. Each entry in the feed corresponds to a single billing info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillingInfoList
	{
		
		/// <summary>
		/// A list of billing info relevant for your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BillingInfo[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#billingInfoList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#billingInfoList";
	}
	
	/// <summary>
	/// The configuration data for Ad Exchange RTB - Budget API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Budget
	{
		
		/// <summary>
		/// The id of the account. This is required for get and update requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The billing id to determine which adgroup to provide budget information for. This is required for get and update requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingId")]
		public string BillingId { get; set; }
		
		/// <summary>
		/// The daily budget amount in unit amount of the account currency to apply for the billingId provided. This is required for update requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetAmount")]
		public string BudgetAmount { get; set; }
		
		/// <summary>
		/// The currency code for the buyer. This cannot be altered here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The unique id that describes this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of the resource, i.e. "adexchangebuyer#budget".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#budget")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#budget";
	}
	
	/// <summary>
	/// A creative and its classification data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Creative
	{
		
		/// <summary>
		/// The HTML snippet that displays the ad when inserted in the web page. If set, videoURL should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HTMLSnippet { get; set; }
		
		/// <summary>
		/// Account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adTechnologyProviders")]
		public CreativeAdTechnologyProviders AdTechnologyProviders { get; set; }
		
		/// <summary>
		/// Detected advertiser id, if any. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string[] AdvertiserId { get; set; }
		
		/// <summary>
		/// The name of the company being advertised in the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserName")]
		public string AdvertiserName { get; set; }
		
		/// <summary>
		/// The agency id for this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiUploadTimestamp")]
		public System.Nullable<System.DateTimeOffset> ApiUploadTimestamp { get; set; }
		
		/// <summary>
		/// All attributes for the ads that may be shown from this snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public int[] Attribute { get; set; }
		
		/// <summary>
		/// A buyer-specific id identifying the creative in this ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerCreativeId")]
		public string BuyerCreativeId { get; set; }
		
		/// <summary>
		/// The set of destination urls for the snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickThroughUrl")]
		public string[] ClickThroughUrl { get; set; }
		
		/// <summary>
		/// Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corrections")]
		public CreativeCorrections[] CreativeCorrections { get; set; }
		
		/// <summary>
		/// The reasons for disapproval, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disapprovalReasons")]
		public CreativeDisapprovalReasons[] CreativeDisapprovalReasons { get; set; }
		
		/// <summary>
		/// The filtering reasons for the creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringReasons")]
		public CreativeFilteringReasons FilteringReasons { get; set; }
		
		/// <summary>
		/// Ad height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The set of urls to be called to record an impression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTrackingUrl")]
		public string[] ImpressionTrackingUrl { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#creative")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#creative";
		
		/// <summary>
		/// If nativeAd is set, HTMLSnippet and videoURL should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeAd")]
		public CreativeNativeAd NativeAd { get; set; }
		
		/// <summary>
		/// Detected product categories, if any. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCategories")]
		public int[] ProductCategories { get; set; }
		
		/// <summary>
		/// All restricted categories for the ads that may be shown from this snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictedCategories")]
		public int[] RestrictedCategories { get; set; }
		
		/// <summary>
		/// Detected sensitive categories, if any. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitiveCategories")]
		public int[] SensitiveCategories { get; set; }
		
		/// <summary>
		/// Creative serving status. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// All vendor types for the ads that may be shown from this snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorType")]
		public int[] VendorType { get; set; }
		
		/// <summary>
		/// The version for this creative. Read-only. This field should not be set in requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// The URL to fetch a video ad. If set, HTMLSnippet and the nativeAd should not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoURL")]
		public string VideoURL { get; set; }
		
		/// <summary>
		/// Ad width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeAdTechnologyProviders
	{
		
		/// <summary>
		/// The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If this creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the  Authorized Buyers Real-Time Bidding protocol or the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the OpenRTB protocol, a bid submitted for a European Economic Area (EEA) user with this creative is not compliant with the GDPR policies as mentioned in the "Third-party Ad Technology Vendors" section of Authorized Buyers Program Guidelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedProviderIds")]
		public string[] DetectedProviderIds { get; set; }
		
		/// <summary>
		/// Whether the creative contains an unidentified ad technology provider. If true, a bid submitted for a European Economic Area (EEA) user with this creative is not compliant with the GDPR policies as mentioned in the "Third-party Ad Technology Vendors" section of Authorized Buyers Program Guidelines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUnidentifiedProvider")]
		public System.Nullable<System.Boolean> HasUnidentifiedProvider { get; set; }
	}
	
	public class CreativeCorrections
	{
		
		/// <summary>
		/// Additional details about the correction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The type of correction that was applied to the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class CreativeDisapprovalReasons
	{
		
		/// <summary>
		/// Additional details about the reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// The categorized reason for disapproval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class CreativeFilteringReasons
	{
		
		/// <summary>
		/// The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// The filtering reasons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public CreativeFilteringReasonsReasons[] CreativeFilteringReasonsReasons { get; set; }
	}
	
	public class CreativeFilteringReasonsReasons
	{
		
		/// <summary>
		/// The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringCount")]
		public string FilteringCount { get; set; }
		
		/// <summary>
		/// The filtering status code. Please refer to the creative-status-codes.txt file for different statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteringStatus")]
		public System.Nullable<System.Int32> FilteringStatus { get; set; }
	}
	
	public class CreativeNativeAd
	{
		
		[System.Runtime.Serialization.DataMember(Name="advertiser")]
		public string Advertiser { get; set; }
		
		/// <summary>
		/// The app icon, for app download ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIcon")]
		public CreativeNativeAdAppIcon AppIcon { get; set; }
		
		/// <summary>
		/// A long description of the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// A label for the button that the user is supposed to click.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callToAction")]
		public string CallToAction { get; set; }
		
		/// <summary>
		/// The URL to use for click tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTrackingUrl")]
		public string ClickTrackingUrl { get; set; }
		
		/// <summary>
		/// A short title for the ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		/// <summary>
		/// A large image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public CreativeNativeAdImage Image { get; set; }
		
		/// <summary>
		/// The URLs are called when the impression is rendered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionTrackingUrl")]
		public string[] ImpressionTrackingUrl { get; set; }
		
		/// <summary>
		/// A smaller image, for the advertiser logo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public CreativeNativeAdLogo Logo { get; set; }
		
		/// <summary>
		/// The price of the promoted app including the currency info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		/// <summary>
		/// The app rating in the app store. Must be in the range [0-5].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starRating")]
		public System.Nullable<System.Double> StarRating { get; set; }
	}
	
	public class CreativeNativeAdAppIcon
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeNativeAdImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class CreativeNativeAdLogo
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// The creatives feed lists the active creatives for the Ad Exchange buyer accounts that the user has access to. Each entry in the feed corresponds to a single creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreativesList
	{
		
		/// <summary>
		/// A list of creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Creative[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#creativesList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#creativesList";
		
		/// <summary>
		/// Continuation token used to page through creatives. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The configuration data for an Ad Exchange direct deal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectDeal
	{
		
		/// <summary>
		/// The account id of the buyer this deal is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		/// <summary>
		/// The name of the advertiser this deal is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiser")]
		public string Advertiser { get; set; }
		
		/// <summary>
		/// Whether the publisher for this deal is eligible for alcohol ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowsAlcohol")]
		public System.Nullable<System.Boolean> AllowsAlcohol { get; set; }
		
		/// <summary>
		/// The account id that this deal was negotiated for. It is either the buyer or the client that this deal was negotiated on behalf of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyerAccountId")]
		public string BuyerAccountId { get; set; }
		
		/// <summary>
		/// The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The deal type such as programmatic reservation or fixed price and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealTier")]
		public string DealTier { get; set; }
		
		/// <summary>
		/// End time for when this deal stops being active. If not set then this deal is valid until manually disabled by the publisher. In seconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The fixed price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedCpm")]
		public string FixedCpm { get; set; }
		
		/// <summary>
		/// Deal id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#directDeal")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#directDeal";
		
		/// <summary>
		/// Deal name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The minimum price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the private exchange tier of buying (below fixed price priority, run as a second price auction).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateExchangeMinCpm")]
		public string PrivateExchangeMinCpm { get; set; }
		
		/// <summary>
		/// If true, the publisher has opted to have their blocks ignored when a creative is bid with for this deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherBlocksOverriden")]
		public System.Nullable<System.Boolean> PublisherBlocksOverriden { get; set; }
		
		/// <summary>
		/// The name of the publisher offering this direct deal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerNetwork")]
		public string SellerNetwork { get; set; }
		
		/// <summary>
		/// Start time for when this deal becomes active. If not set then this deal is active immediately upon creation. In seconds since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// A direct deals feed lists Direct Deals the Ad Exchange buyer account has access to. This includes direct deals set up for the buyer account as well as its merged stream seats.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DirectDealsList
	{
		
		/// <summary>
		/// A list of direct deals relevant for your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directDeals")]
		public DirectDeal[] DirectDeals { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#directDealsList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#directDealsList";
	}
	
	/// <summary>
	/// The configuration data for an Ad Exchange performance report list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformanceReport
	{
		
		/// <summary>
		/// The number of bid responses with an ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidRate")]
		public System.Nullable<System.Double> BidRate { get; set; }
		
		/// <summary>
		/// The number of bid requests sent to your bidder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidRequestRate")]
		public System.Nullable<System.Double> BidRequestRate { get; set; }
		
		/// <summary>
		/// Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calloutStatusRate")]
		public string[] CalloutStatusRate { get; set; }
		
		/// <summary>
		/// Average QPS for cookie matcher operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cookieMatcherStatusRate")]
		public string[] CookieMatcherStatusRate { get; set; }
		
		/// <summary>
		/// Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeStatusRate")]
		public string[] CreativeStatusRate { get; set; }
		
		/// <summary>
		/// The number of bid responses that were filtered due to a policy violation or other errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filteredBidRate")]
		public System.Nullable<System.Double> FilteredBidRate { get; set; }
		
		/// <summary>
		/// Average QPS for hosted match operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostedMatchStatusRate")]
		public string[] HostedMatchStatusRate { get; set; }
		
		/// <summary>
		/// The number of potential queries based on your pretargeting settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryMatchRate")]
		public System.Nullable<System.Double> InventoryMatchRate { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#performanceReport")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#performanceReport";
		
		/// <summary>
		/// The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency50thPercentile")]
		public System.Nullable<System.Double> Latency50thPercentile { get; set; }
		
		/// <summary>
		/// The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency85thPercentile")]
		public System.Nullable<System.Double> Latency85thPercentile { get; set; }
		
		/// <summary>
		/// The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latency95thPercentile")]
		public System.Nullable<System.Double> Latency95thPercentile { get; set; }
		
		/// <summary>
		/// Rate of various quota account statuses per quota check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noQuotaInRegion")]
		public System.Nullable<System.Double> NoQuotaInRegion { get; set; }
		
		/// <summary>
		/// Rate of various quota account statuses per quota check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfQuota")]
		public System.Nullable<System.Double> OutOfQuota { get; set; }
		
		/// <summary>
		/// Average QPS for pixel match requests from clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pixelMatchRequests")]
		public System.Nullable<System.Double> PixelMatchRequests { get; set; }
		
		/// <summary>
		/// Average QPS for pixel match responses from clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pixelMatchResponses")]
		public System.Nullable<System.Double> PixelMatchResponses { get; set; }
		
		/// <summary>
		/// The configured quota limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaConfiguredLimit")]
		public System.Nullable<System.Double> QuotaConfiguredLimit { get; set; }
		
		/// <summary>
		/// The throttled quota limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaThrottledLimit")]
		public System.Nullable<System.Double> QuotaThrottledLimit { get; set; }
		
		/// <summary>
		/// The trading location of this data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// The number of properly formed bid responses received by our servers within the deadline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulRequestRate")]
		public System.Nullable<System.Double> SuccessfulRequestRate { get; set; }
		
		/// <summary>
		/// The unix timestamp of the starting time of this performance data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsuccessfulRequestRate")]
		public System.Nullable<System.Double> UnsuccessfulRequestRate { get; set; }
	}
	
	/// <summary>
	/// The configuration data for an Ad Exchange performance report list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformanceReportList
	{
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#performanceReportList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#performanceReportList";
		
		/// <summary>
		/// A list of performance reports relevant for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceReport")]
		public PerformanceReport[] PerformanceReport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PretargetingConfig
	{
		
		/// <summary>
		/// The id for billing purposes, provided for reference. Leave this field blank for insert requests; the id will be generated automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingId")]
		public string BillingId { get; set; }
		
		/// <summary>
		/// The config id; generated automatically. Leave this field blank for insert requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		/// <summary>
		/// The name of the config. Must be unique. Required for all requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configName")]
		public string ConfigName { get; set; }
		
		/// <summary>
		/// List must contain exactly one of PRETARGETING_CREATIVE_TYPE_HTML or PRETARGETING_CREATIVE_TYPE_VIDEO.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeType")]
		public string[] CreativeType { get; set; }
		
		/// <summary>
		/// Requests which allow one of these (width, height) pairs will match. All pairs must be supported ad dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public PretargetingConfigDimensions[] PretargetingConfigDimensions { get; set; }
		
		/// <summary>
		/// Requests with any of these content labels will not match. Values are from content-labels.txt in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedContentLabels")]
		public string[] ExcludedContentLabels { get; set; }
		
		/// <summary>
		/// Requests containing any of these geo criteria ids will not match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedGeoCriteriaIds")]
		public string[] ExcludedGeoCriteriaIds { get; set; }
		
		/// <summary>
		/// Requests containing any of these placements will not match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedPlacements")]
		public PretargetingConfigExcludedPlacements[] PretargetingConfigExcludedPlacements { get; set; }
		
		/// <summary>
		/// Requests containing any of these users list ids will not match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedUserLists")]
		public string[] ExcludedUserLists { get; set; }
		
		/// <summary>
		/// Requests containing any of these vertical ids will not match. Values are from the publisher-verticals.txt file in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedVerticals")]
		public string[] ExcludedVerticals { get; set; }
		
		/// <summary>
		/// Requests containing any of these geo criteria ids will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoCriteriaIds")]
		public string[] GeoCriteriaIds { get; set; }
		
		/// <summary>
		/// Whether this config is active. Required for all requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// The kind of the resource, i.e. "adexchangebuyer#pretargetingConfig".
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#pretargetingConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#pretargetingConfig";
		
		/// <summary>
		/// Request containing any of these language codes will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The maximum QPS allocated to this pretargeting configuration, used for pretargeting-level QPS limits. By default, this is not set, which indicates that there is no QPS limit at the configuration level (a global or account-level limit may still be imposed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumQps")]
		public string MaximumQps { get; set; }
		
		/// <summary>
		/// Requests containing any of these mobile carrier ids will match. Values are from mobile-carriers.csv in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileCarriers")]
		public string[] MobileCarriers { get; set; }
		
		/// <summary>
		/// Requests containing any of these mobile device ids will match. Values are from mobile-devices.csv in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileDevices")]
		public string[] MobileDevices { get; set; }
		
		/// <summary>
		/// Requests containing any of these mobile operating system version ids will match. Values are from mobile-os.csv in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileOperatingSystemVersions")]
		public string[] MobileOperatingSystemVersions { get; set; }
		
		/// <summary>
		/// Requests containing any of these placements will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placements")]
		public PretargetingConfigPlacements[] PretargetingConfigPlacements { get; set; }
		
		/// <summary>
		/// Requests matching any of these platforms will match. Possible values are PRETARGETING_PLATFORM_MOBILE, PRETARGETING_PLATFORM_DESKTOP, and PRETARGETING_PLATFORM_TABLET.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public string[] Platforms { get; set; }
		
		/// <summary>
		/// Creative attributes should be declared here if all creatives corresponding to this pretargeting configuration have that creative attribute. Values are from pretargetable-creative-attributes.txt in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedCreativeAttributes")]
		public string[] SupportedCreativeAttributes { get; set; }
		
		/// <summary>
		/// Requests containing any of these user list ids will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLists")]
		public string[] UserLists { get; set; }
		
		/// <summary>
		/// Requests that allow any of these vendor ids will match. Values are from vendors.txt in the downloadable files section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorTypes")]
		public string[] VendorTypes { get; set; }
		
		/// <summary>
		/// Requests containing any of these vertical ids will match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticals")]
		public string[] Verticals { get; set; }
	}
	
	public class PretargetingConfigDimensions
	{
		
		/// <summary>
		/// Height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public string Height { get; set; }
		
		/// <summary>
		/// Width in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public string Width { get; set; }
	}
	
	public class PretargetingConfigExcludedPlacements
	{
		
		/// <summary>
		/// The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of the placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PretargetingConfigPlacements
	{
		
		/// <summary>
		/// The value of the placement. Interpretation depends on the placement type, e.g. URL for a site placement, channel name for a channel placement, app id for a mobile app placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of the placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PretargetingConfigList
	{
		
		/// <summary>
		/// A list of pretargeting configs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PretargetingConfig[] Items { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.ComponentModel.DefaultValue("adexchangebuyer#pretargetingConfigList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adexchangebuyer#pretargetingConfigList";
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves the authenticated user's list of accounts.
		/// Adexchangebuyer_accounts_list accounts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AccountsList> Adexchangebuyer_accounts_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one account by ID.
		/// Adexchangebuyer_accounts_get accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_getAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account. This method supports patch semantics.
		/// Adexchangebuyer_accounts_patch accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_patchAsync(int id, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing account.
		/// Adexchangebuyer_accounts_update accounts/{id}
		/// </summary>
		/// <param name="id">The account id</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adexchangebuyer_accounts_updateAsync(int id, Account requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of billing information for all accounts of the authenticated user.
		/// Adexchangebuyer_billingInfo_list billinginfo
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BillingInfoList> Adexchangebuyer_billingInfo_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingInfoList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the billing information for one account specified by account ID.
		/// Adexchangebuyer_billingInfo_get billinginfo/{accountId}
		/// </summary>
		/// <param name="accountId">The account id.</param>
		/// <returns>Successful response</returns>
		public async Task<BillingInfo> Adexchangebuyer_billingInfo_getAsync(int accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+accountId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the budget information for the adgroup specified by the accountId and billingId.
		/// Adexchangebuyer_budget_get billinginfo/{accountId}/{billingId}
		/// </summary>
		/// <param name="accountId">The account id to get the budget information for.</param>
		/// <param name="billingId">The billing id to get the budget information for.</param>
		/// <returns>Successful response</returns>
		public async Task<Budget> Adexchangebuyer_budget_getAsync(string accountId, string billingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (billingId==null? "" : System.Uri.EscapeDataString(billingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. This method supports patch semantics.
		/// Adexchangebuyer_budget_patch billinginfo/{accountId}/{billingId}
		/// </summary>
		/// <param name="accountId">The account id associated with the budget being updated.</param>
		/// <param name="billingId">The billing id associated with the budget being updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Budget> Adexchangebuyer_budget_patchAsync(string accountId, string billingId, Budget requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (billingId==null? "" : System.Uri.EscapeDataString(billingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request.
		/// Adexchangebuyer_budget_update billinginfo/{accountId}/{billingId}
		/// </summary>
		/// <param name="accountId">The account id associated with the budget being updated.</param>
		/// <param name="billingId">The billing id associated with the budget being updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Budget> Adexchangebuyer_budget_updateAsync(string accountId, string billingId, Budget requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billinginfo/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (billingId==null? "" : System.Uri.EscapeDataString(billingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission.
		/// Adexchangebuyer_creatives_list creatives
		/// </summary>
		/// <param name="accountId">When specified, only creatives for the given account ids are returned.</param>
		/// <param name="buyerCreativeId">When specified, only creatives for the given buyer creative ids are returned.</param>
		/// <param name="maxResults">Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.</param>
		/// <param name="statusFilter">When specified, only creatives having the given status are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<CreativesList> Adexchangebuyer_creatives_listAsync(int[] accountId, string[] buyerCreativeId, int maxResults, string pageToken, Adexchangebuyer_creatives_listStatusFilter statusFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives?"+string.Join("&", accountId.Select(z => $"accountId={z}"))+"&"+string.Join("&", buyerCreativeId.Select(z => $"buyerCreativeId={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&statusFilter=" + statusFilter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreativesList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a new creative.
		/// Adexchangebuyer_creatives_insert creatives
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer_creatives_insertAsync(Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status for a single creative. A creative will be available 30-40 minutes after submission.
		/// Adexchangebuyer_creatives_get creatives/{accountId}/{buyerCreativeId}
		/// </summary>
		/// <param name="accountId">The id for the account that will serve this creative.</param>
		/// <param name="buyerCreativeId">The buyer-specific id for this creative.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Adexchangebuyer_creatives_getAsync(int accountId, string buyerCreativeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "creatives/"+accountId+"/"+ (buyerCreativeId==null? "" : System.Uri.EscapeDataString(buyerCreativeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Creative>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the authenticated user's list of direct deals.
		/// Adexchangebuyer_directDeals_list directdeals
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<DirectDealsList> Adexchangebuyer_directDeals_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "directdeals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DirectDealsList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets one direct deal by ID.
		/// Adexchangebuyer_directDeals_get directdeals/{id}
		/// </summary>
		/// <param name="id">The direct deal id</param>
		/// <returns>Successful response</returns>
		public async Task<DirectDeal> Adexchangebuyer_directDeals_getAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "directdeals/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DirectDeal>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the authenticated user's list of performance metrics.
		/// Adexchangebuyer_performanceReport_list performancereport
		/// </summary>
		/// <param name="accountId">The account id to get the reports.</param>
		/// <param name="endDateTime">The end time of the report in ISO 8601 timestamp format using UTC.</param>
		/// <param name="startDateTime">The start time of the report in ISO 8601 timestamp format using UTC.</param>
		/// <param name="maxResults">Maximum number of entries returned on one result page. If not set, the default is 100. Optional.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through performance reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<PerformanceReportList> Adexchangebuyer_performanceReport_listAsync(string accountId, string endDateTime, string startDateTime, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "performancereport?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&endDateTime=" + (endDateTime==null? "" : System.Uri.EscapeDataString(endDateTime))+"&startDateTime=" + (startDateTime==null? "" : System.Uri.EscapeDataString(startDateTime))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PerformanceReportList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of the authenticated user's pretargeting configurations.
		/// Adexchangebuyer_pretargetingConfig_list pretargetingconfigs/{accountId}
		/// </summary>
		/// <param name="accountId">The account id to get the pretargeting configs for.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfigList> Adexchangebuyer_pretargetingConfig_listAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfigList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a new pretargeting configuration.
		/// Adexchangebuyer_pretargetingConfig_insert pretargetingconfigs/{accountId}
		/// </summary>
		/// <param name="accountId">The account id to insert the pretargeting config for.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_insertAsync(string accountId, PretargetingConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing pretargeting config.
		/// Adexchangebuyer_pretargetingConfig_delete pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to delete the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Adexchangebuyer_pretargetingConfig_deleteAsync(string accountId, string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific pretargeting configuration
		/// Adexchangebuyer_pretargetingConfig_get pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to get the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_getAsync(string accountId, string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing pretargeting config. This method supports patch semantics.
		/// Adexchangebuyer_pretargetingConfig_patch pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to update the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to update.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_patchAsync(string accountId, string configId, PretargetingConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing pretargeting config.
		/// Adexchangebuyer_pretargetingConfig_update pretargetingconfigs/{accountId}/{configId}
		/// </summary>
		/// <param name="accountId">The account id to update the pretargeting config for.</param>
		/// <param name="configId">The specific id of the configuration to update.</param>
		/// <returns>Successful response</returns>
		public async Task<PretargetingConfig> Adexchangebuyer_pretargetingConfig_updateAsync(string accountId, string configId, PretargetingConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pretargetingconfigs/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PretargetingConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Adexchangebuyer_creatives_listStatusFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="approved")]
		approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disapproved")]
		disapproved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not_checked")]
		not_checked = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
