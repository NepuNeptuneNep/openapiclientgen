//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Calculate magnetic declination, inclination, total field intensity, and grid variation
		/// 
		/// at specified conditions.
		/// 
		/// App_api_wmm_endpoints_WMM_magnetic_field magnetic_field
		/// </summary>
		/// <param name="altitude">Geodetic Altitude 0 km to 600 km.</param>
		/// <param name="latitude">Geodetic Latitude. -90 deg (S) to 90 deg (N).</param>
		/// <param name="longitude">Geodetic Longitude. -180 deg (W) to 180 deg (E).</param>
		/// <param name="year">Year as a decimal in the range 2015-2025 (2017.5 would be half way through 2017).</param>
		/// <returns>Successful magnetic field intensity calculation</returns>
		public async Task<App_api_wmm_endpoints_WMM_magnetic_fieldReturn> App_api_wmm_endpoints_WMM_magnetic_fieldAsync(double altitude, double latitude, double longitude, double year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "magnetic_field?altitude="+altitude+"&latitude="+latitude+"&longitude="+longitude+"&year="+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<App_api_wmm_endpoints_WMM_magnetic_fieldReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class App_api_wmm_endpoints_WMM_magnetic_fieldReturn
	{
		
		/// <summary>
		/// The angle in the horizontal plane between magnetic north and true north. Declination is positive when magnetic north is east of true north.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="declination")]
		public App_api_wmm_endpoints_WMM_magnetic_fieldReturnDeclination Declination { get; set; }
		
		/// <summary>
		/// Referenced to grid north, referenced to 0 deg meridian of a polar stereographic projection.  Only defined for latitudes greater than 55 degrees and less than -55 degrees (arctic and antarctic).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid_variation")]
		public App_api_wmm_endpoints_WMM_magnetic_fieldReturnGrid_variation Grid_variation { get; set; }
		
		/// <summary>
		/// Also known as 'dip', is the angle made between the horizontal plane and the magnetic field vector at some position. Positive inclination corresponds to a downward pointing. 
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclination")]
		public App_api_wmm_endpoints_WMM_magnetic_fieldReturnInclination Inclination { get; set; }
		
		/// <summary>
		/// Total magnetic field intensity in nano Teslas.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_intensity")]
		public App_api_wmm_endpoints_WMM_magnetic_fieldReturnTotal_intensity Total_intensity { get; set; }
	}
	
	public class App_api_wmm_endpoints_WMM_magnetic_fieldReturnDeclination
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wmm_endpoints_WMM_magnetic_fieldReturnGrid_variation
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wmm_endpoints_WMM_magnetic_fieldReturnInclination
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public class App_api_wmm_endpoints_WMM_magnetic_fieldReturnTotal_intensity
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
