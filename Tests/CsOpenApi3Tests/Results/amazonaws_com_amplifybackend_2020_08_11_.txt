//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloneBackendResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GatewayTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAPIResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes the auth types for your configured data models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendAPIAuthType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Mode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAppSyncAuthSettings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_KEY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_IAM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_COGNITO_USER_POOLS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENID_CONNECT = 3,
	}
	
	/// <summary>
	/// The authentication settings for accessing provisioned data models in your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendAPIAppSyncAuthSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CognitoUserPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDAuthTTL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDIatTTL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDIssueURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDProviderName { get; set; }
	}
	
	/// <summary>
	/// Describes the conflict resolution configuration for your data model configured in your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendAPIConflictResolution
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResolutionStrategy ResolutionStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResolutionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMISTIC_CONCURRENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMERGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthResources
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_POOL_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTITY_POOL_AND_USER_POOL = 1,
	}
	
	/// <summary>
	/// Describes authorization configurations for the auth resources, configured as a part of your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthIdentityPoolConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool UnauthenticatedLogin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Service
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO = 0,
	}
	
	/// <summary>
	/// Describes the Amazon Cognito user pool configuration for the auth resource to be configured for your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthUserPoolConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthForgotPasswordConfig ForgotPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthMFAConfig Mfa { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthOAuthConfig OAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthPasswordPolicyConfig PasswordPolicy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequiredSignUpAttributesElement[] RequiredSignUpAttributes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SignInMethod SignInMethod { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthVerificationMessageConfig VerificationMessage { get; set; }
	}
	
	/// <summary>
	/// <b>(DEPRECATED)</b> Describes the forgot password policy for authenticating into the Amplify app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthForgotPasswordConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryMethod DeliveryMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailSettings EmailSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmsSettings SmsSettings { get; set; }
	}
	
	/// <summary>
	/// The type of verification message to send.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeliveryMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
	}
	
	/// <summary>
	/// The configuration for the email sent when an app user forgets their password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmailSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailSubject { get; set; }
	}
	
	/// <summary>
	/// SMS settings for authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SmsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SmsMessage { get; set; }
	}
	
	/// <summary>
	/// Describes whether to apply multi-factor authentication policies for your Amazon Cognito user pool configured as a part of your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthMFAConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MFAMode MFAMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Settings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MFAMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	/// <summary>
	/// The settings of your MFA configuration for the backend of your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Settings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MfaTypesElement[] MfaTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SmsMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MfaTypesElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP = 1,
	}
	
	/// <summary>
	/// Creates the OAuth configuration for your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthOAuthConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OAuthGrantType OAuthGrantType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OAuthScopesElement[] OAuthScopes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RedirectSignInURIs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RedirectSignOutURIs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SocialProviderSettings SocialProviderSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OAuthGrantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPLICIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OAuthScopesElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_COGNITO_SIGNIN_USER_ADMIN = 4,
	}
	
	/// <summary>
	/// The settings for using the social identity providers for access to your Amplify app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialProviderSettings
	{
		
		/// <summary>
		/// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BackendAuthSocialProviderConfig Facebook { get; set; }
		
		/// <summary>
		/// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BackendAuthSocialProviderConfig Google { get; set; }
		
		/// <summary>
		/// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BackendAuthSocialProviderConfig LoginWithAmazon { get; set; }
		
		/// <summary>
		/// Describes Apple social federation configurations for allowing your app users to sign in using OAuth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BackendAuthAppleProviderConfig SignInWithApple { get; set; }
	}
	
	/// <summary>
	/// Describes third-party social federation configurations for allowing your app users to sign in using OAuth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendAuthSocialProviderConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientSecret { get; set; }
	}
	
	/// <summary>
	/// Describes Apple social federation configurations for allowing your app users to sign in using OAuth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendAuthAppleProviderConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TeamId { get; set; }
	}
	
	/// <summary>
	/// The password policy configuration for the backend to your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthPasswordPolicyConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalConstraintsElement[] AdditionalConstraints { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double MinimumLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AdditionalConstraintsElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE_DIGIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE_LOWERCASE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE_SYMBOL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE_UPPERCASE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RequiredSignUpAttributesElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTHDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAMILY_NAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENDER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIVEN_NAME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCALE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE_NAME = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NICKNAME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_NUMBER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PICTURE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED_USERNAME = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATED_AT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBSITE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONE_INFO = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SignInMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_AND_PHONE_NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE_NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USERNAME = 3,
	}
	
	/// <summary>
	/// Creates an email or SMS verification message for the auth resource configured for your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthVerificationMessageConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryMethod DeliveryMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailSettings EmailSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmsSettings SmsSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendStorageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes the read, write, and delete permissions users have against your storage S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendStoragePermissions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthenticatedElement[] Authenticated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnAuthenticatedElement[] UnAuthenticated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthenticatedElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_AND_UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UnAuthenticatedElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_AND_UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ServiceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTokenResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChallengeCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendAPIResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendAuthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendStorageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTokenResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSuccess { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateBackendAPIModelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AmplifyFeatureFlags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmplifyMetaConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] BackendEnvironmentList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendAPIResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIResourceConfig ResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The resource config for the data model, configured as a part of the Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendAPIResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType[] AdditionalAuthTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIConflictResolution ConflictResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType DefaultAuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransformSchema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendAPIModelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Models { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelIntrospectionSchema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendAuthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthResourceConfig ResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Defines the resource configuration when creating an auth resource in your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthResourceConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthResources AuthResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthIdentityPoolConfig IdentityPoolConfigs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Service Service { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthUserPoolConfig UserPoolConfigs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendStorageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetBackendStorageResourceConfig ResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The details for a backend storage resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendStorageResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Imported { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendStoragePermissions Permissions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTokenResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChallengeCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ttl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportBackendAuthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportBackendStorageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBackendJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendJobRespObj[] Jobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The response object for this operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendJobRespObj
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListS3BucketsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3BucketInfo[] Buckets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the metadata of the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3BucketInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveAllBackendsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveBackendConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAPIResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes the authorization configuration for the Amazon Cognito identity pool, provisioned as a part of your auth resource in the Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthIdentityPoolConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UnauthenticatedLogin { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon Cognito user pool configuration for the authorization resource to be configured for your Amplify project on an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthUserPoolConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthForgotPasswordConfig ForgotPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthMFAConfig Mfa { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthOAuthConfig OAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthPasswordPolicyConfig PasswordPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthVerificationMessageConfig VerificationMessage { get; set; }
	}
	
	/// <summary>
	/// <b>(DEPRECATED)</b> Describes the forgot password policy for authenticating into the Amplify app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthForgotPasswordConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryMethod DeliveryMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailSettings EmailSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmsSettings SmsSettings { get; set; }
	}
	
	/// <summary>
	/// Updates the multi-factor authentication (MFA) configuration for the backend of your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthMFAConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MFAMode MFAMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Settings Settings { get; set; }
	}
	
	/// <summary>
	/// The OAuth configurations for authenticating users into your Amplify app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthOAuthConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OAuthGrantType OAuthGrantType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OAuthScopesElement[] OAuthScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RedirectSignInURIs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RedirectSignOutURIs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SocialProviderSettings SocialProviderSettings { get; set; }
	}
	
	/// <summary>
	/// Describes the password policy for your Amazon Cognito user pool configured as a part of your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthPasswordPolicyConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalConstraintsElement[] AdditionalConstraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinimumLength { get; set; }
	}
	
	/// <summary>
	/// Updates the configuration of the email or SMS message for the auth resource configured for your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthVerificationMessageConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryMethod DeliveryMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailSettings EmailSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SmsSettings SmsSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendManagerAppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoginAuthConfigReqObj LoginAuthConfig { get; set; }
	}
	
	/// <summary>
	/// The request object for this operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoginAuthConfigReqObj
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsCognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsCognitoRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsUserPoolsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsUserPoolsWebClientId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendStorageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The request body for CloneBackend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloneBackendRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetEnvironmentName { get; set; }
	}
	
	/// <summary>
	/// The request body for CreateBackendAPI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAPIRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The request body for CreateBackendAuth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendAuthRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The request body for CreateBackendConfig.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendConfigRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendManagerAppId { get; set; }
	}
	
	/// <summary>
	/// Defines the resource configuration for the data model in your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceConfig
	{
	}
	
	/// <summary>
	/// The request body for CreateBackend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfig ResourceConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The resource configuration for creating backend storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendStorageResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackendStoragePermissions Permissions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
	}
	
	/// <summary>
	/// The request body for CreateBackendStorage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendStorageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendStorageResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTokenRequest
	{
	}
	
	/// <summary>
	/// The request body for DeleteBackendAPI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendAPIRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The request body for DeleteBackendAuth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendAuthRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendRequest
	{
	}
	
	/// <summary>
	/// The request body for DeleteBackendStorage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendStorageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTokenRequest
	{
	}
	
	/// <summary>
	/// The request body for GenerateBackendAPIModels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateBackendAPIModelsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The request body for GetBackendAPIModels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendAPIModelsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The request body for GetBackendAPI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendAPIRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The request body for GetBackendAuth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendAuthRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendJobRequest
	{
	}
	
	/// <summary>
	/// The request body for GetBackend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BackendEnvironmentName { get; set; }
	}
	
	/// <summary>
	/// The request body for GetBackendStorage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendStorageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTokenRequest
	{
	}
	
	/// <summary>
	/// The request body for ImportBackendAuth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportBackendAuthRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NativeClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WebClientId { get; set; }
	}
	
	/// <summary>
	/// The request body for ImportBackendStorage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportBackendStorageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
	}
	
	/// <summary>
	/// The request body for ListBackendJobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBackendJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The request body for S3Buckets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListS3BucketsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The request body for RemoveAllBackends.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveAllBackendsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CleanAmplifyApp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveBackendConfigRequest
	{
	}
	
	/// <summary>
	/// The request body for UpdateBackendAPI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAPIRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Defines the resource configuration when updating an authentication resource in your Amplify project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthResourceConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthResources AuthResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthIdentityPoolConfig IdentityPoolConfigs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Service Service { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthUserPoolConfig UserPoolConfigs { get; set; }
	}
	
	/// <summary>
	/// The request body for UpdateBackendAuth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendAuthRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// The request body for UpdateBackendConfig.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendConfigRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoginAuthConfigReqObj LoginAuthConfig { get; set; }
	}
	
	/// <summary>
	/// The request body for GetBackendJob.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The resource configuration for updating backend storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendStorageResourceConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackendStoragePermissions Permissions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
	}
	
	/// <summary>
	/// The request body for UpdateBackendStorage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBackendStorageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendStorageResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This operation clones an existing backend.
		/// CloneBackend backend/{appId}/environments/{backendEnvironmentName}/clone
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<CloneBackendResponse> CloneBackendAsync(string appId, string backendEnvironmentName, CloneBackendPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environments/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/clone";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CloneBackendResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation creates a backend for an Amplify app. Backends are automatically created at the time of app creation.
		/// CreateBackend backend
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBackendResponse> CreateBackendAsync(CreateBackendPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBackendResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new backend API resource.
		/// CreateBackendAPI backend/{appId}/api
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateBackendAPIResponse> CreateBackendAPIAsync(string appId, CreateBackendAPIPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/api";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBackendAPIResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new backend authentication resource.
		/// CreateBackendAuth backend/{appId}/auth
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateBackendAuthResponse> CreateBackendAuthAsync(string appId, CreateBackendAuthPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/auth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBackendAuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a config object for a backend.
		/// CreateBackendConfig backend/{appId}/config
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateBackendConfigResponse> CreateBackendConfigAsync(string appId, CreateBackendConfigPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBackendConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a backend storage resource.
		/// CreateBackendStorage backend/{appId}/storage
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateBackendStorageResponse> CreateBackendStorageAsync(string appId, CreateBackendStoragePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/storage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBackendStorageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates a one-time challenge code to authenticate a user into your Amplify Admin UI.
		/// CreateToken backend/{appId}/challenge
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateTokenResponse> CreateTokenAsync(string appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/challenge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an existing environment from your Amplify project.
		/// DeleteBackend backend/{appId}/environments/{backendEnvironmentName}/remove
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBackendResponse> DeleteBackendAsync(string appId, string backendEnvironmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/environments/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBackendResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing backend API resource.
		/// DeleteBackendAPI backend/{appId}/api/{backendEnvironmentName}/remove
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBackendAPIResponse> DeleteBackendAPIAsync(string appId, string backendEnvironmentName, DeleteBackendAPIPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/api/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBackendAPIResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing backend authentication resource.
		/// DeleteBackendAuth backend/{appId}/auth/{backendEnvironmentName}/remove
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBackendAuthResponse> DeleteBackendAuthAsync(string appId, string backendEnvironmentName, DeleteBackendAuthPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/auth/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBackendAuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified backend storage resource.
		/// DeleteBackendStorage backend/{appId}/storage/{backendEnvironmentName}/remove
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBackendStorageResponse> DeleteBackendStorageAsync(string appId, string backendEnvironmentName, DeleteBackendStoragePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/storage/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBackendStorageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the challenge token based on the given appId and sessionId.
		/// DeleteToken backend/{appId}/challenge/{sessionId}/remove
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="sessionId">The session ID.</param>
		/// <returns>Success</returns>
		public async Task<DeleteTokenResponse> DeleteTokenAsync(string appId, string sessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/challenge/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a model schema for an existing backend API resource.
		/// GenerateBackendAPIModels backend/{appId}/api/{backendEnvironmentName}/generateModels
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<GenerateBackendAPIModelsResponse> GenerateBackendAPIModelsAsync(string appId, string backendEnvironmentName, GenerateBackendAPIModelsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/api/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/generateModels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenerateBackendAPIModelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides project-level details for your Amplify UI project.
		/// GetBackend backend/{appId}/details
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<GetBackendResponse> GetBackendAsync(string appId, GetBackendPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBackendResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the details for a backend API.
		/// GetBackendAPI backend/{appId}/api/{backendEnvironmentName}/details
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<GetBackendAPIResponse> GetBackendAPIAsync(string appId, string backendEnvironmentName, GetBackendAPIPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/api/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBackendAPIResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a model introspection schema for an existing backend API resource.
		/// GetBackendAPIModels backend/{appId}/api/{backendEnvironmentName}/getModels
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<GetBackendAPIModelsResponse> GetBackendAPIModelsAsync(string appId, string backendEnvironmentName, GetBackendAPIModelsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/api/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/getModels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBackendAPIModelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a backend auth details.
		/// GetBackendAuth backend/{appId}/auth/{backendEnvironmentName}/details
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<GetBackendAuthResponse> GetBackendAuthAsync(string appId, string backendEnvironmentName, GetBackendAuthPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/auth/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBackendAuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific job.
		/// GetBackendJob backend/{appId}/job/{backendEnvironmentName}/{jobId}
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <param name="jobId">The ID for the job.</param>
		/// <returns>Success</returns>
		public async Task<GetBackendJobResponse> GetBackendJobAsync(string appId, string backendEnvironmentName, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/job/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBackendJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a specific job.
		/// UpdateBackendJob backend/{appId}/job/{backendEnvironmentName}/{jobId}
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <param name="jobId">The ID for the job.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBackendJobResponse> UpdateBackendJobAsync(string appId, string backendEnvironmentName, string jobId, UpdateBackendJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/job/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBackendJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets details for a backend storage resource.
		/// GetBackendStorage backend/{appId}/storage/{backendEnvironmentName}/details
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<GetBackendStorageResponse> GetBackendStorageAsync(string appId, string backendEnvironmentName, GetBackendStoragePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/storage/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBackendStorageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the challenge token based on the given appId and sessionId.
		/// GetToken backend/{appId}/challenge/{sessionId}
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="sessionId">The session ID.</param>
		/// <returns>Success</returns>
		public async Task<GetTokenResponse> GetTokenAsync(string appId, string sessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/challenge/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports an existing backend authentication resource.
		/// ImportBackendAuth backend/{appId}/auth/{backendEnvironmentName}/import
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<ImportBackendAuthResponse> ImportBackendAuthAsync(string appId, string backendEnvironmentName, ImportBackendAuthPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/auth/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportBackendAuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports an existing backend storage resource.
		/// ImportBackendStorage backend/{appId}/storage/{backendEnvironmentName}/import
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<ImportBackendStorageResponse> ImportBackendStorageAsync(string appId, string backendEnvironmentName, ImportBackendStoragePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/storage/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"/import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportBackendStorageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the jobs for the backend of an Amplify app.
		/// ListBackendJobs backend/{appId}/job/{backendEnvironmentName}
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBackendJobsResponse> ListBackendJobsAsync(string appId, string backendEnvironmentName, string MaxResults, string NextToken, ListBackendJobsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/job/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBackendJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The list of S3 buckets in your account.
		/// ListS3Buckets s3Buckets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListS3BucketsResponse> ListS3BucketsAsync(ListS3BucketsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "s3Buckets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListS3BucketsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes all backend environments from your Amplify project.
		/// RemoveAllBackends backend/{appId}/remove
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<RemoveAllBackendsResponse> RemoveAllBackendsAsync(string appId, RemoveAllBackendsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveAllBackendsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the AWS resources required to access the Amplify Admin UI.
		/// RemoveBackendConfig backend/{appId}/config/remove
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<RemoveBackendConfigResponse> RemoveBackendConfigAsync(string appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/config/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveBackendConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing backend API resource.
		/// UpdateBackendAPI backend/{appId}/api/{backendEnvironmentName}
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBackendAPIResponse> UpdateBackendAPIAsync(string appId, string backendEnvironmentName, UpdateBackendAPIPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/api/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBackendAPIResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing backend authentication resource.
		/// UpdateBackendAuth backend/{appId}/auth/{backendEnvironmentName}
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBackendAuthResponse> UpdateBackendAuthAsync(string appId, string backendEnvironmentName, UpdateBackendAuthPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/auth/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBackendAuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the AWS resources required to access the Amplify Admin UI.
		/// UpdateBackendConfig backend/{appId}/config/update
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBackendConfigResponse> UpdateBackendConfigAsync(string appId, UpdateBackendConfigPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/config/update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBackendConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing backend storage resource.
		/// UpdateBackendStorage backend/{appId}/storage/{backendEnvironmentName}
		/// </summary>
		/// <param name="appId">The app ID.</param>
		/// <param name="backendEnvironmentName">The name of the backend environment.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBackendStorageResponse> UpdateBackendStorageAsync(string appId, string backendEnvironmentName, UpdateBackendStoragePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backend/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/storage/"+ (backendEnvironmentName==null? "" : System.Uri.EscapeDataString(backendEnvironmentName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBackendStorageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CloneBackendPostBody
	{
		
		/// <summary>
		/// The name of the destination backend environment to be created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetEnvironmentName")]
		public string TargetEnvironmentName { get; set; }
	}
	
	public class CreateBackendPostBody
	{
		
		/// <summary>
		/// The app ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// The name of the app.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appName")]
		public string AppName { get; set; }
		
		/// <summary>
		/// The name of the backend environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentName")]
		public string BackendEnvironmentName { get; set; }
		
		/// <summary>
		/// Defines the resource configuration for the data model in your Amplify project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public string ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class CreateBackendAPIPostBody
	{
		
		/// <summary>
		/// The name of the backend environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentName")]
		public string BackendEnvironmentName { get; set; }
		
		/// <summary>
		/// The resource config for the data model, configured as a part of the Amplify project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public CreateBackendAPIPostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class CreateBackendAPIPostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType[] AdditionalAuthTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIConflictResolution ConflictResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType DefaultAuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransformSchema { get; set; }
	}
	
	public class CreateBackendAuthPostBody
	{
		
		/// <summary>
		/// The name of the backend environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentName")]
		public string BackendEnvironmentName { get; set; }
		
		/// <summary>
		/// Defines the resource configuration when creating an auth resource in your Amplify project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public CreateBackendAuthPostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class CreateBackendAuthPostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthResources AuthResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthIdentityPoolConfig IdentityPoolConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Service Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBackendAuthUserPoolConfig UserPoolConfigs { get; set; }
	}
	
	public class CreateBackendConfigPostBody
	{
		
		/// <summary>
		/// The app ID for the backend manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendManagerAppId")]
		public string BackendManagerAppId { get; set; }
	}
	
	public class CreateBackendStoragePostBody
	{
		
		/// <summary>
		/// The name of the backend environment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentName")]
		public string BackendEnvironmentName { get; set; }
		
		/// <summary>
		/// The resource configuration for creating backend storage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public CreateBackendStoragePostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of the storage resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class CreateBackendStoragePostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendStoragePermissions Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
	}
	
	public class DeleteBackendAPIPostBody
	{
		
		/// <summary>
		/// The resource config for the data model, configured as a part of the Amplify project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public DeleteBackendAPIPostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class DeleteBackendAPIPostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType[] AdditionalAuthTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIConflictResolution ConflictResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType DefaultAuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransformSchema { get; set; }
	}
	
	public class DeleteBackendAuthPostBody
	{
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class DeleteBackendStoragePostBody
	{
		
		/// <summary>
		/// The name of the storage resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The name of the storage service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public ServiceName ServiceName { get; set; }
	}
	
	public class GenerateBackendAPIModelsPostBody
	{
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class GetBackendPostBody
	{
		
		/// <summary>
		/// The name of the backend environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentName")]
		public string BackendEnvironmentName { get; set; }
	}
	
	public class GetBackendAPIPostBody
	{
		
		/// <summary>
		/// The resource config for the data model, configured as a part of the Amplify project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public GetBackendAPIPostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class GetBackendAPIPostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType[] AdditionalAuthTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIConflictResolution ConflictResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType DefaultAuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransformSchema { get; set; }
	}
	
	public class GetBackendAPIModelsPostBody
	{
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class GetBackendAuthPostBody
	{
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class UpdateBackendJobPostBody
	{
		
		/// <summary>
		/// Filters the list of response objects to include only those with the specified operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Filters the list of response objects to include only those with the specified status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class GetBackendStoragePostBody
	{
		
		/// <summary>
		/// The name of the storage resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class ImportBackendAuthPostBody
	{
		
		/// <summary>
		/// The ID of the Amazon Cognito identity pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityPoolId")]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// The ID of the Amazon Cognito native client.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nativeClientId")]
		public string NativeClientId { get; set; }
		
		/// <summary>
		/// The ID of the Amazon Cognito user pool.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userPoolId")]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// The ID of the Amazon Cognito web client.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webClientId")]
		public string WebClientId { get; set; }
	}
	
	public class ImportBackendStoragePostBody
	{
		
		/// <summary>
		/// The name of the S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// The name of the storage service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public ServiceName ServiceName { get; set; }
	}
	
	public class ListBackendJobsPostBody
	{
		
		/// <summary>
		/// The ID for the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The maximum number of results that you want in the response.
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token for the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Filters the list of response objects to include only those with the specified operation name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public string Operation { get; set; }
		
		/// <summary>
		/// Filters the list of response objects to include only those with the specified status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class ListS3BucketsPostBody
	{
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	public class RemoveAllBackendsPostBody
	{
		
		/// <summary>
		/// Cleans up the Amplify Console app if this value is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cleanAmplifyApp")]
		public System.Nullable<System.Boolean> CleanAmplifyApp { get; set; }
	}
	
	public class UpdateBackendAPIPostBody
	{
		
		/// <summary>
		/// The resource config for the data model, configured as a part of the Amplify project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public UpdateBackendAPIPostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class UpdateBackendAPIPostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType[] AdditionalAuthTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIConflictResolution ConflictResolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendAPIAuthType DefaultAuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransformSchema { get; set; }
	}
	
	public class UpdateBackendAuthPostBody
	{
		
		/// <summary>
		/// Defines the resource configuration when updating an authentication resource in your Amplify project.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public UpdateBackendAuthPostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of this resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class UpdateBackendAuthPostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthResources AuthResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthIdentityPoolConfig IdentityPoolConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Service Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBackendAuthUserPoolConfig UserPoolConfigs { get; set; }
	}
	
	public class UpdateBackendConfigPostBody
	{
		
		/// <summary>
		/// The request object for this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginAuthConfig")]
		public UpdateBackendConfigPostBodyLoginAuthConfig LoginAuthConfig { get; set; }
	}
	
	public class UpdateBackendConfigPostBodyLoginAuthConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsCognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsCognitoRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsUserPoolsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsUserPoolsWebClientId { get; set; }
	}
	
	public class UpdateBackendStoragePostBody
	{
		
		/// <summary>
		/// The resource configuration for updating backend storage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceConfig")]
		public UpdateBackendStoragePostBodyResourceConfig ResourceConfig { get; set; }
		
		/// <summary>
		/// The name of the storage resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public class UpdateBackendStoragePostBodyResourceConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BackendStoragePermissions Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceName ServiceName { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
