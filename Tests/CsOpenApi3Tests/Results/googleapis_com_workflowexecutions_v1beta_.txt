//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request for the CancelExecution method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelExecutionRequest
	{
	}
	
	/// <summary>
	/// Error describes why the execution was abnormally terminated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// Human-readable stack trace string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		/// <summary>
		/// Error message and data returned represented as a JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// A collection of stack elements (frames) where an error occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
	}
	
	/// <summary>
	/// A collection of stack elements (frames) where an error occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StackTrace
	{
		
		/// <summary>
		/// An array of stack elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public StackTraceElement[] Elements { get; set; }
	}
	
	/// <summary>
	/// A single stack element (frame) where an error occurred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StackTraceElement
	{
		
		/// <summary>
		/// Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
		
		/// <summary>
		/// The routine where the error occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routine")]
		public string Routine { get; set; }
		
		/// <summary>
		/// The step the error occurred at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public string Step { get; set; }
	}
	
	/// <summary>
	/// Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Position
	{
		
		/// <summary>
		/// The source code column position (of the line) the current instruction was generated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public string Column { get; set; }
		
		/// <summary>
		/// The number of bytes of source code making up this stack trace element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// The source code line number the current instruction was generated from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
	}
	
	/// <summary>
	/// A running instance of a [Workflow](/workflows/docs/reference/rest/v1beta/projects.locations.workflows).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Execution
	{
		
		/// <summary>
		/// Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public string Argument { get; set; }
		
		/// <summary>
		/// The call logging level associated to this execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callLogLevel")]
		public System.Nullable<ExecutionCallLogLevel> CallLogLevel { get; set; }
		
		/// <summary>
		/// Output only. Marks the end of execution, successful or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Error describes why the execution was abnormally terminated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// Output only. Marks the beginning of execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. Current state of the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ExecutionState> State { get; set; }
		
		/// <summary>
		/// Represents the current status of this execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
		
		/// <summary>
		/// Output only. Revision of the workflow this execution is using.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workflowRevisionId")]
		public string WorkflowRevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionCallLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALL_LOG_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_ALL_CALLS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_ERRORS_ONLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 6,
	}
	
	/// <summary>
	/// Represents the current status of this execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSteps")]
		public Step[] CurrentSteps { get; set; }
	}
	
	/// <summary>
	/// Represents a step of the workflow this execution is running.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Step
	{
		
		/// <summary>
		/// Name of a routine within the workflow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routine")]
		public string Routine { get; set; }
		
		/// <summary>
		/// Name of a step within the routine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public string Step1 { get; set; }
	}
	
	/// <summary>
	/// Response for the ListExecutions method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExecutionsResponse
	{
		
		/// <summary>
		/// The executions which match the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executions")]
		public Execution[] Executions { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns an execution of the given name.
		/// Workflowexecutions_projects_locations_workflows_executions_get v1beta/{name}
		/// </summary>
		/// <param name="name">Required. Name of the execution to be retrieved. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}</param>
		/// <param name="view">Optional. A view defining which fields should be filled in the returned execution. The API will default to the FULL view.</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Workflowexecutions_projects_locations_workflows_executions_getAsync(string name, Workflowexecutions_projects_locations_workflows_executions_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Execution>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an execution of the given name.
		/// Workflowexecutions_projects_locations_workflows_executions_cancel v1beta/{name}:cancel
		/// </summary>
		/// <param name="name">Required. Name of the execution to be cancelled. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Workflowexecutions_projects_locations_workflows_executions_cancelAsync(string name, CancelExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Execution>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of executions which belong to the workflow with the given name. The method returns executions of all workflow revisions. Returned executions are ordered by their start time (newest first).
		/// Workflowexecutions_projects_locations_workflows_executions_list v1beta/{parent}/executions
		/// </summary>
		/// <param name="parent">Required. Name of the workflow for which the executions should be listed. Format: projects/{project}/locations/{location}/workflows/{workflow}</param>
		/// <param name="pageSize">Maximum number of executions to return per call. Max supported value depends on the selected Execution view: it's 10000 for BASIC and 100 for FULL. The default value used if the field is not specified is 100, regardless of the selected view. Values greater than the max value will be coerced down to it.</param>
		/// <param name="pageToken">A page token, received from a previous `ListExecutions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListExecutions` must match the call that provided the page token.</param>
		/// <param name="view">Optional. A view defining which fields should be filled in the returned executions. The API will default to the BASIC view.</param>
		/// <returns>Successful response</returns>
		public async Task<ListExecutionsResponse> Workflowexecutions_projects_locations_workflows_executions_listAsync(string parent, int pageSize, string pageToken, Workflowexecutions_projects_locations_workflows_executions_getView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/executions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListExecutionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new execution using the latest revision of the given workflow.
		/// Workflowexecutions_projects_locations_workflows_executions_create v1beta/{parent}/executions
		/// </summary>
		/// <param name="parent">Required. Name of the workflow for which an execution should be created. Format: projects/{project}/locations/{location}/workflows/{workflow} The latest revision of the workflow will be used.</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Workflowexecutions_projects_locations_workflows_executions_createAsync(string parent, Execution requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/executions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Execution>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Workflowexecutions_projects_locations_workflows_executions_getView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
