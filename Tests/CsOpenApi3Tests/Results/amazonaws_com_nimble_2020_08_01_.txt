//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptEulasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="eulaAcceptances")]
		public EulaAcceptance[] EulaAcceptances { get; set; }
	}
	
	/// <summary>
	/// The acceptance of a EULA, required to use Amazon-provided streaming images.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EulaAcceptance
	{
		
		[System.Runtime.Serialization.DataMember(Name="acceptedAt")]
		public System.DateTimeOffset AcceptedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acceptedBy")]
		public string AcceptedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accepteeId")]
		public string AccepteeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eulaAcceptanceId")]
		public string EulaAcceptanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eulaId")]
		public string EulaId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLaunchProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfile")]
		public LaunchProfile LaunchProfile { get; set; }
	}
	
	/// <summary>
	/// <p>A launch profile controls your artist workforce’s access to studio components, like compute farms, shared file systems, managed file systems, and license server configurations, as well as instance types and Amazon Machine Images (AMIs). </p> <p>Studio administrators create launch profiles in the Nimble Studio console. Artists can use their launch profiles to launch an instance from the Nimble Studio portal. Each user’s launch profile defines how they can launch a streaming session. By default, studio admins can use all launch profiles.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2SubnetIds")]
		public string[] Ec2SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileId")]
		public string LaunchProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileProtocolVersions")]
		public string[] LaunchProfileProtocolVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public LaunchProfileState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public LaunchProfileStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamConfiguration")]
		public StreamConfiguration StreamConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentIds")]
		public string[] StudioComponentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationResults")]
		public ValidationResult[] ValidationResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchProfileState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchProfileStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PROFILE_CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PROFILE_UPDATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PROFILE_DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PROFILE_CREATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PROFILE_UPDATE_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PROFILE_DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_IMAGE_NOT_FOUND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_IMAGE_NOT_READY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_KEY_ACCESS_DENIED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_KEY_NOT_FOUND = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SUBNETS_PROVIDED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_INSTANCE_TYPES_PROVIDED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SUBNETS_COMBINATION = 14,
	}
	
	/// <summary>
	/// A configuration for a streaming session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="automaticTerminationMode")]
		public AutomaticTerminationMode AutomaticTerminationMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clipboardMode")]
		public StreamingClipboardMode ClipboardMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceTypes")]
		public StreamingInstanceType[] Ec2InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxStoppedSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxStoppedSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionBackup")]
		public StreamConfigurationSessionBackup SessionBackup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionPersistenceMode")]
		public AutomaticTerminationMode SessionPersistenceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionStorage")]
		public StreamConfigurationSessionStorage SessionStorage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streamingImageIds")]
		public string[] StreamingImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeConfiguration")]
		public VolumeConfiguration VolumeConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutomaticTerminationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingClipboardMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.xlarge")]
		g4dn_xlarge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.2xlarge")]
		g4dn_2xlarge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.4xlarge")]
		g4dn_4xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.8xlarge")]
		g4dn_8xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.12xlarge")]
		g4dn_12xlarge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.16xlarge")]
		g4dn_16xlarge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g3.4xlarge")]
		g3_4xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g3s.xlarge")]
		g3s_xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.xlarge")]
		g5_xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.2xlarge")]
		g5_2xlarge = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.4xlarge")]
		g5_4xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.8xlarge")]
		g5_8xlarge = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.16xlarge")]
		g5_16xlarge = 12,
	}
	
	/// <summary>
	/// Configures how streaming sessions are backed up when launched from this launch profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamConfigurationSessionBackup
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxBackupsToRetain")]
		public System.Nullable<System.Int32> MaxBackupsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public SessionBackupMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SessionBackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATED = 1,
	}
	
	/// <summary>
	/// The configuration for a streaming session’s upload storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamConfigurationSessionStorage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public StreamingSessionStorageMode[] Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="root")]
		public StreamingSessionStorageRoot Root { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingSessionStorageMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD = 0,
	}
	
	/// <summary>
	/// The upload storage root location (folder) on streaming workstations where files are uploaded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingSessionStorageRoot
	{
		
		[System.Runtime.Serialization.DataMember(Name="linux")]
		public string Linux { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windows")]
		public string Windows { get; set; }
	}
	
	/// <summary>
	/// <p>Custom volume configuration for the root volumes that are attached to streaming sessions.</p> <p>This parameter is only allowed when <code>sessionPersistenceMode</code> is <code>ACTIVATED</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="iops")]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throughput")]
		public System.Nullable<System.Int32> Throughput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tags
	{
	}
	
	/// <summary>
	/// The launch profile validation result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public LaunchProfileValidationState State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public LaunchProfileValidationStatusCode StatusCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LaunchProfileValidationType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchProfileValidationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED_INTERNAL_SERVER_ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchProfileValidationStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED_SUBNET_NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED_UNAUTHORIZED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_FAILED_INTERNAL_SERVER_ERROR = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchProfileValidationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_SUBNET_ASSOCIATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_NETWORK_ACL_ASSOCIATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATE_SECURITY_GROUP_ASSOCIATION = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SessionPersistenceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStreamingImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamingImage")]
		public StreamingImage StreamingImage { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a streaming image resource.</p> <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p> <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p> <p>You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2ImageId")]
		public string Ec2ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionConfiguration")]
		public StreamingImageEncryptionConfiguration EncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eulaIds")]
		public string[] EulaIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public StreamingImageState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public StreamingImageStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingImageId")]
		public string StreamingImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies how a streaming image is encrypted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingImageEncryptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public StreamingImageEncryptionConfigurationKeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingImageEncryptionConfigurationKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED_KEY = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingImageState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 7,
	}
	
	/// <summary>
	/// The status code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingImageStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_IMAGE_CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_IMAGE_READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_IMAGE_DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_IMAGE_DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_IMAGE_UPDATE_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStreamingSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public StreamingSession Session { get; set; }
	}
	
	/// <summary>
	/// A streaming session is a virtual workstation created using a particular launch profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingSession
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="automaticTerminationMode")]
		public AutomaticTerminationMode AutomaticTerminationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backupMode")]
		public SessionBackupMode BackupMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceType")]
		public string Ec2InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileId")]
		public string LaunchProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxBackupsToRetain")]
		public System.Nullable<System.Int32> MaxBackupsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionPersistenceMode")]
		public AutomaticTerminationMode SessionPersistenceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedBy")]
		public string StartedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedFromBackupId")]
		public string StartedFromBackupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public StreamingSessionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public StreamingSessionStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopAt")]
		public System.DateTimeOffset StopAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stoppedAt")]
		public System.DateTimeOffset StoppedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stoppedBy")]
		public string StoppedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingImageId")]
		public string StreamingImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="terminateAt")]
		public System.DateTimeOffset TerminateAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeConfiguration")]
		public VolumeConfiguration VolumeConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeRetentionMode")]
		public VolumeRetentionMode VolumeRetentionMode { get; set; }
	}
	
	/// <summary>
	/// The streaming session state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingSessionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_FAILED = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingSessionStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_READY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_CREATE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_CAPACITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_CONNECTION_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZATION_SCRIPT_ERROR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECRYPT_STREAMING_IMAGE_ERROR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_INTERFACE_ERROR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_STOPPED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_STARTED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_STOP_IN_PROGRESS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING_SESSION_START_IN_PROGRESS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMI_VALIDATION_ERROR = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeRetentionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStreamingSessionStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public StreamingSessionStream Stream { get; set; }
	}
	
	/// <summary>
	/// A stream is an active connection to a streaming session, enabling a studio user to control the streaming session using a compatible client. Streaming session streams are compatible with the NICE DCV web client, included in the Nimble Studio portal, or the NICE DCV desktop client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingSessionStream
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.DateTimeOffset ExpiresAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public StreamingSessionStreamState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public StreamingSessionStreamStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingSessionStreamState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamingSessionStreamStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_CONNECTION_ERROR = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStudioResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="studio")]
		public Studio Studio { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a studio resource.</p> <p>A studio is the core resource used with Nimble Studio. You must create a studio first, before any other resource type can be created. All other resources you create and manage in Nimble Studio are contained within a studio.</p> <p>When creating a studio, you must provides two IAM roles for use with the Nimble Studio portal. These roles are assumed by your users when they log in to the Nimble Studio portal via IAM Identity Center and your identity source.</p> <p>The user role must have the <code>AmazonNimbleStudio-StudioUser</code> managed policy attached for the portal to function properly.</p> <p>The admin role must have the <code>AmazonNimbleStudio-StudioAdmin</code> managed policy attached for the portal to function properly.</p> <p>Your studio roles must trust the <code>identity.nimble.amazonaws.com</code> service principal to function properly.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Studio
	{
		
		[System.Runtime.Serialization.DataMember(Name="adminRoleArn")]
		public string AdminRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homeRegion")]
		public string HomeRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssoClientId")]
		public string SsoClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public LaunchProfileState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public StudioStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioEncryptionConfiguration")]
		public StudioEncryptionConfiguration StudioEncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioId")]
		public string StudioId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioName")]
		public string StudioName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioUrl")]
		public string StudioUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userRoleArn")]
		public string UserRoleArn { get; set; }
	}
	
	/// <summary>
	/// The status code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_UPDATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_CREATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_UPDATE_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SSO_NOT_ENABLED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SSO_ACCESS_DENIED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_NOT_OWNED_BY_STUDIO_OWNER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_COULD_NOT_BE_ASSUMED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_KEY_NOT_FOUND = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_KEY_ACCESS_DENIED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SSO_CONFIGURATION_REPAIRED = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_STS_REGION_DISABLED = 18,
	}
	
	/// <summary>
	/// Configuration of the encryption method that is used for the studio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudioEncryptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public StudioEncryptionConfigurationKeyType KeyType { get; set; }
	}
	
	/// <summary>
	/// The type of KMS key that is used to encrypt studio data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioEncryptionConfigurationKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_OWNED_KEY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED_KEY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStudioComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="studioComponent")]
		public StudioComponent StudioComponent { get; set; }
	}
	
	/// <summary>
	/// <p>A studio component represents a network resource to be used by a studio's users and workflows. A typical studio contains studio components for each of the following: render farm, Active Directory, licensing, and file system.</p> <p>Access to a studio component is managed by specifying security groups for the resource, as well as its endpoint.</p> <p>A studio component also has a set of initialization scripts that are returned by <code>GetLaunchProfileInitialization</code>. These initialization scripts run on streaming sessions when they start. They provide users with flexibility in controlling how the studio resources are configured on a streaming session.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudioComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public StudioComponentConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2SecurityGroupIds")]
		public string[] Ec2SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initializationScripts")]
		public StudioComponentInitializationScript[] InitializationScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeRoleArn")]
		public string RuntimeRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptParameters")]
		public ScriptParameterKeyValue[] ScriptParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secureInitializationRoleArn")]
		public string SecureInitializationRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public LaunchProfileState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public StudioComponentStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentId")]
		public string StudioComponentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public StudioComponentSubtype Subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StudioComponentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
	}
	
	/// <summary>
	/// The configuration of the studio component, based on component type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudioComponentConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeDirectoryConfiguration")]
		public ActiveDirectoryConfiguration ActiveDirectoryConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeFarmConfiguration")]
		public ComputeFarmConfiguration ComputeFarmConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseServiceConfiguration")]
		public LicenseServiceConfiguration LicenseServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sharedFileSystemConfiguration")]
		public SharedFileSystemConfiguration SharedFileSystemConfiguration { get; set; }
	}
	
	/// <summary>
	/// The configuration for a Directory Service for Microsoft Active Directory studio resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveDirectoryConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="computerAttributes")]
		public ActiveDirectoryComputerAttribute[] ComputerAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directoryId")]
		public string DirectoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationalUnitDistinguishedName")]
		public string OrganizationalUnitDistinguishedName { get; set; }
	}
	
	/// <summary>
	/// An LDAP attribute of an Active Directory computer account, in the form of a name:value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveDirectoryComputerAttribute
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The configuration for a render farm that is associated with a studio resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComputeFarmConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeDirectoryUser")]
		public string ActiveDirectoryUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
	}
	
	/// <summary>
	/// The configuration for a license service that is associated with a studio resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseServiceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
	}
	
	/// <summary>
	/// The configuration for a shared file storage system that is associated with a studio resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedFileSystemConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSystemId")]
		public string FileSystemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linuxMountPoint")]
		public string LinuxMountPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shareName")]
		public string ShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="windowsMountDrive")]
		public string WindowsMountDrive { get; set; }
	}
	
	/// <summary>
	/// Initialization scripts for studio components.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudioComponentInitializationScript
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileProtocolVersion")]
		public string LaunchProfileProtocolVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public LaunchProfilePlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runContext")]
		public StudioComponentInitializationScriptRunContext RunContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchProfilePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioComponentInitializationScriptRunContext
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_INITIALIZATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INITIALIZATION = 1,
	}
	
	/// <summary>
	/// A parameter for a studio component script, in the form of a key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptParameterKeyValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>The current status of the studio component resource.</p> <p>When the resource is in the <code>READY</code> state, the status code signals what the last mutation made to the resource was.</p> <p>When the resource is in a <code>CREATE_FAILED</code>, <code>UPDATE_FAILED</code>, or <code>DELETE_FAILED</code> state, the status code signals what went wrong and why the mutation failed.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioComponentStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_DIRECTORY_ALREADY_EXISTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_COMPONENT_CREATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_COMPONENT_UPDATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_COMPONENT_DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_KEY_ACCESS_DENIED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCRYPTION_KEY_NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_COMPONENT_CREATE_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_COMPONENT_UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDIO_COMPONENT_DELETE_IN_PROGRESS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioComponentSubtype
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_MANAGED_MICROSOFT_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_FSX_FOR_WINDOWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_FSX_FOR_LUSTRE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioComponentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_DIRECTORY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED_FILE_SYSTEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTE_FARM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LICENSE_SERVICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfile")]
		public LaunchProfile LaunchProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchProfileMemberResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStreamingImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamingImage")]
		public StreamingImage StreamingImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStreamingSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public StreamingSession Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStudioResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studio")]
		public Studio Studio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStudioComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="studioComponent")]
		public StudioComponent StudioComponent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStudioMemberResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEulaResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="eula")]
		public Eula Eula { get; set; }
	}
	
	/// <summary>
	/// Represents a EULA resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Eula
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eulaId")]
		public string EulaId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfile")]
		public LaunchProfile LaunchProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfile")]
		public LaunchProfile LaunchProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingImages")]
		public StreamingImage[] StreamingImages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentSummaries")]
		public StudioComponentSummary[] StudioComponentSummaries { get; set; }
	}
	
	/// <summary>
	/// The studio component's summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudioComponentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentId")]
		public string StudioComponentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public StudioComponentSubtype Subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StudioComponentType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileInitializationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileInitialization")]
		public LaunchProfileInitialization LaunchProfileInitialization { get; set; }
	}
	
	/// <summary>
	/// <p>A launch profile initialization contains information required for a workstation or server to connect to a launch profile.</p> <p>This includes scripts, endpoints, security groups, subnets, and other configuration.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchProfileInitialization
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeDirectory")]
		public LaunchProfileInitializationActiveDirectory ActiveDirectory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2SecurityGroupIds")]
		public string[] Ec2SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileId")]
		public string LaunchProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileProtocolVersion")]
		public string LaunchProfileProtocolVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchPurpose")]
		public string LaunchPurpose { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public LaunchProfilePlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemInitializationScripts")]
		public LaunchProfileInitializationScript[] SystemInitializationScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userInitializationScripts")]
		public LaunchProfileInitializationScript[] UserInitializationScripts { get; set; }
	}
	
	/// <summary>
	/// The launch profile initialization Active Directory contains information required for the launch profile to connect to the Active Directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchProfileInitializationActiveDirectory
	{
		
		[System.Runtime.Serialization.DataMember(Name="computerAttributes")]
		public ActiveDirectoryComputerAttribute[] ComputerAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directoryId")]
		public string DirectoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directoryName")]
		public string DirectoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnsIpAddresses")]
		public string[] DnsIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationalUnitDistinguishedName")]
		public string OrganizationalUnitDistinguishedName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentId")]
		public string StudioComponentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentName")]
		public string StudioComponentName { get; set; }
	}
	
	/// <summary>
	/// The launch profile initialization script is used when start streaming session runs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchProfileInitializationScript
	{
		
		[System.Runtime.Serialization.DataMember(Name="runtimeRoleArn")]
		public string RuntimeRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secureInitializationRoleArn")]
		public string SecureInitializationRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentId")]
		public string StudioComponentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentName")]
		public string StudioComponentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileMemberResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public LaunchProfileMembership Member { get; set; }
	}
	
	/// <summary>
	/// <p>Studio admins can use launch profile membership to delegate launch profile access to studio users in the Nimble Studio portal without writing or maintaining complex IAM policies. A launch profile member is a user association from your studio identity source who is granted permissions to a launch profile.</p> <p>A launch profile member (type USER) provides the following permissions to that launch profile:</p> <ul> <li> <p>GetLaunchProfile</p> </li> <li> <p>GetLaunchProfileInitialization</p> </li> <li> <p>GetLaunchProfileMembers</p> </li> <li> <p>GetLaunchProfileMember</p> </li> <li> <p>CreateStreamingSession</p> </li> <li> <p>GetLaunchProfileDetails</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaunchProfileMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="identityStoreId")]
		public string IdentityStoreId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="persona")]
		public LaunchProfilePersona Persona { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sid")]
		public string Sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaunchProfilePersona
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingImageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamingImage")]
		public StreamingImage StreamingImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public StreamingSession Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingSessionBackupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="streamingSessionBackup")]
		public StreamingSessionBackup StreamingSessionBackup { get; set; }
	}
	
	/// <summary>
	/// Information about the streaming session backup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamingSessionBackup
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backupId")]
		public string BackupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileId")]
		public string LaunchProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// The streaming session state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public StreamingSessionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public StreamingSessionStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingSessionStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="stream")]
		public StreamingSessionStream Stream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStudioResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studio")]
		public Studio Studio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStudioComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="studioComponent")]
		public StudioComponent StudioComponent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStudioMemberResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public StudioMembership Member { get; set; }
	}
	
	/// <summary>
	/// <p>A studio member is an association of a user from your studio identity source to elevated permissions that they are granted in the studio.</p> <p>When you add a user to your studio using the Nimble Studio console, they are given access to the studio's IAM Identity Center application and are given access to log in to the Nimble Studio portal. These users have the permissions provided by the studio's user IAM role and do not appear in the studio membership collection. Only studio admins appear in studio membership.</p> <p>When you add a user to studio membership with the ADMIN persona, upon logging in to the Nimble Studio portal, they are granted permissions specified by the Studio's Admin IAM role.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StudioMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="identityStoreId")]
		public string IdentityStoreId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="persona")]
		public StudioPersona Persona { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sid")]
		public string Sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioPersona
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMINISTRATOR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEulaAcceptancesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="eulaAcceptances")]
		public EulaAcceptance[] EulaAcceptances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEulasResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="eulas")]
		public Eula[] Eulas { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLaunchProfileMembersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public LaunchProfileMembership[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLaunchProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfiles")]
		public LaunchProfile[] LaunchProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamingImagesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingImages")]
		public StreamingImage[] StreamingImages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamingSessionBackupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingSessionBackups")]
		public StreamingSessionBackup[] StreamingSessionBackups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamingSessionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessions")]
		public StreamingSession[] Sessions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudioComponentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponents")]
		public StudioComponent[] StudioComponents { get; set; }
	}
	
	/// <summary>
	/// <p>The current state of the studio component resource.</p> <p>While a studio component is being created, modified, or deleted, its state will be <code>CREATE_IN_PROGRESS</code>, <code>UPDATE_IN_PROGRESS</code>, or <code>DELETE_IN_PROGRESS</code>.</p> <p>These are called <i>transition states</i>.</p> <p>No modifications may be made to the studio component while it is in a transition state.</p> <p>If creation of the resource fails, the state will change to <code>CREATE_FAILED</code>. The resource <code>StatusCode</code> and <code>StatusMessage</code> will provide more information of why creation failed. The resource in this state will automatically be deleted from your account after a period of time.</p> <p>If updating the resource fails, the state will change to <code>UPDATE_FAILED</code>. The resource <code>StatusCode</code> and <code>StatusMessage</code> will provide more information of why the update failed. The resource will be returned to the state it was in when the update request was invoked.</p> <p>If deleting the resource fails, the state will change to <code>DELETE_FAILED</code>. The resource <code>StatusCode</code> and <code>StatusMessage</code> will provide more information of why the update failed. The resource will be returned to the state it was in when the update request was invoked. After the resource is deleted successfully, it will change to the <code>DELETED</code> state. The resource will no longer count against service quotas and cannot be used or acted upon any futher. It will be removed from your account after a period of time.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioComponentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudioMembersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public StudioMembership[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudiosResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studios")]
		public Studio[] Studios { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLaunchProfileMembersResponse
	{
	}
	
	/// <summary>
	/// A new member that is added to a launch profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewLaunchProfileMember
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persona")]
		public LaunchProfilePersona Persona { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutStudioMembersResponse
	{
	}
	
	/// <summary>
	/// A new studio user's membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewStudioMember
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persona")]
		public StudioPersona Persona { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartStreamingSessionResponse
	{
		
		/// <summary>
		/// A streaming session is a virtual workstation created using a particular launch profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="session")]
		public StreamingSession Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartStudioSSOConfigurationRepairResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studio")]
		public Studio Studio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopStreamingSessionResponse
	{
		
		/// <summary>
		/// A streaming session is a virtual workstation created using a particular launch profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="session")]
		public StreamingSession Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="launchProfile")]
		public LaunchProfile LaunchProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchProfileMemberResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public LaunchProfileMembership Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStreamingImageResponse
	{
		
		/// <summary>
		/// <p>Represents a streaming image resource.</p> <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p> <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p> <p>You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingImage")]
		public StreamingImage StreamingImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStudioResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studio")]
		public Studio Studio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStudioComponentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="studioComponent")]
		public StudioComponent StudioComponent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AcceptEulasRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="eulaIds")]
		public string[] EulaIds { get; set; }
	}
	
	/// <summary>
	/// Configuration for streaming workstations created using this launch profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamConfigurationCreate
	{
		
		[System.Runtime.Serialization.DataMember(Name="automaticTerminationMode")]
		public AutomaticTerminationMode AutomaticTerminationMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clipboardMode")]
		public StreamingClipboardMode ClipboardMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceTypes")]
		public StreamingInstanceType[] Ec2InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxStoppedSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxStoppedSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionBackup")]
		public StreamConfigurationSessionBackup SessionBackup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionPersistenceMode")]
		public AutomaticTerminationMode SessionPersistenceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionStorage")]
		public StreamConfigurationSessionStorage SessionStorage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streamingImageIds")]
		public string[] StreamingImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeConfiguration")]
		public VolumeConfiguration VolumeConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateLaunchProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ec2SubnetIds")]
		public string[] Ec2SubnetIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchProfileProtocolVersions")]
		public string[] LaunchProfileProtocolVersions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streamConfiguration")]
		public StreamConfigurationCreate StreamConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studioComponentIds")]
		public string[] StudioComponentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStreamingImageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ec2ImageId")]
		public string Ec2ImageId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStreamingSessionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceType")]
		public StreamingInstanceType Ec2InstanceType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchProfileId")]
		public string LaunchProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingImageId")]
		public string StreamingImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStreamingSessionStreamRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="expirationInSeconds")]
		public System.Nullable<System.Int32> ExpirationInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStudioComponentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public StudioComponentConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2SecurityGroupIds")]
		public string[] Ec2SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initializationScripts")]
		public StudioComponentInitializationScript[] InitializationScripts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeRoleArn")]
		public string RuntimeRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptParameters")]
		public ScriptParameterKeyValue[] ScriptParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secureInitializationRoleArn")]
		public string SecureInitializationRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public StudioComponentSubtype Subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StudioComponentType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateStudioRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminRoleArn")]
		public string AdminRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioEncryptionConfiguration")]
		public StudioEncryptionConfiguration StudioEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studioName")]
		public string StudioName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userRoleArn")]
		public string UserRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchProfileMemberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLaunchProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStreamingImageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStreamingSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStudioComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStudioMemberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteStudioRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetEulaRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileDetailsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileInitializationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileMemberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLaunchProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingImageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingSessionBackupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStreamingSessionStreamRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStudioComponentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStudioMemberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetStudioRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEulaAcceptancesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEulasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLaunchProfileMembersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLaunchProfilesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamingImagesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamingSessionBackupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamingSessionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudioComponentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudioMembersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStudiosRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLaunchProfileMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityStoreId")]
		public string IdentityStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="members")]
		public NewLaunchProfileMember[] Members { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutStudioMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityStoreId")]
		public string IdentityStoreId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="members")]
		public NewStudioMember[] Members { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartStreamingSessionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="backupId")]
		public string BackupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartStudioSSOConfigurationRepairRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopStreamingSessionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="volumeRetentionMode")]
		public VolumeRetentionMode VolumeRetentionMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StudioState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchProfileMemberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persona")]
		public LaunchProfilePersona Persona { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLaunchProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="launchProfileProtocolVersions")]
		public string[] LaunchProfileProtocolVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamConfiguration")]
		public StreamConfigurationCreate StreamConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studioComponentIds")]
		public string[] StudioComponentIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStreamingImageRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStudioComponentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public StudioComponentConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2SecurityGroupIds")]
		public string[] Ec2SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initializationScripts")]
		public StudioComponentInitializationScript[] InitializationScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeRoleArn")]
		public string RuntimeRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptParameters")]
		public ScriptParameterKeyValue[] ScriptParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secureInitializationRoleArn")]
		public string SecureInitializationRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public StudioComponentSubtype Subtype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StudioComponentType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateStudioRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="adminRoleArn")]
		public string AdminRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userRoleArn")]
		public string UserRoleArn { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accept EULAs.
		/// AcceptEulas 2020-08-01/studios/{studioId}/eula-acceptances
		/// </summary>
		/// <param name="studioId">The studio ID.</param>
		/// <returns>Success</returns>
		public async Task<AcceptEulasResponse> AcceptEulasAsync(string studioId, AcceptEulasPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/eula-acceptances";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AcceptEulasResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List EULA acceptances.
		/// ListEulaAcceptances 2020-08-01/studios/{studioId}/eula-acceptances
		/// </summary>
		/// <param name="eulaIds">The list of EULA IDs that have been previously accepted.</param>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<ListEulaAcceptancesResponse> ListEulaAcceptancesAsync(string[] eulaIds, string nextToken, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/eula-acceptances?"+string.Join("&", eulaIds.Select(z => $"eulaIds={System.Uri.EscapeDataString(z.ToString())}"))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListEulaAcceptancesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a launch profile.
		/// CreateLaunchProfile 2020-08-01/studios/{studioId}/launch-profiles
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<CreateLaunchProfileResponse> CreateLaunchProfileAsync(string studioId, CreateLaunchProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateLaunchProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List all the launch profiles a studio.
		/// ListLaunchProfiles 2020-08-01/studios/{studioId}/launch-profiles
		/// </summary>
		/// <param name="maxResults">The max number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="principalId">The principal ID. This currently supports a IAM Identity Center UserId. </param>
		/// <param name="states">Filter this request to launch profiles in any of the given states.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<ListLaunchProfilesResponse> ListLaunchProfilesAsync(int maxResults, string nextToken, string principalId, LaunchProfileState[] states, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&principalId=" + (principalId==null? "" : System.Uri.EscapeDataString(principalId))+"&"+string.Join("&", states.Select(z => $"states={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLaunchProfilesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a streaming image resource in a studio.
		/// CreateStreamingImage 2020-08-01/studios/{studioId}/streaming-images
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<CreateStreamingImageResponse> CreateStreamingImageAsync(string studioId, CreateStreamingImagePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-images";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateStreamingImageResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>List the streaming image resources available to this studio.</p> <p>This list will contain both images provided by Amazon Web Services, as well as streaming images that you have created in your studio.</p>
		/// ListStreamingImages 2020-08-01/studios/{studioId}/streaming-images
		/// </summary>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="owner">Filter this request to streaming images with the given owner</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<ListStreamingImagesResponse> ListStreamingImagesAsync(string nextToken, string owner, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-images?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&owner=" + (owner==null? "" : System.Uri.EscapeDataString(owner));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStreamingImagesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a streaming session in a studio.</p> <p>After invoking this operation, you must poll GetStreamingSession until the streaming session is in the <code>READY</code> state.</p>
		/// CreateStreamingSession 2020-08-01/studios/{studioId}/streaming-sessions
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<CreateStreamingSessionResponse> CreateStreamingSessionAsync(string studioId, CreateStreamingSessionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateStreamingSessionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the streaming sessions in a studio.
		/// ListStreamingSessions 2020-08-01/studios/{studioId}/streaming-sessions
		/// </summary>
		/// <param name="createdBy">Filters the request to streaming sessions created by the given user.</param>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="ownedBy">Filters the request to streaming session owned by the given user</param>
		/// <param name="sessionIds">Filters the request to only the provided session IDs.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<ListStreamingSessionsResponse> ListStreamingSessionsAsync(string createdBy, string nextToken, string ownedBy, string sessionIds, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions?createdBy=" + (createdBy==null? "" : System.Uri.EscapeDataString(createdBy))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy))+"&sessionIds=" + (sessionIds==null? "" : System.Uri.EscapeDataString(sessionIds));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStreamingSessionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Creates a streaming session stream for a streaming session.</p> <p>After invoking this API, invoke GetStreamingSessionStream with the returned streamId to poll the resource until it is in the <code>READY</code> state.</p>
		/// CreateStreamingSessionStream 2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams
		/// </summary>
		/// <param name="sessionId">The streaming session ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<CreateStreamingSessionStreamResponse> CreateStreamingSessionStreamAsync(string sessionId, string studioId, CreateStreamingSessionStreamPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/streams";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateStreamingSessionStreamResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Create a new studio.</p> <p>When creating a studio, two IAM roles must be provided: the admin role and the user role. These roles are assumed by your users when they log in to the Nimble Studio portal.</p> <p>The user role must have the <code>AmazonNimbleStudio-StudioUser</code> managed policy attached for the portal to function properly.</p> <p>The admin role must have the <code>AmazonNimbleStudio-StudioAdmin</code> managed policy attached for the portal to function properly.</p> <p>You may optionally specify a KMS key in the <code>StudioEncryptionConfiguration</code>.</p> <p>In Nimble Studio, resource names, descriptions, initialization scripts, and other data you provide are always encrypted at rest using an KMS key. By default, this key is owned by Amazon Web Services and managed on your behalf. You may provide your own KMS key when calling <code>CreateStudio</code> to encrypt this data using a key you own and manage.</p> <p>When providing an KMS key during studio creation, Nimble Studio creates KMS grants in your account to provide your studio user and admin roles access to these KMS keys.</p> <p>If you delete this grant, the studio will no longer be accessible to your portal users.</p> <p>If you delete the studio KMS key, your studio will no longer be accessible.</p>
		/// CreateStudio 2020-08-01/studios
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateStudioResponse> CreateStudioAsync(CreateStudioPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateStudioResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List studios in your Amazon Web Services accounts in the requested Amazon Web Services Region.
		/// ListStudios 2020-08-01/studios
		/// </summary>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <returns>Success</returns>
		public async Task<ListStudiosResponse> ListStudiosAsync(string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStudiosResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a studio component resource.
		/// CreateStudioComponent 2020-08-01/studios/{studioId}/studio-components
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<CreateStudioComponentResponse> CreateStudioComponentAsync(string studioId, CreateStudioComponentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/studio-components";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateStudioComponentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the <code>StudioComponents</code> in a studio.
		/// ListStudioComponents 2020-08-01/studios/{studioId}/studio-components
		/// </summary>
		/// <param name="maxResults">The max number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="states">Filters the request to studio components that are in one of the given states. </param>
		/// <param name="studioId">The studio ID. </param>
		/// <param name="types">Filters the request to studio components that are of one of the given types.</param>
		/// <returns>Success</returns>
		public async Task<ListStudioComponentsResponse> ListStudioComponentsAsync(int maxResults, string nextToken, StudioComponentState[] states, string studioId, StudioComponentType[] types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/studio-components?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&"+string.Join("&", states.Select(z => $"states={z}"))+"&"+string.Join("&", types.Select(z => $"types={z}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStudioComponentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently delete a launch profile.
		/// DeleteLaunchProfile 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<DeleteLaunchProfileResponse> DeleteLaunchProfileAsync(string launchProfileId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteLaunchProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a launch profile.
		/// GetLaunchProfile 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetLaunchProfileResponse> GetLaunchProfileAsync(string launchProfileId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLaunchProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a launch profile.
		/// UpdateLaunchProfile 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<UpdateLaunchProfileResponse> UpdateLaunchProfileAsync(string launchProfileId, string studioId, UpdateLaunchProfilePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateLaunchProfileResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a user from launch profile membership.
		/// DeleteLaunchProfileMember 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="principalId">The principal ID. This currently supports a IAM Identity Center UserId. </param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<DeleteLaunchProfileMemberResponse> DeleteLaunchProfileMemberAsync(string launchProfileId, string principalId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId))+"/membership/"+ (principalId==null? "" : System.Uri.EscapeDataString(principalId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteLaunchProfileMemberResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a user persona in launch profile membership.
		/// GetLaunchProfileMember 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="principalId">The principal ID. This currently supports a IAM Identity Center UserId. </param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetLaunchProfileMemberResponse> GetLaunchProfileMemberAsync(string launchProfileId, string principalId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId))+"/membership/"+ (principalId==null? "" : System.Uri.EscapeDataString(principalId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLaunchProfileMemberResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update a user persona in launch profile membership.
		/// UpdateLaunchProfileMember 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="principalId">The principal ID. This currently supports a IAM Identity Center UserId. </param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<UpdateLaunchProfileMemberResponse> UpdateLaunchProfileMemberAsync(string launchProfileId, string principalId, string studioId, UpdateLaunchProfileMemberPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId))+"/membership/"+ (principalId==null? "" : System.Uri.EscapeDataString(principalId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateLaunchProfileMemberResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete streaming image.
		/// DeleteStreamingImage 2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}
		/// </summary>
		/// <param name="streamingImageId">The streaming image ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<DeleteStreamingImageResponse> DeleteStreamingImageAsync(string streamingImageId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-images/"+ (streamingImageId==null? "" : System.Uri.EscapeDataString(streamingImageId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteStreamingImageResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get streaming image.
		/// GetStreamingImage 2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}
		/// </summary>
		/// <param name="streamingImageId">The streaming image ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetStreamingImageResponse> GetStreamingImageAsync(string streamingImageId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-images/"+ (streamingImageId==null? "" : System.Uri.EscapeDataString(streamingImageId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStreamingImageResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update streaming image.
		/// UpdateStreamingImage 2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}
		/// </summary>
		/// <param name="streamingImageId">The streaming image ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<UpdateStreamingImageResponse> UpdateStreamingImageAsync(string streamingImageId, string studioId, UpdateStreamingImagePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-images/"+ (streamingImageId==null? "" : System.Uri.EscapeDataString(streamingImageId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateStreamingImageResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Deletes streaming session resource.</p> <p>After invoking this operation, use GetStreamingSession to poll the resource until it transitions to a <code>DELETED</code> state.</p> <p>A streaming session will count against your streaming session quota until it is marked <code>DELETED</code>.</p>
		/// DeleteStreamingSession 2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}
		/// </summary>
		/// <param name="sessionId">The streaming session ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<DeleteStreamingSessionResponse> DeleteStreamingSessionAsync(string sessionId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteStreamingSessionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets StreamingSession resource.</p> <p>Invoke this operation to poll for a streaming session state while creating or deleting a session.</p>
		/// GetStreamingSession 2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}
		/// </summary>
		/// <param name="sessionId">The streaming session ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetStreamingSessionResponse> GetStreamingSessionAsync(string sessionId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStreamingSessionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a studio resource.
		/// DeleteStudio 2020-08-01/studios/{studioId}
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<DeleteStudioResponse> DeleteStudioAsync(string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteStudioResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a studio resource.
		/// GetStudio 2020-08-01/studios/{studioId}
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetStudioResponse> GetStudioAsync(string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStudioResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Update a Studio resource.</p> <p>Currently, this operation only supports updating the displayName of your studio.</p>
		/// UpdateStudio 2020-08-01/studios/{studioId}
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<UpdateStudioResponse> UpdateStudioAsync(string studioId, UpdateStudioPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateStudioResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a studio component resource.
		/// DeleteStudioComponent 2020-08-01/studios/{studioId}/studio-components/{studioComponentId}
		/// </summary>
		/// <param name="studioComponentId">The studio component ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<DeleteStudioComponentResponse> DeleteStudioComponentAsync(string studioComponentId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/studio-components/"+ (studioComponentId==null? "" : System.Uri.EscapeDataString(studioComponentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteStudioComponentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a studio component resource.
		/// GetStudioComponent 2020-08-01/studios/{studioId}/studio-components/{studioComponentId}
		/// </summary>
		/// <param name="studioComponentId">The studio component ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetStudioComponentResponse> GetStudioComponentAsync(string studioComponentId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/studio-components/"+ (studioComponentId==null? "" : System.Uri.EscapeDataString(studioComponentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStudioComponentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a studio component resource.
		/// UpdateStudioComponent 2020-08-01/studios/{studioId}/studio-components/{studioComponentId}
		/// </summary>
		/// <param name="studioComponentId">The studio component ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<UpdateStudioComponentResponse> UpdateStudioComponentAsync(string studioComponentId, string studioId, UpdateStudioComponentPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/studio-components/"+ (studioComponentId==null? "" : System.Uri.EscapeDataString(studioComponentId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateStudioComponentResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete a user from studio membership.
		/// DeleteStudioMember 2020-08-01/studios/{studioId}/membership/{principalId}
		/// </summary>
		/// <param name="principalId">The principal ID. This currently supports a IAM Identity Center UserId. </param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<DeleteStudioMemberResponse> DeleteStudioMemberAsync(string principalId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/membership/"+ (principalId==null? "" : System.Uri.EscapeDataString(principalId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteStudioMemberResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a user's membership in a studio.
		/// GetStudioMember 2020-08-01/studios/{studioId}/membership/{principalId}
		/// </summary>
		/// <param name="principalId">The principal ID. This currently supports a IAM Identity Center UserId. </param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetStudioMemberResponse> GetStudioMemberAsync(string principalId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/membership/"+ (principalId==null? "" : System.Uri.EscapeDataString(principalId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStudioMemberResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get EULA.
		/// GetEula 2020-08-01/eulas/{eulaId}
		/// </summary>
		/// <param name="eulaId">The EULA ID.</param>
		/// <returns>Success</returns>
		public async Task<GetEulaResponse> GetEulaAsync(string eulaId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/eulas/"+ (eulaId==null? "" : System.Uri.EscapeDataString(eulaId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetEulaResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Launch profile details include the launch profile resource and summary information of resources that are used by, or available to, the launch profile. This includes the name and description of all studio components used by the launch profiles, and the name and description of streaming images that can be used with this launch profile.
		/// GetLaunchProfileDetails 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/details
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetLaunchProfileDetailsResponse> GetLaunchProfileDetailsAsync(string launchProfileId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId))+"/details";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLaunchProfileDetailsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get a launch profile initialization.
		/// GetLaunchProfileInitialization 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/init#launchProfileProtocolVersions&launchPurpose&platform
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="launchProfileProtocolVersions">The launch profile protocol versions supported by the client.</param>
		/// <param name="launchPurpose">The launch purpose.</param>
		/// <param name="platform">The platform where this Launch Profile will be used, either Windows or Linux.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetLaunchProfileInitializationResponse> GetLaunchProfileInitializationAsync(string launchProfileId, string[] launchProfileProtocolVersions, string launchPurpose, string platform, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId))+"/init#launchProfileProtocolVersions&launchPurpose&platform&"+string.Join("&", launchProfileProtocolVersions.Select(z => $"launchProfileProtocolVersions={System.Uri.EscapeDataString(z.ToString())}"))+"&launchPurpose=" + (launchPurpose==null? "" : System.Uri.EscapeDataString(launchPurpose))+"&platform=" + (platform==null? "" : System.Uri.EscapeDataString(platform));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLaunchProfileInitializationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets <code>StreamingSessionBackup</code> resource.</p> <p>Invoke this operation to poll for a streaming session backup while stopping a streaming session.</p>
		/// GetStreamingSessionBackup 2020-08-01/studios/{studioId}/streaming-session-backups/{backupId}
		/// </summary>
		/// <param name="backupId">The ID of the backup.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetStreamingSessionBackupResponse> GetStreamingSessionBackupAsync(string backupId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-session-backups/"+ (backupId==null? "" : System.Uri.EscapeDataString(backupId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStreamingSessionBackupResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets a StreamingSessionStream for a streaming session.</p> <p>Invoke this operation to poll the resource after invoking <code>CreateStreamingSessionStream</code>.</p> <p>After the <code>StreamingSessionStream</code> changes to the <code>READY</code> state, the url property will contain a stream to be used with the DCV streaming client.</p>
		/// GetStreamingSessionStream 2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams/{streamId}
		/// </summary>
		/// <param name="sessionId">The streaming session ID.</param>
		/// <param name="streamId">The streaming session stream ID.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<GetStreamingSessionStreamResponse> GetStreamingSessionStreamAsync(string sessionId, string streamId, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/streams/"+ (streamId==null? "" : System.Uri.EscapeDataString(streamId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetStreamingSessionStreamResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List EULAs.
		/// ListEulas 2020-08-01/eulas
		/// </summary>
		/// <param name="eulaIds">The list of EULA IDs that should be returned</param>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <returns>Success</returns>
		public async Task<ListEulasResponse> ListEulasAsync(string[] eulaIds, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/eulas?"+string.Join("&", eulaIds.Select(z => $"eulaIds={System.Uri.EscapeDataString(z.ToString())}"))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListEulasResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get all users in a given launch profile membership.
		/// ListLaunchProfileMembers 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="maxResults">The max number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<ListLaunchProfileMembersResponse> ListLaunchProfileMembersAsync(string launchProfileId, int maxResults, string nextToken, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId))+"/membership&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLaunchProfileMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add/update users with given persona to launch profile membership.
		/// PutLaunchProfileMembers 2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership
		/// </summary>
		/// <param name="launchProfileId">The ID of the launch profile used to control access from the streaming session.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<PutLaunchProfileMembersResponse> PutLaunchProfileMembersAsync(string launchProfileId, string studioId, PutLaunchProfileMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/launch-profiles/"+ (launchProfileId==null? "" : System.Uri.EscapeDataString(launchProfileId))+"/membership";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutLaunchProfileMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the backups of a streaming session in a studio.
		/// ListStreamingSessionBackups 2020-08-01/studios/{studioId}/streaming-session-backups
		/// </summary>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="ownedBy">The user ID of the user that owns the streaming session.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<ListStreamingSessionBackupsResponse> ListStreamingSessionBackupsAsync(string nextToken, string ownedBy, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-session-backups?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&ownedBy=" + (ownedBy==null? "" : System.Uri.EscapeDataString(ownedBy));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStreamingSessionBackupsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Get all users in a given studio membership.</p> <note> <p> <code>ListStudioMembers</code> only returns admin members.</p> </note>
		/// ListStudioMembers 2020-08-01/studios/{studioId}/membership
		/// </summary>
		/// <param name="maxResults">The max number of results to return in the response.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<ListStudioMembersResponse> ListStudioMembersAsync(int maxResults, string nextToken, string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/membership?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListStudioMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Add/update users with given persona to studio membership.
		/// PutStudioMembers 2020-08-01/studios/{studioId}/membership
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<PutStudioMembersResponse> PutStudioMembersAsync(string studioId, PutStudioMembersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/membership";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutStudioMembersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Gets the tags for a resource, given its Amazon Resource Names (ARN).</p> <p>This operation supports ARNs for all resource types in Nimble Studio that support tags, including studio, studio component, launch profile, streaming image, and streaming session. All resources that can be tagged will contain an ARN property, so you do not have to create this ARN yourself.</p>
		/// ListTagsForResource 2020-08-01/tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource for which you want to list tags.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates tags for a resource, given its ARN.
		/// TagResource 2020-08-01/tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource you want to add tags to. </param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Transitions sessions from the <code>STOPPED</code> state into the <code>READY</code> state. The <code>START_IN_PROGRESS</code> state is the intermediate state between the <code>STOPPED</code> and <code>READY</code> states.
		/// StartStreamingSession 2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/start
		/// </summary>
		/// <param name="sessionId">The streaming session ID for the <code>StartStreamingSessionRequest</code>.</param>
		/// <param name="studioId">The studio ID for the StartStreamingSessionRequest.</param>
		/// <returns>Success</returns>
		public async Task<StartStreamingSessionResponse> StartStreamingSessionAsync(string sessionId, string studioId, StartStreamingSessionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/start";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartStreamingSessionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Repairs the IAM Identity Center configuration for a given studio.</p> <p>If the studio has a valid IAM Identity Center configuration currently associated with it, this operation will fail with a validation error.</p> <p>If the studio does not have a valid IAM Identity Center configuration currently associated with it, then a new IAM Identity Center application is created for the studio and the studio is changed to the <code>READY</code> state.</p> <p>After the IAM Identity Center application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.</p>
		/// StartStudioSSOConfigurationRepair 2020-08-01/studios/{studioId}/sso-configuration
		/// </summary>
		/// <param name="studioId">The studio ID. </param>
		/// <returns>Success</returns>
		public async Task<StartStudioSSOConfigurationRepairResponse> StartStudioSSOConfigurationRepairAsync(string studioId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/sso-configuration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartStudioSSOConfigurationRepairResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Transitions sessions from the <code>READY</code> state into the <code>STOPPED</code> state. The <code>STOP_IN_PROGRESS</code> state is the intermediate state between the <code>READY</code> and <code>STOPPED</code> states.
		/// StopStreamingSession 2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/stop
		/// </summary>
		/// <param name="sessionId">The streaming session ID for the <code>StopStreamingSessionRequest</code>.</param>
		/// <param name="studioId">The studioId for the StopStreamingSessionRequest.</param>
		/// <returns>Success</returns>
		public async Task<StopStreamingSessionResponse> StopStreamingSessionAsync(string sessionId, string studioId, StopStreamingSessionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/studios/"+ (studioId==null? "" : System.Uri.EscapeDataString(studioId))+"/streaming-sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopStreamingSessionResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes the tags for a resource.
		/// UntagResource 2020-08-01/tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">Identifies the Amazon Resource Name(ARN) key from which you are removing tags. </param>
		/// <param name="tagKeys">One or more tag keys. Specify only the tag keys, not the tag values.</param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2020-08-01/tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class AcceptEulasPostBody
	{
		
		/// <summary>
		/// The EULA ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eulaIds")]
		public string[] EulaIds { get; set; }
	}
	
	public class CreateLaunchProfilePostBody
	{
		
		/// <summary>
		/// A human-readable description of the launch profile.
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from. These subnets must support the specified instance types. 
		/// Required
		/// Minimum items: 0
		/// Maximum items: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ec2SubnetIds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string[] Ec2SubnetIds { get; set; }
		
		/// <summary>
		/// The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchProfileProtocolVersions")]
		public string[] LaunchProfileProtocolVersions { get; set; }
		
		/// <summary>
		/// The name for the launch profile.
		/// Required
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration for streaming workstations created using this launch profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streamConfiguration")]
		public CreateLaunchProfilePostBodyStreamConfiguration StreamConfiguration { get; set; }
		
		/// <summary>
		/// Unique identifiers for a collection of studio components that can be used with this launch profile.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studioComponentIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] StudioComponentIds { get; set; }
		
		/// <summary>
		/// A collection of labels, in the form of key-value pairs, that apply to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateLaunchProfilePostBodyStreamConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="automaticTerminationMode")]
		public AutomaticTerminationMode AutomaticTerminationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clipboardMode")]
		public StreamingClipboardMode ClipboardMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceTypes")]
		public StreamingInstanceType[] Ec2InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxStoppedSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxStoppedSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionBackup")]
		public StreamConfigurationSessionBackup SessionBackup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionPersistenceMode")]
		public AutomaticTerminationMode SessionPersistenceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionStorage")]
		public StreamConfigurationSessionStorage SessionStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingImageIds")]
		public string[] StreamingImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeConfiguration")]
		public VolumeConfiguration VolumeConfiguration { get; set; }
	}
	
	public class CreateStreamingImagePostBody
	{
		
		/// <summary>
		/// The description.
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of an EC2 machine image with which to create this streaming image.
		/// Required
		/// Pattern: ^ami-[0-9A-z]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ec2ImageId")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^ami-[0-9A-z]+$")]
		public string Ec2ImageId { get; set; }
		
		/// <summary>
		/// A friendly name for a streaming image resource.
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// A collection of labels, in the form of key-value pairs, that apply to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateStreamingSessionPostBody
	{
		
		/// <summary>
		/// The EC2 Instance type used for the streaming session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceType")]
		public System.Nullable<CreateStreamingSessionPostBodyEc2InstanceType> Ec2InstanceType { get; set; }
		
		/// <summary>
		/// The ID of the launch profile used to control access from the streaming session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="launchProfileId")]
		public string LaunchProfileId { get; set; }
		
		/// <summary>
		/// The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownedBy")]
		public string OwnedBy { get; set; }
		
		/// <summary>
		/// The ID of the streaming image.
		/// Min length: 0
		/// Max length: 22
		/// Pattern: ^[a-zA-Z0-9-_]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamingImageId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9-_]*$")]
		public string StreamingImageId { get; set; }
		
		/// <summary>
		/// A collection of labels, in the form of key-value pairs, that apply to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateStreamingSessionPostBodyEc2InstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.xlarge")]
		g4dn_xlarge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.2xlarge")]
		g4dn_2xlarge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.4xlarge")]
		g4dn_4xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.8xlarge")]
		g4dn_8xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.12xlarge")]
		g4dn_12xlarge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g4dn.16xlarge")]
		g4dn_16xlarge = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g3.4xlarge")]
		g3_4xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g3s.xlarge")]
		g3s_xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.xlarge")]
		g5_xlarge = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.2xlarge")]
		g5_2xlarge = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.4xlarge")]
		g5_4xlarge = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.8xlarge")]
		g5_8xlarge = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="g5.16xlarge")]
		g5_16xlarge = 12,
	}
	
	public class CreateStreamingSessionStreamPostBody
	{
		
		/// <summary>
		/// The expiration time in seconds.
		/// Minimum: 60
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(60, 3600)]
		public System.Nullable<System.Int32> ExpirationInSeconds { get; set; }
	}
	
	public class CreateStudioPostBody
	{
		
		/// <summary>
		/// The IAM role that studio admins will assume when logging in to the Nimble Studio portal.
		/// Required
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adminRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string AdminRoleArn { get; set; }
		
		/// <summary>
		/// A friendly name for the studio.
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Configuration of the encryption method that is used for the studio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studioEncryptionConfiguration")]
		public CreateStudioPostBodyStudioEncryptionConfiguration StudioEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// The studio name that is used in the URL of the Nimble Studio portal when accessed by Nimble Studio users.
		/// Required
		/// Min length: 3
		/// Max length: 64
		/// Pattern: ^[a-z0-9]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="studioName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z0-9]*$")]
		public string StudioName { get; set; }
		
		/// <summary>
		/// A collection of labels, in the form of key-value pairs, that apply to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The IAM role that studio users will assume when logging in to the Nimble Studio portal.
		/// Required
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string UserRoleArn { get; set; }
	}
	
	public class CreateStudioPostBodyStudioEncryptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		public string KeyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public StudioEncryptionConfigurationKeyType KeyType { get; set; }
	}
	
	public class CreateStudioComponentPostBody
	{
		
		/// <summary>
		/// The configuration of the studio component, based on component type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public CreateStudioComponentPostBodyConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The description.
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// The EC2 security groups that control access to the studio component.
		/// Minimum items: 0
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ec2SecurityGroupIds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string[] Ec2SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Initialization scripts for studio components.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationScripts")]
		public StudioComponentInitializationScript[] InitializationScripts { get; set; }
		
		/// <summary>
		/// The name for the studio component.
		/// Required
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RuntimeRoleArn { get; set; }
		
		/// <summary>
		/// Parameters for the studio component scripts.
		/// Minimum items: 0
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptParameters")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public ScriptParameterKeyValue[] ScriptParameters { get; set; }
		
		/// <summary>
		/// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secureInitializationRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SecureInitializationRoleArn { get; set; }
		
		/// <summary>
		/// The specific subtype of a studio component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public StudioComponentSubtype Subtype { get; set; }
		
		/// <summary>
		/// A collection of labels, in the form of key-value pairs, that apply to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// The type of the studio component.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StudioComponentType Type { get; set; }
	}
	
	public class CreateStudioComponentPostBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeDirectoryConfiguration")]
		public ActiveDirectoryConfiguration ActiveDirectoryConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeFarmConfiguration")]
		public ComputeFarmConfiguration ComputeFarmConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseServiceConfiguration")]
		public LicenseServiceConfiguration LicenseServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sharedFileSystemConfiguration")]
		public SharedFileSystemConfiguration SharedFileSystemConfiguration { get; set; }
	}
	
	public class UpdateLaunchProfilePatchBody
	{
		
		/// <summary>
		/// A human-readable description of the launch profile.
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchProfileProtocolVersions")]
		public string[] LaunchProfileProtocolVersions { get; set; }
		
		/// <summary>
		/// The name for the launch profile.
		/// Min length: 1
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration for streaming workstations created using this launch profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamConfiguration")]
		public UpdateLaunchProfilePatchBodyStreamConfiguration StreamConfiguration { get; set; }
		
		/// <summary>
		/// Unique identifiers for a collection of studio components that can be used with this launch profile.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="studioComponentIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] StudioComponentIds { get; set; }
	}
	
	public class UpdateLaunchProfilePatchBodyStreamConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="automaticTerminationMode")]
		public AutomaticTerminationMode AutomaticTerminationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clipboardMode")]
		public StreamingClipboardMode ClipboardMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ec2InstanceTypes")]
		public StreamingInstanceType[] Ec2InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxStoppedSessionLengthInMinutes")]
		public System.Nullable<System.Int32> MaxStoppedSessionLengthInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionBackup")]
		public StreamConfigurationSessionBackup SessionBackup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionPersistenceMode")]
		public AutomaticTerminationMode SessionPersistenceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionStorage")]
		public StreamConfigurationSessionStorage SessionStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streamingImageIds")]
		public string[] StreamingImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="volumeConfiguration")]
		public VolumeConfiguration VolumeConfiguration { get; set; }
	}
	
	public class UpdateLaunchProfileMemberPatchBody
	{
		
		/// <summary>
		/// The persona.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="persona")]
		public LaunchProfilePersona Persona { get; set; }
	}
	
	public class UpdateStreamingImagePatchBody
	{
		
		/// <summary>
		/// The description.
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// A friendly name for a streaming image resource.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
	}
	
	public class UpdateStudioPatchBody
	{
		
		/// <summary>
		/// The IAM role that Studio Admins will assume when logging in to the Nimble Studio portal.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string AdminRoleArn { get; set; }
		
		/// <summary>
		/// A friendly name for the studio.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The IAM role that Studio Users will assume when logging in to the Nimble Studio portal.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string UserRoleArn { get; set; }
	}
	
	public class UpdateStudioComponentPatchBody
	{
		
		/// <summary>
		/// The configuration of the studio component, based on component type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public UpdateStudioComponentPatchBodyConfiguration Configuration { get; set; }
		
		/// <summary>
		/// The description.
		/// Min length: 0
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Description { get; set; }
		
		/// <summary>
		/// The EC2 security groups that control access to the studio component.
		/// Minimum items: 0
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ec2SecurityGroupIds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string[] Ec2SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Initialization scripts for studio components.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initializationScripts")]
		public StudioComponentInitializationScript[] InitializationScripts { get; set; }
		
		/// <summary>
		/// The name for the studio component.
		/// Min length: 0
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// An IAM role attached to a Studio Component that gives the studio component access to Amazon Web Services resources at anytime while the instance is running. 
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string RuntimeRoleArn { get; set; }
		
		/// <summary>
		/// Parameters for the studio component scripts.
		/// Minimum items: 0
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptParameters")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public ScriptParameterKeyValue[] ScriptParameters { get; set; }
		
		/// <summary>
		/// An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to Amazon Web Services resources when the system initialization script runs.
		/// Min length: 0
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secureInitializationRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SecureInitializationRoleArn { get; set; }
		
		/// <summary>
		/// The specific subtype of a studio component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtype")]
		public StudioComponentSubtype Subtype { get; set; }
		
		/// <summary>
		/// The type of the studio component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public StudioComponentType Type { get; set; }
	}
	
	public class UpdateStudioComponentPatchBodyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeDirectoryConfiguration")]
		public ActiveDirectoryConfiguration ActiveDirectoryConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="computeFarmConfiguration")]
		public ComputeFarmConfiguration ComputeFarmConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseServiceConfiguration")]
		public LicenseServiceConfiguration LicenseServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sharedFileSystemConfiguration")]
		public SharedFileSystemConfiguration SharedFileSystemConfiguration { get; set; }
	}
	
	public class PutLaunchProfileMembersPostBody
	{
		
		/// <summary>
		/// The ID of the identity store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityStoreId")]
		public string IdentityStoreId { get; set; }
		
		/// <summary>
		/// A list of members.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="members")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public NewLaunchProfileMember[] Members { get; set; }
	}
	
	public class PutStudioMembersPostBody
	{
		
		/// <summary>
		/// The ID of the identity store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identityStoreId")]
		public string IdentityStoreId { get; set; }
		
		/// <summary>
		/// A list of members.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="members")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public NewStudioMember[] Members { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// A collection of labels, in the form of key-value pairs, that apply to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartStreamingSessionPostBody
	{
		
		/// <summary>
		/// The ID of the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupId")]
		public string BackupId { get; set; }
	}
	
	public class StopStreamingSessionPostBody
	{
		
		/// <summary>
		/// Adds additional instructions to a streaming session stop action to either retain the EBS volumes or delete the EBS volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeRetentionMode")]
		public VolumeRetentionMode VolumeRetentionMode { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
