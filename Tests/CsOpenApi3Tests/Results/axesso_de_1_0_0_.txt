//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuyRecommendationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="buyRecommendations")]
		public string[] BuyRecommendations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfProducts")]
		public System.Nullable<System.Int64> NumberOfProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseMessage")]
		public string ResponseMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseStatus")]
		public string ResponseStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeywordSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="domainCode")]
		public string DomainCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foundProducts")]
		public string[] FoundProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfProducts")]
		public System.Nullable<System.Int64> NumberOfProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseMessage")]
		public string ResponseMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseStatus")]
		public string ResponseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortStrategy")]
		public string SortStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="answeredQuestions")]
		public System.Nullable<System.Int64> AnsweredQuestions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asin")]
		public string Asin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countReview")]
		public System.Nullable<System.Int64> CountReview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public string[] Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fulfilledBy")]
		public string FulfilledBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceSaving")]
		public string PriceSaving { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priceShippingInformation")]
		public string PriceShippingInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prime")]
		public System.Nullable<System.Boolean> Prime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productRating")]
		public string ProductRating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productTitle")]
		public string ProductTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseMessage")]
		public string ResponseMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseStatus")]
		public string ResponseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retailPrice")]
		public System.Nullable<System.Double> RetailPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizeSelection")]
		public string[] SizeSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="soldBy")]
		public string SoldBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warehouseAvailability")]
		public string WarehouseAvailability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SortOptionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="responseMessage")]
		public string ResponseMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseStatus")]
		public string ResponseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultSize")]
		public System.Nullable<System.Int64> ResultSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOptions")]
		public SortOptionResponseSortOptions[] SortOptionResponseSortOptions { get; set; }
	}
	
	public class SortOptionResponseSortOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int64> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortName")]
		public string SortName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public string Strategy { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// request buy recommendations to a given product
		/// RequestBuyRecommendation amz/amazon-lookup-buy-recommendations
		/// </summary>
		/// <param name="url">The url of the requested product.</param>
		/// <returns>successful operation</returns>
		public async Task<BuyRecommendationResponse> RequestBuyRecommendationAsync(string url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amz/amazon-lookup-buy-recommendations?url=" + (url==null? "" : System.Uri.EscapeDataString(url));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BuyRecommendationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// lookup product information
		/// RequestProduct amz/amazon-lookup-product
		/// </summary>
		/// <param name="url">The url of the requested product.</param>
		/// <param name="size">Size parameter if available.</param>
		/// <returns>successful operation</returns>
		public async Task<ProductDetailsResponse> RequestProductAsync(string url, string size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amz/amazon-lookup-product?url=" + (url==null? "" : System.Uri.EscapeDataString(url))+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// fetch results auf a keyword search on Amazon
		/// KeywordSearch amz/amazon-search-by-keyword
		/// </summary>
		/// <param name="keyword">keyword to search</param>
		/// <param name="domainCode">domain for the search</param>
		/// <param name="sortBy">sort option</param>
		/// <param name="numberOfProducts">number of the results (max 20)</param>
		/// <returns>successful operation</returns>
		public async Task<KeywordSearchResponse> KeywordSearchAsync(string keyword, string domainCode, string sortBy, int numberOfProducts, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amz/amazon-search-by-keyword?keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&domainCode=" + (domainCode==null? "" : System.Uri.EscapeDataString(domainCode))+"&sortBy=" + (sortBy==null? "" : System.Uri.EscapeDataString(sortBy))+"&numberOfProducts="+numberOfProducts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeywordSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// request available sort options to use in keyword search
		/// SortOptions amz/sort-options
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<SortOptionResponse> SortOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "amz/sort-options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SortOptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
