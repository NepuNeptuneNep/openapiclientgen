//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines an aggregation that produces a single result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Aggregation
	{
		
		/// <summary>
		/// Optional. Optional name of the field to store the result of the aggregation into. If not provided, Firestore will pick a default name following the format `field_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS field_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS field_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to document field name limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// Average of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public Avg Avg { get; set; }
		
		/// <summary>
		/// Count of documents that match the query. The `COUNT(*)` aggregation function operates on the entire document so it does not require a field reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public Count Count { get; set; }
		
		/// <summary>
		/// Sum of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sum")]
		public Sum Sum { get; set; }
	}
	
	/// <summary>
	/// Average of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Avg
	{
		
		/// <summary>
		/// A reference to a field in a document, ex: `stats.operations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public FieldReference Field { get; set; }
	}
	
	/// <summary>
	/// A reference to a field in a document, ex: `stats.operations`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldReference
	{
		
		/// <summary>
		/// A reference to a field in a document. Requires: * MUST be a dot-delimited (`.`) string of segments, where each segment conforms to document field name limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldPath")]
		public string FieldPath { get; set; }
	}
	
	/// <summary>
	/// Count of documents that match the query. The `COUNT(*)` aggregation function operates on the entire document so it does not require a field reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Count
	{
		
		/// <summary>
		/// Optional. Optional constraint on the maximum number of documents to count. This provides a way to set an upper bound on the number of documents to scan, limiting latency, and cost. Unspecified is interpreted as no bound. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be greater than zero when present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upTo")]
		public string UpTo { get; set; }
	}
	
	/// <summary>
	/// Sum of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sum
	{
		
		/// <summary>
		/// A reference to a field in a document, ex: `stats.operations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public FieldReference Field { get; set; }
	}
	
	/// <summary>
	/// The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregationResult
	{
		
		/// <summary>
		/// The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateFields")]
		public System.Collections.Generic.Dictionary<string, Value> AggregateFields { get; set; }
	}
	
	/// <summary>
	/// A message that can hold any of the supported value types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Value
	{
		
		/// <summary>
		/// An array value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayValue")]
		public ArrayValue ArrayValue { get; set; }
		
		/// <summary>
		/// A boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booleanValue")]
		public System.Nullable<System.Boolean> BooleanValue { get; set; }
		
		/// <summary>
		/// A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesValue")]
		public string BytesValue { get; set; }
		
		/// <summary>
		/// A double value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoPointValue")]
		public LatLng GeoPointValue { get; set; }
		
		/// <summary>
		/// An integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public string IntegerValue { get; set; }
		
		/// <summary>
		/// A map value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapValue")]
		public MapValue MapValue { get; set; }
		
		/// <summary>
		/// A null value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullValue")]
		public System.Nullable<ValueNullValue> NullValue { get; set; }
		
		/// <summary>
		/// A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceValue")]
		public string ReferenceValue { get; set; }
		
		/// <summary>
		/// A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		/// <summary>
		/// A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampValue")]
		public string TimestampValue { get; set; }
	}
	
	/// <summary>
	/// An array value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArrayValue
	{
		
		/// <summary>
		/// Values in the array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Value[] Values { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// A map value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MapValue
	{
		
		/// <summary>
		/// The map's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public System.Collections.Generic.Dictionary<string, Value> Fields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValueNullValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL_VALUE = 0,
	}
	
	/// <summary>
	/// The request for Firestore.BatchGetDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDocumentsRequest
	{
		
		/// <summary>
		/// The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public string[] Documents { get; set; }
		
		/// <summary>
		/// A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mask")]
		public DocumentMask Mask { get; set; }
		
		/// <summary>
		/// Options for creating a new transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTransaction")]
		public TransactionOptions NewTransaction { get; set; }
		
		/// <summary>
		/// Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// Reads documents in a transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentMask
	{
		
		/// <summary>
		/// The list of field paths in the mask. See Document.fields for a field path syntax reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldPaths")]
		public string[] FieldPaths { get; set; }
	}
	
	/// <summary>
	/// Options for creating a new transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionOptions
	{
		
		/// <summary>
		/// Options for a transaction that can only be used to read documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public ReadOnly ReadOnly { get; set; }
		
		/// <summary>
		/// Options for a transaction that can be used to read and write documents. Firestore does not allow 3rd party auth requests to create read-write. transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readWrite")]
		public ReadWrite ReadWrite { get; set; }
	}
	
	/// <summary>
	/// Options for a transaction that can only be used to read documents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadOnly
	{
		
		/// <summary>
		/// Reads documents at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
	}
	
	/// <summary>
	/// Options for a transaction that can be used to read and write documents. Firestore does not allow 3rd party auth requests to create read-write. transactions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadWrite
	{
		
		/// <summary>
		/// An optional transaction to retry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retryTransaction")]
		public string RetryTransaction { get; set; }
	}
	
	/// <summary>
	/// The streamed response for Firestore.BatchGetDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetDocumentsResponse
	{
		
		/// <summary>
		/// A Firestore document. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="found")]
		public Document Found { get; set; }
		
		/// <summary>
		/// A document name that was requested but does not exist. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missing")]
		public string Missing { get; set; }
		
		/// <summary>
		/// The time at which the document was read. This may be monotically increasing, in this case the previous documents in the result stream are guaranteed not to have changed between their read_time and this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// The transaction that was started as part of this request. Will only be set in the first response, and only if BatchGetDocumentsRequest.new_transaction was set in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// A Firestore document. Must not exceed 1 MiB - 4 bytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
		
		/// <summary>
		/// Output only. The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public System.Collections.Generic.Dictionary<string, Value> Fields { get; set; }
		
		/// <summary>
		/// The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.BatchWrite.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteRequest
	{
		
		/// <summary>
		/// Labels associated with this batch write.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writes")]
		public Write[] Writes { get; set; }
	}
	
	/// <summary>
	/// A write on a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Write
	{
		
		/// <summary>
		/// A precondition on a document, used for conditional operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentDocument")]
		public Precondition CurrentDocument { get; set; }
		
		/// <summary>
		/// A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public string Delete { get; set; }
		
		/// <summary>
		/// A transformation of a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transform")]
		public DocumentTransform Transform { get; set; }
		
		/// <summary>
		/// A Firestore document. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update")]
		public Document Update { get; set; }
		
		/// <summary>
		/// A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public DocumentMask UpdateMask { get; set; }
		
		/// <summary>
		/// The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTransforms")]
		public FieldTransform[] UpdateTransforms { get; set; }
	}
	
	/// <summary>
	/// A precondition on a document, used for conditional operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Precondition
	{
		
		/// <summary>
		/// When set to `true`, the target document must exist. When set to `false`, the target document must not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exists")]
		public System.Nullable<System.Boolean> Exists { get; set; }
		
		/// <summary>
		/// When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A transformation of a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentTransform
	{
		
		/// <summary>
		/// The name of the document to transform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// The list of transformations to apply to the fields of the document, in order. This must not be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldTransforms")]
		public FieldTransform[] FieldTransforms { get; set; }
	}
	
	/// <summary>
	/// A transformation of a field of the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldTransform
	{
		
		/// <summary>
		/// An array value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appendMissingElements")]
		public ArrayValue AppendMissingElements { get; set; }
		
		/// <summary>
		/// The path of the field. See Document.fields for the field path syntax reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldPath")]
		public string FieldPath { get; set; }
		
		/// <summary>
		/// A message that can hold any of the supported value types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="increment")]
		public Value Increment { get; set; }
		
		/// <summary>
		/// A message that can hold any of the supported value types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public Value Maximum { get; set; }
		
		/// <summary>
		/// A message that can hold any of the supported value types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public Value Minimum { get; set; }
		
		/// <summary>
		/// An array value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeAllFromArray")]
		public ArrayValue RemoveAllFromArray { get; set; }
		
		/// <summary>
		/// Sets the field to the given server value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setToServerValue")]
		public System.Nullable<FieldTransformSetToServerValue> SetToServerValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldTransformSetToServerValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_VALUE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_TIME = 1,
	}
	
	/// <summary>
	/// The response from Firestore.BatchWrite.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchWriteResponse
	{
		
		/// <summary>
		/// The status of applying the writes. This i-th write status corresponds to the i-th write in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status[] Status { get; set; }
		
		/// <summary>
		/// The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeResults")]
		public WriteResult[] WriteResults { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The result of applying a write.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WriteResult
	{
		
		/// <summary>
		/// The results of applying each DocumentTransform.FieldTransform, in the same order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transformResults")]
		public Value[] TransformResults { get; set; }
		
		/// <summary>
		/// The last update time of the document after applying the write. Not set after a `delete`. If the write did not actually change the document, this will be the previous update_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.BeginTransaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BeginTransactionRequest
	{
		
		/// <summary>
		/// Options for creating a new transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public TransactionOptions Options { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.BeginTransaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BeginTransactionResponse
	{
		
		/// <summary>
		/// The transaction that was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// A sequence of bits, encoded in a byte array. Each byte in the `bitmap` byte array stores 8 bits of the sequence. The only exception is the last byte, which may store 8 _or fewer_ bits. The `padding` defines the number of bits of the last byte to be ignored as "padding". The values of these "padding" bits are unspecified and must be ignored. To retrieve the first bit, bit 0, calculate: `(bitmap[0] & 0x01) != 0`. To retrieve the second bit, bit 1, calculate: `(bitmap[0] & 0x02) != 0`. To retrieve the third bit, bit 2, calculate: `(bitmap[0] & 0x04) != 0`. To retrieve the fourth bit, bit 3, calculate: `(bitmap[0] & 0x08) != 0`. To retrieve bit n, calculate: `(bitmap[n / 8] & (0x01 << (n % 8))) != 0`. The "size" of a `BitSequence` (the number of bits it contains) is calculated by this formula: `(bitmap.length * 8) - padding`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitSequence
	{
		
		/// <summary>
		/// The bytes that encode the bit sequence. May have a length of zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitmap")]
		public string Bitmap { get; set; }
		
		/// <summary>
		/// The number of bits of the last byte in `bitmap` to ignore as "padding". If the length of `bitmap` is zero, then this value must be `0`. Otherwise, this value must be between 0 and 7, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="padding")]
		public System.Nullable<System.Int32> Padding { get; set; }
	}
	
	/// <summary>
	/// A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter). The bloom filter hashes the entries with MD5 and treats the resulting 128-bit hash as 2 distinct 64-bit hash values, interpreted as unsigned integers using 2's complement encoding. These two hash values, named `h1` and `h2`, are then used to compute the `hash_count` hash values using the formula, starting at `i=0`: h(i) = h1 + (i * h2) These resulting values are then taken modulo the number of bits in the bloom filter to get the bits of the bloom filter to test for the given entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BloomFilter
	{
		
		/// <summary>
		/// A sequence of bits, encoded in a byte array. Each byte in the `bitmap` byte array stores 8 bits of the sequence. The only exception is the last byte, which may store 8 _or fewer_ bits. The `padding` defines the number of bits of the last byte to be ignored as "padding". The values of these "padding" bits are unspecified and must be ignored. To retrieve the first bit, bit 0, calculate: `(bitmap[0] & 0x01) != 0`. To retrieve the second bit, bit 1, calculate: `(bitmap[0] & 0x02) != 0`. To retrieve the third bit, bit 2, calculate: `(bitmap[0] & 0x04) != 0`. To retrieve the fourth bit, bit 3, calculate: `(bitmap[0] & 0x08) != 0`. To retrieve bit n, calculate: `(bitmap[n / 8] & (0x01 << (n % 8))) != 0`. The "size" of a `BitSequence` (the number of bits it contains) is calculated by this formula: `(bitmap.length * 8) - padding`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bits")]
		public BitSequence Bits { get; set; }
		
		/// <summary>
		/// The number of hashes used by the algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashCount")]
		public System.Nullable<System.Int32> HashCount { get; set; }
	}
	
	/// <summary>
	/// A selection of a collection, such as `messages as m1`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionSelector
	{
		
		/// <summary>
		/// When false, selects only collections that are immediate children of the `parent` specified in the containing `RunQueryRequest`. When true, selects all descendant collections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allDescendants")]
		public System.Nullable<System.Boolean> AllDescendants { get; set; }
		
		/// <summary>
		/// The collection ID. When set, selects only collections with this ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionId")]
		public string CollectionId { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.Commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitRequest
	{
		
		/// <summary>
		/// If set, applies all writes in this transaction, and commits it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
		
		/// <summary>
		/// The writes to apply. Always executed atomically and in order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writes")]
		public Write[] Writes { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.Commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitResponse
	{
		
		/// <summary>
		/// The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the commit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitTime")]
		public string CommitTime { get; set; }
		
		/// <summary>
		/// The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeResults")]
		public WriteResult[] WriteResults { get; set; }
	}
	
	/// <summary>
	/// A filter that merges multiple other filters using the given operator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompositeFilter
	{
		
		/// <summary>
		/// The list of filters to combine. Requires: * At least one filter is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The operator for combining multiple filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public System.Nullable<CompositeFilterOp> Op { get; set; }
	}
	
	/// <summary>
	/// A filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// A filter that merges multiple other filters using the given operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeFilter")]
		public CompositeFilter CompositeFilter { get; set; }
		
		/// <summary>
		/// A filter on a specific field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldFilter")]
		public FieldFilter FieldFilter { get; set; }
		
		/// <summary>
		/// A filter with a single operand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unaryFilter")]
		public UnaryFilter UnaryFilter { get; set; }
	}
	
	/// <summary>
	/// A filter on a specific field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldFilter
	{
		
		/// <summary>
		/// A reference to a field in a document, ex: `stats.operations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public FieldReference Field { get; set; }
		
		/// <summary>
		/// The operator to filter by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public System.Nullable<FieldFilterOp> Op { get; set; }
		
		/// <summary>
		/// A message that can hold any of the supported value types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Value Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldFilterOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY_CONTAINS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY_CONTAINS_ANY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 10,
	}
	
	/// <summary>
	/// A filter with a single operand.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnaryFilter
	{
		
		/// <summary>
		/// A reference to a field in a document, ex: `stats.operations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public FieldReference Field { get; set; }
		
		/// <summary>
		/// The unary operator to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public System.Nullable<UnaryFilterOp> Op { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UnaryFilterOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_NAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_NULL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_NOT_NAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_NOT_NULL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompositeFilterOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 2,
	}
	
	/// <summary>
	/// A position in a query result set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cursor
	{
		
		/// <summary>
		/// If the position is just before or just after the given values, relative to the sort order defined by the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before")]
		public System.Nullable<System.Boolean> Before { get; set; }
		
		/// <summary>
		/// The values that represent a position, in the order they appear in the order by clause of a query. Can contain fewer values than specified in the order by clause.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Value[] Values { get; set; }
	}
	
	/// <summary>
	/// A Document has changed. May be the result of multiple writes, including deletes, that ultimately resulted in a new value for the Document. Multiple DocumentChange messages may be returned for the same logical change, if multiple targets are affected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentChange
	{
		
		/// <summary>
		/// A Firestore document. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// A set of target IDs for targets that no longer match this document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedTargetIds")]
		public int[] RemovedTargetIds { get; set; }
		
		/// <summary>
		/// A set of target IDs of targets that match this document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetIds")]
		public int[] TargetIds { get; set; }
	}
	
	/// <summary>
	/// A Document has been deleted. May be the result of multiple writes, including updates, the last of which deleted the Document. Multiple DocumentDelete messages may be returned for the same logical delete, if multiple targets are affected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentDelete
	{
		
		/// <summary>
		/// The resource name of the Document that was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// The read timestamp at which the delete was observed. Greater or equal to the `commit_time` of the delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// A set of target IDs for targets that previously matched this entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedTargetIds")]
		public int[] RemovedTargetIds { get; set; }
	}
	
	/// <summary>
	/// A Document has been removed from the view of the targets. Sent if the document is no longer relevant to a target and is out of view. Can be sent instead of a DocumentDelete or a DocumentChange if the server can not send the new value of the document. Multiple DocumentRemove messages may be returned for the same logical write or delete, if multiple targets are affected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentRemove
	{
		
		/// <summary>
		/// The resource name of the Document that has gone out of view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		/// <summary>
		/// The read timestamp at which the remove was observed. Greater or equal to the `commit_time` of the change/delete/remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// A set of target IDs for targets that previously matched this document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedTargetIds")]
		public int[] RemovedTargetIds { get; set; }
	}
	
	/// <summary>
	/// A target specified by a set of documents names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentsTarget
	{
		
		/// <summary>
		/// The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public string[] Documents { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A digest of all the documents that match a given target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExistenceFilter
	{
		
		/// <summary>
		/// The total count of documents that match target_id. If different from the count of documents in the client that match, the client must manually determine which documents no longer match the target. The client can use the `unchanged_names` bloom filter to assist with this determination by testing ALL the document names against the filter; if the document name is NOT in the filter, it means the document no longer matches the target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The target ID to which this filter applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public System.Nullable<System.Int32> TargetId { get; set; }
		
		/// <summary>
		/// A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter). The bloom filter hashes the entries with MD5 and treats the resulting 128-bit hash as 2 distinct 64-bit hash values, interpreted as unsigned integers using 2's complement encoding. These two hash values, named `h1` and `h2`, are then used to compute the `hash_count` hash values using the formula, starting at `i=0`: h(i) = h1 + (i * h2) These resulting values are then taken modulo the number of bits in the bloom filter to get the bits of the bloom filter to test for the given entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unchangedNames")]
		public BloomFilter UnchangedNames { get; set; }
	}
	
	/// <summary>
	/// A Backup of a Cloud Firestore Database. The backup contains all documents and index configurations for the given database at a specific point in time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1Backup
	{
		
		/// <summary>
		/// Output only. Name of the Firestore database that the backup is from. Format is `projects/{project}/databases/{database}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// Output only. The system-generated UUID4 for the Firestore database that the backup is from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseUid")]
		public string DatabaseUid { get; set; }
		
		/// <summary>
		/// Output only. The timestamp at which this backup expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Output only. The unique resource name of the Backup. Format is `projects/{project}/locations/{location}/backups/{backup}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The backup contains an externally consistent copy of the database at this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotTime")]
		public string SnapshotTime { get; set; }
		
		/// <summary>
		/// Output only. The current state of the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleFirestoreAdminV1BackupState> State { get; set; }
		
		/// <summary>
		/// Backup specific statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public GoogleFirestoreAdminV1Stats Stats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1BackupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE = 3,
	}
	
	/// <summary>
	/// Backup specific statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1Stats
	{
		
		/// <summary>
		/// Output only. The total number of documents contained in the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentCount")]
		public string DocumentCount { get; set; }
		
		/// <summary>
		/// Output only. The total number of index entries contained in the backup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexCount")]
		public string IndexCount { get; set; }
		
		/// <summary>
		/// Output only. Summation of the size of all documents and index entries in the backup, measured in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeBytes")]
		public string SizeBytes { get; set; }
	}
	
	/// <summary>
	/// A backup schedule for a Cloud Firestore Database. This resource is owned by the database it is backing up, and is deleted along with the database. The actual backups are not though.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1BackupSchedule
	{
		
		/// <summary>
		/// Output only. The timestamp at which this backup schedule was created and effective since. No backups will be created for this schedule before this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Represent a recurring schedule that runs at a specific time every day. The time zone is UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyRecurrence")]
		public GoogleFirestoreAdminV1DailyRecurrence DailyRecurrence { get; set; }
		
		/// <summary>
		/// Output only. The unique backup schedule identifier across all locations and databases for the given project. This will be auto-assigned. Format is `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// At what relative time in the future, compared to its creation time, the backup should be deleted, e.g. keep backups for 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retention")]
		public string Retention { get; set; }
		
		/// <summary>
		/// Output only. The timestamp at which this backup schedule was most recently updated. When a backup schedule is first created, this is the same as create_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Represents a recurring schedule that runs on a specified day of the week. The time zone is UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyRecurrence")]
		public GoogleFirestoreAdminV1WeeklyRecurrence WeeklyRecurrence { get; set; }
	}
	
	/// <summary>
	/// Represent a recurring schedule that runs at a specific time every day. The time zone is UTC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1DailyRecurrence
	{
	}
	
	/// <summary>
	/// Represents a recurring schedule that runs on a specified day of the week. The time zone is UTC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1WeeklyRecurrence
	{
		
		/// <summary>
		/// The day of week to run. DAY_OF_WEEK_UNSPECIFIED is not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<GoogleFirestoreAdminV1WeeklyRecurrenceDay> Day { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1WeeklyRecurrenceDay
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	/// <summary>
	/// Metadata related to the create database operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1CreateDatabaseMetadata
	{
	}
	
	/// <summary>
	/// A Cloud Firestore Database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1Database
	{
		
		/// <summary>
		/// The App Engine integration mode to use for this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appEngineIntegrationMode")]
		public System.Nullable<GoogleFirestoreAdminV1DatabaseAppEngineIntegrationMode> AppEngineIntegrationMode { get; set; }
		
		/// <summary>
		/// The concurrency control mode to use for this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrencyMode")]
		public System.Nullable<GoogleFirestoreAdminV1DatabaseConcurrencyMode> ConcurrencyMode { get; set; }
		
		/// <summary>
		/// Output only. The timestamp at which this database was created. Databases created before 2016 do not populate create_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// State of delete protection for the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteProtectionState")]
		public System.Nullable<GoogleFirestoreAdminV1DatabaseDeleteProtectionState> DeleteProtectionState { get; set; }
		
		/// <summary>
		/// Output only. The earliest timestamp at which older versions of the data can be read from the database. See [version_retention_period] above; this field is populated with `now - version_retention_period`. This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earliestVersionTime")]
		public string EarliestVersionTime { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. The key_prefix for this database. This key_prefix is used, in combination with the project id ("~") to construct the application id that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes. This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyPrefix")]
		public string KeyPrefix { get; set; }
		
		/// <summary>
		/// The location of the database. Available locations are listed at https://cloud.google.com/firestore/docs/locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// The resource name of the Database. Format: `projects/{project}/databases/{database}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether to enable the PITR feature on this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointInTimeRecoveryEnablement")]
		public System.Nullable<GoogleFirestoreAdminV1DatabasePointInTimeRecoveryEnablement> PointInTimeRecoveryEnablement { get; set; }
		
		/// <summary>
		/// The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore for information about how to choose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<GoogleFirestoreAdminV1DatabaseType> Type { get; set; }
		
		/// <summary>
		/// Output only. The system-generated UUID4 for this Database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. The timestamp at which this database was most recently updated. Note this only includes updates to the database resource and not data contained by the database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The period during which past versions of data are retained in the database. Any read or query can specify a `read_time` within this window, and will read the state of the database at that time. If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionRetentionPeriod")]
		public string VersionRetentionPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1DatabaseAppEngineIntegrationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1DatabaseConcurrencyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCURRENCY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMISTIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PESSIMISTIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMISTIC_WITH_ENTITY_GROUPS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1DatabaseDeleteProtectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PROTECTION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PROTECTION_DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PROTECTION_ENABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1DatabasePointInTimeRecoveryEnablement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POINT_IN_TIME_RECOVERY_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POINT_IN_TIME_RECOVERY_DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1DatabaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRESTORE_NATIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATASTORE_MODE = 2,
	}
	
	/// <summary>
	/// A consistent snapshot of a database at a specific point in time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1DatabaseSnapshot
	{
		
		/// <summary>
		/// Required. A name of the form `projects/{project_id}/databases/{database_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// Required. The timestamp at which the database snapshot is taken. The requested timestamp must be a whole minute within the PITR window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotTime")]
		public string SnapshotTime { get; set; }
	}
	
	/// <summary>
	/// Metadata related to the delete database operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1DeleteDatabaseMetadata
	{
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.ExportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ExportDocumentsMetadata
	{
		
		/// <summary>
		/// Which collection ids are being exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Which namespace ids are being exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
		
		/// <summary>
		/// The state of the export operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationState")]
		public System.Nullable<GoogleFirestoreAdminV1ExportDocumentsMetadataOperationState> OperationState { get; set; }
		
		/// <summary>
		/// Where the documents are being exported to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleFirestoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDocuments")]
		public GoogleFirestoreAdminV1Progress ProgressDocuments { get; set; }
		
		/// <summary>
		/// The timestamp that corresponds to the version of the database that is being exported. If unspecified, there are no guarantees about the consistency of the documents being exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotTime")]
		public string SnapshotTime { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1ExportDocumentsMetadataOperationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 7,
	}
	
	/// <summary>
	/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1Progress
	{
		
		/// <summary>
		/// The amount of work completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedWork")]
		public string CompletedWork { get; set; }
		
		/// <summary>
		/// The amount of work estimated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedWork")]
		public string EstimatedWork { get; set; }
	}
	
	/// <summary>
	/// The request for FirestoreAdmin.ExportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ExportDocumentsRequest
	{
		
		/// <summary>
		/// Which collection ids to export. Unspecified means all collections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// An empty list represents all namespaces. This is the preferred usage for databases that don't use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
		
		/// <summary>
		/// The output URI. Currently only supports Google Cloud Storage URIs of the form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional Google Cloud Storage namespace path. When choosing a name, be sure to consider Google Cloud Storage naming guidelines: https://cloud.google.com/storage/docs/naming. If the URI is a bucket (without a namespace path), a prefix will be generated based on the start time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
		
		/// <summary>
		/// The timestamp that corresponds to the version of the database to be exported. The timestamp must be in the past, rounded to the minute and not older than earliestVersionTime. If specified, then the exported documents will represent a consistent view of the database at the provided time. Otherwise, there are no guarantees about the consistency of the exported documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotTime")]
		public string SnapshotTime { get; set; }
	}
	
	/// <summary>
	/// Returned in the google.longrunning.Operation response field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ExportDocumentsResponse
	{
		
		/// <summary>
		/// Location of the output files. This can be used to begin an import into Cloud Firestore (this project or another project) after the operation completes successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
	}
	
	/// <summary>
	/// Represents a single field in the database. Fields are grouped by their "Collection Group", which represent all collections in the database with the same id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1Field
	{
		
		/// <summary>
		/// The index configuration for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexConfig")]
		public GoogleFirestoreAdminV1IndexConfig IndexConfig { get; set; }
		
		/// <summary>
		/// Required. A field name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}` A field path may be a simple field name, e.g. `address` or a path to fields within map_value , e.g. `address.city`, or a special field path. The only valid special field is `*`, which represents any field. Field paths may be quoted using ` (backtick). The only character that needs to be escaped within a quoted field path is the backtick character itself, escaped using a backslash. Special characters in field paths that must be quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic characters. Examples: (Note: Comments here are written in markdown syntax, so there is an additional layer of backticks to represent a code block) `\`address.city\`` represents a field named `address.city`, not the map key `city` in the field `address`. `\`*\`` represents a field named `*`, not any field. A special `Field` contains the default indexing settings for all fields. This field's resource name is: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*` Indexes defined on this `Field` will be applied to all fields which do not have their own `Field` index configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The TTL (time-to-live) configuration for documents that have this `Field` set. Storing a timestamp value into a TTL-enabled field will be treated as the document's absolute expiration time. Timestamp values in the past indicate that the document is eligible for immediate expiration. Using any other data type or leaving the field absent will disable expiration for the individual document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttlConfig")]
		public GoogleFirestoreAdminV1TtlConfig TtlConfig { get; set; }
	}
	
	/// <summary>
	/// The index configuration for this field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1IndexConfig
	{
		
		/// <summary>
		/// Output only. Specifies the resource name of the `Field` from which this field's index configuration is set (when `uses_ancestor_config` is true), or from which it *would* be set if this field had no index configuration (when `uses_ancestor_config` is false).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ancestorField")]
		public string AncestorField { get; set; }
		
		/// <summary>
		/// The indexes supported for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexes")]
		public GoogleFirestoreAdminV1Index[] Indexes { get; set; }
		
		/// <summary>
		/// Output only When true, the `Field`'s index configuration is in the process of being reverted. Once complete, the index config will transition to the same state as the field specified by `ancestor_field`, at which point `uses_ancestor_config` will be `true` and `reverting` will be `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reverting")]
		public System.Nullable<System.Boolean> Reverting { get; set; }
		
		/// <summary>
		/// Output only. When true, the `Field`'s index configuration is set from the configuration specified by the `ancestor_field`. When false, the `Field`'s index configuration is defined explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesAncestorConfig")]
		public System.Nullable<System.Boolean> UsesAncestorConfig { get; set; }
	}
	
	/// <summary>
	/// Cloud Firestore indexes enable simple and complex queries against documents in a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1Index
	{
		
		/// <summary>
		/// The API scope supported by this index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiScope")]
		public System.Nullable<GoogleFirestoreAdminV1IndexApiScope> ApiScope { get; set; }
		
		/// <summary>
		/// The fields supported by this index. For composite indexes, this requires a minimum of 2 and a maximum of 100 fields. The last field entry is always for the field path `__name__`. If, on creation, `__name__` was not specified as the last field, it will be added automatically with the same direction as that of the last field defined. If the final field in a composite index is not directional, the `__name__` will be ordered ASCENDING (unless explicitly specified). For single field indexes, this will always be exactly one entry with a field path equal to the field path of the associated field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public GoogleFirestoreAdminV1IndexField[] Fields { get; set; }
		
		/// <summary>
		/// Output only. A server defined name for this index. The form of this name for composite indexes will be: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}` For single field indexes, this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indexes with a collection query scope specified allow queries against a collection that is the child of a specific document, specified at query time, and that has the same collection id. Indexes with a collection group query scope specified allow queries against all collections descended from a specific document, specified at query time, and that have the same collection id as this index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryScope")]
		public System.Nullable<GoogleFirestoreAdminV1IndexQueryScope> QueryScope { get; set; }
		
		/// <summary>
		/// Output only. The serving state of the index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleFirestoreAdminV1IndexState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1IndexApiScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY_API = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATASTORE_MODE_API = 1,
	}
	
	/// <summary>
	/// A field in an index. The field_path describes which field is indexed, the value_mode describes how the field value is indexed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1IndexField
	{
		
		/// <summary>
		/// Indicates that this field supports operations on `array_value`s.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayConfig")]
		public System.Nullable<GoogleFirestoreAdminV1IndexFieldArrayConfig> ArrayConfig { get; set; }
		
		/// <summary>
		/// Can be __name__. For single field indexes, this must match the name of the field or may be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldPath")]
		public string FieldPath { get; set; }
		
		/// <summary>
		/// Indicates that this field supports ordering by the specified order or comparing using =, !=, <, <=, >, >=.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<GoogleFirestoreAdminV1IndexFieldOrder> Order { get; set; }
		
		/// <summary>
		/// The index configuration to support vector search operations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vectorConfig")]
		public GoogleFirestoreAdminV1VectorConfig VectorConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1IndexFieldArrayConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRAY_CONFIG_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1IndexFieldOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 2,
	}
	
	/// <summary>
	/// The index configuration to support vector search operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1VectorConfig
	{
		
		/// <summary>
		/// Required. The vector dimension this configuration applies to. The resulting index will only include vectors of this dimension, and can be used for vector search with the same dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public System.Nullable<System.Int32> Dimension { get; set; }
		
		/// <summary>
		/// An index that stores vectors in a flat data structure, and supports exhaustive search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flat")]
		public GoogleFirestoreAdminV1FlatIndex Flat { get; set; }
	}
	
	/// <summary>
	/// An index that stores vectors in a flat data structure, and supports exhaustive search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1FlatIndex
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1IndexQueryScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLECTION_GROUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLECTION_RECURSIVE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1IndexState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEEDS_REPAIR = 3,
	}
	
	/// <summary>
	/// The TTL (time-to-live) configuration for documents that have this `Field` set. Storing a timestamp value into a TTL-enabled field will be treated as the document's absolute expiration time. Timestamp values in the past indicate that the document is eligible for immediate expiration. Using any other data type or leaving the field absent will disable expiration for the individual document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1TtlConfig
	{
		
		/// <summary>
		/// Output only. The state of the TTL configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleFirestoreAdminV1TtlConfigState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1TtlConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEEDS_REPAIR = 3,
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.UpdateField.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1FieldOperationMetadata
	{
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The field resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// A list of IndexConfigDelta, which describe the intent of this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexConfigDeltas")]
		public GoogleFirestoreAdminV1IndexConfigDelta[] IndexConfigDeltas { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleFirestoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDocuments")]
		public GoogleFirestoreAdminV1Progress ProgressDocuments { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The state of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleFirestoreAdminV1ExportDocumentsMetadataOperationState State { get; set; }
		
		/// <summary>
		/// Information about a TTL configuration change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttlConfigDelta")]
		public GoogleFirestoreAdminV1TtlConfigDelta TtlConfigDelta { get; set; }
	}
	
	/// <summary>
	/// Information about an index configuration change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1IndexConfigDelta
	{
		
		/// <summary>
		/// Specifies how the index is changing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public System.Nullable<GoogleFirestoreAdminV1IndexConfigDeltaChangeType> ChangeType { get; set; }
		
		/// <summary>
		/// Cloud Firestore indexes enable simple and complex queries against documents in a database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public GoogleFirestoreAdminV1Index Index { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirestoreAdminV1IndexConfigDeltaChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 2,
	}
	
	/// <summary>
	/// Information about a TTL configuration change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1TtlConfigDelta
	{
		
		/// <summary>
		/// Specifies how the TTL configuration is changing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public GoogleFirestoreAdminV1IndexConfigDeltaChangeType ChangeType { get; set; }
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.ImportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ImportDocumentsMetadata
	{
		
		/// <summary>
		/// Which collection ids are being imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The location of the documents being imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUriPrefix")]
		public string InputUriPrefix { get; set; }
		
		/// <summary>
		/// Which namespace ids are being imported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
		
		/// <summary>
		/// The state of the import operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationState")]
		public GoogleFirestoreAdminV1ExportDocumentsMetadataOperationState OperationState { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleFirestoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDocuments")]
		public GoogleFirestoreAdminV1Progress ProgressDocuments { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The request for FirestoreAdmin.ImportDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ImportDocumentsRequest
	{
		
		/// <summary>
		/// Which collection ids to import. Unspecified means all collections included in the import.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// Location of the exported files. This must match the output_uri_prefix of an ExportDocumentsResponse from an export that has completed successfully. See: google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUriPrefix")]
		public string InputUriPrefix { get; set; }
		
		/// <summary>
		/// An empty list represents all namespaces. This is the preferred usage for databases that don't use namespaces. An empty string element represents the default namespace. This should be used if the database has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
	}
	
	/// <summary>
	/// Metadata for google.longrunning.Operation results from FirestoreAdmin.CreateIndex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1IndexOperationMetadata
	{
		
		/// <summary>
		/// The time this operation completed. Will be unset if operation still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The index resource that this operation is acting on. For example: `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public string Index { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleFirestoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDocuments")]
		public GoogleFirestoreAdminV1Progress ProgressDocuments { get; set; }
		
		/// <summary>
		/// The time this operation started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The state of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleFirestoreAdminV1ExportDocumentsMetadataOperationState State { get; set; }
	}
	
	/// <summary>
	/// The response for FirestoreAdmin.ListBackupSchedules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ListBackupSchedulesResponse
	{
		
		/// <summary>
		/// List of all backup schedules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupSchedules")]
		public GoogleFirestoreAdminV1BackupSchedule[] BackupSchedules { get; set; }
	}
	
	/// <summary>
	/// The response for FirestoreAdmin.ListBackups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ListBackupsResponse
	{
		
		/// <summary>
		/// List of all backups for the project. Ordered by `location ASC, create_time DESC, name ASC`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backups")]
		public GoogleFirestoreAdminV1Backup[] Backups { get; set; }
		
		/// <summary>
		/// List of locations that existing backups were not able to be fetched from. Instead of failing the entire requests when a single location is unreachable, this response returns a partial result set and list of locations unable to be reached here. The request can be retried against a single location to get a concrete error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The list of databases for a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ListDatabasesResponse
	{
		
		/// <summary>
		/// The databases in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databases")]
		public GoogleFirestoreAdminV1Database[] Databases { get; set; }
		
		/// <summary>
		/// In the event that data about individual databases cannot be listed they will be recorded here. An example entry might be: projects/some_project/locations/some_location This can happen if the Cloud Region that the Database resides in is currently unavailable. In this case we can't fetch all the details about the database. You may be able to get a more detailed error message (or possibly fetch the resource) by sending a 'Get' request for the resource or a 'List' request for the specific location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response for FirestoreAdmin.ListFields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ListFieldsResponse
	{
		
		/// <summary>
		/// The requested fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public GoogleFirestoreAdminV1Field[] Fields { get; set; }
		
		/// <summary>
		/// A page token that may be used to request another page of results. If blank, this is the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response for FirestoreAdmin.ListIndexes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1ListIndexesResponse
	{
		
		/// <summary>
		/// The requested indexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexes")]
		public GoogleFirestoreAdminV1Index[] Indexes { get; set; }
		
		/// <summary>
		/// A page token that may be used to request another page of results. If blank, this is the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The metadata message for google.cloud.location.Location.metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1LocationMetadata
	{
	}
	
	/// <summary>
	/// Metadata for the long-running operation from the RestoreDatabase request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1RestoreDatabaseMetadata
	{
		
		/// <summary>
		/// The name of the backup restoring from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backup")]
		public string Backup { get; set; }
		
		/// <summary>
		/// The name of the database being restored to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// The time the restore finished, unset for ongoing restores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The operation state of the restore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationState")]
		public GoogleFirestoreAdminV1ExportDocumentsMetadataOperationState OperationState { get; set; }
		
		/// <summary>
		/// Describes the progress of the operation. Unit of work is generic and must be interpreted based on where Progress is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressPercentage")]
		public GoogleFirestoreAdminV1Progress ProgressPercentage { get; set; }
		
		/// <summary>
		/// The time the restore was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The request message for FirestoreAdmin.RestoreDatabase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1RestoreDatabaseRequest
	{
		
		/// <summary>
		/// Backup to restore from. Must be from the same project as the parent. Format is: `projects/{project_id}/locations/{location}/backups/{backup}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backup")]
		public string Backup { get; set; }
		
		/// <summary>
		/// Required. The ID to use for the database, which will become the final component of the database's resource name. This database id must not be associated with an existing database. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseId")]
		public string DatabaseId { get; set; }
		
		/// <summary>
		/// A consistent snapshot of a database at a specific point in time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseSnapshot")]
		public GoogleFirestoreAdminV1DatabaseSnapshot DatabaseSnapshot { get; set; }
	}
	
	/// <summary>
	/// Metadata related to the update database operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirestoreAdminV1UpdateDatabaseMetadata
	{
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningCancelOperationRequest
	{
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public GoogleLongrunningOperation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningOperation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.ListCollectionIds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCollectionIdsRequest
	{
		
		/// <summary>
		/// The maximum number of results to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// A page token. Must be a value from ListCollectionIdsResponse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
	}
	
	/// <summary>
	/// The response from Firestore.ListCollectionIds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCollectionIdsResponse
	{
		
		/// <summary>
		/// The collection ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionIds")]
		public string[] CollectionIds { get; set; }
		
		/// <summary>
		/// A page token that may be used to continue the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.ListDocuments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDocumentsResponse
	{
		
		/// <summary>
		/// The Documents found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public Document[] Documents { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of documents. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A request for Firestore.Listen
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListenRequest
	{
		
		/// <summary>
		/// A specification of a set of documents to listen to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addTarget")]
		public Target AddTarget { get; set; }
		
		/// <summary>
		/// Labels associated with this target change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The ID of a target to remove from this stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeTarget")]
		public System.Nullable<System.Int32> RemoveTarget { get; set; }
	}
	
	/// <summary>
	/// A specification of a set of documents to listen to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Target
	{
		
		/// <summary>
		/// A target specified by a set of documents names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentsTarget Documents { get; set; }
		
		/// <summary>
		/// The number of documents that last matched the query at the resume token or read time. This value is only relevant when a `resume_type` is provided. This value being present and greater than zero signals that the client wants `ExistenceFilter.unchanged_names` to be included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedCount")]
		public System.Nullable<System.Int32> ExpectedCount { get; set; }
		
		/// <summary>
		/// If the target should be removed once it is current and consistent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="once")]
		public System.Nullable<System.Boolean> Once { get; set; }
		
		/// <summary>
		/// A target specified by a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueryTarget Query { get; set; }
		
		/// <summary>
		/// Start listening after a specific `read_time`. The client must know the state of matching documents at this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// A resume token from a prior TargetChange for an identical target. Using a resume token with a different target is unsupported and may fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resumeToken")]
		public string ResumeToken { get; set; }
		
		/// <summary>
		/// The target ID that identifies the target on the stream. Must be a positive number and non-zero. If `target_id` is 0 (or unspecified), the server will assign an ID for this target and return that in a `TargetChange::ADD` event. Once a target with `target_id=0` is added, all subsequent targets must also have `target_id=0`. If an `AddTarget` request with `target_id != 0` is sent to the server after a target with `target_id=0` is added, the server will immediately send a response with a `TargetChange::Remove` event. Note that if the client sends multiple `AddTarget` requests without an ID, the order of IDs returned in `TargetChage.target_ids` are undefined. Therefore, clients should provide a target ID instead of relying on the server to assign one. If `target_id` is non-zero, there must not be an existing active target on this stream with the same ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public System.Nullable<System.Int32> TargetId { get; set; }
	}
	
	/// <summary>
	/// A target specified by a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryTarget
	{
		
		/// <summary>
		/// The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// A Firestore query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredQuery")]
		public StructuredQuery StructuredQuery { get; set; }
	}
	
	/// <summary>
	/// A Firestore query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructuredQuery
	{
		
		/// <summary>
		/// A position in a query result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endAt")]
		public Cursor EndAt { get; set; }
		
		/// <summary>
		/// The collections to query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public CollectionSelector[] From { get; set; }
		
		/// <summary>
		/// The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public Order[] OrderBy { get; set; }
		
		/// <summary>
		/// The projection of document's fields to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="select")]
		public Projection Select { get; set; }
		
		/// <summary>
		/// A position in a query result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startAt")]
		public Cursor StartAt { get; set; }
		
		/// <summary>
		/// A filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="where")]
		public Filter Where { get; set; }
	}
	
	/// <summary>
	/// An order on a field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Order
	{
		
		/// <summary>
		/// The direction to order by. Defaults to `ASCENDING`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public System.Nullable<OrderDirection> Direction { get; set; }
		
		/// <summary>
		/// A reference to a field in a document, ex: `stats.operations`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public FieldReference Field { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrderDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 2,
	}
	
	/// <summary>
	/// The projection of document's fields to return.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Projection
	{
		
		/// <summary>
		/// The fields to return. If empty, all fields are returned. To only return the name of the document, use `['__name__']`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public FieldReference[] Fields { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.Listen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListenResponse
	{
		
		/// <summary>
		/// A Document has changed. May be the result of multiple writes, including deletes, that ultimately resulted in a new value for the Document. Multiple DocumentChange messages may be returned for the same logical change, if multiple targets are affected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentChange")]
		public DocumentChange DocumentChange { get; set; }
		
		/// <summary>
		/// A Document has been deleted. May be the result of multiple writes, including updates, the last of which deleted the Document. Multiple DocumentDelete messages may be returned for the same logical delete, if multiple targets are affected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentDelete")]
		public DocumentDelete DocumentDelete { get; set; }
		
		/// <summary>
		/// A Document has been removed from the view of the targets. Sent if the document is no longer relevant to a target and is out of view. Can be sent instead of a DocumentDelete or a DocumentChange if the server can not send the new value of the document. Multiple DocumentRemove messages may be returned for the same logical write or delete, if multiple targets are affected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentRemove")]
		public DocumentRemove DocumentRemove { get; set; }
		
		/// <summary>
		/// A digest of all the documents that match a given target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ExistenceFilter Filter { get; set; }
		
		/// <summary>
		/// Targets being watched have changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetChange")]
		public TargetChange TargetChange { get; set; }
	}
	
	/// <summary>
	/// Targets being watched have changed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetChange
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public Status Cause { get; set; }
		
		/// <summary>
		/// The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a consistent snapshot). The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not). For a given stream, `read_time` is guaranteed to be monotonically increasing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// A token that can be used to resume the stream for the given `target_ids`, or all targets if `target_ids` is empty. Not set on every target change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resumeToken")]
		public string ResumeToken { get; set; }
		
		/// <summary>
		/// The type of change that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetChangeType")]
		public System.Nullable<TargetChangeTargetChangeType> TargetChangeType { get; set; }
		
		/// <summary>
		/// The target IDs of targets that have changed. If empty, the change applies to all targets. The order of the target IDs is not defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetIds")]
		public int[] TargetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetChangeTargetChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CHANGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET = 4,
	}
	
	/// <summary>
	/// The request for Firestore.PartitionQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartitionQueryRequest
	{
		
		/// <summary>
		/// The maximum number of partitions to return in this call, subject to `partition_count`. For example, if `partition_count` = 10 and `page_size` = 8, the first call to PartitionQuery will return up to 8 partitions and a `next_page_token` if more results exist. A second call to PartitionQuery will return up to 2 partitions, to complete the total of 10 specified in `partition_count`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// The `next_page_token` value returned from a previous call to PartitionQuery that may be used to get an additional set of results. There are no ordering guarantees between sets of results. Thus, using multiple sets of results will require merging the different result sets. For example, two subsequent calls using a page_token may return: * cursor B, cursor M, cursor Q * cursor A, cursor U, cursor W To obtain a complete result set ordered with respect to the results of the query supplied to PartitionQuery, the results sets should be merged: cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// The desired maximum number of partition points. The partitions may be returned across multiple pages of results. The number must be positive. The actual number of partitions returned may be fewer. For example, this may be set to one fewer than the number of parallel queries to be run, or in running a data pipeline job, one fewer than the number of workers or compute instances available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionCount")]
		public string PartitionCount { get; set; }
		
		/// <summary>
		/// Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// A Firestore query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredQuery")]
		public StructuredQuery StructuredQuery { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.PartitionQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartitionQueryResponse
	{
		
		/// <summary>
		/// A page token that may be used to request an additional set of results, up to the number specified by `partition_count` in the PartitionQuery request. If blank, there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Partition results. Each partition is a split point that can be used by RunQuery as a starting or end point for the query results. The RunQuery requests must be made with the same query supplied to this PartitionQuery request. The partition cursors will be ordered according to same ordering as the results of the query supplied to PartitionQuery. For example, if a PartitionQuery request returns partition cursors A and B, running the following three queries will return the entire result set of the original query: * query, end_at A * query, start_at A, end_at B * query, start_at B An empty result may indicate that the query has too few results to be partitioned, or that the query is not yet supported for partitioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitions")]
		public Cursor[] Partitions { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.Rollback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackRequest
	{
		
		/// <summary>
		/// Required. The transaction to roll back.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.RunAggregationQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunAggregationQueryRequest
	{
		
		/// <summary>
		/// Options for creating a new transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTransaction")]
		public TransactionOptions NewTransaction { get; set; }
		
		/// <summary>
		/// Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// Firestore query for running an aggregation over a StructuredQuery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredAggregationQuery")]
		public StructuredAggregationQuery StructuredAggregationQuery { get; set; }
		
		/// <summary>
		/// Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// Firestore query for running an aggregation over a StructuredQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructuredAggregationQuery
	{
		
		/// <summary>
		/// Optional. Series of aggregations to apply over the results of the `structured_query`. Requires: * A minimum of one and maximum of five aggregations per query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregations")]
		public Aggregation[] Aggregations { get; set; }
		
		/// <summary>
		/// A Firestore query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredQuery")]
		public StructuredQuery StructuredQuery { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.RunAggregationQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunAggregationQueryResponse
	{
		
		/// <summary>
		/// The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public AggregationResult Result { get; set; }
		
		/// <summary>
		/// The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.RunQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunQueryRequest
	{
		
		/// <summary>
		/// Options for creating a new transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newTransaction")]
		public TransactionOptions NewTransaction { get; set; }
		
		/// <summary>
		/// Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// A Firestore query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structuredQuery")]
		public StructuredQuery StructuredQuery { get; set; }
		
		/// <summary>
		/// Run the query within an already active transaction. The value here is the opaque transaction ID to execute the query in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.RunQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunQueryResponse
	{
		
		/// <summary>
		/// A Firestore document. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document Document { get; set; }
		
		/// <summary>
		/// If present, Firestore has completely finished the request and no more documents will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The time at which the document was read. This may be monotonically increasing; in this case, the previous documents in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `document` will be sent, and this represents the time at which the query was run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// The number of results that have been skipped due to an offset between the last response and the current response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedResults")]
		public System.Nullable<System.Int32> SkippedResults { get; set; }
		
		/// <summary>
		/// The transaction that was started as part of this request. Can only be set in the first response, and only if RunQueryRequest.new_transaction was set in the request. If set, no other fields will be set in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// The request for Firestore.Write. The first request creates a stream, or resumes an existing one from a token. When creating a new stream, the server replies with a response containing only an ID and a token, to use in the next request. When resuming a stream, the server first streams any responses later than the given token, then a response containing only an up-to-date token, to use in the next request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WriteRequest
	{
		
		/// <summary>
		/// Labels associated with this write request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The ID of the write stream to resume. This may only be set in the first message. When left empty, a new write stream will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		/// <summary>
		/// A stream token that was previously sent by the server. The client should set this field to the token from the most recent WriteResponse it has received. This acknowledges that the client has received responses up to this token. After sending this token, earlier tokens may not be used anymore. The server may close the stream if there are too many unacknowledged responses. Leave this field unset when creating a new stream. To resume a stream at a specific point, set this field and the `stream_id` field. Leave this field unset when creating a new stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamToken")]
		public string StreamToken { get; set; }
		
		/// <summary>
		/// The writes to apply. Always executed atomically and in order. This must be empty on the first request. This may be empty on the last request. This must not be empty on all other requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writes")]
		public Write[] Writes { get; set; }
	}
	
	/// <summary>
	/// The response for Firestore.Write.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WriteResponse
	{
		
		/// <summary>
		/// The time at which the commit occurred. Any read with an equal or greater `read_time` is guaranteed to see the effects of the write.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitTime")]
		public string CommitTime { get; set; }
		
		/// <summary>
		/// The ID of the stream. Only set on the first message, when a new stream was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamId")]
		public string StreamId { get; set; }
		
		/// <summary>
		/// A token that represents the position of this response in the stream. This can be used by a client to resume the stream at this point. This field is always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streamToken")]
		public string StreamToken { get; set; }
		
		/// <summary>
		/// The result of applying the writes. This i-th write result corresponds to the i-th write in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeResults")]
		public WriteResult[] WriteResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.
		/// Firestore_projects_databases_documents_batchGet v1/{database}/documents:batchGet
		/// </summary>
		/// <param name="database">Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetDocumentsResponse> Firestore_projects_databases_documents_batchGetAsync(string database, BatchGetDocumentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (database==null? "" : System.Uri.EscapeDataString(database))+"/documents:batchGet";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchGetDocumentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.
		/// Firestore_projects_databases_documents_batchWrite v1/{database}/documents:batchWrite
		/// </summary>
		/// <param name="database">Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchWriteResponse> Firestore_projects_databases_documents_batchWriteAsync(string database, BatchWriteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (database==null? "" : System.Uri.EscapeDataString(database))+"/documents:batchWrite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchWriteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a new transaction.
		/// Firestore_projects_databases_documents_beginTransaction v1/{database}/documents:beginTransaction
		/// </summary>
		/// <param name="database">Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<BeginTransactionResponse> Firestore_projects_databases_documents_beginTransactionAsync(string database, BeginTransactionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (database==null? "" : System.Uri.EscapeDataString(database))+"/documents:beginTransaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BeginTransactionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Commits a transaction, while optionally updating documents.
		/// Firestore_projects_databases_documents_commit v1/{database}/documents:commit
		/// </summary>
		/// <param name="database">Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<CommitResponse> Firestore_projects_databases_documents_commitAsync(string database, CommitRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (database==null? "" : System.Uri.EscapeDataString(database))+"/documents:commit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommitResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Listens to changes. This method is only available via gRPC or WebChannel (not REST).
		/// Firestore_projects_databases_documents_listen v1/{database}/documents:listen
		/// </summary>
		/// <param name="database">Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListenResponse> Firestore_projects_databases_documents_listenAsync(string database, ListenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (database==null? "" : System.Uri.EscapeDataString(database))+"/documents:listen";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListenResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rolls back a transaction.
		/// Firestore_projects_databases_documents_rollback v1/{database}/documents:rollback
		/// </summary>
		/// <param name="database">Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firestore_projects_databases_documents_rollbackAsync(string database, RollbackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (database==null? "" : System.Uri.EscapeDataString(database))+"/documents:rollback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Streams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST).
		/// Firestore_projects_databases_documents_write v1/{database}/documents:write
		/// </summary>
		/// <param name="database">Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`. This is only required in the first message.</param>
		/// <returns>Successful response</returns>
		public async Task<WriteResponse> Firestore_projects_databases_documents_writeAsync(string database, WriteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (database==null? "" : System.Uri.EscapeDataString(database))+"/documents:write";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WriteResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a backup.
		/// Firestore_projects_locations_backups_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the backup to delete. format is `projects/{project}/locations/{location}/backups/{backup}`.</param>
		/// <param name="currentDocument_exists">When set to `true`, the target document must exist. When set to `false`, the target document must not exist.</param>
		/// <param name="currentDocument_updateTime">When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firestore_projects_locations_backups_deleteAsync(string name, bool currentDocument_exists, string currentDocument_updateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&currentDocument.exists="+currentDocument_exists+"&currentDocument.updateTime=" + (currentDocument_updateTime==null? "" : System.Uri.EscapeDataString(currentDocument_updateTime));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a backup.
		/// Firestore_projects_locations_backups_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the backup to fetch. Format is `projects/{project}/locations/{location}/backups/{backup}`.</param>
		/// <param name="mask_fieldPaths">The list of field paths in the mask. See Document.fields for a field path syntax reference.</param>
		/// <param name="readTime">Reads the version of the document at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.</param>
		/// <param name="transaction">Reads the document in a transaction.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1Backup> Firestore_projects_locations_backups_getAsync(string name, string[] mask_fieldPaths, string readTime, string transaction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", mask_fieldPaths.Select(z => $"mask.fieldPaths={System.Uri.EscapeDataString(z.ToString())}"))+"&readTime=" + (readTime==null? "" : System.Uri.EscapeDataString(readTime))+"&transaction=" + (transaction==null? "" : System.Uri.EscapeDataString(transaction));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirestoreAdminV1Backup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates or inserts a document.
		/// Firestore_projects_databases_documents_patch v1/{name}
		/// </summary>
		/// <param name="name">The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.</param>
		/// <param name="currentDocument_exists">When set to `true`, the target document must exist. When set to `false`, the target document must not exist.</param>
		/// <param name="currentDocument_updateTime">When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.</param>
		/// <param name="mask_fieldPaths">The list of field paths in the mask. See Document.fields for a field path syntax reference.</param>
		/// <param name="updateMask_fieldPaths">The list of field paths in the mask. See Document.fields for a field path syntax reference.</param>
		/// <returns>Successful response</returns>
		public async Task<Document> Firestore_projects_databases_documents_patchAsync(string name, bool currentDocument_exists, string currentDocument_updateTime, string[] mask_fieldPaths, string[] updateMask_fieldPaths, Document requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&currentDocument.exists="+currentDocument_exists+"&currentDocument.updateTime=" + (currentDocument_updateTime==null? "" : System.Uri.EscapeDataString(currentDocument_updateTime))+"&"+string.Join("&", mask_fieldPaths.Select(z => $"mask.fieldPaths={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", updateMask_fieldPaths.Select(z => $"updateMask.fieldPaths={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Firestore_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Firestore_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Firestore_projects_databases_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningListOperationsResponse> Firestore_projects_databases_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Firestore_projects_databases_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firestore_projects_databases_operations_cancelAsync(string name, GoogleLongrunningCancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. For more details on export behavior and output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import
		/// Firestore_projects_databases_exportDocuments v1/{name}:exportDocuments
		/// </summary>
		/// <param name="name">Required. Database to export. Should be of the form: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_exportDocumentsAsync(string name, GoogleFirestoreAdminV1ExportDocumentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":exportDocuments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.
		/// Firestore_projects_databases_importDocuments v1/{name}:importDocuments
		/// </summary>
		/// <param name="name">Required. Database to import into. Should be of the form: `projects/{project_id}/databases/{database_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_importDocumentsAsync(string name, GoogleFirestoreAdminV1ImportDocumentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":importDocuments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List backup schedules.
		/// Firestore_projects_databases_backupSchedules_list v1/{parent}/backupSchedules
		/// </summary>
		/// <param name="parent">Required. The parent database. Format is `projects/{project}/databases/{database}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1ListBackupSchedulesResponse> Firestore_projects_databases_backupSchedules_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/backupSchedules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirestoreAdminV1ListBackupSchedulesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule with retention up to 7 days and one weekly backup schedule with retention up to 14 weeks.
		/// Firestore_projects_databases_backupSchedules_create v1/{parent}/backupSchedules
		/// </summary>
		/// <param name="parent">Required. The parent database. Format `projects/{project}/databases/{database}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1BackupSchedule> Firestore_projects_databases_backupSchedules_createAsync(string parent, GoogleFirestoreAdminV1BackupSchedule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/backupSchedules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirestoreAdminV1BackupSchedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the backups.
		/// Firestore_projects_locations_backups_list v1/{parent}/backups
		/// </summary>
		/// <param name="parent">Required. The location to list backups from. Format is `projects/{project}/locations/{location}`. Use `{location} = '-'` to list backups from all locations for the given project. This allows listing backups from a single location or from all locations.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1ListBackupsResponse> Firestore_projects_locations_backups_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/backups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirestoreAdminV1ListBackupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the databases in the project.
		/// Firestore_projects_databases_list v1/{parent}/databases
		/// </summary>
		/// <param name="parent">Required. A parent name of the form `projects/{project_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1ListDatabasesResponse> Firestore_projects_databases_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/databases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirestoreAdminV1ListDatabasesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a database.
		/// Firestore_projects_databases_create v1/{parent}/databases
		/// </summary>
		/// <param name="parent">Required. A parent name of the form `projects/{project_id}`</param>
		/// <param name="databaseId">Required. The ID to use for the database, which will become the final component of the database's resource name. This value should be 4-63 characters. Valid characters are /a-z-/ with first character a letter and the last a letter or a number. Must not be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also valid.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_createAsync(string parent, string databaseId, GoogleFirestoreAdminV1Database requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/databases&databaseId=" + (databaseId==null? "" : System.Uri.EscapeDataString(databaseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new database by restoring from an existing backup. The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup. The long-running operation can be used to track the progress of the restore, with the Operation's metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the restore was successful. The new database is not readable or writeable until the LRO has completed.
		/// Firestore_projects_databases_restore v1/{parent}/databases:restore
		/// </summary>
		/// <param name="parent">Required. The project to restore the database in. Format is `projects/{project_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_restoreAsync(string parent, GoogleFirestoreAdminV1RestoreDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/databases:restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false or `ttlConfig:*`.
		/// Firestore_projects_databases_collectionGroups_fields_list v1/{parent}/fields
		/// </summary>
		/// <param name="parent">Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`</param>
		/// <param name="filter">The filter to apply to list results. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with a filter that includes `indexConfig.usesAncestorConfig:false` .</param>
		/// <param name="pageSize">The number of results to return.</param>
		/// <param name="pageToken">A page token, returned from a previous call to FirestoreAdmin.ListFields, that may be used to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1ListFieldsResponse> Firestore_projects_databases_collectionGroups_fields_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/fields&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirestoreAdminV1ListFieldsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists composite indexes.
		/// Firestore_projects_databases_collectionGroups_indexes_list v1/{parent}/indexes
		/// </summary>
		/// <param name="parent">Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`</param>
		/// <param name="filter">The filter to apply to list results.</param>
		/// <param name="pageSize">The number of results to return.</param>
		/// <param name="pageToken">A page token, returned from a previous call to FirestoreAdmin.ListIndexes, that may be used to get the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirestoreAdminV1ListIndexesResponse> Firestore_projects_databases_collectionGroups_indexes_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/indexes&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirestoreAdminV1ListIndexesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.
		/// Firestore_projects_databases_collectionGroups_indexes_create v1/{parent}/indexes
		/// </summary>
		/// <param name="parent">Required. A parent name of the form `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Firestore_projects_databases_collectionGroups_indexes_createAsync(string parent, GoogleFirestoreAdminV1Index requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/indexes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists documents.
		/// Firestore_projects_databases_documents_listDocuments v1/{parent}/{collectionId}
		/// </summary>
		/// <param name="parent">Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`</param>
		/// <param name="collectionId">Optional. The collection ID, relative to `parent`, to list. For example: `chatrooms` or `messages`. This is optional, and when not provided, Firestore will list documents from all collections under the provided `parent`.</param>
		/// <param name="mask_fieldPaths">The list of field paths in the mask. See Document.fields for a field path syntax reference.</param>
		/// <param name="orderBy">Optional. The optional ordering of the documents to return. For example: `priority desc, __name__ desc`. This mirrors the `ORDER BY` used in Firestore queries but in a string representation. When absent, documents are ordered based on `__name__ ASC`.</param>
		/// <param name="pageSize">Optional. The maximum number of documents to return in a single response. Firestore may return fewer than this value.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous `ListDocuments` response. Provide this to retrieve the subsequent page. When paginating, all other parameters (with the exception of `page_size`) must match the values set in the request that generated the page token.</param>
		/// <param name="readTime">Perform the read at the provided time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.</param>
		/// <param name="showMissing">If the list should show missing documents. A document is missing if it does not exist, but there are sub-documents nested underneath it. When true, such missing documents will be returned with a key but will not have fields, `create_time`, or `update_time` set. Requests with `show_missing` may not specify `where` or `order_by`.</param>
		/// <param name="transaction">Perform the read as part of an already active transaction.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDocumentsResponse> Firestore_projects_databases_documents_listDocumentsAsync(string parent, string collectionId, string[] mask_fieldPaths, string orderBy, int pageSize, string pageToken, string readTime, bool showMissing, string transaction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&"+string.Join("&", mask_fieldPaths.Select(z => $"mask.fieldPaths={System.Uri.EscapeDataString(z.ToString())}"))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readTime=" + (readTime==null? "" : System.Uri.EscapeDataString(readTime))+"&showMissing="+showMissing+"&transaction=" + (transaction==null? "" : System.Uri.EscapeDataString(transaction));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDocumentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new document.
		/// Firestore_projects_databases_documents_createDocument v1/{parent}/{collectionId}
		/// </summary>
		/// <param name="parent">Required. The parent resource. For example: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`</param>
		/// <param name="collectionId">Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`.</param>
		/// <param name="documentId">The client-assigned document ID to use for this document. Optional. If not specified, an ID will be assigned by the service.</param>
		/// <param name="mask_fieldPaths">The list of field paths in the mask. See Document.fields for a field path syntax reference.</param>
		/// <returns>Successful response</returns>
		public async Task<Document> Firestore_projects_databases_documents_createDocumentAsync(string parent, string collectionId, string documentId, string[] mask_fieldPaths, Document requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/"+ (collectionId==null? "" : System.Uri.EscapeDataString(collectionId))+"&documentId=" + (documentId==null? "" : System.Uri.EscapeDataString(documentId))+"&"+string.Join("&", mask_fieldPaths.Select(z => $"mask.fieldPaths={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the collection IDs underneath a document.
		/// Firestore_projects_databases_documents_listCollectionIds v1/{parent}:listCollectionIds
		/// </summary>
		/// <param name="parent">Required. The parent document. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`</param>
		/// <returns>Successful response</returns>
		public async Task<ListCollectionIdsResponse> Firestore_projects_databases_documents_listCollectionIdsAsync(string parent, ListCollectionIdsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":listCollectionIds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCollectionIdsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results.
		/// Firestore_projects_databases_documents_partitionQuery v1/{parent}:partitionQuery
		/// </summary>
		/// <param name="parent">Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents`. Document resource names are not supported; only database resource names can be specified.</param>
		/// <returns>Successful response</returns>
		public async Task<PartitionQueryResponse> Firestore_projects_databases_documents_partitionQueryAsync(string parent, PartitionQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":partitionQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PartitionQueryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ```
		/// Firestore_projects_databases_documents_runAggregationQuery v1/{parent}:runAggregationQuery
		/// </summary>
		/// <param name="parent">Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`</param>
		/// <returns>Successful response</returns>
		public async Task<RunAggregationQueryResponse> Firestore_projects_databases_documents_runAggregationQueryAsync(string parent, RunAggregationQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":runAggregationQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunAggregationQueryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a query.
		/// Firestore_projects_databases_documents_runQuery v1/{parent}:runQuery
		/// </summary>
		/// <param name="parent">Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`</param>
		/// <returns>Successful response</returns>
		public async Task<RunQueryResponse> Firestore_projects_databases_documents_runQueryAsync(string parent, RunQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":runQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunQueryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
