//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateApiResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolType ProtocolType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cors
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowOrigins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExposeHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAge { get; set; }
	}
	
	/// <summary>
	/// Represents a protocol type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProtocolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEBSOCKET")]
		WEBSOCKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP")]
		HTTP = 1,
	}
	
	/// <summary>
	/// Represents a collection of tags associated with the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tags
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateApiMappingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerType AuthorizerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JWTConfiguration JwtConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthorizerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUEST")]
		REQUEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JWT")]
		JWT = 1,
	}
	
	/// <summary>
	/// Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JWTConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Audience { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeployed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Represents a deployment status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPLOYED")]
		DEPLOYED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainNameResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MutualTlsAuthentication MutualTlsAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// The domain name configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainNameConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiGatewayDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CertificateUploadDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameStatus DomainNameStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainNameStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointType EndpointType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostedZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityPolicy SecurityPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnershipVerificationCertificateArn { get; set; }
	}
	
	/// <summary>
	/// The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DomainNameStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_CERTIFICATE_REIMPORT")]
		PENDING_CERTIFICATE_REIMPORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_OWNERSHIP_VERIFICATION")]
		PENDING_OWNERSHIP_VERIFICATION = 3,
	}
	
	/// <summary>
	/// Represents an endpoint type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGIONAL")]
		REGIONAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EDGE")]
		EDGE = 1,
	}
	
	/// <summary>
	/// The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SecurityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TLS_1_0")]
		TLS_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TLS_1_2")]
		TLS_1_2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MutualTlsAuthentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TruststoreWarnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateIntegrationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationSubtype { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationType IntegrationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResponseParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfig TlsConfig { get; set; }
	}
	
	/// <summary>
	/// Represents a connection type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNET")]
		INTERNET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VPC_LINK")]
		VPC_LINK = 1,
	}
	
	/// <summary>
	/// Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentHandlingStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONVERT_TO_BINARY")]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONVERT_TO_TEXT")]
		CONVERT_TO_TEXT = 1,
	}
	
	/// <summary>
	/// Represents an API method integration type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IntegrationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS")]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP")]
		HTTP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOCK")]
		MOCK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HTTP_PROXY")]
		HTTP_PROXY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_PROXY")]
		AWS_PROXY = 4,
	}
	
	/// <summary>
	/// Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PassthroughBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHEN_NO_MATCH")]
		WHEN_NO_MATCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEVER")]
		NEVER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WHEN_NO_TEMPLATES")]
		WHEN_NO_TEMPLATES = 2,
	}
	
	/// <summary>
	/// <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
	///          , where 
	///            <replaceable>{location}</replaceable>
	///           is querystring, path, or header; and 
	///            <replaceable>{name}</replaceable>
	///           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationParameters
	{
	}
	
	/// <summary>
	/// A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateMap
	{
	}
	
	/// <summary>
	/// Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResponseParameters
	{
	}
	
	/// <summary>
	/// The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TlsConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerNameToVerify { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateIntegrationResponseResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRouteResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AuthorizationScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationType AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthorizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_IAM")]
		AWS_IAM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM")]
		CUSTOM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JWT")]
		JWT = 3,
	}
	
	/// <summary>
	/// The route models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteModels
	{
	}
	
	/// <summary>
	/// The route parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteParameters
	{
	}
	
	/// <summary>
	/// Validation constraints imposed on parameters of a request (path, query string, headers).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParameterConstraints
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRouteResponseResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels ResponseModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateStageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLogSettings AccessLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettings DefaultRouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastDeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettingsMap RouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageVariablesMap StageVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Settings for logging access in a stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessLogSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of route settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataTraceEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DetailedMetricsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoggingLevel LoggingLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThrottlingBurstLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ThrottlingRateLimit { get; set; }
	}
	
	/// <summary>
	/// The logging level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LoggingLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INFO")]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 2,
	}
	
	/// <summary>
	/// The route settings map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteSettingsMap
	{
	}
	
	/// <summary>
	/// The stage variable map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageVariablesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVpcLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkStatus VpcLinkStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkVersion VpcLinkVersion { get; set; }
	}
	
	/// <summary>
	/// The status of the VPC link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VpcLinkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE")]
		INACTIVE = 4,
	}
	
	/// <summary>
	/// The version of the VPC link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VpcLinkVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="V2")]
		V2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVpcLinkResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportApiResponse
	{
		
		/// <summary>
		/// Represents an exported definition of an API in a particular output format, for example, YAML. The API is serialized to the requested specification, for example, OpenAPI 3.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApiResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolType ProtocolType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApiMappingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApiMappingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApiMapping[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an API mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiMapping
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Api[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Api
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProtocolType ProtocolType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerType AuthorizerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JWTConfiguration JwtConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAuthorizersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Authorizer[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an authorizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authorizer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerType AuthorizerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JWTConfiguration JwtConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeployed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeploymentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Deployment[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Deployment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeployed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainNameResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MutualTlsAuthentication MutualTlsAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainNamesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainName[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a domain name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainName
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingSelectionExpression { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="DomainName")]
		public string DomainName1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MutualTlsAuthentication MutualTlsAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationSubtype { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationType IntegrationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResponseParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfig TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationResponseResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationResponsesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationResponse[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an integration response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Integration[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Integration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationSubtype { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationType IntegrationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResponseParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfig TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Model[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a data model for an API. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create Models and Mapping Templates for Request and Response Mappings</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Model
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AuthorizationScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationType AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteResponseResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels ResponseModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteResponsesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RouteResponse[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a route response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels ResponseModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRoutesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Route
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AuthorizationScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationType AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLogSettings AccessLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettings DefaultRouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastDeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettingsMap RouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageVariablesMap StageVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStagesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Stage[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents an API stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Stage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLogSettings AccessLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettings DefaultRouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastDeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettingsMap RouteSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageVariablesMap StageVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTagsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVpcLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkStatus VpcLinkStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkVersion VpcLinkVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVpcLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLink[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a VPC link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcLink
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkStatus VpcLinkStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkVersion VpcLinkVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportApiResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolType ProtocolType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReimportApiResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolType ProtocolType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApiResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProtocolType ProtocolType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApiMappingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerType AuthorizerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JWTConfiguration JwtConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeploymentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeployed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainNameResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MutualTlsAuthentication MutualTlsAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateIntegrationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationSubtype { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationType IntegrationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResponseParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfig TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateIntegrationResponseResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRouteResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AuthorizationScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationType AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRouteResponseResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels ResponseModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateStageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLogSettings AccessLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiGatewayManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettings DefaultRouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastDeploymentStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettingsMap RouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageVariablesMap StageVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVpcLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkStatus VpcLinkStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcLinkStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkVersion VpcLinkVersion { get; set; }
	}
	
	/// <summary>
	/// Creates a new ApiMapping resource to represent an API mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateApiMappingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	/// <summary>
	/// Creates a new Api resource to represent an API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateApiRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProtocolType ProtocolType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Creates a new Authorizer resource to represent an authorizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAuthorizerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerType AuthorizerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JWTConfiguration JwtConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Creates a new Deployment resource to represent a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MutualTlsAuthenticationInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreVersion { get; set; }
	}
	
	/// <summary>
	/// Creates a new DomainName resource to represent a domain name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainNameRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MutualTlsAuthenticationInput MutualTlsAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TlsConfigInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerNameToVerify { get; set; }
	}
	
	/// <summary>
	/// Creates a new Integration resource to represent an integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateIntegrationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationSubtype { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IntegrationType IntegrationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResponseParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfigInput TlsConfig { get; set; }
	}
	
	/// <summary>
	/// Creates a new IntegrationResponse resource to represent an integration response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateIntegrationResponseRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
	}
	
	/// <summary>
	/// Creates a new Model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateModelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	/// <summary>
	/// Creates a new Route resource to represent a route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRouteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AuthorizationScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationType AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters RequestParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Creates a new RouteResponse resource to represent a route response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRouteResponseRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels ResponseModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters ResponseParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseKey { get; set; }
	}
	
	/// <summary>
	/// Creates a new Stage resource to represent a stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateStageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLogSettings AccessLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettings DefaultRouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettingsMap RouteSettings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageVariablesMap StageVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Creates a VPC link
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVpcLinkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAccessLogSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteApiMappingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteApiRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAuthorizerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCorsConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDeploymentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainNameRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteIntegrationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteIntegrationResponseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteModelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRouteRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRouteRequestParameterRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRouteResponseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRouteSettingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteStageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVpcLinkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportApiRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetAuthorizersCacheRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApiMappingRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApiMappingsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApiRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApisRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAuthorizerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAuthorizersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeploymentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeploymentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainNameRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainNamesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationResponseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationResponsesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetIntegrationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetModelsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteResponseRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteResponsesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRoutesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetStagesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTagsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVpcLinkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVpcLinksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportApiRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReimportApiRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// Creates a new Tag resource to represent a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	/// Updates an ApiMapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApiMappingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiMappingKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	/// <summary>
	/// Updates an Api.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApiRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeySelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cors CorsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Updates an Authorizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAuthorizerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerType AuthorizerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JWTConfiguration JwtConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Updates a Deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Updates a DomainName.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainNameRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MutualTlsAuthenticationInput MutualTlsAuthentication { get; set; }
	}
	
	/// <summary>
	/// Updates an Integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateIntegrationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CredentialsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationSubtype { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationType IntegrationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayloadFormatVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResponseParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfigInput TlsConfig { get; set; }
	}
	
	/// <summary>
	/// Updates an IntegrationResponses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateIntegrationResponseRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationResponseKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateMap ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateSelectionExpression { get; set; }
	}
	
	/// <summary>
	/// Updates a Model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateModelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	/// <summary>
	/// Updates a Route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRouteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AuthorizationScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationType AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Updates a RouteResponse.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRouteResponseRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelSelectionExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteModels ResponseModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteParameters ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteResponseKey { get; set; }
	}
	
	/// <summary>
	/// Updates a Stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateStageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLogSettings AccessLogSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettings DefaultRouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteSettingsMap RouteSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageVariablesMap StageVariables { get; set; }
	}
	
	/// <summary>
	/// Updates a VPC link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVpcLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates an Api resource.
		/// CreateApi v2/apis
		/// </summary>
		public async Task CreateApiAsync(CreateApiPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a collection of Api resources.
		/// GetApis v2/apis
		/// </summary>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetApisResponse> GetApisAsync(string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApisResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports an API.
		/// ImportApi v2/apis
		/// </summary>
		/// <param name="basepath">Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.</param>
		/// <param name="failOnWarnings">Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.</param>
		public async Task ImportApiAsync(string basepath, bool failOnWarnings, ImportApiPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis?basepath=" + (basepath==null? "" : System.Uri.EscapeDataString(basepath))+"&failOnWarnings="+failOnWarnings;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an API mapping.
		/// CreateApiMapping v2/domainnames/{domainName}/apimappings
		/// </summary>
		/// <param name="domainName">The domain name.</param>
		public async Task CreateApiMappingAsync(string domainName, CreateApiMappingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/apimappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets API mappings.
		/// GetApiMappings v2/domainnames/{domainName}/apimappings
		/// </summary>
		/// <param name="domainName">The domain name.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetApiMappingsResponse> GetApiMappingsAsync(string domainName, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/apimappings&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApiMappingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Authorizer for an API.
		/// CreateAuthorizer v2/apis/{apiId}/authorizers
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task CreateAuthorizerAsync(string apiId, CreateAuthorizerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/authorizers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Authorizers for an API.
		/// GetAuthorizers v2/apis/{apiId}/authorizers
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetAuthorizersResponse> GetAuthorizersAsync(string apiId, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/authorizers&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAuthorizersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Deployment for an API.
		/// CreateDeployment v2/apis/{apiId}/deployments
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task CreateDeploymentAsync(string apiId, CreateDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/deployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Deployments for an API.
		/// GetDeployments v2/apis/{apiId}/deployments
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetDeploymentsResponse> GetDeploymentsAsync(string apiId, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/deployments&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a domain name.
		/// CreateDomainName v2/domainnames
		/// </summary>
		public async Task CreateDomainNameAsync(CreateDomainNamePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the domain names for an AWS account.
		/// GetDomainNames v2/domainnames
		/// </summary>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetDomainNamesResponse> GetDomainNamesAsync(string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDomainNamesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Integration.
		/// CreateIntegration v2/apis/{apiId}/integrations
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task CreateIntegrationAsync(string apiId, CreateIntegrationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Integrations for an API.
		/// GetIntegrations v2/apis/{apiId}/integrations
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetIntegrationsResponse> GetIntegrationsAsync(string apiId, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIntegrationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an IntegrationResponses.
		/// CreateIntegrationResponse v2/apis/{apiId}/integrations/{integrationId}/integrationresponses
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		public async Task CreateIntegrationResponseAsync(string apiId, string integrationId, CreateIntegrationResponsePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/integrationresponses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the IntegrationResponses for an Integration.
		/// GetIntegrationResponses v2/apis/{apiId}/integrations/{integrationId}/integrationresponses
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetIntegrationResponsesResponse> GetIntegrationResponsesAsync(string apiId, string integrationId, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/integrationresponses&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIntegrationResponsesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Model for an API.
		/// CreateModel v2/apis/{apiId}/models
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task CreateModelAsync(string apiId, CreateModelPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Models for an API.
		/// GetModels v2/apis/{apiId}/models
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetModelsResponse> GetModelsAsync(string apiId, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/models&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Route for an API.
		/// CreateRoute v2/apis/{apiId}/routes
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task CreateRouteAsync(string apiId, CreateRoutePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Routes for an API.
		/// GetRoutes v2/apis/{apiId}/routes
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetRoutesResponse> GetRoutesAsync(string apiId, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRoutesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a RouteResponse for a Route.
		/// CreateRouteResponse v2/apis/{apiId}/routes/{routeId}/routeresponses
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeId">The route ID.</param>
		public async Task CreateRouteResponseAsync(string apiId, string routeId, CreateRouteResponsePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"/routeresponses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the RouteResponses for a Route.
		/// GetRouteResponses v2/apis/{apiId}/routes/{routeId}/routeresponses
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <param name="routeId">The route ID.</param>
		/// <returns>Success</returns>
		public async Task<GetRouteResponsesResponse> GetRouteResponsesAsync(string apiId, string maxResults, string nextToken, string routeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"/routeresponses&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRouteResponsesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Stage for an API.
		/// CreateStage v2/apis/{apiId}/stages
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task CreateStageAsync(string apiId, CreateStagePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Stages for an API.
		/// GetStages v2/apis/{apiId}/stages
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetStagesResponse> GetStagesAsync(string apiId, string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages&maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStagesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a VPC link.
		/// CreateVpcLink v2/vpclinks
		/// </summary>
		public async Task CreateVpcLinkAsync(CreateVpcLinkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vpclinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a collection of VPC links.
		/// GetVpcLinks v2/vpclinks
		/// </summary>
		/// <param name="maxResults">The maximum number of elements to be returned for this resource.</param>
		/// <param name="nextToken">The next page of elements from this collection. Not valid for the last element of the collection.</param>
		/// <returns>Success</returns>
		public async Task<GetVpcLinksResponse> GetVpcLinksAsync(string maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vpclinks?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVpcLinksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.
		/// DeleteAccessLogSettings v2/apis/{apiId}/stages/{stageName}/accesslogsettings
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="stageName">The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</param>
		public async Task DeleteAccessLogSettingsAsync(string apiId, string stageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages/"+ (stageName==null? "" : System.Uri.EscapeDataString(stageName))+"/accesslogsettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an Api resource.
		/// DeleteApi v2/apis/{apiId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task DeleteApiAsync(string apiId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an Api resource.
		/// GetApi v2/apis/{apiId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <returns>Success</returns>
		public async Task<GetApiResponse> GetApiAsync(string apiId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts an Api resource.
		/// ReimportApi v2/apis/{apiId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="basepath">Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.</param>
		/// <param name="failOnWarnings">Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.</param>
		public async Task ReimportApiAsync(string apiId, string basepath, bool failOnWarnings, ReimportApiPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"&basepath=" + (basepath==null? "" : System.Uri.EscapeDataString(basepath))+"&failOnWarnings="+failOnWarnings;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an Api resource.
		/// UpdateApi v2/apis/{apiId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <returns>Success</returns>
		public async Task<UpdateApiResponse> UpdateApiAsync(string apiId, UpdateApiPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an API mapping.
		/// DeleteApiMapping v2/domainnames/{domainName}/apimappings/{apiMappingId}
		/// </summary>
		/// <param name="apiMappingId">The API mapping identifier.</param>
		/// <param name="domainName">The domain name.</param>
		public async Task DeleteApiMappingAsync(string apiMappingId, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/apimappings/"+ (apiMappingId==null? "" : System.Uri.EscapeDataString(apiMappingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an API mapping.
		/// GetApiMapping v2/domainnames/{domainName}/apimappings/{apiMappingId}
		/// </summary>
		/// <param name="apiMappingId">The API mapping identifier.</param>
		/// <param name="domainName">The domain name.</param>
		/// <returns>Success</returns>
		public async Task<GetApiMappingResponse> GetApiMappingAsync(string apiMappingId, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/apimappings/"+ (apiMappingId==null? "" : System.Uri.EscapeDataString(apiMappingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApiMappingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The API mapping.
		/// UpdateApiMapping v2/domainnames/{domainName}/apimappings/{apiMappingId}
		/// </summary>
		/// <param name="apiMappingId">The API mapping identifier.</param>
		/// <param name="domainName">The domain name.</param>
		/// <returns>Success</returns>
		public async Task<UpdateApiMappingResponse> UpdateApiMappingAsync(string apiMappingId, string domainName, UpdateApiMappingPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName))+"/apimappings/"+ (apiMappingId==null? "" : System.Uri.EscapeDataString(apiMappingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateApiMappingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Authorizer.
		/// DeleteAuthorizer v2/apis/{apiId}/authorizers/{authorizerId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="authorizerId">The authorizer identifier.</param>
		public async Task DeleteAuthorizerAsync(string apiId, string authorizerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/authorizers/"+ (authorizerId==null? "" : System.Uri.EscapeDataString(authorizerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an Authorizer.
		/// GetAuthorizer v2/apis/{apiId}/authorizers/{authorizerId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="authorizerId">The authorizer identifier.</param>
		/// <returns>Success</returns>
		public async Task<GetAuthorizerResponse> GetAuthorizerAsync(string apiId, string authorizerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/authorizers/"+ (authorizerId==null? "" : System.Uri.EscapeDataString(authorizerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an Authorizer.
		/// UpdateAuthorizer v2/apis/{apiId}/authorizers/{authorizerId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="authorizerId">The authorizer identifier.</param>
		/// <returns>Success</returns>
		public async Task<UpdateAuthorizerResponse> UpdateAuthorizerAsync(string apiId, string authorizerId, UpdateAuthorizerPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/authorizers/"+ (authorizerId==null? "" : System.Uri.EscapeDataString(authorizerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a CORS configuration.
		/// DeleteCorsConfiguration v2/apis/{apiId}/cors
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		public async Task DeleteCorsConfigurationAsync(string apiId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/cors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Deployment.
		/// DeleteDeployment v2/apis/{apiId}/deployments/{deploymentId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="deploymentId">The deployment ID.</param>
		public async Task DeleteDeploymentAsync(string apiId, string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Deployment.
		/// GetDeployment v2/apis/{apiId}/deployments/{deploymentId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="deploymentId">The deployment ID.</param>
		/// <returns>Success</returns>
		public async Task<GetDeploymentResponse> GetDeploymentAsync(string apiId, string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeploymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Deployment.
		/// UpdateDeployment v2/apis/{apiId}/deployments/{deploymentId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="deploymentId">The deployment ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDeploymentResponse> UpdateDeploymentAsync(string apiId, string deploymentId, UpdateDeploymentPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDeploymentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain name.
		/// DeleteDomainName v2/domainnames/{domainName}
		/// </summary>
		/// <param name="domainName">The domain name.</param>
		public async Task DeleteDomainNameAsync(string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a domain name.
		/// GetDomainName v2/domainnames/{domainName}
		/// </summary>
		/// <param name="domainName">The domain name.</param>
		/// <returns>Success</returns>
		public async Task<GetDomainNameResponse> GetDomainNameAsync(string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDomainNameResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a domain name.
		/// UpdateDomainName v2/domainnames/{domainName}
		/// </summary>
		/// <param name="domainName">The domain name.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDomainNameResponse> UpdateDomainNameAsync(string domainName, UpdateDomainNamePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/domainnames/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainNameResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Integration.
		/// DeleteIntegration v2/apis/{apiId}/integrations/{integrationId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		public async Task DeleteIntegrationAsync(string apiId, string integrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an Integration.
		/// GetIntegration v2/apis/{apiId}/integrations/{integrationId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		/// <returns>Success</returns>
		public async Task<GetIntegrationResult> GetIntegrationAsync(string apiId, string integrationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIntegrationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an Integration.
		/// UpdateIntegration v2/apis/{apiId}/integrations/{integrationId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateIntegrationResult> UpdateIntegrationAsync(string apiId, string integrationId, UpdateIntegrationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateIntegrationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an IntegrationResponses.
		/// DeleteIntegrationResponse v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		/// <param name="integrationResponseId">The integration response ID.</param>
		public async Task DeleteIntegrationResponseAsync(string apiId, string integrationId, string integrationResponseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/integrationresponses/"+ (integrationResponseId==null? "" : System.Uri.EscapeDataString(integrationResponseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an IntegrationResponses.
		/// GetIntegrationResponse v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		/// <param name="integrationResponseId">The integration response ID.</param>
		/// <returns>Success</returns>
		public async Task<GetIntegrationResponseResponse> GetIntegrationResponseAsync(string apiId, string integrationId, string integrationResponseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/integrationresponses/"+ (integrationResponseId==null? "" : System.Uri.EscapeDataString(integrationResponseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetIntegrationResponseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an IntegrationResponses.
		/// UpdateIntegrationResponse v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="integrationId">The integration ID.</param>
		/// <param name="integrationResponseId">The integration response ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateIntegrationResponseResponse> UpdateIntegrationResponseAsync(string apiId, string integrationId, string integrationResponseId, UpdateIntegrationResponsePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/integrations/"+ (integrationId==null? "" : System.Uri.EscapeDataString(integrationId))+"/integrationresponses/"+ (integrationResponseId==null? "" : System.Uri.EscapeDataString(integrationResponseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateIntegrationResponseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Model.
		/// DeleteModel v2/apis/{apiId}/models/{modelId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="modelId">The model ID.</param>
		public async Task DeleteModelAsync(string apiId, string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Model.
		/// GetModel v2/apis/{apiId}/models/{modelId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="modelId">The model ID.</param>
		/// <returns>Success</returns>
		public async Task<GetModelResponse> GetModelAsync(string apiId, string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Model.
		/// UpdateModel v2/apis/{apiId}/models/{modelId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="modelId">The model ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateModelResponse> UpdateModelAsync(string apiId, string modelId, UpdateModelPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateModelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Route.
		/// DeleteRoute v2/apis/{apiId}/routes/{routeId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeId">The route ID.</param>
		public async Task DeleteRouteAsync(string apiId, string routeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Route.
		/// GetRoute v2/apis/{apiId}/routes/{routeId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeId">The route ID.</param>
		/// <returns>Success</returns>
		public async Task<GetRouteResult> GetRouteAsync(string apiId, string routeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRouteResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Route.
		/// UpdateRoute v2/apis/{apiId}/routes/{routeId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeId">The route ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateRouteResult> UpdateRouteAsync(string apiId, string routeId, UpdateRoutePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRouteResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a route request parameter. Supported only for WebSocket APIs.
		/// DeleteRouteRequestParameter v2/apis/{apiId}/routes/{routeId}/requestparameters/{requestParameterKey}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="requestParameterKey">The route request parameter key.</param>
		/// <param name="routeId">The route ID.</param>
		public async Task DeleteRouteRequestParameterAsync(string apiId, string requestParameterKey, string routeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"/requestparameters/"+ (requestParameterKey==null? "" : System.Uri.EscapeDataString(requestParameterKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a RouteResponse.
		/// DeleteRouteResponse v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeId">The route ID.</param>
		/// <param name="routeResponseId">The route response ID.</param>
		public async Task DeleteRouteResponseAsync(string apiId, string routeId, string routeResponseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"/routeresponses/"+ (routeResponseId==null? "" : System.Uri.EscapeDataString(routeResponseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a RouteResponse.
		/// GetRouteResponse v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeId">The route ID.</param>
		/// <param name="routeResponseId">The route response ID.</param>
		/// <returns>Success</returns>
		public async Task<GetRouteResponseResponse> GetRouteResponseAsync(string apiId, string routeId, string routeResponseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"/routeresponses/"+ (routeResponseId==null? "" : System.Uri.EscapeDataString(routeResponseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRouteResponseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a RouteResponse.
		/// UpdateRouteResponse v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeId">The route ID.</param>
		/// <param name="routeResponseId">The route response ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateRouteResponseResponse> UpdateRouteResponseAsync(string apiId, string routeId, string routeResponseId, UpdateRouteResponsePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/routes/"+ (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"/routeresponses/"+ (routeResponseId==null? "" : System.Uri.EscapeDataString(routeResponseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateRouteResponseResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the RouteSettings for a stage.
		/// DeleteRouteSettings v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="routeKey">The route key.</param>
		/// <param name="stageName">The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</param>
		public async Task DeleteRouteSettingsAsync(string apiId, string routeKey, string stageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages/"+ (stageName==null? "" : System.Uri.EscapeDataString(stageName))+"/routesettings/"+ (routeKey==null? "" : System.Uri.EscapeDataString(routeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Stage.
		/// DeleteStage v2/apis/{apiId}/stages/{stageName}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="stageName">The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</param>
		public async Task DeleteStageAsync(string apiId, string stageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages/"+ (stageName==null? "" : System.Uri.EscapeDataString(stageName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Stage.
		/// GetStage v2/apis/{apiId}/stages/{stageName}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="stageName">The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</param>
		/// <returns>Success</returns>
		public async Task<GetStageResponse> GetStageAsync(string apiId, string stageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages/"+ (stageName==null? "" : System.Uri.EscapeDataString(stageName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetStageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Stage.
		/// UpdateStage v2/apis/{apiId}/stages/{stageName}
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="stageName">The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</param>
		/// <returns>Success</returns>
		public async Task<UpdateStageResponse> UpdateStageAsync(string apiId, string stageName, UpdateStagePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages/"+ (stageName==null? "" : System.Uri.EscapeDataString(stageName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateStageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a VPC link.
		/// DeleteVpcLink v2/vpclinks/{vpcLinkId}
		/// </summary>
		/// <param name="vpcLinkId">The ID of the VPC link.</param>
		public async Task DeleteVpcLinkAsync(string vpcLinkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vpclinks/"+ (vpcLinkId==null? "" : System.Uri.EscapeDataString(vpcLinkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a VPC link.
		/// GetVpcLink v2/vpclinks/{vpcLinkId}
		/// </summary>
		/// <param name="vpcLinkId">The ID of the VPC link.</param>
		/// <returns>Success</returns>
		public async Task<GetVpcLinkResponse> GetVpcLinkAsync(string vpcLinkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vpclinks/"+ (vpcLinkId==null? "" : System.Uri.EscapeDataString(vpcLinkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVpcLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a VPC link.
		/// UpdateVpcLink v2/vpclinks/{vpcLinkId}
		/// </summary>
		/// <param name="vpcLinkId">The ID of the VPC link.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVpcLinkResponse> UpdateVpcLinkAsync(string vpcLinkId, UpdateVpcLinkPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/vpclinks/"+ (vpcLinkId==null? "" : System.Uri.EscapeDataString(vpcLinkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVpcLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ExportApi v2/apis/{apiId}/exports/{specification}#outputType
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="exportVersion">The version of the API Gateway export algorithm. API Gateway uses the latest version by default. Currently, the only supported version is 1.0.</param>
		/// <param name="includeExtensions">Specifies whether to include <a href="https://docs.aws.amazon.com//apigateway/latest/developerguide/api-gateway-swagger-extensions.html">API Gateway extensions</a> in the exported API definition. API Gateway extensions are included by default.</param>
		/// <param name="outputType">The output type of the exported definition file. Valid values are JSON and YAML.</param>
		/// <param name="specification">The version of the API specification to use. OAS30, for OpenAPI 3.0, is the only supported value.</param>
		/// <param name="stageName">The name of the API stage to export. If you don't specify this property, a representation of the latest API configuration is exported.</param>
		/// <returns>Success</returns>
		public async Task<ExportApiResponse> ExportApiAsync(string apiId, string exportVersion, bool includeExtensions, string outputType, string specification, string stageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/exports/"+ (specification==null? "" : System.Uri.EscapeDataString(specification))+"#outputType&exportVersion=" + (exportVersion==null? "" : System.Uri.EscapeDataString(exportVersion))+"&includeExtensions="+includeExtensions+"&outputType=" + (outputType==null? "" : System.Uri.EscapeDataString(outputType))+"&stageName=" + (stageName==null? "" : System.Uri.EscapeDataString(stageName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.
		/// ResetAuthorizersCache v2/apis/{apiId}/stages/{stageName}/cache/authorizers
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="stageName">The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</param>
		public async Task ResetAuthorizersCacheAsync(string apiId, string stageName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/stages/"+ (stageName==null? "" : System.Uri.EscapeDataString(stageName))+"/cache/authorizers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a model template.
		/// GetModelTemplate v2/apis/{apiId}/models/{modelId}/template
		/// </summary>
		/// <param name="apiId">The API identifier.</param>
		/// <param name="modelId">The model ID.</param>
		/// <returns>Success</returns>
		public async Task<GetModelTemplateResponse> GetModelTemplateAsync(string apiId, string modelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/apis/"+ (apiId==null? "" : System.Uri.EscapeDataString(apiId))+"/models/"+ (modelId==null? "" : System.Uri.EscapeDataString(modelId))+"/template";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetModelTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a collection of Tag resources.
		/// GetTags v2/tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The resource ARN for the tag.</param>
		/// <returns>Success</returns>
		public async Task<GetTagsResponse> GetTagsAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Tag resource to represent a tag.
		/// TagResource v2/tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The resource ARN for the tag.</param>
		public async Task TagResourceAsync(string resource_arn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/tags/{resource_arn}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Tag.
		/// UntagResource v2/tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="resource_arn">The resource ARN for the tag.</param>
		/// <param name="tagKeys">The Tag keys to delete</param>
		public async Task UntagResourceAsync(string resource_arn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/tags/{resource_arn}#tagKeys?"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateApiPostBody
	{
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKeySelectionExpression")]
		public string ApiKeySelectionExpression { get; set; }
		
		/// <summary>
		/// Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corsConfiguration")]
		public CreateApiPostBodyCorsConfiguration CorsConfiguration { get; set; }
		
		/// <summary>
		/// Represents an Amazon Resource Name (ARN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsArn")]
		public string CredentialsArn { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableSchemaValidation")]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		/// <summary>
		/// Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExecuteApiEndpoint")]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a protocol type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="protocolType")]
		public ProtocolType ProtocolType { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeKey")]
		public string RouteKey { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeSelectionExpression")]
		public string RouteSelectionExpression { get; set; }
		
		/// <summary>
		/// Represents a collection of tags associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// A string representation of a URI with a length between [1-2048].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class CreateApiPostBodyCorsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowOrigins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExposeHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAge { get; set; }
	}
	
	public class ImportApiPutBody
	{
		
		/// <summary>
		/// The OpenAPI definition. Supported only for HTTP APIs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
	}
	
	public class CreateApiMappingPostBody
	{
		
		/// <summary>
		/// The identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiId")]
		public string ApiId { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMappingKey")]
		public string ApiMappingKey { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public string Stage { get; set; }
	}
	
	public class CreateAuthorizerPostBody
	{
		
		/// <summary>
		/// Represents an Amazon Resource Name (ARN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerCredentialsArn")]
		public string AuthorizerCredentialsArn { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerPayloadFormatVersion")]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		/// <summary>
		/// An integer with a value between [0-3600].
		/// Minimum: 0
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerResultTtlInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, 3600)]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		/// <summary>
		/// The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizerType")]
		public AuthorizerType AuthorizerType { get; set; }
		
		/// <summary>
		/// A string representation of a URI with a length between [1-2048].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerUri")]
		public string AuthorizerUri { get; set; }
		
		/// <summary>
		/// Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSimpleResponses")]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		/// <summary>
		/// The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="identitySource")]
		public string[] IdentitySource { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityValidationExpression")]
		public string IdentityValidationExpression { get; set; }
		
		/// <summary>
		/// Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwtConfiguration")]
		public CreateAuthorizerPostBodyJwtConfiguration JwtConfiguration { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class CreateAuthorizerPostBodyJwtConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Audience { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
	}
	
	public class CreateDeploymentPostBody
	{
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
	}
	
	public class CreateDomainNamePostBody
	{
		
		/// <summary>
		/// A string with a length between [1-512].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The domain name configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainNameConfigurations")]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		/// <summary>
		/// The mutual TLS authentication configuration for a custom domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mutualTlsAuthentication")]
		public CreateDomainNamePostBodyMutualTlsAuthentication MutualTlsAuthentication { get; set; }
		
		/// <summary>
		/// Represents a collection of tags associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateDomainNamePostBodyMutualTlsAuthentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreVersion { get; set; }
	}
	
	public class CreateIntegrationPostBody
	{
		
		/// <summary>
		/// A string with a length between [1-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionId")]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Represents a connection type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionType")]
		public ConnectionType ConnectionType { get; set; }
		
		/// <summary>
		/// Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHandlingStrategy")]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		/// <summary>
		/// Represents an Amazon Resource Name (ARN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsArn")]
		public string CredentialsArn { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationMethod")]
		public string IntegrationMethod { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationSubtype")]
		public string IntegrationSubtype { get; set; }
		
		/// <summary>
		/// Represents an API method integration type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="integrationType")]
		public IntegrationType IntegrationType { get; set; }
		
		/// <summary>
		/// A string representation of a URI with a length between [1-2048].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationUri")]
		public string IntegrationUri { get; set; }
		
		/// <summary>
		/// Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passthroughBehavior")]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payloadFormatVersion")]
		public string PayloadFormatVersion { get; set; }
		
		/// <summary>
		/// <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
		///          , where 
		///            <replaceable>{location}</replaceable>
		///           is querystring, path, or header; and 
		///            <replaceable>{name}</replaceable>
		///           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestParameters")]
		public System.Collections.Generic.Dictionary<string, string> RequestParameters { get; set; }
		
		/// <summary>
		/// A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTemplates")]
		public System.Collections.Generic.Dictionary<string, string> RequestTemplates { get; set; }
		
		/// <summary>
		/// Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseParameters")]
		public System.Collections.Generic.Dictionary<string, IntegrationParameters> ResponseParameters { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateSelectionExpression")]
		public string TemplateSelectionExpression { get; set; }
		
		/// <summary>
		/// An integer with a value between [50-30000].
		/// Minimum: 50
		/// Maximum: 30000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutInMillis")]
		[System.ComponentModel.DataAnnotations.Range(50, 30000)]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		/// <summary>
		/// The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tlsConfig")]
		public CreateIntegrationPostBodyTlsConfig TlsConfig { get; set; }
	}
	
	public class CreateIntegrationPostBodyTlsConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerNameToVerify { get; set; }
	}
	
	public class CreateIntegrationResponsePostBody
	{
		
		/// <summary>
		/// Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHandlingStrategy")]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="integrationResponseKey")]
		public string IntegrationResponseKey { get; set; }
		
		/// <summary>
		/// <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
		///          , where 
		///            <replaceable>{location}</replaceable>
		///           is querystring, path, or header; and 
		///            <replaceable>{name}</replaceable>
		///           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseParameters")]
		public System.Collections.Generic.Dictionary<string, string> ResponseParameters { get; set; }
		
		/// <summary>
		/// A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseTemplates")]
		public System.Collections.Generic.Dictionary<string, string> ResponseTemplates { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateSelectionExpression")]
		public string TemplateSelectionExpression { get; set; }
	}
	
	public class CreateModelPostBody
	{
		
		/// <summary>
		/// A string with a length between [1-256].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A string with a length between [0-32768].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	public class CreateRoutePostBody
	{
		
		/// <summary>
		/// Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKeyRequired")]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		/// <summary>
		/// A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationScopes")]
		public string[] AuthorizationScopes { get; set; }
		
		/// <summary>
		/// The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationType")]
		public AuthorizationType AuthorizationType { get; set; }
		
		/// <summary>
		/// The identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerId")]
		public string AuthorizerId { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelSelectionExpression")]
		public string ModelSelectionExpression { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public string OperationName { get; set; }
		
		/// <summary>
		/// The route models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestModels")]
		public System.Collections.Generic.Dictionary<string, string> RequestModels { get; set; }
		
		/// <summary>
		/// The route parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestParameters")]
		public System.Collections.Generic.Dictionary<string, ParameterConstraints> RequestParameters { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routeKey")]
		public string RouteKey { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeResponseSelectionExpression")]
		public string RouteResponseSelectionExpression { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	public class CreateRouteResponsePostBody
	{
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelSelectionExpression")]
		public string ModelSelectionExpression { get; set; }
		
		/// <summary>
		/// The route models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseModels")]
		public System.Collections.Generic.Dictionary<string, string> ResponseModels { get; set; }
		
		/// <summary>
		/// The route parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseParameters")]
		public System.Collections.Generic.Dictionary<string, ParameterConstraints> ResponseParameters { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="routeResponseKey")]
		public string RouteResponseKey { get; set; }
	}
	
	public class CreateStagePostBody
	{
		
		/// <summary>
		/// Settings for logging access in a stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessLogSettings")]
		public CreateStagePostBodyAccessLogSettings AccessLogSettings { get; set; }
		
		/// <summary>
		/// Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeploy")]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		/// <summary>
		/// The identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificateId")]
		public string ClientCertificateId { get; set; }
		
		/// <summary>
		/// Represents a collection of route settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultRouteSettings")]
		public CreateStagePostBodyDefaultRouteSettings DefaultRouteSettings { get; set; }
		
		/// <summary>
		/// The identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The route settings map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeSettings")]
		public System.Collections.Generic.Dictionary<string, RouteSettings> RouteSettings { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// The stage variable map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageVariables")]
		public System.Collections.Generic.Dictionary<string, string> StageVariables { get; set; }
		
		/// <summary>
		/// Represents a collection of tags associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateStagePostBodyAccessLogSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
	}
	
	public class CreateStagePostBodyDefaultRouteSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataTraceEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DetailedMetricsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoggingLevel LoggingLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThrottlingBurstLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ThrottlingRateLimit { get; set; }
	}
	
	public class CreateVpcLinkPostBody
	{
		
		/// <summary>
		/// A string with a length between [1-128].
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of security group IDs for the VPC link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// A list of subnet IDs to include in the VPC link.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// Represents a collection of tags associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ReimportApiPutBody
	{
		
		/// <summary>
		/// The OpenAPI definition. Supported only for HTTP APIs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
	}
	
	public class UpdateApiPatchBody
	{
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKeySelectionExpression")]
		public string ApiKeySelectionExpression { get; set; }
		
		/// <summary>
		/// Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corsConfiguration")]
		public UpdateApiPatchBodyCorsConfiguration CorsConfiguration { get; set; }
		
		/// <summary>
		/// Represents an Amazon Resource Name (ARN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsArn")]
		public string CredentialsArn { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableSchemaValidation")]
		public System.Nullable<System.Boolean> DisableSchemaValidation { get; set; }
		
		/// <summary>
		/// Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableExecuteApiEndpoint")]
		public System.Nullable<System.Boolean> DisableExecuteApiEndpoint { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeKey")]
		public string RouteKey { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeSelectionExpression")]
		public string RouteSelectionExpression { get; set; }
		
		/// <summary>
		/// A string representation of a URI with a length between [1-2048].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class UpdateApiPatchBodyCorsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowMethods { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowOrigins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExposeHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAge { get; set; }
	}
	
	public class UpdateApiMappingPatchBody
	{
		
		/// <summary>
		/// The identifier.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiId")]
		public string ApiId { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiMappingKey")]
		public string ApiMappingKey { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public string Stage { get; set; }
	}
	
	public class UpdateAuthorizerPatchBody
	{
		
		/// <summary>
		/// Represents an Amazon Resource Name (ARN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerCredentialsArn")]
		public string AuthorizerCredentialsArn { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerPayloadFormatVersion")]
		public string AuthorizerPayloadFormatVersion { get; set; }
		
		/// <summary>
		/// An integer with a value between [0-3600].
		/// Minimum: 0
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerResultTtlInSeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, 3600)]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
		
		/// <summary>
		/// The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerType")]
		public AuthorizerType AuthorizerType { get; set; }
		
		/// <summary>
		/// A string representation of a URI with a length between [1-2048].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerUri")]
		public string AuthorizerUri { get; set; }
		
		/// <summary>
		/// Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableSimpleResponses")]
		public System.Nullable<System.Boolean> EnableSimpleResponses { get; set; }
		
		/// <summary>
		/// The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identitySource")]
		public string[] IdentitySource { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identityValidationExpression")]
		public string IdentityValidationExpression { get; set; }
		
		/// <summary>
		/// Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwtConfiguration")]
		public UpdateAuthorizerPatchBodyJwtConfiguration JwtConfiguration { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateAuthorizerPatchBodyJwtConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Audience { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
	}
	
	public class UpdateDeploymentPatchBody
	{
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class UpdateDomainNamePatchBody
	{
		
		/// <summary>
		/// The domain name configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainNameConfigurations")]
		public DomainNameConfiguration[] DomainNameConfigurations { get; set; }
		
		/// <summary>
		/// The mutual TLS authentication configuration for a custom domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mutualTlsAuthentication")]
		public UpdateDomainNamePatchBodyMutualTlsAuthentication MutualTlsAuthentication { get; set; }
	}
	
	public class UpdateDomainNamePatchBodyMutualTlsAuthentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TruststoreVersion { get; set; }
	}
	
	public class UpdateIntegrationPatchBody
	{
		
		/// <summary>
		/// A string with a length between [1-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionId")]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Represents a connection type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionType")]
		public ConnectionType ConnectionType { get; set; }
		
		/// <summary>
		/// Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHandlingStrategy")]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		/// <summary>
		/// Represents an Amazon Resource Name (ARN).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentialsArn")]
		public string CredentialsArn { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationMethod")]
		public string IntegrationMethod { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationSubtype")]
		public string IntegrationSubtype { get; set; }
		
		/// <summary>
		/// Represents an API method integration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationType")]
		public IntegrationType IntegrationType { get; set; }
		
		/// <summary>
		/// A string representation of a URI with a length between [1-2048].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationUri")]
		public string IntegrationUri { get; set; }
		
		/// <summary>
		/// Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passthroughBehavior")]
		public PassthroughBehavior PassthroughBehavior { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payloadFormatVersion")]
		public string PayloadFormatVersion { get; set; }
		
		/// <summary>
		/// <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
		///          , where 
		///            <replaceable>{location}</replaceable>
		///           is querystring, path, or header; and 
		///            <replaceable>{name}</replaceable>
		///           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestParameters")]
		public System.Collections.Generic.Dictionary<string, string> RequestParameters { get; set; }
		
		/// <summary>
		/// A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTemplates")]
		public System.Collections.Generic.Dictionary<string, string> RequestTemplates { get; set; }
		
		/// <summary>
		/// Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseParameters")]
		public System.Collections.Generic.Dictionary<string, IntegrationParameters> ResponseParameters { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateSelectionExpression")]
		public string TemplateSelectionExpression { get; set; }
		
		/// <summary>
		/// An integer with a value between [50-30000].
		/// Minimum: 50
		/// Maximum: 30000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeoutInMillis")]
		[System.ComponentModel.DataAnnotations.Range(50, 30000)]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		/// <summary>
		/// The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tlsConfig")]
		public UpdateIntegrationPatchBodyTlsConfig TlsConfig { get; set; }
	}
	
	public class UpdateIntegrationPatchBodyTlsConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerNameToVerify { get; set; }
	}
	
	public class UpdateIntegrationResponsePatchBody
	{
		
		/// <summary>
		/// Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentHandlingStrategy")]
		public ContentHandlingStrategy ContentHandlingStrategy { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationResponseKey")]
		public string IntegrationResponseKey { get; set; }
		
		/// <summary>
		/// <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
		///          , where 
		///            <replaceable>{location}</replaceable>
		///           is querystring, path, or header; and 
		///            <replaceable>{name}</replaceable>
		///           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseParameters")]
		public System.Collections.Generic.Dictionary<string, string> ResponseParameters { get; set; }
		
		/// <summary>
		/// A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseTemplates")]
		public System.Collections.Generic.Dictionary<string, string> ResponseTemplates { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="templateSelectionExpression")]
		public string TemplateSelectionExpression { get; set; }
	}
	
	public class UpdateModelPatchBody
	{
		
		/// <summary>
		/// A string with a length between [1-256].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A string with a length between [0-32768].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	public class UpdateRoutePatchBody
	{
		
		/// <summary>
		/// Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKeyRequired")]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		/// <summary>
		/// A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationScopes")]
		public string[] AuthorizationScopes { get; set; }
		
		/// <summary>
		/// The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationType")]
		public AuthorizationType AuthorizationType { get; set; }
		
		/// <summary>
		/// The identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizerId")]
		public string AuthorizerId { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelSelectionExpression")]
		public string ModelSelectionExpression { get; set; }
		
		/// <summary>
		/// A string with a length between [1-64].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public string OperationName { get; set; }
		
		/// <summary>
		/// The route models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestModels")]
		public System.Collections.Generic.Dictionary<string, string> RequestModels { get; set; }
		
		/// <summary>
		/// The route parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestParameters")]
		public System.Collections.Generic.Dictionary<string, ParameterConstraints> RequestParameters { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeKey")]
		public string RouteKey { get; set; }
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeResponseSelectionExpression")]
		public string RouteResponseSelectionExpression { get; set; }
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	public class UpdateRouteResponsePatchBody
	{
		
		/// <summary>
		/// An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelSelectionExpression")]
		public string ModelSelectionExpression { get; set; }
		
		/// <summary>
		/// The route models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseModels")]
		public System.Collections.Generic.Dictionary<string, string> ResponseModels { get; set; }
		
		/// <summary>
		/// The route parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseParameters")]
		public System.Collections.Generic.Dictionary<string, ParameterConstraints> ResponseParameters { get; set; }
		
		/// <summary>
		/// After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeResponseKey")]
		public string RouteResponseKey { get; set; }
	}
	
	public class UpdateStagePatchBody
	{
		
		/// <summary>
		/// Settings for logging access in a stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessLogSettings")]
		public UpdateStagePatchBodyAccessLogSettings AccessLogSettings { get; set; }
		
		/// <summary>
		/// Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoDeploy")]
		public System.Nullable<System.Boolean> AutoDeploy { get; set; }
		
		/// <summary>
		/// The identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificateId")]
		public string ClientCertificateId { get; set; }
		
		/// <summary>
		/// Represents a collection of route settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultRouteSettings")]
		public UpdateStagePatchBodyDefaultRouteSettings DefaultRouteSettings { get; set; }
		
		/// <summary>
		/// The identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// A string with a length between [0-1024].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The route settings map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeSettings")]
		public System.Collections.Generic.Dictionary<string, RouteSettings> RouteSettings { get; set; }
		
		/// <summary>
		/// The stage variable map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stageVariables")]
		public System.Collections.Generic.Dictionary<string, string> StageVariables { get; set; }
	}
	
	public class UpdateStagePatchBodyAccessLogSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
	}
	
	public class UpdateStagePatchBodyDefaultRouteSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataTraceEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DetailedMetricsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoggingLevel LoggingLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThrottlingBurstLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ThrottlingRateLimit { get; set; }
	}
	
	public class UpdateVpcLinkPatchBody
	{
		
		/// <summary>
		/// A string with a length between [1-128].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Represents a collection of tags associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
