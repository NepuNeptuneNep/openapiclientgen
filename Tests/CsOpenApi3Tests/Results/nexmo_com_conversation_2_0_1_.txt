//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _links_conversation
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public _links_conversationSelf Self { get; set; }
	}
	
	public class _links_conversationSelf
	{
		
		/// <summary>
		/// A link towards a conversation included in Conversation API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	/// <summary>
	/// A series of links between resources in this API in the http://stateless.co/hal_specification.html.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _links_conversations_list
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public _links_conversations_listSelf Self { get; set; }
	}
	
	public class _links_conversations_listSelf
	{
		
		/// <summary>
		/// A link towards a conversations list included in Conversation API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	/// <summary>
	/// Recording Action
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Action
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="start")]
		start = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stop")]
		stop = 1,
	}
	
	/// <summary>
	/// A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public ChannelFrom From { get; set; }
		
		/// <summary>
		/// The id of the leg. rtc_id and call_id are leg id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leg_id")]
		public string Leg_id { get; set; }
		
		/// <summary>
		/// Leg ids associated with this Channel. The first item in the array represents the main active Leg. The second item, if exists, represents a screen-share Leg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leg_ids")]
		public ChannelLeg_ids[] ChannelLeg_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public Channel To { get; set; }
		
		/// <summary>
		/// Channel type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ChannelType> Type { get; set; }
	}
	
	public class ChannelFrom
	{
		
		/// <summary>
		/// The type of connection. Must be `app`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The username to connect to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	public class ChannelLeg_ids
	{
		
		/// <summary>
		/// The id of the leg. rtc_id and call_id are leg id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leg_id")]
		public string Leg_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app")]
		app = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="phone")]
		phone = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sip")]
		sip = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="websocket")]
		websocket = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vbc")]
		vbc = 4,
	}
	
	/// <summary>
	/// Channel type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Channel_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="app")]
		app = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="phone")]
		phone = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sip")]
		sip = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="websocket")]
		websocket = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vbc")]
		vbc = 4,
	}
	
	/// <summary>
	/// Conversation properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Conversation_properties
	{
		
		/// <summary>
		/// Time to leave. After how many seconds an empty conversation is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Double> Ttl { get; set; }
	}
	
	/// <summary>
	/// Event Body
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event_body
	{
	}
	
	/// <summary>
	/// Retrieve Events Response Payload Object Item
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event_retrieved
	{
		
		/// <summary>
		/// Event Body
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public Event_body Body { get; set; }
		
		/// <summary>
		/// Member ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// A link towards a conversation event included in Conversation API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Event id. This is a progressive integer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<Event_retrievedState> State { get; set; }
		
		/// <summary>
		/// Time of creation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// Member ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Event type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Event_retrievedState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invited")]
		invited = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="joined")]
		joined = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="left")]
		left = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 3,
	}
	
	/// <summary>
	/// Record the Conversation in a specific format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mp3")]
		mp3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wav")]
		wav = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Initiator
	{
		
		[System.Runtime.Serialization.DataMember(Name="joined")]
		public InitiatorJoined Joined { get; set; }
	}
	
	public class InitiatorJoined
	{
		
		/// <summary>
		/// `true` if the user was invited by an admin JWT. `user_id` and `member_id` will not exist if `true`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSystem")]
		public System.Nullable<System.Boolean> IsSystem { get; set; }
		
		/// <summary>
		/// Member ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_id")]
		public string Member_id { get; set; }
		
		/// <summary>
		/// User ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	/// <summary>
	/// Leg Status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Leg_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="terminated")]
		terminated = 0,
	}
	
	/// <summary>
	/// Media Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Media
	{
	}
	
	/// <summary>
	/// Invite or join a member to a conversation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Member_action
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invite")]
		invite = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="join")]
		join = 1,
	}
	
	/// <summary>
	/// The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Member_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invited")]
		invited = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="joined")]
		joined = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="left")]
		left = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Timestamp_obj_leg
	{
		
		/// <summary>
		/// Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public string End { get; set; }
		
		/// <summary>
		/// Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public string Request { get; set; }
		
		/// <summary>
		/// Time of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public string Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Timestamp_res_conversation
	{
		
		/// <summary>
		/// Time of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		/// <summary>
		/// Time of last update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destroyed")]
		public string Destroyed { get; set; }
		
		/// <summary>
		/// Time of last update
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Timestamp_res_member
	{
		
		/// <summary>
		/// Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invited")]
		public string Invited { get; set; }
		
		/// <summary>
		/// Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joined")]
		public string Joined { get; set; }
		
		/// <summary>
		/// Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public string Left { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Conversation
	{
		
		/// <summary>
		/// The display name for the conversation. It does not have to be unique
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// A link to an image for conversations' and users' avatars
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Unique name for a conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Conversation properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Conversation_properties Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordConversation
	{
		
		/// <summary>
		/// Recording Action
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public Action Action { get; set; }
		
		/// <summary>
		/// The HTTP method used to send event information to event_url.
		/// </summary>
		[System.ComponentModel.DefaultValue("POST")]
		[System.Runtime.Serialization.DataMember(Name="event_method")]
		public string Event_method { get; set; } = "POST";
		
		/// <summary>
		/// The webhook endpoint where recording progress events are sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_url")]
		public String[] Event_url { get; set; }
		
		/// <summary>
		/// Record the Conversation in a specific format.
		/// </summary>
		[System.ComponentModel.DefaultValue(Format.mp3)]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public Format Format { get; set; } = Format.mp3;
		
		/// <summary>
		/// Record the sent and received audio in separate channels of a stereo recording
		/// </summary>
		[System.ComponentModel.DefaultValue("conversation")]
		[System.Runtime.Serialization.DataMember(Name="split")]
		public string Split { get; set; } = "conversation";
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List conversations
		/// This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).
		/// 
		/// List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
		/// ListConversations conversations
		/// </summary>
		/// <param name="date_start">Return the records that occurred after this point in time.</param>
		/// <param name="date_end">Return the records that occurred before this point in time.</param>
		/// <param name="page_size">Return this amount of records in the response
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="record_index">Return calls from this index in the response
		/// Minimum: 0
		// </param>
		/// <param name="order">Return the records in ascending or descending order.</param>
		/// <returns>List Conversations Response Payload Object.</returns>
		public async Task<ListConversationsReturn> ListConversationsAsync(string date_start, string date_end, double page_size, double record_index, ListConversationsOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations?date_start=" + (date_start==null? "" : System.Uri.EscapeDataString(date_start))+"&date_end=" + (date_end==null? "" : System.Uri.EscapeDataString(date_end))+"&page_size="+page_size+"&record_index="+record_index+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConversationsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a conversation
		/// CreateConversation conversations
		/// </summary>
		/// <param name="requestBody">Conversation Request Payload Object</param>
		/// <returns>Create / Update Conversation Response Payload Object</returns>
		public async Task<CreateConversationReturn> CreateConversationAsync(Conversation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConversationReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a conversation
		/// DeleteConversation conversations/{conversation_id}
		/// </summary>
		/// <returns>Success response with empty JSON</returns>
		public async Task<string> DeleteConversationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a conversation
		/// RetrieveConversation conversations/{conversation_id}
		/// </summary>
		/// <returns>Retrieve a conversation</returns>
		public async Task<RetrieveConversationReturn> RetrieveConversationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetrieveConversationReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a conversation
		/// ReplaceConversation conversations/{conversation_id}
		/// </summary>
		/// <param name="requestBody">Conversation Request Payload Object</param>
		/// <returns>Create / Update Conversation Response Payload Object</returns>
		public async Task<ReplaceConversationReturn> ReplaceConversationAsync(Conversation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReplaceConversationReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List events
		/// This endpoint is **DEPRECATED**. Please use [/v0.2/events](/api/conversation.v2#get-events).
		/// GetEvents conversations/{conversation_id}/events
		/// </summary>
		/// <returns>Retrieve Events Response Payload Object</returns>
		public async Task<Event_retrieved[]> GetEventsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event_retrieved[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an event
		/// CreateEvent conversations/{conversation_id}/events
		/// </summary>
		public async Task CreateEventAsync(CreateEventPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an event
		/// DeleteEvent conversations/{conversation_id}/events/{event_id}
		/// </summary>
		/// <returns>Success response with empty JSON</returns>
		public async Task<string> DeleteEventAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/events/{event_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an event
		/// GetEvent conversations/{conversation_id}/events/{event_id}
		/// </summary>
		/// <returns>Retrieve an event Content Payload</returns>
		public async Task<Event_retrieved> GetEventAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/events/{event_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event_retrieved>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List members
		/// This endpoint is **DEPRECATED**. Please use [/v0.2/members](/api/conversation.v2#get-members).
		/// GetMembers conversations/{conversation_id}/members
		/// </summary>
		/// <returns>Members List Object</returns>
		public async Task<GetMembersReturn[]> GetMembersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMembersReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a member
		/// CreateMember conversations/{conversation_id}/members
		/// </summary>
		public async Task CreateMemberAsync(CreateMemberPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a member
		/// DeleteMember conversations/{conversation_id}/members/{member_id}
		/// </summary>
		/// <returns>Success response with empty JSON</returns>
		public async Task<string> DeleteMemberAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/members/{member_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a member
		/// GetMember conversations/{conversation_id}/members/{member_id}
		/// </summary>
		/// <returns>Retrieve member payload</returns>
		public async Task<object> GetMemberAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/members/{member_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a member
		/// UpdateMember conversations/{conversation_id}/members/{member_id}
		/// </summary>
		/// <returns>Member retrieved</returns>
		public async Task<object> UpdateMemberAsync(object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/members/{member_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Record a conversation
		/// RecordConversation conversations/{conversation_id}/record
		/// </summary>
		/// <param name="requestBody">Record Conversation Request Payload Object</param>
		public async Task RecordConversationAsync(RecordConversation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "conversations/{conversation_id}/record";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List legs
		/// ListLegs legs
		/// </summary>
		/// <returns>List Legs Successfully</returns>
		public async Task<ListLegsReturn> ListLegsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLegsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a leg
		/// DeleteLeg legs/{leg_id}
		/// </summary>
		/// <returns>Success response with empty JSON</returns>
		public async Task<string> DeleteLegAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legs/{leg_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List users
		/// This endpoint is **DEPRECATED**. Please use [/v0.2/users](/api/conversation.v2#get-users).
		/// GetUsers users
		/// </summary>
		/// <returns>List of users</returns>
		public async Task<GetUsersReturn[]> GetUsersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUsersReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a user
		/// Note: Users must be created with an admin JWT.
		/// CreateUser users
		/// </summary>
		/// <returns>Create a user response</returns>
		public async Task<CreateUserReturn> CreateUserAsync(CreateUserPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a user
		/// DeleteUser users/{user_id}
		/// </summary>
		/// <returns>Success response with empty JSON</returns>
		public async Task<string> DeleteUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a user
		/// GetUser users/{user_id}
		/// </summary>
		/// <returns>Retrieve a user</returns>
		public async Task<object> GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user
		/// UpdateUser users/{user_id}
		/// </summary>
		/// <returns>Retrieve a user</returns>
		public async Task<object> UpdateUserAsync(object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List user conversations
		/// GetuserConversations users/{user_id}/conversations
		/// </summary>
		/// <returns>List user conversations</returns>
		public async Task<GetuserConversationsReturn[]> GetuserConversationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{user_id}/conversations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetuserConversationsReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListConversationsOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asc")]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="desc")]
		desc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASC")]
		ASC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESC")]
		DESC = 3,
	}
	
	public class ListConversationsReturn
	{
		
		/// <summary>
		/// A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListConversationsReturn_embedded _embedded { get; set; }
		
		/// <summary>
		/// A series of links between resources in this API in the http://stateless.co/hal_specification.html.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public _links_conversations_list _links { get; set; }
		
		/// <summary>
		/// The total number of records returned by your request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		/// <summary>
		/// The amount of records returned in this response
		/// Required
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DefaultValue(10)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public double Page_size { get; set; } = 10;
		
		/// <summary>
		/// Return `page_size` amount of conversations from this index in the response. That is, if your request returns 300 conversations, set `record_index` to 5 in order to return conversations 50 to 59. The default value is 0. That is, the first `page_size` calls.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="record_index")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Record_index { get; set; } = 0;
	}
	
	public class ListConversationsReturn_embedded
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conversations")]
		public ListConversationsReturn_embeddedConversations[] ListConversationsReturn_embeddedConversations { get; set; }
	}
	
	public class ListConversationsReturn_embeddedConversations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListConversationsReturn_embeddedConversations_links _links { get; set; }
		
		/// <summary>
		/// Unique name for a conversation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique identifier for this conversation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class ListConversationsReturn_embeddedConversations_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public ListConversationsReturn_embeddedConversations_linksSelf Self { get; set; }
	}
	
	public class ListConversationsReturn_embeddedConversations_linksSelf
	{
		
		/// <summary>
		/// A link towards a conversation included in Conversation API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class CreateConversationReturn
	{
		
		/// <summary>
		/// A link towards a conversation included in Conversation API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The unique identifier for this conversation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class RetrieveConversationReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public _links_conversation _links { get; set; }
		
		/// <summary>
		/// The API key for your account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// The display name for the conversation. It does not have to be unique
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// Users associated to this conversation as members
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public RetrieveConversationReturnMembers[] RetrieveConversationReturnMembers { get; set; }
		
		/// <summary>
		/// Unique name for a conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numbers")]
		public string Numbers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public RetrieveConversationReturnProperties Properties { get; set; }
		
		/// <summary>
		/// The last Event ID in this conversation. This ID can be used to [retrieve a specific event](#getEvent)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequence_number")]
		public string Sequence_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public Timestamp_res_conversation Timestamp { get; set; }
		
		/// <summary>
		/// The unique identifier for this conversation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class RetrieveConversationReturnMembers
	{
		
		/// <summary>
		/// A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public Channel Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initiator")]
		public Initiator Initiator { get; set; }
		
		/// <summary>
		/// Member ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_id")]
		public string Member_id { get; set; }
		
		/// <summary>
		/// Unique name for a user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public Event_retrievedState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public Timestamp_res_member Timestamp { get; set; }
		
		/// <summary>
		/// User ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	public class RetrieveConversationReturnProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="video")]
		public System.Nullable<System.Boolean> Video { get; set; }
	}
	
	public class ReplaceConversationReturn
	{
		
		/// <summary>
		/// A link towards a conversation included in Conversation API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The unique identifier for this conversation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CreateEventPostBody
	{
		
		/// <summary>
		/// Event Body
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public Event_body Body { get; set; }
		
		/// <summary>
		/// Member ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Member ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Event type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetMembersReturn
	{
		
		/// <summary>
		/// Unique name for a user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public Event_retrievedState State { get; set; }
		
		/// <summary>
		/// User ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
		
		/// <summary>
		/// Unique name for a user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_name")]
		public string User_name { get; set; }
	}
	
	public class CreateMemberPostBody
	{
		
		/// <summary>
		/// Invite or join a member to a conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public Member_action Action { get; set; }
		
		/// <summary>
		/// A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public Channel Channel { get; set; }
		
		/// <summary>
		/// Knocker ID. A knocker is a pre-member of a conversation who does not exist yet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="knocking_id")]
		public string Knocking_id { get; set; }
		
		/// <summary>
		/// Media Object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Media Media { get; set; }
		
		/// <summary>
		/// Member ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_id")]
		public string Member_id { get; set; }
		
		/// <summary>
		/// Member ID of the member that sends the invitation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_id_inviting")]
		public string Member_id_inviting { get; set; }
		
		/// <summary>
		/// User ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	public class ListLegsReturn
	{
		
		/// <summary>
		/// A list of conversation objects. See the [get details of a specific conversation](#retrieveConversation) response fields for a description of the nested objects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListLegsReturn_embedded _embedded { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListLegsReturn_links _links { get; set; }
		
		/// <summary>
		/// The total number of records returned by your request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public double Count { get; set; }
		
		/// <summary>
		/// The amount of records returned in this response
		/// Required
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DefaultValue(10)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public double Page_size { get; set; } = 10;
		
		/// <summary>
		/// Return `page_size` amount of conversations from this index in the response. That is, if your request returns 300 conversations, set `record_index` to 5 in order to return conversations 50 to 59. The default value is 0. That is, the first `page_size` calls.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="record_index")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Record_index { get; set; } = 0;
	}
	
	public class ListLegsReturn_embedded
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="legs")]
		public ListLegsReturn_embeddedLegs[] ListLegsReturn_embeddedLegs { get; set; }
	}
	
	public class ListLegsReturn_embeddedLegs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string _links { get; set; }
		
		/// <summary>
		/// The unique identifier for this conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversation_uuid")]
		public string Conversation_uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// Time of leg end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_end")]
		public string Start_end { get; set; }
		
		/// <summary>
		/// Time of leg start
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public string Start_time { get; set; }
		
		/// <summary>
		/// Leg Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public Leg_state State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Channel type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ChannelType Type { get; set; }
		
		/// <summary>
		/// The id of the leg. rtc_id and call_id are leg id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class ListLegsReturn_links
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public ListLegsReturn_linksSelf Self { get; set; }
	}
	
	public class ListLegsReturn_linksSelf
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class GetUsersReturn
	{
		
		/// <summary>
		/// A link towards a user included in Conversation API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// User ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Unique name for a user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class CreateUserPostBody
	{
		
		/// <summary>
		/// A string to be displayed as user name. It does not need to be unique
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// A link to an image for conversations' and users' avatars
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Unique name for a user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class CreateUserReturn
	{
		
		/// <summary>
		/// A link towards a user included in Conversation API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// User ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class GetuserConversationsReturn
	{
		
		/// <summary>
		/// The display name for the conversation. It does not have to be unique
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// A link towards a resources included in Conversation API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The unique identifier for this conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A link to an image for conversations' and users' avatars
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Member ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_id")]
		public string Member_id { get; set; }
		
		/// <summary>
		/// Unique name for a conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// the id of the last event of the conversation (event's id is an incremental number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequence_number")]
		public string Sequence_number { get; set; }
		
		/// <summary>
		/// The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public Event_retrievedState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public GetuserConversationsReturnTimestamp Timestamp { get; set; }
	}
	
	public class GetuserConversationsReturnTimestamp
	{
		
		/// <summary>
		/// Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
