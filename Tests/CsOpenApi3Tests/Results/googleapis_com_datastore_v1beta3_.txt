//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Defines an aggregation that produces a single result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Aggregation
	{
		
		/// <summary>
		/// Optional. Optional name of the property to store the result of the aggregation. If not provided, Datastore will pick a default name following the format `property_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS property_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS property_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to entity property name limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// Average of the values of the requested property. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public Avg Avg { get; set; }
		
		/// <summary>
		/// Count of entities that match the query. The `COUNT(*)` aggregation function operates on the entire entity so it does not require a field reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public Count Count { get; set; }
		
		/// <summary>
		/// Sum of the values of the requested property. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sum")]
		public Sum Sum { get; set; }
	}
	
	/// <summary>
	/// Average of the values of the requested property. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Avg
	{
		
		/// <summary>
		/// A reference to a property relative to the kind expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public PropertyReference Property { get; set; }
	}
	
	/// <summary>
	/// A reference to a property relative to the kind expressions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyReference
	{
		
		/// <summary>
		/// A reference to a property. Requires: * MUST be a dot-delimited (`.`) string of segments, where each segment conforms to entity property name limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Count of entities that match the query. The `COUNT(*)` aggregation function operates on the entire entity so it does not require a field reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Count
	{
		
		/// <summary>
		/// Optional. Optional constraint on the maximum number of entities to count. This provides a way to set an upper bound on the number of entities to scan, limiting latency, and cost. Unspecified is interpreted as no bound. If a zero value is provided, a count result of zero should always be expected. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be non-negative when present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upTo")]
		public string UpTo { get; set; }
	}
	
	/// <summary>
	/// Sum of the values of the requested property. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sum
	{
		
		/// <summary>
		/// A reference to a property relative to the kind expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public PropertyReference Property { get; set; }
	}
	
	/// <summary>
	/// Datastore query for running an aggregation over a Query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregationQuery
	{
		
		/// <summary>
		/// Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregations")]
		public Aggregation[] Aggregations { get; set; }
		
		/// <summary>
		/// A query for entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestedQuery")]
		public Query NestedQuery { get; set; }
	}
	
	/// <summary>
	/// A query for entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Query
	{
		
		/// <summary>
		/// The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distinctOn")]
		public PropertyReference[] DistinctOn { get; set; }
		
		/// <summary>
		/// An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endCursor")]
		public string EndCursor { get; set; }
		
		/// <summary>
		/// A holder for any type of filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public Filter Filter { get; set; }
		
		/// <summary>
		/// The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public KindExpression[] Kind { get; set; }
		
		/// <summary>
		/// The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// The order to apply to the query results (if empty, order is unspecified).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public PropertyOrder[] Order { get; set; }
		
		/// <summary>
		/// The projection to return. Defaults to returning all properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projection")]
		public Projection[] Projection { get; set; }
		
		/// <summary>
		/// A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startCursor")]
		public string StartCursor { get; set; }
	}
	
	/// <summary>
	/// A holder for any type of filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// A filter that merges multiple other filters using the given operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeFilter")]
		public CompositeFilter CompositeFilter { get; set; }
		
		/// <summary>
		/// A filter on a specific property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyFilter")]
		public PropertyFilter PropertyFilter { get; set; }
	}
	
	/// <summary>
	/// A filter that merges multiple other filters using the given operator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompositeFilter
	{
		
		/// <summary>
		/// The list of filters to combine. Requires: * At least one filter is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// The operator for combining multiple filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public System.Nullable<CompositeFilterOp> Op { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompositeFilterOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OR = 2,
	}
	
	/// <summary>
	/// A filter on a specific property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyFilter
	{
		
		/// <summary>
		/// The operator to filter by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public System.Nullable<PropertyFilterOp> Op { get; set; }
		
		/// <summary>
		/// A reference to a property relative to the kind expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public PropertyReference Property { get; set; }
		
		/// <summary>
		/// A message that can hold any of the supported value types and associated metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Value Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyFilterOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAS_ANCESTOR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 9,
	}
	
	/// <summary>
	/// A message that can hold any of the supported value types and associated metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Value
	{
		
		/// <summary>
		/// An array value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayValue")]
		public ArrayValue ArrayValue { get; set; }
		
		/// <summary>
		/// A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobValue")]
		public string BlobValue { get; set; }
		
		/// <summary>
		/// A boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booleanValue")]
		public System.Nullable<System.Boolean> BooleanValue { get; set; }
		
		/// <summary>
		/// A double value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// A Datastore data object. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityValue")]
		public Entity EntityValue { get; set; }
		
		/// <summary>
		/// If the value should be excluded from all indexes including those defined explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeFromIndexes")]
		public System.Nullable<System.Boolean> ExcludeFromIndexes { get; set; }
		
		/// <summary>
		/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoPointValue")]
		public LatLng GeoPointValue { get; set; }
		
		/// <summary>
		/// An integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public string IntegerValue { get; set; }
		
		/// <summary>
		/// A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyValue")]
		public Key KeyValue { get; set; }
		
		/// <summary>
		/// The `meaning` field should only be populated for backwards compatibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meaning")]
		public System.Nullable<System.Int32> Meaning { get; set; }
		
		/// <summary>
		/// A null value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullValue")]
		public System.Nullable<ValueNullValue> NullValue { get; set; }
		
		/// <summary>
		/// A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		/// <summary>
		/// A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampValue")]
		public string TimestampValue { get; set; }
	}
	
	/// <summary>
	/// An array value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArrayValue
	{
		
		/// <summary>
		/// Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Value[] Values { get; set; }
	}
	
	/// <summary>
	/// A Datastore data object. Must not exceed 1 MiB - 4 bytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entity
	{
		
		/// <summary>
		/// A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public Key Key { get; set; }
		
		/// <summary>
		/// The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, Value> Properties { get; set; }
	}
	
	/// <summary>
	/// A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Key
	{
		
		/// <summary>
		/// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `""`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionId")]
		public PartitionId PartitionId { get; set; }
		
		/// <summary>
		/// The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public PathElement[] Path { get; set; }
	}
	
	/// <summary>
	/// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `""`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartitionId
	{
		
		/// <summary>
		/// If not empty, the ID of the namespace to which the entities belong.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceId")]
		public string NamespaceId { get; set; }
		
		/// <summary>
		/// The ID of the project to which the entities belong.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathElement
	{
		
		/// <summary>
		/// The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LatLng
	{
		
		/// <summary>
		/// The latitude in degrees. It must be in the range [-90.0, +90.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// The longitude in degrees. It must be in the range [-180.0, +180.0].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValueNullValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL_VALUE = 0,
	}
	
	/// <summary>
	/// A representation of a kind.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KindExpression
	{
		
		/// <summary>
		/// The name of the kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The desired order for a specific property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyOrder
	{
		
		/// <summary>
		/// The direction to order by. Defaults to `ASCENDING`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public System.Nullable<PropertyOrderDirection> Direction { get; set; }
		
		/// <summary>
		/// A reference to a property relative to the kind expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public PropertyReference Property { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyOrderDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 2,
	}
	
	/// <summary>
	/// A representation of a property in a projection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Projection
	{
		
		/// <summary>
		/// A reference to a property relative to the kind expressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="property")]
		public PropertyReference Property { get; set; }
	}
	
	/// <summary>
	/// The result of a single bucket from a Datastore aggregation query. The keys of `aggregate_properties` are the same for all results in an aggregation query, unlike entity queries which can have different fields present for each result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregationResult
	{
		
		/// <summary>
		/// The result of the aggregation functions, ex: `COUNT(*) AS total_entities`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateProperties")]
		public System.Collections.Generic.Dictionary<string, Value> AggregateProperties { get; set; }
	}
	
	/// <summary>
	/// A batch of aggregation results produced by an aggregation query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AggregationResultBatch
	{
		
		/// <summary>
		/// The aggregation results for this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationResults")]
		public AggregationResult[] AggregationResults { get; set; }
		
		/// <summary>
		/// The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreResults")]
		public System.Nullable<AggregationResultBatchMoreResults> MoreResults { get; set; }
		
		/// <summary>
		/// Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AggregationResultBatchMoreResults
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MORE_RESULTS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FINISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MORE_RESULTS_AFTER_LIMIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MORE_RESULTS_AFTER_CURSOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_MORE_RESULTS = 4,
	}
	
	/// <summary>
	/// The request for Datastore.AllocateIds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllocateIdsRequest
	{
		
		/// <summary>
		/// Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public Key[] Keys { get; set; }
	}
	
	/// <summary>
	/// The response for Datastore.AllocateIds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllocateIdsResponse
	{
		
		/// <summary>
		/// The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public Key[] Keys { get; set; }
	}
	
	/// <summary>
	/// The request for Datastore.BeginTransaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BeginTransactionRequest
	{
		
		/// <summary>
		/// Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionOptions")]
		public TransactionOptions TransactionOptions { get; set; }
	}
	
	/// <summary>
	/// Options for beginning a new transaction. Transactions can be created explicitly with calls to Datastore.BeginTransaction or implicitly by setting ReadOptions.new_transaction in read requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionOptions
	{
		
		/// <summary>
		/// Options specific to read-only transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public ReadOnly ReadOnly { get; set; }
		
		/// <summary>
		/// Options specific to read / write transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readWrite")]
		public ReadWrite ReadWrite { get; set; }
	}
	
	/// <summary>
	/// Options specific to read-only transactions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadOnly
	{
		
		/// <summary>
		/// Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
	}
	
	/// <summary>
	/// Options specific to read / write transactions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadWrite
	{
		
		/// <summary>
		/// The transaction identifier of the transaction being retried.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousTransaction")]
		public string PreviousTransaction { get; set; }
	}
	
	/// <summary>
	/// The response for Datastore.BeginTransaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BeginTransactionResponse
	{
		
		/// <summary>
		/// The transaction identifier (always present).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// The request for Datastore.Commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitRequest
	{
		
		/// <summary>
		/// The type of commit to perform. Defaults to `TRANSACTIONAL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<CommitRequestMode> Mode { get; set; }
		
		/// <summary>
		/// The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mutations")]
		public Mutation[] Mutations { get; set; }
		
		/// <summary>
		/// The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CommitRequestMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTIONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_TRANSACTIONAL = 2,
	}
	
	/// <summary>
	/// A mutation to apply to an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mutation
	{
		
		/// <summary>
		/// The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseVersion")]
		public string BaseVersion { get; set; }
		
		/// <summary>
		/// A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public Key Delete { get; set; }
		
		/// <summary>
		/// A Datastore data object. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert")]
		public Entity Insert { get; set; }
		
		/// <summary>
		/// A Datastore data object. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update")]
		public Entity Update { get; set; }
		
		/// <summary>
		/// The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// A Datastore data object. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upsert")]
		public Entity Upsert { get; set; }
	}
	
	/// <summary>
	/// The response for Datastore.Commit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitResponse
	{
		
		/// <summary>
		/// The transaction commit timestamp. Not set for non-transactional commits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitTime")]
		public string CommitTime { get; set; }
		
		/// <summary>
		/// The number of index entries updated during the commit, or zero if none were updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexUpdates")]
		public System.Nullable<System.Int32> IndexUpdates { get; set; }
		
		/// <summary>
		/// The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mutationResults")]
		public MutationResult[] MutationResults { get; set; }
	}
	
	/// <summary>
	/// The result of applying a mutation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MutationResult
	{
		
		/// <summary>
		/// Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conflictDetected")]
		public System.Nullable<System.Boolean> ConflictDetected { get; set; }
		
		/// <summary>
		/// The create time of the entity. This field will not be set after a 'delete'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public Key Key { get; set; }
		
		/// <summary>
		/// The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The result of fetching an entity from Datastore.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityResult
	{
		
		/// <summary>
		/// The time at which the entity was created. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// A Datastore data object. Must not exceed 1 MiB - 4 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Entity Entity { get; set; }
		
		/// <summary>
		/// The time at which the entity was last changed. This field is set for `FULL` entity results. If this entity is missing, this field will not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Metadata common to all Datastore Admin operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1CommonMetadata
	{
		
		/// <summary>
		/// The time the operation ended, either successfully or otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The client-assigned labels which were provided when the operation was created. May also include additional labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The type of the operation. Can be used as a filter in ListOperationsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<GoogleDatastoreAdminV1CommonMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The time that work began on the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The current state of the Operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleDatastoreAdminV1CommonMetadataState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDatastoreAdminV1CommonMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ENTITIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ENTITIES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_INDEX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_INDEX = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDatastoreAdminV1CommonMetadataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 7,
	}
	
	/// <summary>
	/// Metadata for Datastore to Firestore migration operations. The DatastoreFirestoreMigration operation is not started by the end-user via an explicit "creation" method. This is an intentional deviation from the LRO design pattern. This singleton resource can be accessed at: "projects/{project_id}/operations/datastore-firestore-migration"
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata
	{
		
		/// <summary>
		/// The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationState")]
		public System.Nullable<GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationState> MigrationState { get; set; }
		
		/// <summary>
		/// The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationStep")]
		public System.Nullable<GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationStep> MigrationStep { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationStep
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATION_STEP_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLY_WRITES_SYNCHRONOUSLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_AND_VERIFY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_EVENTUALLY_CONSISTENT_READS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_STRONGLY_CONSISTENT_READS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_WRITES = 7,
	}
	
	/// <summary>
	/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1EntityFilter
	{
		
		/// <summary>
		/// If empty, then this represents all kinds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kinds")]
		public string[] Kinds { get; set; }
		
		/// <summary>
		/// An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
	}
	
	/// <summary>
	/// Metadata for ExportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1ExportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrlPrefix")]
		public string OutputUrlPrefix { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// Measures the progress of a particular metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1Progress
	{
		
		/// <summary>
		/// The amount of work that has been completed. Note that this may be greater than work_estimated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workCompleted")]
		public string WorkCompleted { get; set; }
		
		/// <summary>
		/// An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workEstimated")]
		public string WorkEstimated { get; set; }
	}
	
	/// <summary>
	/// The response for google.datastore.admin.v1.DatastoreAdmin.ExportEntities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1ExportEntitiesResponse
	{
		
		/// <summary>
		/// Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrl")]
		public string OutputUrl { get; set; }
	}
	
	/// <summary>
	/// Metadata for ImportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1ImportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUrl")]
		public string InputUrl { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// Metadata for Index operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1IndexOperationMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// The index resource ID that this operation is acting on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexId")]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// An event signifying the start of a new step in a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1MigrationProgressEvent
	{
		
		/// <summary>
		/// Details for the `PREPARE` step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prepareStepDetails")]
		public GoogleDatastoreAdminV1PrepareStepDetails PrepareStepDetails { get; set; }
		
		/// <summary>
		/// Details for the `REDIRECT_WRITES` step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectWritesStepDetails")]
		public GoogleDatastoreAdminV1RedirectWritesStepDetails RedirectWritesStepDetails { get; set; }
		
		/// <summary>
		/// The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="step")]
		public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationStep Step { get; set; }
	}
	
	/// <summary>
	/// Details for the `PREPARE` step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1PrepareStepDetails
	{
		
		/// <summary>
		/// The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrencyMode")]
		public System.Nullable<GoogleDatastoreAdminV1PrepareStepDetailsConcurrencyMode> ConcurrencyMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDatastoreAdminV1PrepareStepDetailsConcurrencyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCURRENCY_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PESSIMISTIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMISTIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMISTIC_WITH_ENTITY_GROUPS = 3,
	}
	
	/// <summary>
	/// Details for the `REDIRECT_WRITES` step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1RedirectWritesStepDetails
	{
		
		/// <summary>
		/// Ths concurrency mode for this database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concurrencyMode")]
		public GoogleDatastoreAdminV1PrepareStepDetailsConcurrencyMode ConcurrencyMode { get; set; }
	}
	
	/// <summary>
	/// An event signifying a change in state of a [migration from Cloud Datastore to Cloud Firestore in Datastore mode](https://cloud.google.com/datastore/docs/upgrade-to-firestore).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1MigrationStateEvent
	{
		
		/// <summary>
		/// The new state of the migration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadataMigrationState State { get; set; }
	}
	
	/// <summary>
	/// Metadata common to all Datastore Admin operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1beta1CommonMetadata
	{
		
		/// <summary>
		/// The time the operation ended, either successfully or otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The client-assigned labels which were provided when the operation was created. May also include additional labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The type of the operation. Can be used as a filter in ListOperationsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<GoogleDatastoreAdminV1beta1CommonMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// The time that work began on the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The current state of the Operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GoogleDatastoreAdminV1CommonMetadataState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleDatastoreAdminV1beta1CommonMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ENTITIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ENTITIES = 2,
	}
	
	/// <summary>
	/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1beta1EntityFilter
	{
		
		/// <summary>
		/// If empty, then this represents all kinds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kinds")]
		public string[] Kinds { get; set; }
		
		/// <summary>
		/// An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceIds")]
		public string[] NamespaceIds { get; set; }
	}
	
	/// <summary>
	/// Metadata for ExportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1beta1ExportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1beta1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1beta1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrlPrefix")]
		public string OutputUrlPrefix { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1beta1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1beta1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// Measures the progress of a particular metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1beta1Progress
	{
		
		/// <summary>
		/// The amount of work that has been completed. Note that this may be greater than work_estimated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workCompleted")]
		public string WorkCompleted { get; set; }
		
		/// <summary>
		/// An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workEstimated")]
		public string WorkEstimated { get; set; }
	}
	
	/// <summary>
	/// The response for google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1beta1ExportEntitiesResponse
	{
		
		/// <summary>
		/// Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUrl")]
		public string OutputUrl { get; set; }
	}
	
	/// <summary>
	/// Metadata for ImportEntities operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleDatastoreAdminV1beta1ImportEntitiesMetadata
	{
		
		/// <summary>
		/// Metadata common to all Datastore Admin operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="common")]
		public GoogleDatastoreAdminV1beta1CommonMetadata Common { get; set; }
		
		/// <summary>
		/// Identifies a subset of entities in a project. This is specified as combinations of kinds and namespaces (either or both of which may be all, as described in the following examples). Example usage: Entire project: kinds=[], namespace_ids=[] Kinds Foo and Bar in all namespaces: kinds=['Foo', 'Bar'], namespace_ids=[] Kinds Foo and Bar only in the default namespace: kinds=['Foo', 'Bar'], namespace_ids=[''] Kinds Foo and Bar in both the default and Baz namespaces: kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz'] The entire Baz namespace: kinds=[], namespace_ids=['Baz']
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityFilter")]
		public GoogleDatastoreAdminV1beta1EntityFilter EntityFilter { get; set; }
		
		/// <summary>
		/// The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUrl")]
		public string InputUrl { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressBytes")]
		public GoogleDatastoreAdminV1beta1Progress ProgressBytes { get; set; }
		
		/// <summary>
		/// Measures the progress of a particular metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressEntities")]
		public GoogleDatastoreAdminV1beta1Progress ProgressEntities { get; set; }
	}
	
	/// <summary>
	/// A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GqlQuery
	{
		
		/// <summary>
		/// When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowLiterals")]
		public System.Nullable<System.Boolean> AllowLiterals { get; set; }
		
		/// <summary>
		/// For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `""`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedBindings")]
		public System.Collections.Generic.Dictionary<string, GqlQueryParameter> NamedBindings { get; set; }
		
		/// <summary>
		/// Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionalBindings")]
		public GqlQueryParameter[] PositionalBindings { get; set; }
		
		/// <summary>
		/// A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryString")]
		public string QueryString { get; set; }
	}
	
	/// <summary>
	/// A binding parameter for a GQL query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GqlQueryParameter
	{
		
		/// <summary>
		/// A query cursor. Query cursors are returned in query result batches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		/// <summary>
		/// A message that can hold any of the supported value types and associated metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Value Value { get; set; }
	}
	
	/// <summary>
	/// The request for Datastore.Lookup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LookupRequest
	{
		
		/// <summary>
		/// Required. Keys of entities to look up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public Key[] Keys { get; set; }
		
		/// <summary>
		/// The options shared by read requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOptions")]
		public ReadOptions ReadOptions { get; set; }
	}
	
	/// <summary>
	/// The options shared by read requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadOptions
	{
		
		/// <summary>
		/// The non-transactional read consistency to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readConsistency")]
		public System.Nullable<ReadOptionsReadConsistency> ReadConsistency { get; set; }
		
		/// <summary>
		/// Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReadOptionsReadConsistency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_CONSISTENCY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRONG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENTUAL = 2,
	}
	
	/// <summary>
	/// The response for Datastore.Lookup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LookupResponse
	{
		
		/// <summary>
		/// A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deferred")]
		public Key[] Deferred { get; set; }
		
		/// <summary>
		/// Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="found")]
		public EntityResult[] Found { get; set; }
		
		/// <summary>
		/// Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missing")]
		public EntityResult[] Missing { get; set; }
		
		/// <summary>
		/// The time at which these entities were read or found missing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
	}
	
	/// <summary>
	/// A batch of results produced by a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryResultBatch
	{
		
		/// <summary>
		/// A cursor that points to the position after the last result in the batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endCursor")]
		public string EndCursor { get; set; }
		
		/// <summary>
		/// The result type for every entity in `entity_results`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityResultType")]
		public System.Nullable<QueryResultBatchEntityResultType> EntityResultType { get; set; }
		
		/// <summary>
		/// The results for this batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityResults")]
		public EntityResult[] EntityResults { get; set; }
		
		/// <summary>
		/// The state of the query after the current batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moreResults")]
		public AggregationResultBatchMoreResults MoreResults { get; set; }
		
		/// <summary>
		/// Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readTime")]
		public string ReadTime { get; set; }
		
		/// <summary>
		/// A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedCursor")]
		public string SkippedCursor { get; set; }
		
		/// <summary>
		/// The number of results skipped, typically because of an offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedResults")]
		public System.Nullable<System.Int32> SkippedResults { get; set; }
		
		/// <summary>
		/// The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotVersion")]
		public string SnapshotVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryResultBatchEntityResultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESULT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ONLY = 3,
	}
	
	/// <summary>
	/// The request for Datastore.ReserveIds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReserveIdsRequest
	{
		
		/// <summary>
		/// The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseId")]
		public string DatabaseId { get; set; }
		
		/// <summary>
		/// Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public Key[] Keys { get; set; }
	}
	
	/// <summary>
	/// The response for Datastore.ReserveIds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReserveIdsResponse
	{
	}
	
	/// <summary>
	/// The request for Datastore.Rollback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackRequest
	{
		
		/// <summary>
		/// Required. The transaction identifier, returned by a call to Datastore.BeginTransaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public string Transaction { get; set; }
	}
	
	/// <summary>
	/// The response for Datastore.Rollback. (an empty message).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackResponse
	{
	}
	
	/// <summary>
	/// The request for Datastore.RunAggregationQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunAggregationQueryRequest
	{
		
		/// <summary>
		/// Datastore query for running an aggregation over a Query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationQuery")]
		public AggregationQuery AggregationQuery { get; set; }
		
		/// <summary>
		/// A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gqlQuery")]
		public GqlQuery GqlQuery { get; set; }
		
		/// <summary>
		/// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `""`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionId")]
		public PartitionId PartitionId { get; set; }
		
		/// <summary>
		/// The options shared by read requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOptions")]
		public ReadOptions ReadOptions { get; set; }
	}
	
	/// <summary>
	/// The response for Datastore.RunAggregationQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunAggregationQueryResponse
	{
		
		/// <summary>
		/// A batch of aggregation results produced by an aggregation query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch")]
		public AggregationResultBatch Batch { get; set; }
		
		/// <summary>
		/// Datastore query for running an aggregation over a Query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public AggregationQuery Query { get; set; }
	}
	
	/// <summary>
	/// The request for Datastore.RunQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunQueryRequest
	{
		
		/// <summary>
		/// A [GQL query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gqlQuery")]
		public GqlQuery GqlQuery { get; set; }
		
		/// <summary>
		/// A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `""`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\d\.\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionId")]
		public PartitionId PartitionId { get; set; }
		
		/// <summary>
		/// A query for entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public Query Query { get; set; }
		
		/// <summary>
		/// The options shared by read requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOptions")]
		public ReadOptions ReadOptions { get; set; }
	}
	
	/// <summary>
	/// The response for Datastore.RunQuery.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunQueryResponse
	{
		
		/// <summary>
		/// A batch of results produced by a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="batch")]
		public QueryResultBatch Batch { get; set; }
		
		/// <summary>
		/// A query for entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public Query Query { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.
		/// Datastore_projects_allocateIds v1beta3/projects/{projectId}:allocateIds
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<AllocateIdsResponse> Datastore_projects_allocateIdsAsync(string projectId, AllocateIdsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":allocateIds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AllocateIdsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Begins a new transaction.
		/// Datastore_projects_beginTransaction v1beta3/projects/{projectId}:beginTransaction
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<BeginTransactionResponse> Datastore_projects_beginTransactionAsync(string projectId, BeginTransactionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":beginTransaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BeginTransactionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Commits a transaction, optionally creating, deleting or modifying some entities.
		/// Datastore_projects_commit v1beta3/projects/{projectId}:commit
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<CommitResponse> Datastore_projects_commitAsync(string projectId, CommitRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":commit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommitResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Looks up entities by key.
		/// Datastore_projects_lookup v1beta3/projects/{projectId}:lookup
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<LookupResponse> Datastore_projects_lookupAsync(string projectId, LookupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":lookup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LookupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
		/// Datastore_projects_reserveIds v1beta3/projects/{projectId}:reserveIds
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<ReserveIdsResponse> Datastore_projects_reserveIdsAsync(string projectId, ReserveIdsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":reserveIds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReserveIdsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rolls back a transaction.
		/// Datastore_projects_rollback v1beta3/projects/{projectId}:rollback
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<RollbackResponse> Datastore_projects_rollbackAsync(string projectId, RollbackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":rollback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RollbackResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs an aggregation query.
		/// Datastore_projects_runAggregationQuery v1beta3/projects/{projectId}:runAggregationQuery
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<RunAggregationQueryResponse> Datastore_projects_runAggregationQueryAsync(string projectId, RunAggregationQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":runAggregationQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunAggregationQueryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Queries for entities.
		/// Datastore_projects_runQuery v1beta3/projects/{projectId}:runQuery
		/// </summary>
		/// <param name="projectId">Required. The ID of the project against which to make the request.</param>
		/// <returns>Successful response</returns>
		public async Task<RunQueryResponse> Datastore_projects_runQueryAsync(string projectId, RunQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":runQuery";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RunQueryResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
