//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Addresses specify either a logical or physical address and port, which are used to tell Envoy where to bind/listen, connect to upstream and find management servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// The address represents an envoy internal listener. [#comment: 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envoyInternalAddress")]
		public EnvoyInternalAddress EnvoyInternalAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipe")]
		public Pipe Pipe { get; set; }
		
		/// <summary>
		/// [#next-free-field: 7]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketAddress")]
		public SocketAddress SocketAddress { get; set; }
	}
	
	/// <summary>
	/// The address represents an envoy internal listener. [#comment: 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvoyInternalAddress
	{
		
		/// <summary>
		/// Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for example, may be set to the final destination IP for the target internal listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointId")]
		public string EndpointId { get; set; }
		
		/// <summary>
		/// Specifies the :ref:`name ` of the internal listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverListenerName")]
		public string ServerListenerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pipe
	{
		
		/// <summary>
		/// The mode for the Pipe. Not applicable for abstract sockets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<System.UInt32> Mode { get; set; }
		
		/// <summary>
		/// Unix Domain Socket path. On Linux, paths starting with '@' will use the abstract namespace. The starting '@' is replaced by a null byte by Envoy. Paths starting with '@' will result in an error in environments other than Linux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// [#next-free-field: 7]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SocketAddress
	{
		
		/// <summary>
		/// The address for this socket. :ref:`Listeners ` will bind to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::`` to bind to any address. [#comment:TODO(zuercher) reinstate when implemented: It is possible to distinguish a Listener address via the prefix/suffix matching in :ref:`FilterChainMatch `.] When used within an upstream :ref:`BindConfig `, the address controls the source address of outbound connections. For :ref:`clusters `, the cluster type determines whether the address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized via :ref:`resolver_name `.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// When binding to an IPv6 address above, this enables `IPv4 compatibility `_. Binding to ``::`` will allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into IPv6 space as ``::FFFF:``.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4Compat")]
		public System.Nullable<System.Boolean> Ipv4Compat { get; set; }
		
		/// <summary>
		/// This is only valid if :ref:`resolver_name ` is specified below and the named resolver is capable of named port resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedPort")]
		public string NamedPort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portValue")]
		public System.Nullable<System.UInt32> PortValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<SocketAddressProtocol> Protocol { get; set; }
		
		/// <summary>
		/// The name of the custom resolver. This must have been registered with Envoy. If this is empty, a context dependent default applies. If the address is a concrete IP address, no resolution will occur. If address is a hostname this should be set for resolution other than DNS. Specifying a custom resolver with ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolverName")]
		public string ResolverName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SocketAddressProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
	}
	
	/// <summary>
	/// BuildVersion combines SemVer version of extension with free-form build information (i.e. 'alpha', 'private-build') as a set of strings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildVersion
	{
		
		/// <summary>
		/// Free-form build information. Envoy defines several well known keys in the source/common/version/version.h file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Envoy uses SemVer (https://semver.org/). Major/minor versions indicate expected behaviors and APIs, the patch version field is used only for security fixes and can be generally ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public SemanticVersion Version { get; set; }
	}
	
	/// <summary>
	/// Envoy uses SemVer (https://semver.org/). Major/minor versions indicate expected behaviors and APIs, the patch version field is used only for security fixes and can be generally ignored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SemanticVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="majorNumber")]
		public System.Nullable<System.UInt32> MajorNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minorNumber")]
		public System.Nullable<System.UInt32> MinorNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patch")]
		public System.Nullable<System.UInt32> Patch { get; set; }
	}
	
	/// <summary>
	/// All xds configs for a particular client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientConfig
	{
		
		/// <summary>
		/// Represents generic xDS config and the exact config structure depends on the type URL (like Cluster if it is CDS)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genericXdsConfigs")]
		public GenericXdsConfig[] GenericXdsConfigs { get; set; }
		
		/// <summary>
		/// Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 13]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="node")]
		public Node Node { get; set; }
		
		/// <summary>
		/// This field is deprecated in favor of generic_xds_configs which is much simpler and uniform in structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xdsConfig")]
		public PerXdsConfig[] XdsConfig { get; set; }
	}
	
	/// <summary>
	/// GenericXdsConfig is used to specify the config status and the dump of any xDS resource identified by their type URL. It is the generalized version of the now deprecated ListenersConfigDump, ClustersConfigDump etc [#next-free-field: 10]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenericXdsConfig
	{
		
		/// <summary>
		/// Per xDS resource status from the view of a xDS client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientStatus")]
		public System.Nullable<GenericXdsConfigClientStatus> ClientStatus { get; set; }
		
		/// <summary>
		/// Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configStatus")]
		public System.Nullable<GenericXdsConfigConfigStatus> ConfigStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorState")]
		public UpdateFailureState ErrorState { get; set; }
		
		/// <summary>
		/// Is static resource is true if it is specified in the config supplied through the file at the startup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStaticResource")]
		public System.Nullable<System.Boolean> IsStaticResource { get; set; }
		
		/// <summary>
		/// Timestamp when the xDS resource was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Name of the xDS resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type_url represents the fully qualified name of xDS resource type like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeUrl")]
		public string TypeUrl { get; set; }
		
		/// <summary>
		/// This is the :ref:`version_info ` in the last processed xDS discovery response. If there are only static bootstrap listeners, this field will be ""
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
		
		/// <summary>
		/// The xDS resource config. Actual content depends on the type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xdsConfig")]
		public System.Collections.Generic.Dictionary<string, object> XdsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GenericXdsConfigClientStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOES_NOT_EXIST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACKED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NACKED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GenericXdsConfigConfigStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_SENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STALE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFailureState
	{
		
		/// <summary>
		/// Details about the last failed update attempt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// What the component configuration would have been if the update had succeeded. This field may not be populated by xDS clients due to storage overhead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedConfiguration")]
		public System.Collections.Generic.Dictionary<string, object> FailedConfiguration { get; set; }
		
		/// <summary>
		/// Time of the latest failed update attempt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateAttempt")]
		public string LastUpdateAttempt { get; set; }
		
		/// <summary>
		/// This is the version of the rejected resource. [#not-implemented-hide:]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	/// <summary>
	/// Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 13]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Node
	{
		
		/// <summary>
		/// Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example ``com.acme.feature``. See :ref:`the list of features ` that xDS client may support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientFeatures")]
		public string[] ClientFeatures { get; set; }
		
		/// <summary>
		/// Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:`statsd `, :ref:`health check cluster verification `, :ref:`runtime override directory `, :ref:`user agent addition `, :ref:`HTTP global rate limiting `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-cluster`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public string Cluster { get; set; }
		
		/// <summary>
		/// Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike other fields in this message). For example, the xDS client may have a shard identifier that changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic parameter then appears in this field during future discovery requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicParameters")]
		public System.Collections.Generic.Dictionary<string, ContextParams> DynamicParameters { get; set; }
		
		/// <summary>
		/// List of extensions and their versions supported by the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public Extension[] Extensions { get; set; }
		
		/// <summary>
		/// An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:`statsd `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-node`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Known listening ports on the node as a generic hint to the management server for filtering :ref:`listeners ` to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress ``(0.0.0.0,80)``. The field is optional and just a hint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listeningAddresses")]
		public Address[] ListeningAddresses { get; set; }
		
		/// <summary>
		/// Identifies location of where either Envoy runs or where upstream hosts run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public Locality Locality { get; set; }
		
		/// <summary>
		/// Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// BuildVersion combines SemVer version of extension with free-form build information (i.e. 'alpha', 'private-build') as a set of strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgentBuildVersion")]
		public BuildVersion UserAgentBuildVersion { get; set; }
		
		/// <summary>
		/// Free-form string that identifies the entity requesting config. E.g. "envoy" or "grpc"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgentName")]
		public string UserAgentName { get; set; }
		
		/// <summary>
		/// Free-form string that identifies the version of the entity requesting config. E.g. "1.12.2" or "abcd1234", or "SpecialEnvoyBuild"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgentVersion")]
		public string UserAgentVersion { get; set; }
	}
	
	/// <summary>
	/// Additional parameters that can be used to select resource variants. These include any global context parameters, per-resource type client feature capabilities and per-resource type functional attributes. All per-resource type attributes will be `xds.resource.` prefixed and some of these are documented below: `xds.resource.listening_address`: The value is "IP:port" (e.g. "10.1.1.3:8080") which is the listening address of a Listener. Used in a Listener resource query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContextParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
	}
	
	/// <summary>
	/// Version and identification for an Envoy extension. [#next-free-field: 7]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Extension
	{
		
		/// <summary>
		/// Category of the extension. Extension category names use reverse DNS notation. For instance "envoy.filters.listener" for Envoy's built-in listener filters or "com.acme.filters.http" for HTTP filters from acme.com vendor. [#comment:
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Indicates that the extension is present but was disabled via dynamic configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// [#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeDescriptor")]
		public string TypeDescriptor { get; set; }
		
		/// <summary>
		/// Type URLs of extension configuration protos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeUrls")]
		public string[] TypeUrls { get; set; }
		
		/// <summary>
		/// BuildVersion combines SemVer version of extension with free-form build information (i.e. 'alpha', 'private-build') as a set of strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public BuildVersion Version { get; set; }
	}
	
	/// <summary>
	/// Identifies location of where either Envoy runs or where upstream hosts run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Locality
	{
		
		/// <summary>
		/// Region this :ref:`zone ` belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// When used for locality of upstream hosts, this field further splits zone into smaller chunks of sub-zones so they can be load balanced independently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subZone")]
		public string SubZone { get; set; }
		
		/// <summary>
		/// Defines the local service zone where Envoy is running. Though optional, it should be set if discovery service routing is used and the discovery service exposes :ref:`zone data `, either in this message or via :option:`--service-zone`. The meaning of zone is context dependent, e.g. `Availability Zone (AZ) `_ on AWS, `Zone `_ on GCP, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// Detailed config (per xDS) with status. [#next-free-field: 8]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerXdsConfig
	{
		
		/// <summary>
		/// Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config. .. attention:: This field is deprecated. Use :ref:`ClientResourceStatus ` for per-resource config status instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientStatus")]
		public System.Nullable<PerXdsConfigClientStatus> ClientStatus { get; set; }
		
		/// <summary>
		/// Envoy's cluster manager fills this message with all currently known clusters. Cluster configuration information can be used to recreate an Envoy configuration by populating all clusters as static clusters or by returning them in a CDS response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterConfig")]
		public ClustersConfigDump ClusterConfig { get; set; }
		
		/// <summary>
		/// Envoy's admin fill this message with all currently known endpoints. Endpoint configuration information can be used to recreate an Envoy configuration by populating all endpoints as static endpoints or by returning them in an EDS response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointConfig")]
		public EndpointsConfigDump EndpointConfig { get; set; }
		
		/// <summary>
		/// Envoy's listener manager fills this message with all currently known listeners. Listener configuration information can be used to recreate an Envoy configuration by populating all listeners as static listeners or by returning them in a LDS response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listenerConfig")]
		public ListenersConfigDump ListenerConfig { get; set; }
		
		/// <summary>
		/// Envoy's RDS implementation fills this message with all currently loaded routes, as described by their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration or defined inline while configuring listeners are separated from those configured dynamically via RDS. Route configuration information can be used to recreate an Envoy configuration by populating all routes as static routes or by returning them in RDS responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeConfig")]
		public RoutesConfigDump RouteConfig { get; set; }
		
		/// <summary>
		/// Envoy's scoped RDS implementation fills this message with all currently loaded route configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the dynamically obtained scopes via the SRDS API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopedRouteConfig")]
		public ScopedRoutesConfigDump ScopedRouteConfig { get; set; }
		
		/// <summary>
		/// Config status generated by management servers. Will not be present if the CSDS server is an xDS client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GenericXdsConfigConfigStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PerXdsConfigClientStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_REQUESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ACKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_NACKED = 3,
	}
	
	/// <summary>
	/// Envoy's cluster manager fills this message with all currently known clusters. Cluster configuration information can be used to recreate an Envoy configuration by populating all clusters as static clusters or by returning them in a CDS response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClustersConfigDump
	{
		
		/// <summary>
		/// The dynamically loaded active clusters. These are clusters that are available to service data plane traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicActiveClusters")]
		public DynamicCluster[] DynamicActiveClusters { get; set; }
		
		/// <summary>
		/// The dynamically loaded warming clusters. These are clusters that are currently undergoing warming in preparation to service data plane traffic. Note that if attempting to recreate an Envoy configuration from a configuration dump, the warming clusters should generally be discarded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicWarmingClusters")]
		public DynamicCluster[] DynamicWarmingClusters { get; set; }
		
		/// <summary>
		/// The statically loaded cluster configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticClusters")]
		public StaticCluster[] StaticClusters { get; set; }
		
		/// <summary>
		/// This is the :ref:`version_info ` in the last processed CDS discovery response. If there are only static bootstrap clusters, this field will be "".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	/// <summary>
	/// Describes a dynamically loaded cluster via the CDS API. [#next-free-field: 6]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicCluster
	{
		
		/// <summary>
		/// The client status of this resource. [#not-implemented-hide:]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientStatus")]
		public GenericXdsConfigClientStatus ClientStatus { get; set; }
		
		/// <summary>
		/// The cluster config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public System.Collections.Generic.Dictionary<string, object> Cluster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorState")]
		public UpdateFailureState ErrorState { get; set; }
		
		/// <summary>
		/// The timestamp when the Cluster was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// This is the per-resource version information. This version is currently taken from the :ref:`version_info ` field at the time that the cluster was loaded. In the future, discrete per-cluster versions may be supported by the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	/// <summary>
	/// Describes a statically loaded cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StaticCluster
	{
		
		/// <summary>
		/// The cluster config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public System.Collections.Generic.Dictionary<string, object> Cluster { get; set; }
		
		/// <summary>
		/// The timestamp when the Cluster was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
	}
	
	/// <summary>
	/// Envoy's admin fill this message with all currently known endpoints. Endpoint configuration information can be used to recreate an Envoy configuration by populating all endpoints as static endpoints or by returning them in an EDS response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointsConfigDump
	{
		
		/// <summary>
		/// The dynamically loaded endpoint configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicEndpointConfigs")]
		public DynamicEndpointConfig[] DynamicEndpointConfigs { get; set; }
		
		/// <summary>
		/// The statically loaded endpoint configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticEndpointConfigs")]
		public StaticEndpointConfig[] StaticEndpointConfigs { get; set; }
	}
	
	/// <summary>
	/// [#next-free-field: 6]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicEndpointConfig
	{
		
		/// <summary>
		/// The client status of this resource. [#not-implemented-hide:]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientStatus")]
		public GenericXdsConfigClientStatus ClientStatus { get; set; }
		
		/// <summary>
		/// The endpoint config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointConfig")]
		public System.Collections.Generic.Dictionary<string, object> EndpointConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorState")]
		public UpdateFailureState ErrorState { get; set; }
		
		/// <summary>
		/// [#not-implemented-hide:] The timestamp when the Endpoint was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// [#not-implemented-hide:] This is the per-resource version information. This version is currently taken from the :ref:`version_info ` field at the time that the endpoint configuration was loaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StaticEndpointConfig
	{
		
		/// <summary>
		/// The endpoint config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointConfig")]
		public System.Collections.Generic.Dictionary<string, object> EndpointConfig { get; set; }
		
		/// <summary>
		/// [#not-implemented-hide:] The timestamp when the Endpoint was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
	}
	
	/// <summary>
	/// Envoy's listener manager fills this message with all currently known listeners. Listener configuration information can be used to recreate an Envoy configuration by populating all listeners as static listeners or by returning them in a LDS response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListenersConfigDump
	{
		
		/// <summary>
		/// State for any warming, active, or draining listeners.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicListeners")]
		public DynamicListener[] DynamicListeners { get; set; }
		
		/// <summary>
		/// The statically loaded listener configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticListeners")]
		public StaticListener[] StaticListeners { get; set; }
		
		/// <summary>
		/// This is the :ref:`version_info ` in the last processed LDS discovery response. If there are only static bootstrap listeners, this field will be "".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	/// <summary>
	/// Describes a dynamically loaded listener via the LDS API. [#next-free-field: 7]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicListener
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeState")]
		public DynamicListenerState ActiveState { get; set; }
		
		/// <summary>
		/// The client status of this resource. [#not-implemented-hide:]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientStatus")]
		public GenericXdsConfigClientStatus ClientStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="drainingState")]
		public DynamicListenerState DrainingState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorState")]
		public UpdateFailureState ErrorState { get; set; }
		
		/// <summary>
		/// The name or unique id of this listener, pulled from the DynamicListenerState config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warmingState")]
		public DynamicListenerState WarmingState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicListenerState
	{
		
		/// <summary>
		/// The timestamp when the Listener was last successfully updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The listener config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listener")]
		public System.Collections.Generic.Dictionary<string, object> Listener { get; set; }
		
		/// <summary>
		/// This is the per-resource version information. This version is currently taken from the :ref:`version_info ` field at the time that the listener was loaded. In the future, discrete per-listener versions may be supported by the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	/// <summary>
	/// Describes a statically loaded listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StaticListener
	{
		
		/// <summary>
		/// The timestamp when the Listener was last successfully updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The listener config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listener")]
		public System.Collections.Generic.Dictionary<string, object> Listener { get; set; }
	}
	
	/// <summary>
	/// Envoy's RDS implementation fills this message with all currently loaded routes, as described by their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration or defined inline while configuring listeners are separated from those configured dynamically via RDS. Route configuration information can be used to recreate an Envoy configuration by populating all routes as static routes or by returning them in RDS responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoutesConfigDump
	{
		
		/// <summary>
		/// The dynamically loaded route configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicRouteConfigs")]
		public DynamicRouteConfig[] DynamicRouteConfigs { get; set; }
		
		/// <summary>
		/// The statically loaded route configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticRouteConfigs")]
		public StaticRouteConfig[] StaticRouteConfigs { get; set; }
	}
	
	/// <summary>
	/// [#next-free-field: 6]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicRouteConfig
	{
		
		/// <summary>
		/// The client status of this resource. [#not-implemented-hide:]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientStatus")]
		public GenericXdsConfigClientStatus ClientStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorState")]
		public UpdateFailureState ErrorState { get; set; }
		
		/// <summary>
		/// The timestamp when the Route was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The route config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeConfig")]
		public System.Collections.Generic.Dictionary<string, object> RouteConfig { get; set; }
		
		/// <summary>
		/// This is the per-resource version information. This version is currently taken from the :ref:`version_info ` field at the time that the route configuration was loaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StaticRouteConfig
	{
		
		/// <summary>
		/// The timestamp when the Route was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The route config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeConfig")]
		public System.Collections.Generic.Dictionary<string, object> RouteConfig { get; set; }
	}
	
	/// <summary>
	/// Envoy's scoped RDS implementation fills this message with all currently loaded route configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the dynamically obtained scopes via the SRDS API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScopedRoutesConfigDump
	{
		
		/// <summary>
		/// The dynamically loaded scoped route configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicScopedRouteConfigs")]
		public DynamicScopedRouteConfigs[] DynamicScopedRouteConfigs { get; set; }
		
		/// <summary>
		/// The statically loaded scoped route configs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineScopedRouteConfigs")]
		public InlineScopedRouteConfigs[] InlineScopedRouteConfigs { get; set; }
	}
	
	/// <summary>
	/// [#next-free-field: 7]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DynamicScopedRouteConfigs
	{
		
		/// <summary>
		/// The client status of this resource. [#not-implemented-hide:]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientStatus")]
		public GenericXdsConfigClientStatus ClientStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorState")]
		public UpdateFailureState ErrorState { get; set; }
		
		/// <summary>
		/// The timestamp when the scoped route config set was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The name assigned to the scoped route configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The scoped route configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopedRouteConfigs")]
		public string[] ScopedRouteConfigs { get; set; }
		
		/// <summary>
		/// This is the per-resource version information. This version is currently taken from the :ref:`version_info ` field at the time that the scoped routes configuration was loaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionInfo")]
		public string VersionInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineScopedRouteConfigs
	{
		
		/// <summary>
		/// The timestamp when the scoped route config set was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The name assigned to the scoped route configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The scoped route configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopedRouteConfigs")]
		public string[] ScopedRouteConfigs { get; set; }
	}
	
	/// <summary>
	/// Request for client status of clients identified by a list of NodeMatchers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientStatusRequest
	{
		
		/// <summary>
		/// If true, the server will not include the resource contents in the response (i.e., the generic_xds_configs.xds_config field will not be populated). [#not-implemented-hide:]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeResourceContents")]
		public System.Nullable<System.Boolean> ExcludeResourceContents { get; set; }
		
		/// <summary>
		/// Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 13]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="node")]
		public Node Node { get; set; }
		
		/// <summary>
		/// Management server can use these match criteria to identify clients. The match follows OR semantics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeMatchers")]
		public NodeMatcher[] NodeMatchers { get; set; }
	}
	
	/// <summary>
	/// Specifies the way to match a Node. The match follows AND semantics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeMatcher
	{
		
		/// <summary>
		/// Specifies the way to match a string. [#next-free-field: 8]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public StringMatcher NodeId { get; set; }
		
		/// <summary>
		/// Specifies match criteria on the node metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeMetadatas")]
		public StructMatcher[] NodeMetadatas { get; set; }
	}
	
	/// <summary>
	/// Specifies the way to match a string. [#next-free-field: 8]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringMatcher
	{
		
		/// <summary>
		/// The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``xyz.abc.def``
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contains")]
		public string Contains { get; set; }
		
		/// <summary>
		/// The input string must match exactly the string specified here. Examples: * ``abc`` only matches the value ``abc``.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exact")]
		public string Exact { get; set; }
		
		/// <summary>
		/// If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher ``data`` will match both input string ``Data`` and ``data`` if set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreCase")]
		public System.Nullable<System.Boolean> IgnoreCase { get; set; }
		
		/// <summary>
		/// The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``abc.xyz``
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// A regex matcher designed for safety when used with untrusted input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safeRegex")]
		public RegexMatcher SafeRegex { get; set; }
		
		/// <summary>
		/// The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``xyz.abc``
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// A regex matcher designed for safety when used with untrusted input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegexMatcher
	{
		
		/// <summary>
		/// Google's `RE2 `_ regex engine. The regex string must adhere to the documented `syntax `_. The engine is designed to complete execution in linear time as well as limit the amount of memory used. Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level`` and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or complexity that a compiled regex can have before an exception is thrown or a warning is logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning). Envoy emits two stats for tracking the program size of regexes: the histogram ``re2.program_size``, which records the program size, and the counter ``re2.exceeded_warn_level``, which is incremented each time the program size exceeds the warn level threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleRe2")]
		public GoogleRE2 GoogleRe2 { get; set; }
		
		/// <summary>
		/// The regex match string. The string must be supported by the configured engine. The regex is matched against the full string, not as a partial match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regex")]
		public string Regex { get; set; }
	}
	
	/// <summary>
	/// Google's `RE2 `_ regex engine. The regex string must adhere to the documented `syntax `_. The engine is designed to complete execution in linear time as well as limit the amount of memory used. Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level`` and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or complexity that a compiled regex can have before an exception is thrown or a warning is logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning). Envoy emits two stats for tracking the program size of regexes: the histogram ``re2.program_size``, which records the program size, and the counter ``re2.exceeded_warn_level``, which is incremented each time the program size exceeds the warn level threshold.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleRE2
	{
		
		/// <summary>
		/// This field controls the RE2 "program size" which is a rough estimate of how complex a compiled regex is to evaluate. A regex that has a program size greater than the configured value will fail to compile. In this case, the configured max program size can be increased or the regex can be simplified. If not specified, the default is 100. This field is deprecated; regexp validation should be performed on the management server instead of being done by each individual client. .. note:: Although this field is deprecated, the program size will still be checked against the global ``re2.max_program_size.error_level`` runtime value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxProgramSize")]
		public System.Nullable<System.UInt32> MaxProgramSize { get; set; }
	}
	
	/// <summary>
	/// StructMatcher provides a general interface to check if a given value is matched in google.protobuf.Struct. It uses ``path`` to retrieve the value from the struct and then check if it's matched to the specified value. For example, for the following Struct: .. code-block:: yaml fields: a: struct_value: fields: b: struct_value: fields: c: string_value: pro t: list_value: values: - string_value: m - string_value: n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro" from the Metadata which is matched to the specified prefix match. .. code-block:: yaml path: - key: a - key: b - key: c value: string_match: prefix: pr The following StructMatcher is matched as the code will match one of the string values in the list at the path [a, t]. .. code-block:: yaml path: - key: a - key: t value: list_match: one_of: string_match: exact: m An example use of StructMatcher is to match metadata in envoy.v*.core.Node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructMatcher
	{
		
		/// <summary>
		/// The path to retrieve the Value from the Struct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public PathSegment[] Path { get; set; }
		
		/// <summary>
		/// Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 8]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ValueMatcher Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the segment in a path to retrieve value from Struct.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathSegment
	{
		
		/// <summary>
		/// If specified, use the key to retrieve the value in a Struct.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 8]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValueMatcher
	{
		
		/// <summary>
		/// If specified, a match occurs if and only if the target value is a bool value and is equal to this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolMatch")]
		public System.Nullable<System.Boolean> BoolMatch { get; set; }
		
		/// <summary>
		/// Specifies the way to match a double value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleMatch")]
		public DoubleMatcher DoubleMatch { get; set; }
		
		/// <summary>
		/// Specifies the way to match a list value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listMatch")]
		public ListMatcher ListMatch { get; set; }
		
		/// <summary>
		/// NullMatch is an empty message to specify a null value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullMatch")]
		public NullMatch NullMatch { get; set; }
		
		/// <summary>
		/// Specifies a list of alternatives for the match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orMatch")]
		public OrMatcher OrMatch { get; set; }
		
		/// <summary>
		/// If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presentMatch")]
		public System.Nullable<System.Boolean> PresentMatch { get; set; }
		
		/// <summary>
		/// Specifies the way to match a string. [#next-free-field: 8]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringMatch")]
		public StringMatcher StringMatch { get; set; }
	}
	
	/// <summary>
	/// Specifies the way to match a double value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleMatcher
	{
		
		/// <summary>
		/// If specified, the input double value must be equal to the value specified here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exact")]
		public System.Nullable<System.Double> Exact { get; set; }
		
		/// <summary>
		/// Specifies the double start and end of the range using half-open interval semantics [start, end).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DoubleRange Range { get; set; }
	}
	
	/// <summary>
	/// Specifies the double start and end of the range using half-open interval semantics [start, end).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleRange
	{
		
		/// <summary>
		/// end of the range (exclusive)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Double> End { get; set; }
		
		/// <summary>
		/// start of the range (inclusive)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Double> Start { get; set; }
	}
	
	/// <summary>
	/// Specifies the way to match a list value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMatcher
	{
		
		/// <summary>
		/// Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 8]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneOf")]
		public ValueMatcher OneOf { get; set; }
	}
	
	/// <summary>
	/// NullMatch is an empty message to specify a null value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NullMatch
	{
	}
	
	/// <summary>
	/// Specifies a list of alternatives for the match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrMatcher
	{
		
		[System.Runtime.Serialization.DataMember(Name="valueMatchers")]
		public ValueMatcher[] ValueMatchers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientStatusResponse
	{
		
		/// <summary>
		/// Client configs for the clients specified in the ClientStatusRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ClientConfig[] Config { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Trafficdirector_discovery_client_status v3/discovery:client_status
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ClientStatusResponse> Trafficdirector_discovery_client_statusAsync(ClientStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/discovery:client_status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClientStatusResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
