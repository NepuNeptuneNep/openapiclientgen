//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLexiconOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LexiconNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeVoicesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Voice[] Voices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Description of the voice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Voice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Gender Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceId Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode[] AdditionalLanguageCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Engine[] SupportedEngines { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Gender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Female = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Male = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VoiceId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aditi = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Amy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Astrid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bianca = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Brian = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Camila = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Carla = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Carmen = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Celine = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Chantal = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conchita = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cristiano = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dora = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Emma = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enrique = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ewa = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Filiz = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gabrielle = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Geraint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Giorgio = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gwyneth = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hans = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ines = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ivy = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Jacek = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Jan = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Joanna = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Joey = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Justin = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Karl = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kendra = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kevin = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kimberly = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lea = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Liv = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lotte = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lucia = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lupe = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mads = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maja = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Marlene = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mathieu = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Matthew = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maxim = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mia = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Miguel = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mizuki = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Naja = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nicole = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Olivia = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Penelope = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Raveena = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ricardo = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ruben = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Russell = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Salli = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seoyeon = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Takumi = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tatyana = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vicki = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vitoria = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zeina = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zhiyu = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aria = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ayanda = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arlet = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hannah = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Arthur = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daniel = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Liam = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pedro = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kajal = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hiujin = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Laura = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elin = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ida = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suvi = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ola = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hala = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Andres = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sergio = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Remi = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Adriano = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thiago = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ruth = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stephen = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kazuha = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tomoko = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Niamh = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sofie = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lisa = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Isabelle = 91,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cmn-CN")]
		cmnMinusCN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cy-GB")]
		cyMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da-DK")]
		daMinusDK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB-WLS")]
		enMinusGBMinusWLS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX")]
		esMinusMX = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is-IS")]
		isMinusIS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN")]
		hiMinusIN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nb-NO")]
		nbMinusNO = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-NL")]
		nlMinusNL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl-PL")]
		plMinusPL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-PT")]
		ptMinusPT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro-RO")]
		roMinusRO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU")]
		ruMinusRU = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-SE")]
		svMinusSE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr-TR")]
		trMinusTR = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-NZ")]
		enMinusNZ = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZA")]
		enMinusZA = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-ES")]
		caMinusES = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-AT")]
		deMinusAT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yue-CN")]
		yueMinusCN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-AE")]
		arMinusAE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi-FI")]
		fiMinusFI = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IE")]
		enMinusIE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-BE")]
		nlMinusBE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-BE")]
		frMinusBE = 38,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Engine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		neural = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidNextTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLexiconOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Lexicon Lexicon { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LexiconAttributes LexiconAttributes { get; set; }
	}
	
	/// <summary>
	/// Provides lexicon name and lexicon content in string format. For more information, see <a href="https://www.w3.org/TR/pronunciation-lexicon/">Pronunciation Lexicon Specification (PLS) Version 1.0</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Lexicon
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains metadata describing the lexicon such as the number of lexemes, language code, and so on. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LexiconAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Alphabet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LexiconArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LexemesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSpeechSynthesisTaskOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SynthesisTask SynthesisTask { get; set; }
	}
	
	/// <summary>
	/// SynthesisTask object that provides information about a speech synthesis task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SynthesisTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Engine Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskStatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RequestCharacters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LexiconNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputFormat OutputFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SampleRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpeechMarkType[] SpeechMarkTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TextType TextType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceId VoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ogg_vorbis = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pcm = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpeechMarkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sentence = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		viseme = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		word = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidTaskIdException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SynthesisTaskNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLexiconsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LexiconDescription[] Lexicons { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the content of the lexicon.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LexiconDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LexiconAttributes Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSpeechSynthesisTasksOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SynthesisTask[] SynthesisTasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLexiconOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidLexiconException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedPlsAlphabetException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedPlsLanguageException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LexiconSizeExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaxLexemeLengthExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaxLexiconsNumberExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSpeechSynthesisTaskOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SynthesisTask SynthesisTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextLengthExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidS3BucketException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidS3KeyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSampleRateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSnsTopicArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSsmlException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EngineNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarksNotSupportedForFormatException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SsmlMarksNotSupportedForTextTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguageNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SynthesizeSpeechOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteLexiconInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeVoicesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetLexiconInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSpeechSynthesisTaskInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLexiconsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSpeechSynthesisTasksInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLexiconInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSpeechSynthesisTaskInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Engine Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LexiconNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputFormat OutputFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputS3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputS3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SampleRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpeechMarkType[] SpeechMarkTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TextType TextType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceId VoiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SynthesizeSpeechInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Engine Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LexiconNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputFormat OutputFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SampleRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpeechMarkType[] SpeechMarkTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TextType TextType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceId VoiceId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Deletes the specified pronunciation lexicon stored in an Amazon Web Services Region. A lexicon which has been deleted is not available for speech synthesis, nor is it possible to retrieve it using either the <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
		/// DeleteLexicon v1/lexicons/{LexiconName}
		/// </summary>
		/// <param name="LexiconName">The name of the lexicon to delete. Must be an existing lexicon in the region.</param>
		/// <returns>Success</returns>
		public async Task<DeleteLexiconOutput> DeleteLexiconAsync(string LexiconName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/lexicons/"+ (LexiconName==null? "" : System.Uri.EscapeDataString(LexiconName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteLexiconOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the content of the specified pronunciation lexicon stored in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.
		/// GetLexicon v1/lexicons/{LexiconName}
		/// </summary>
		/// <param name="LexiconName">Name of the lexicon.</param>
		/// <returns>Success</returns>
		public async Task<GetLexiconOutput> GetLexiconAsync(string LexiconName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/lexicons/"+ (LexiconName==null? "" : System.Uri.EscapeDataString(LexiconName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLexiconOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Stores a pronunciation lexicon in an Amazon Web Services Region. If a lexicon with the same name already exists in the region, it is overwritten by the new lexicon. Lexicon operations have eventual consistency, therefore, it might take some time before the lexicon is available to the SynthesizeSpeech operation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
		/// PutLexicon v1/lexicons/{LexiconName}
		/// </summary>
		/// <param name="LexiconName">Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric string up to 20 characters long. </param>
		/// <returns>Success</returns>
		public async Task<PutLexiconOutput> PutLexiconAsync(string LexiconName, PutLexiconPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/lexicons/"+ (LexiconName==null? "" : System.Uri.EscapeDataString(LexiconName));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PutLexiconOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// <p>Returns the list of voices that are available for use when requesting speech synthesis. Each voice speaks a specified language, is either male or female, and is identified by an ID, which is the ASCII version of the voice name. </p> <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID for the voice you want from the list of voices returned by <code>DescribeVoices</code>.</p> <p>For example, you want your news reader application to read news in a specific language, but giving a user the option to choose the voice. Using the <code>DescribeVoices</code> operation you can provide the user with a list of available voices to select from.</p> <p> You can optionally specify a language code to filter the available voices. For example, if you specify <code>en-US</code>, the operation returns a list of all available US English voices. </p> <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code> action.</p>
		/// DescribeVoices v1/voices
		/// </summary>
		/// <param name="Engine">Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis. </param>
		/// <param name="LanguageCode"> The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned. </param>
		/// <param name="IncludeAdditionalLanguageCodes">Boolean value indicating whether to return any bilingual voices that use the specified language as an additional language. For instance, if you request all languages that use US English (es-US), and there is an Italian voice that speaks both Italian (it-IT) and US English, that voice will be included if you specify <code>yes</code> but not if you specify <code>no</code>.</param>
		/// <param name="NextToken">An opaque pagination token returned from the previous <code>DescribeVoices</code> operation. If present, this indicates where to continue the listing.
		/// Min length: 0
		/// Max length: 4096
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeVoicesOutput> DescribeVoicesAsync(Engine Engine, DescribeVoicesLanguageCode LanguageCode, bool IncludeAdditionalLanguageCodes, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/voices?Engine=" + Engine+"&LanguageCode=" + LanguageCode+"&IncludeAdditionalLanguageCodes="+IncludeAdditionalLanguageCodes+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DescribeVoicesOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a specific SpeechSynthesisTask object based on its TaskID. This object contains information about the given speech synthesis task, including the status of the task, and a link to the S3 bucket containing the output of the task.
		/// GetSpeechSynthesisTask v1/synthesisTasks/{TaskId}
		/// </summary>
		/// <param name="TaskId">The Amazon Polly generated identifier for a speech synthesis task.</param>
		/// <returns>Success</returns>
		public async Task<GetSpeechSynthesisTaskOutput> GetSpeechSynthesisTaskAsync(string TaskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/synthesisTasks/"+ (TaskId==null? "" : System.Uri.EscapeDataString(TaskId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSpeechSynthesisTaskOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of pronunciation lexicons stored in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.
		/// ListLexicons v1/lexicons
		/// </summary>
		/// <param name="NextToken">An opaque pagination token returned from previous <code>ListLexicons</code> operation. If present, indicates where to continue the list of lexicons.
		/// Min length: 0
		/// Max length: 4096
		// </param>
		/// <returns>Success</returns>
		public async Task<ListLexiconsOutput> ListLexiconsAsync(string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/lexicons?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListLexiconsOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of SpeechSynthesisTask objects ordered by their creation date. This operation can filter the tasks by their status, for example, allowing users to list only tasks that are completed.
		/// ListSpeechSynthesisTasks v1/synthesisTasks
		/// </summary>
		/// <param name="MaxResults">Maximum number of speech synthesis tasks returned in a List operation.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="NextToken">The pagination token to use in the next request to continue the listing of speech synthesis tasks. 
		/// Min length: 0
		/// Max length: 4096
		// </param>
		/// <param name="Status">Status of the speech synthesis tasks returned in a List operation</param>
		/// <returns>Success</returns>
		public async Task<ListSpeechSynthesisTasksOutput> ListSpeechSynthesisTasksAsync(int MaxResults, string NextToken, TaskStatus Status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/synthesisTasks?MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Status=" + Status;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListSpeechSynthesisTasksOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Allows the creation of an asynchronous synthesis task, by starting a new <code>SpeechSynthesisTask</code>. This operation requires all the standard information needed for speech synthesis, plus the name of an Amazon S3 bucket for the service to store the output of the synthesis task and two optional parameters (<code>OutputS3KeyPrefix</code> and <code>SnsTopicArn</code>). Once the synthesis task is created, this operation will return a <code>SpeechSynthesisTask</code> object, which will include an identifier of this task as well as the current status. The <code>SpeechSynthesisTask</code> object is available for 72 hours after starting the asynchronous synthesis task.
		/// StartSpeechSynthesisTask v1/synthesisTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartSpeechSynthesisTaskOutput> StartSpeechSynthesisTaskAsync(StartSpeechSynthesisTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/synthesisTasks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StartSpeechSynthesisTaskOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be valid, well-formed SSML. Some alphabets might not be available with all the voices (for example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html">How it Works</a>.
		/// SynthesizeSpeech v1/speech
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SynthesizeSpeechOutput> SynthesizeSpeechAsync(SynthesizeSpeechPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/speech";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SynthesizeSpeechOutput>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class PutLexiconPutBody
	{
		
		/// <summary>
		/// Content of the PLS lexicon as string data.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
	}
	
	public enum DescribeVoicesLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cmn-CN")]
		cmnMinusCN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cy-GB")]
		cyMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da-DK")]
		daMinusDK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB-WLS")]
		enMinusGBMinusWLS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX")]
		esMinusMX = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is-IS")]
		isMinusIS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN")]
		hiMinusIN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nb-NO")]
		nbMinusNO = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-NL")]
		nlMinusNL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl-PL")]
		plMinusPL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-PT")]
		ptMinusPT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro-RO")]
		roMinusRO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU")]
		ruMinusRU = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-SE")]
		svMinusSE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr-TR")]
		trMinusTR = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-NZ")]
		enMinusNZ = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZA")]
		enMinusZA = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-ES")]
		caMinusES = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-AT")]
		deMinusAT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yue-CN")]
		yueMinusCN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-AE")]
		arMinusAE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi-FI")]
		fiMinusFI = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IE")]
		enMinusIE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-BE")]
		nlMinusBE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-BE")]
		frMinusBE = 38,
	}
	
	public class StartSpeechSynthesisTaskPostBody
	{
		
		/// <summary>
		/// Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. Using a voice that is not supported for the engine selected will result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Engine Engine { get; set; }
		
		/// <summary>
		/// <p>Optional language code for the Speech Synthesis request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<StartSpeechSynthesisTaskPostBodyLanguageCode> LanguageCode { get; set; }
		
		/// <summary>
		/// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. 
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] LexiconNames { get; set; }
		
		/// <summary>
		/// The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputFormat OutputFormat { get; set; }
		
		/// <summary>
		/// Amazon S3 bucket name to which the output file will be saved.
		/// Required
		/// Pattern: ^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$")]
		public string OutputS3BucketName { get; set; }
		
		/// <summary>
		/// The Amazon S3 key prefix for the output speech file.
		/// Pattern: ^[0-9a-zA-Z\/\!\-_\.\*\'\(\):;\$@=+\,\?&]{0,800}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9a-zA-Z\/\!\-_\.\*\'\(\):;\$@=+\,\?&]{0,800}$")]
		public string OutputS3KeyPrefix { get; set; }
		
		/// <summary>
		/// <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050", and "24000". The default value for standard voices is "22050". The default value for neural voices is "24000".</p> <p>Valid values for pcm are "8000" and "16000" The default value is "16000". </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SampleRate { get; set; }
		
		/// <summary>
		/// ARN for the SNS topic optionally used for providing status notification for a speech synthesis task.
		/// Pattern: ^arn:aws(-(cn|iso(-b)?|us-gov))?:sns:[a-z0-9_-]{1,50}:\d{12}:[a-zA-Z0-9_-]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws(-(cn|iso(-b)?|us-gov))?:sns:[a-z0-9_-]{1,50}:\d{12}:[a-zA-Z0-9_-]{1,256}$")]
		public string SnsTopicArn { get; set; }
		
		/// <summary>
		/// The type of speech marks returned for the input text.
		/// Maximum items: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public SpeechMarkType[] SpeechMarkTypes { get; set; }
		
		/// <summary>
		/// The input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Specifies whether the input text is plain text or SSML. The default value is plain text. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TextType TextType { get; set; }
		
		/// <summary>
		/// Voice ID to use for the synthesis. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceId VoiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StartSpeechSynthesisTaskPostBodyLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cmn-CN")]
		cmnMinusCN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cy-GB")]
		cyMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da-DK")]
		daMinusDK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB-WLS")]
		enMinusGBMinusWLS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX")]
		esMinusMX = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is-IS")]
		isMinusIS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN")]
		hiMinusIN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nb-NO")]
		nbMinusNO = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-NL")]
		nlMinusNL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl-PL")]
		plMinusPL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-PT")]
		ptMinusPT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro-RO")]
		roMinusRO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU")]
		ruMinusRU = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-SE")]
		svMinusSE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr-TR")]
		trMinusTR = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-NZ")]
		enMinusNZ = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZA")]
		enMinusZA = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-ES")]
		caMinusES = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-AT")]
		deMinusAT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yue-CN")]
		yueMinusCN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-AE")]
		arMinusAE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi-FI")]
		fiMinusFI = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IE")]
		enMinusIE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-BE")]
		nlMinusBE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-BE")]
		frMinusBE = 38,
	}
	
	public class SynthesizeSpeechPostBody
	{
		
		/// <summary>
		/// <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see <a href="https://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>, this will result in an error. </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard voices, this is not required; the engine parameter defaults to <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and an NTTS-only voice is selected, this will result in an error. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Engine Engine { get; set; }
		
		/// <summary>
		/// <p>Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SynthesizeSpeechPostBodyLanguageCode> LanguageCode { get; set; }
		
		/// <summary>
		/// List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see <a href="https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html">PutLexicon</a>.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] LexiconNames { get; set; }
		
		/// <summary>
		/// <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputFormat OutputFormat { get; set; }
		
		/// <summary>
		/// <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050", and "24000". The default value for standard voices is "22050". The default value for neural voices is "24000".</p> <p>Valid values for pcm are "8000" and "16000" The default value is "16000". </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SampleRate { get; set; }
		
		/// <summary>
		/// The type of speech marks returned for the input text.
		/// Maximum items: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public SpeechMarkType[] SpeechMarkTypes { get; set; }
		
		/// <summary>
		///  Input text to synthesize. If you specify <code>ssml</code> as the <code>TextType</code>, follow the SSML format for the input text. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		///  Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/ssml.html">Using SSML</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TextType TextType { get; set; }
		
		/// <summary>
		///  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceId VoiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SynthesizeSpeechPostBodyLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cmn-CN")]
		cmnMinusCN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cy-GB")]
		cyMinusGB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="da-DK")]
		daMinusDK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-DE")]
		deMinusDE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-AU")]
		enMinusAU = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB")]
		enMinusGB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-GB-WLS")]
		enMinusGBMinusWLS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IN")]
		enMinusIN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-ES")]
		esMinusES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-MX")]
		esMinusMX = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="es-US")]
		esMinusUS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-CA")]
		frMinusCA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-FR")]
		frMinusFR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="is-IS")]
		isMinusIS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="it-IT")]
		itMinusIT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ja-JP")]
		jaMinusJP = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hi-IN")]
		hiMinusIN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ko-KR")]
		koMinusKR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nb-NO")]
		nbMinusNO = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-NL")]
		nlMinusNL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pl-PL")]
		plMinusPL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-BR")]
		ptMinusBR = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pt-PT")]
		ptMinusPT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ro-RO")]
		roMinusRO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ru-RU")]
		ruMinusRU = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sv-SE")]
		svMinusSE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tr-TR")]
		trMinusTR = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-NZ")]
		enMinusNZ = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-ZA")]
		enMinusZA = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-ES")]
		caMinusES = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="de-AT")]
		deMinusAT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yue-CN")]
		yueMinusCN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ar-AE")]
		arMinusAE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fi-FI")]
		fiMinusFI = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-IE")]
		enMinusIE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nl-BE")]
		nlMinusBE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fr-BE")]
		frMinusBE = 38,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
