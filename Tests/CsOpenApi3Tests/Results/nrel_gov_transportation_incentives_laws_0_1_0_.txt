//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A category that the law applies to
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// The type of category. (E.g. tech, incentive, regulation, user)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category_type")]
		public string Category_type { get; set; }
		
		/// <summary>
		/// The code used to identify the category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The full name of the category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryResults
	{
		
		/// <summary>
		/// The parameters that were passed to the API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public Inputs Inputs { get; set; }
		
		/// <summary>
		/// The identifying metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// The array of law categories returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public FullCategory[] Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FullCategory
	{
		
		/// <summary>
		/// The type of category. (E.g. tech, incentive, regulation, user)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category_type")]
		public string Category_type { get; set; }
		
		/// <summary>
		/// The code used to identify the category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A short description of what the law category encompasses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="help_text")]
		public string Help_text { get; set; }
		
		/// <summary>
		/// The sort order for the categories
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public string Sort_order { get; set; }
		
		/// <summary>
		/// The full name of the category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The parameters that were passed to the API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inputs
	{
	}
	
	/// <summary>
	/// This is a Law
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Law
	{
		
		/// <summary>
		/// The agency with primary responsibility for federal incentives/regulations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agency")]
		public string Agency { get; set; }
		
		/// <summary>
		/// The date the incentive/law/regulation was updated through new legislation or rulemaking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amended_date")]
		public System.Nullable<System.DateTimeOffset> Amended_date { get; set; }
		
		/// <summary>
		/// The date that an incentive/law/regulation is no longer relevant to the database. This may include longstanding Executive Orders or laws requiring legislative studies that have been completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived_date")]
		public System.Nullable<System.DateTimeOffset> Archived_date { get; set; }
		
		/// <summary>
		/// The various law categories that apply to this law
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// The contacts for the given law, returned only if the parameter poc is true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public Poc[] Contacts { get; set; }
		
		/// <summary>
		/// The date the enacting legislation (if applicable) was signed into law.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enacted_date")]
		public System.Nullable<System.DateTimeOffset> Enacted_date { get; set; }
		
		/// <summary>
		/// The date the incentive/law/regulation is set to end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expired_date")]
		public System.Nullable<System.DateTimeOffset> Expired_date { get; set; }
		
		/// <summary>
		/// A unique identifier for this specific incentive/law/regulation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// The true or false value used to distinguish between recent federal executive actions (TRUE) and active incentives/laws/regulations (FALSE).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_recent")]
		public System.Nullable<System.Boolean> Is_recent { get; set; }
		
		/// <summary>
		/// Description of the incentive/law/regulation, including applicable legislative references, in <a href="https://guides.github.com/features/mastering-markdown/">markdown formatting</a>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="plaintext")]
		public string Plaintext { get; set; }
		
		/// <summary>
		/// An indicator if the last significant update was an update or the laws creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recent_update_or_new")]
		public string Recent_update_or_new { get; set; }
		
		/// <summary>
		/// The URL associated with any bill or legislative reference included in the description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="references")]
		public LawReference[] References { get; set; }
		
		/// <summary>
		/// The date legislation is enacted or a rulemaking is finalized to repeal the incentive/law/regulation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repealed_date")]
		public System.Nullable<System.DateTimeOffset> Repealed_date { get; set; }
		
		/// <summary>
		/// The numerical value assigned to a description to show the order in which it is displayed online within a jurisdiction (state).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seq_num")]
		public System.Nullable<System.Int32> Seq_num { get; set; }
		
		/// <summary>
		/// When the last significant update to the law was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="significant_update_date")]
		public System.Nullable<System.DateTimeOffset> Significant_update_date { get; set; }
		
		/// <summary>
		/// The state in which the incentive/law/regulation was enacted and is active.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Description of the incentive/law/regulation, including applicable legislative references, html formated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The brief title assigned to the incentive/law/regulation description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public LawTopics[] Topics { get; set; }
		
		/// <summary>
		/// The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The types that apply to this law
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="types")]
		public LawType[] Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Poc
	{
		
		/// <summary>
		/// The agency that the contact represents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agency")]
		public string Agency { get; set; }
		
		/// <summary>
		/// The contacts email address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The contacts fax number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		/// <summary>
		/// The name of the contact
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The state in which the contact is based ('US' for Federal laws and 'DC' for the District of Columbia)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The contacts phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telephone")]
		public string Telephone { get; set; }
		
		/// <summary>
		/// The job title of the contact
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The contacts webpage
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="web_page")]
		public string Web_page { get; set; }
	}
	
	/// <summary>
	/// The URL associated with any bill or legislative reference included in the description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LawReference
	{
		
		/// <summary>
		/// The context of the reference
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The url linking to the reference.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// For local incentive/regulation descriptions, the category that the incentive/regulation falls under, described below: Infrastructure Requirements, Vehicle Purchase and Infrastructure Development Incentives, Fuel Use Incentives, Parking Incentives, Technical Assistance, Vehicle Acquisition Requirements, Promotion Initiatives, Idle Reduction Requirements, Renewable Fuels Mandates and Standards
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LawTopics
	{
		
		/// <summary>
		/// The database id of the law topic
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// The sort order of the law topic
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sort_order")]
		public int Sort_order { get; set; }
		
		/// <summary>
		/// The name of the law topic
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The category that the incentive/law/regulation falls under, described below: -State Incentives, -Laws and Regulations, -Utility/Private Incentives
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LawType
	{
		
		/// <summary>
		/// The code used to identify the law type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The id of the law type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// The name of the law type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LawResult
	{
		
		/// <summary>
		/// The parameters that were passed to the API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public Inputs Inputs { get; set; }
		
		/// <summary>
		/// The identifying metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// This is a Law
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Law Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LawsResponse
	{
		
		/// <summary>
		/// The parameters that were passed to the API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public Inputs Inputs { get; set; }
		
		/// <summary>
		/// The identifying metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// The array of laws returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Law[] Result { get; set; }
	}
	
	/// <summary>
	/// The identifying metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metadata
	{
		
		/// <summary>
		/// If the request returns an array of results, this is the number of results returned in the array
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// This is the version of the api
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PocResults
	{
		
		/// <summary>
		/// The parameters that were passed to the API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public Inputs Inputs { get; set; }
		
		/// <summary>
		/// The identifying metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// The array of Points of Contacts for the state requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Poc[] Result { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Return a full list of laws and incentives that match your query.
		/// Transportation_incentives_laws_all v1.{output_format}
		/// </summary>
		/// <param name="output_format">Response format</param>
		/// <param name="api_key">API Key</param>
		/// <param name="limit">Limit the number of laws returned</param>
		/// <param name="jurisdiction">Return laws for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, 'CO' for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code 'US' for federal laws and the code 'DC' for Washington D.C.</param>
		/// <param name="technology">Search by the technology type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'BIOD' for Biodiesel, 'ETH' for Ethanol / Flexible Fuel Vehicles, 'NG' for Natural Gas / Natural Gas Vehicles, 'LPG' for Liquefied Petroleum Gas (Propane) / Propane Vehicles, 'HY' for Hydrogen / Fuel Cell Electric Vehicles, 'ELEC' for All-Electric Vehicles (EVs), 'PHEV' for Plug-In Hybrid Electric Vehicles (PHEVs), 'HEV' for Hybrid Electric Vehicles (HEVs), 'NEVS' for Neighborhood Electric Vehicles (NEVs), 'RD' for Renewable Diesel, 'AFTMKTCONV' for Aftermarket Conversions, 'EFFEC' for Fuel Economy / Efficiency, 'IR' for Idle Reduction, 'AUTONOMOUS' for Connected and Autonomous Vehicles, and 'OTHER' for Other.</param>
		/// <param name="incentive_type">Search by the incentive type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'GNT' for Grants, 'TAX' for Tax Incentives, 'LOANS' for Loans and Leases, 'RBATE' for Rebates, 'EXEM' for Exemptions, 'TOU' for Time-of-Use Rate, and 'OTHER' for Other.</param>
		/// <param name="regulation_type">Search by the regulation type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'REQ' for Acquisition / Fuel Use, 'DREST' for Driving / Idling, 'REGIS' for Registration / Licensing, 'EVFEE' for EV Registration Fee, 'FUEL' for Fuel Taxes, 'STD' for Fuel Production / Quality, 'RFS' for Renewable Fuel Standard / Mandate, 'AIRQEMISSIONS' for Air Quality / Emissions, 'CCEINIT' for Climate Change / Energy Initiatives, 'UTILITY' for Utility Definition, 'BUILD' for Building Codes, 'RTC' for Right-to-Charge, and 'OTHER' for Other.</param>
		/// <param name="user_type">Search by the user type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'FLEET' for Commercial, 'GOV' for Government Entity, 'TRIBAL' for Tribal Government, 'IND' for Personal Vehicle Owner or Driver, 'STATION' for Alternative Fuel Infrastructure Operator, 'AFP' for Alternative Fuel Producer, 'PURCH' for Alternative Fuel Purchaser, 'MAN' for Alternative Fuel Vehicle (AFV) Manufacturer or Retrofitter, 'MUD' for Multi-Unit Dwelling, 'TRANS' for Transit, and 'OTHER' for Other.</param>
		/// <param name="poc">Include points of contacts in the return value.</param>
		/// <param name="recent">Return only recently added or updated laws and incentives</param>
		/// <param name="expired">The 'true' value returns only expired, repealed, or archived laws and incentives. The default 'false' value returns only current laws and incentives.</param>
		/// <param name="law_type">Search by the law type. A single type, or a comma-separate list of multiple types, may be given. Values are as follows: 'STATEINC' for State Incentives, 'UPINC ' for Utility/Private Incentives, 'LAWREG' for Laws and Regulations, 'INC' for Incentives, 'PROG' for Programs, 'LUP' for Last Updated, 'OVIEW' for Overview, and 'HILITE' for Highlights.</param>
		/// <param name="keyword">Search laws by keyword in title or text.</param>
		/// <param name="local">Show only local examples of laws and incentives.</param>
		/// <returns>Successful request</returns>
		public async Task Transportation_incentives_laws_allAsync(Transportation_incentives_laws_allOutput_format output_format, string api_key, int limit, string jurisdiction, string technology, string incentive_type, string regulation_type, string user_type, bool poc, bool recent, bool expired, string law_type, string keyword, bool local, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1."+output_format+"?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&limit="+limit+"&jurisdiction=" + (jurisdiction==null? "" : System.Uri.EscapeDataString(jurisdiction))+"&technology=" + (technology==null? "" : System.Uri.EscapeDataString(technology))+"&incentive_type=" + (incentive_type==null? "" : System.Uri.EscapeDataString(incentive_type))+"&regulation_type=" + (regulation_type==null? "" : System.Uri.EscapeDataString(regulation_type))+"&user_type=" + (user_type==null? "" : System.Uri.EscapeDataString(user_type))+"&poc="+poc+"&recent="+recent+"&expired="+expired+"&law_type=" + (law_type==null? "" : System.Uri.EscapeDataString(law_type))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&local="+local;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return the law categories for a given category type.
		/// Transportation_incentives_laws_categories v1/category-list.{output_format}
		/// </summary>
		/// <param name="output_format">Response format</param>
		/// <param name="api_key">API Key</param>
		/// <param name="type">Search by the category type.</param>
		/// <returns>Successful request</returns>
		public async Task Transportation_incentives_laws_categoriesAsync(Transportation_incentives_laws_categoriesOutput_format output_format, string api_key, Transportation_incentives_laws_categoriesType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/category-list."+output_format+"?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the points of contact for a given jurisdiction.
		/// Transportation_incentives_laws_pocs v1/pocs.{output_format}
		/// </summary>
		/// <param name="output_format">Response format</param>
		/// <param name="api_key">API Key</param>
		/// <param name="jurisdiction">Return the points of contact for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, 'CO' for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code 'US' for federal laws and the code 'DC' for Washington D.C.</param>
		/// <returns>Successful request</returns>
		public async Task Transportation_incentives_laws_pocsAsync(Transportation_incentives_laws_categoriesOutput_format output_format, string api_key, string jurisdiction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/pocs."+output_format+"?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&jurisdiction=" + (jurisdiction==null? "" : System.Uri.EscapeDataString(jurisdiction));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch the details of a specific law given the law's ID.
		/// Transportation_incentives_laws_id v1/{id}.{output_format}
		/// </summary>
		/// <param name="output_format">Response format</param>
		/// <param name="api_key">API Key</param>
		/// <param name="id">The id of the law that you are searching</param>
		/// <param name="poc">Include points of contacts in the return value.</param>
		/// <param name="expired">The 'true' value returns a record no matter its status (current, expired, archived, or repealed). The default 'false' value returns only current laws and incentives.</param>
		/// <returns>Successful request</returns>
		public async Task Transportation_incentives_laws_idAsync(Transportation_incentives_laws_categoriesOutput_format output_format, string api_key, int id, bool poc, bool expired, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+id+"."+output_format+"?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&poc="+poc+"&expired="+expired;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Transportation_incentives_laws_allOutput_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		csv = 2,
	}
	
	public enum Transportation_incentives_laws_categoriesOutput_format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
	}
	
	public enum Transportation_incentives_laws_categoriesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tech = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		regulation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		incentive = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
