//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateContactInMailingList
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unsubscribed")]
		public System.Nullable<System.Boolean> Unsubscribed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDistributionLinks
	{
		
		[System.ComponentModel.DefaultValue("CreateDistribution")]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; } = "CreateDistribution";
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public string LinkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailingListId")]
		public string MailingListId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="surveyId")]
		public string SurveyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistributionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public DistributionsResponseMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public DistributionsResponseResult Result { get; set; }
	}
	
	public class DistributionsResponseMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public string HttpStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	public class DistributionsResponseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public DistributionsResponseResultElements[] DistributionsResponseResultElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPage")]
		public object NextPage { get; set; }
	}
	
	public class DistributionsResponseResultElements
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public string CustomHeaders { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="embeddedData")]
		public object EmbeddedData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public DistributionsResponseResultElementsHeaders Headers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public DistributionsResponseResultElementsMessage Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public string ModifiedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public string OwnerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentDistributionId")]
		public object ParentDistributionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public DistributionsResponseResultElementsRecipients Recipients { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestStatus")]
		public string RequestStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestType")]
		public string RequestType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sendDate")]
		public string SendDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public DistributionsResponseResultElementsStats Stats { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="surveyLink")]
		public DistributionsResponseResultElementsSurveyLink SurveyLink { get; set; }
	}
	
	public class DistributionsResponseResultElementsHeaders
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromEmail")]
		public object FromEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromName")]
		public object FromName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replyToEmail")]
		public object ReplyToEmail { get; set; }
	}
	
	public class DistributionsResponseResultElementsMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="libraryId")]
		public object LibraryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public object MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageText")]
		public object MessageText { get; set; }
	}
	
	public class DistributionsResponseResultElementsRecipients
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public object ContactId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="libraryId")]
		public string LibraryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailingListId")]
		public string MailingListId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleId")]
		public object SampleId { get; set; }
	}
	
	public class DistributionsResponseResultElementsStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="blocked")]
		public System.Nullable<System.Int32> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bounced")]
		public System.Nullable<System.Int32> Bounced { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="complaints")]
		public System.Nullable<System.Int32> Complaints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Int32> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="finished")]
		public System.Nullable<System.Int32> Finished { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="opened")]
		public System.Nullable<System.Int32> Opened { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sent")]
		public System.Nullable<System.Int32> Sent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipped")]
		public System.Nullable<System.Int32> Skipped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.Int32> Started { get; set; }
	}
	
	public class DistributionsResponseResultElementsSurveyLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public string LinkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="surveyId")]
		public string SurveyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventSubscriptionHookSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("x")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="$content")]
		public string Content { get; set; } = "x";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("application/x-www-form-urlencoded")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="$content-type")]
		public string Content_type { get; set; } = "application/x-www-form-urlencoded";
		
		[System.Runtime.Serialization.DataMember(Name="$formdata")]
		public EventSubscriptionHookSchemaFormdata[] EventSubscriptionHookSchemaFormdata { get; set; }
	}
	
	public class EventSubscriptionHookSchemaFormdata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventSubscriptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public EventSubscriptionsResponseMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public EventSubscriptionsResponseResult Result { get; set; }
	}
	
	public class EventSubscriptionsResponseMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public string HttpStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	public class EventSubscriptionsResponseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public EventSubscriptionsResponseResultMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public EventSubscriptionsResponseResultResult Result { get; set; }
	}
	
	public class EventSubscriptionsResponseResultMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public string HttpStatus { get; set; }
	}
	
	public class EventSubscriptionsResponseResultResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetrieveDistributionLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public RetrieveDistributionLinksResponseMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public RetrieveDistributionLinksResponseResult Result { get; set; }
	}
	
	public class RetrieveDistributionLinksResponseMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="httpStatus")]
		public string HttpStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	public class RetrieveDistributionLinksResponseResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public RetrieveDistributionLinksResponseResultElements[] RetrieveDistributionLinksResponseResultElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPage")]
		public object NextPage { get; set; }
	}
	
	public class RetrieveDistributionLinksResponseResultElements
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		public string ContactId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exceededContactFrequency")]
		public bool ExceededContactFrequency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalDataReference")]
		public object ExternalDataReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkExpiration")]
		public string LinkExpiration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public object TransactionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unsubscribed")]
		public bool Unsubscribed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribeToEventBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="encrypt")]
		public System.Nullable<System.Boolean> Encrypt { get; set; }
		
		/// <summary>
		/// The internal publication URL - will be generated by PowerAutomate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicationUrl")]
		public string PublicationUrl { get; set; }
		
		/// <summary>
		/// The topics to subscribe to. Must follow the format surveyengine.completedResponse.[SurveyID]
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("surveyengine.completedResponse.<Insert SurveyID>")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public string Topics { get; set; } = "surveyengine.completedResponse.<Insert SurveyID>";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SurveyResponse
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create contact in mailing list
		/// Creates a contact in a given mailing list
		/// CreateContactInMailinglist directories/{DirectoryId}/mailinglists/{MailingListId}/contacts
		/// </summary>
		/// <param name="DirectoryId">ID of the qualtrics directory to create the contact to</param>
		/// <param name="MailingListId">ID of the mailing list</param>
		/// <param name="requestBody">Contact data</param>
		/// <returns>OK - Contact created</returns>
		public async Task CreateContactInMailinglistAsync(string DirectoryId, string MailingListId, CreateContactInMailingList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "directories/"+ (DirectoryId==null? "" : System.Uri.EscapeDataString(DirectoryId))+"/mailinglists/"+ (MailingListId==null? "" : System.Uri.EscapeDataString(MailingListId))+"/contacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get distributions for survey
		/// Gets all distributions for a given survey
		/// GetDistributions distributions
		/// </summary>
		/// <param name="surveyId">The survey for which to load the distributions</param>
		/// <returns>Distributions</returns>
		public async Task<DistributionsResponse> GetDistributionsAsync(string surveyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "distributions?surveyId=" + (surveyId==null? "" : System.Uri.EscapeDataString(surveyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistributionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate distribution links
		/// Geneates links for individual distribution
		/// GenerateDistributionLinks distributions
		/// </summary>
		/// <param name="requestBody">Parameters for the link generation</param>
		/// <returns>OK</returns>
		public async Task GenerateDistributionLinksAsync(CreateDistributionLinks requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "distributions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve distribution links
		/// Retrieves all the individual links for a given distribution
		/// Retrievedistributionlinks distributions/{DistributionId}/links
		/// </summary>
		/// <param name="surveyId">ID of the survey (eg: SV_123)</param>
		/// <param name="DistributionId">ID of the distribution list</param>
		/// <returns>Generated list of links</returns>
		public async Task<RetrieveDistributionLinksResponse> RetrievedistributionlinksAsync(string surveyId, string DistributionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "distributions/"+ (DistributionId==null? "" : System.Uri.EscapeDataString(DistributionId))+"/links?surveyId=" + (surveyId==null? "" : System.Uri.EscapeDataString(surveyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RetrieveDistributionLinksResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove subscription to response event
		/// Remove event subscription
		/// WebhookDelete eventsubscriptions/
		/// </summary>
		public async Task<EventSubscriptionsResponse> WebhookDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "eventsubscriptions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventSubscriptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers when a response is submitted to a qualtrics survey
		/// Subscribe to response event
		/// WhenAResponseIsReceived eventsubscriptions/
		/// </summary>
		/// <param name="requestBody">This is the request body of the webhook</param>
		/// <returns>OK - web hook registered</returns>
		public async Task<EventSubscriptionsResponse> WhenAResponseIsReceivedAsync(SubscribeToEventBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "eventsubscriptions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventSubscriptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get event subscriptions
		/// Get event subscriptions
		/// GetEventSubscriptions eventsubscriptions/{SubscriptionId}
		/// </summary>
		/// <param name="SubscriptionId">ID of event subscription - can be obtained from web hook response</param>
		/// <returns>Event subscriptions</returns>
		public async Task<EventSubscriptionsResponse> GetEventSubscriptionsAsync(string SubscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "eventsubscriptions/"+ (SubscriptionId==null? "" : System.Uri.EscapeDataString(SubscriptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventSubscriptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get survey
		/// Gets a single Qualtrics survey speficied by its ID
		/// GetSurvey survey-definitions/{SurveyId}
		/// </summary>
		/// <param name="SurveyId">ID of survey (eg. SV_123)</param>
		/// <returns>Survey data</returns>
		public async Task<SurveyResponse> GetSurveyAsync(string SurveyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "survey-definitions/"+ (SurveyId==null? "" : System.Uri.EscapeDataString(SurveyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SurveyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
