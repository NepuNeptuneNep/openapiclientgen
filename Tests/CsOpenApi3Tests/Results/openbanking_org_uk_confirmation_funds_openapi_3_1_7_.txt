//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Links relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prev { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Meta Data relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meta
	{
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstAvailableDateTime { get; set; }
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastAvailableDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBError1
	{
		
		/// <summary>
		/// Low level textual error code, e.g., UK.OBIE.Field.Missing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
		///OBIE doesn't standardise this field
		/// Required
		/// Max length: 500
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Message { get; set; }
		
		/// <summary>
		/// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
		/// Max length: 500
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Path { get; set; }
		
		/// <summary>
		/// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An array of detail error codes, and messages, and URLs to documentation to help remediation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBErrorResponse1
	{
		
		/// <summary>
		/// High level textual error code, to help categorize the errors.
		/// Required
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBError1[] Errors { get; set; }
		
		/// <summary>
		/// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Id { get; set; }
		
		/// <summary>
		/// Brief Error message, e.g., 'There is something wrong with the request parameters provided'
		/// Required
		/// Max length: 500
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBFundsConfirmation1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmation1Data Data { get; set; }
	}
	
	public class OBFundsConfirmation1Data
	{
		
		/// <summary>
		/// Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation consent resource.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Amount of money to be confirmed as available funds in the debtor account. Contains an Amount and a Currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmation1DataInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the CBPII, to unambiguously refer to the request related to the payment transaction.
		/// Required
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
	}
	
	public class OBFundsConfirmation1DataInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBFundsConfirmationConsent1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmationConsent1Data Data { get; set; }
	}
	
	public class OBFundsConfirmationConsent1Data
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a confirmation of funds consent will be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmationConsent1DataDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Specified date and time the funds confirmation authorisation will expire.
		/// If this is not populated, the authorisation will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
	}
	
	public class OBFundsConfirmationConsent1DataDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		/// Max length: 350
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Max length: 34
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBFundsConfirmationConsentResponse1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmationConsentResponse1Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBFundsConfirmationConsentResponse1Data
	{
		
		/// <summary>
		/// Unique identification as assigned to identify the funds confirmation consent resource.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a confirmation of funds consent will be applied.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmationConsentResponse1DataDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Specified date and time the funds confirmation authorisation will expire.
		///If this is not populated, the authorisation will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmationConsentResponse1DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBFundsConfirmationConsentResponse1DataDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		/// Max length: 350
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Max length: 34
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OBFundsConfirmationConsentResponse1DataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Authorised = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingAuthorisation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBFundsConfirmationResponse1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmationResponse1Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBFundsConfirmationResponse1Data
	{
		
		/// <summary>
		/// Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation consent resource.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Flag to indicate the result of a confirmation of funds check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool FundsAvailable { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by the ASPSP to uniquely identify the funds confirmation resource.
		/// Required
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FundsConfirmationId { get; set; }
		
		/// <summary>
		/// Amount of money to be confirmed as available funds in the debtor account. Contains an Amount and a Currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBFundsConfirmationResponse1DataInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the CBPII, to unambiguously refer to the request related to the payment transaction.
		/// Required
		/// Max length: 35
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
	}
	
	public class OBFundsConfirmationResponse1DataInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create Funds Confirmation Consent
		/// CreateFundsConfirmationConsents funds-confirmation-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateFundsConfirmationConsentsAsync(OBFundsConfirmationConsent1 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "funds-confirmation-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Funds Confirmation Consent
		/// DeleteFundsConfirmationConsentsConsentId funds-confirmation-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		public async Task DeleteFundsConfirmationConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "funds-confirmation-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Funds Confirmation Consent
		/// GetFundsConfirmationConsentsConsentId funds-confirmation-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>Funds Confirmation Consent Read</returns>
		public async Task GetFundsConfirmationConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "funds-confirmation-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Funds Confirmation
		/// CreateFundsConfirmations funds-confirmations
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateFundsConfirmationsAsync(OBFundsConfirmation1 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "funds-confirmations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
