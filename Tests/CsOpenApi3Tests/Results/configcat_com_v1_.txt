//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="readOnly")]
		readOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
		custom = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrUpdateIntegrationLinkModel
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrUpdateJiraIntegrationLinkModel
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 15000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jiraJwtToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(15000)]
		public string JiraJwtToken { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddUserToGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissionGroupIds")]
		public int[] PermissionGroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditLogItemModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionTarget")]
		public string ActionTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditLogDateTime")]
		public System.Nullable<System.DateTimeOffset> AuditLogDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditLogId")]
		public System.Nullable<System.Int64> AuditLogId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditLogType")]
		public string AuditLogType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditLogTypeEnum")]
		public System.Nullable<AuditLogItemModelAuditLogTypeEnum> AuditLogTypeEnum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="where")]
		public string Where { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="why")]
		public string Why { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditLogItemModelAuditLogTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productCreated")]
		productCreated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productChanged")]
		productChanged = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productOwnershipTransferred")]
		productOwnershipTransferred = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productDeleted")]
		productDeleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productsReordered")]
		productsReordered = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvited")]
		teamMemberInvited = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationRevoked")]
		teamMemberInvitationRevoked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberJoined")]
		teamMemberJoined = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberPermissionGroupChanged")]
		teamMemberPermissionGroupChanged = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberRemoved")]
		teamMemberRemoved = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberLeft")]
		teamMemberLeft = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationChanged")]
		teamMemberInvitationChanged = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationResent")]
		teamMemberInvitationResent = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationRejected")]
		teamMemberInvitationRejected = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configCreated")]
		configCreated = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configChanged")]
		configChanged = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configDeleted")]
		configDeleted = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configsReordered")]
		configsReordered = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentCreated")]
		environmentCreated = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentChanged")]
		environmentChanged = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentDeleted")]
		environmentDeleted = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentsReordered")]
		environmentsReordered = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingCreated")]
		settingCreated = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingChanged")]
		settingChanged = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingDeleted")]
		settingDeleted = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingsReordered")]
		settingsReordered = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingValueChanged")]
		settingValueChanged = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webHookCreated")]
		webHookCreated = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webHookChanged")]
		webHookChanged = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webHookDeleted")]
		webHookDeleted = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscriptionChanged")]
		subscriptionChanged = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupCreated")]
		permissionGroupCreated = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupChanged")]
		permissionGroupChanged = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupDeleted")]
		permissionGroupDeleted = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupDefault")]
		permissionGroupDefault = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apiKeyAdded")]
		apiKeyAdded = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apiKeyRemoved")]
		apiKeyRemoved = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationAdded")]
		integrationAdded = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationChanged")]
		integrationChanged = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationRemoved")]
		integrationRemoved = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apiKeyConnected")]
		apiKeyConnected = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationLinkAdded")]
		integrationLinkAdded = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationLinkRemoved")]
		integrationLinkRemoved = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdded")]
		organizationAdded = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationRemoved")]
		organizationRemoved = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationChanged")]
		organizationChanged = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationSubscriptionTypeChanged")]
		organizationSubscriptionTypeChanged = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdminChanged")]
		organizationAdminChanged = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdminLeft")]
		organizationAdminLeft = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdminDisabled2FA")]
		organizationAdminDisabled2FA = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tagAdded")]
		tagAdded = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tagChanged")]
		tagChanged = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tagRemoved")]
		tagRemoved = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingTagAdded")]
		settingTagAdded = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingTagRemoved")]
		settingTagRemoved = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publicApiAccessTokenAdded")]
		publicApiAccessTokenAdded = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publicApiAccessTokenRemoved")]
		publicApiAccessTokenRemoved = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainAdded")]
		domainAdded = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainVerified")]
		domainVerified = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainRemoved")]
		domainRemoved = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainSamlConfigured")]
		domainSamlConfigured = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainSamlDeleted")]
		domainSamlDeleted = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="autoProvisioningConfigurationChanged")]
		autoProvisioningConfigurationChanged = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberJoined")]
		organizationMemberJoined = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberProductJoinRequested")]
		organizationMemberProductJoinRequested = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberProductJoinRequestRejected")]
		organizationMemberProductJoinRequestRejected = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberProductJoinRequestApproved")]
		organizationMemberProductJoinRequestApproved = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="codeReferencesUploaded")]
		codeReferencesUploaded = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="codeReferenceDeleted")]
		codeReferenceDeleted = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="codeReferenceStaleBranchDeleted")]
		codeReferenceStaleBranchDeleted = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="segmentCreated")]
		segmentCreated = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="segmentChanged")]
		segmentChanged = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="segmentDeleted")]
		segmentDeleted = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhookSigningKeyDeleted")]
		webhookSigningKeyDeleted = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhookSigningKeyCreated")]
		webhookSigningKeyCreated = 74,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuditLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productCreated")]
		productCreated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productChanged")]
		productChanged = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productOwnershipTransferred")]
		productOwnershipTransferred = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productDeleted")]
		productDeleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="productsReordered")]
		productsReordered = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvited")]
		teamMemberInvited = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationRevoked")]
		teamMemberInvitationRevoked = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberJoined")]
		teamMemberJoined = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberPermissionGroupChanged")]
		teamMemberPermissionGroupChanged = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberRemoved")]
		teamMemberRemoved = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberLeft")]
		teamMemberLeft = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationChanged")]
		teamMemberInvitationChanged = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationResent")]
		teamMemberInvitationResent = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="teamMemberInvitationRejected")]
		teamMemberInvitationRejected = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configCreated")]
		configCreated = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configChanged")]
		configChanged = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configDeleted")]
		configDeleted = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="configsReordered")]
		configsReordered = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentCreated")]
		environmentCreated = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentChanged")]
		environmentChanged = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentDeleted")]
		environmentDeleted = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="environmentsReordered")]
		environmentsReordered = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingCreated")]
		settingCreated = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingChanged")]
		settingChanged = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingDeleted")]
		settingDeleted = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingsReordered")]
		settingsReordered = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingValueChanged")]
		settingValueChanged = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webHookCreated")]
		webHookCreated = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webHookChanged")]
		webHookChanged = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webHookDeleted")]
		webHookDeleted = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subscriptionChanged")]
		subscriptionChanged = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupCreated")]
		permissionGroupCreated = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupChanged")]
		permissionGroupChanged = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupDeleted")]
		permissionGroupDeleted = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="permissionGroupDefault")]
		permissionGroupDefault = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apiKeyAdded")]
		apiKeyAdded = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apiKeyRemoved")]
		apiKeyRemoved = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationAdded")]
		integrationAdded = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationChanged")]
		integrationChanged = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationRemoved")]
		integrationRemoved = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="apiKeyConnected")]
		apiKeyConnected = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationLinkAdded")]
		integrationLinkAdded = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="integrationLinkRemoved")]
		integrationLinkRemoved = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdded")]
		organizationAdded = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationRemoved")]
		organizationRemoved = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationChanged")]
		organizationChanged = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationSubscriptionTypeChanged")]
		organizationSubscriptionTypeChanged = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdminChanged")]
		organizationAdminChanged = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdminLeft")]
		organizationAdminLeft = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationAdminDisabled2FA")]
		organizationAdminDisabled2FA = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tagAdded")]
		tagAdded = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tagChanged")]
		tagChanged = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tagRemoved")]
		tagRemoved = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingTagAdded")]
		settingTagAdded = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="settingTagRemoved")]
		settingTagRemoved = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publicApiAccessTokenAdded")]
		publicApiAccessTokenAdded = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="publicApiAccessTokenRemoved")]
		publicApiAccessTokenRemoved = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainAdded")]
		domainAdded = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainVerified")]
		domainVerified = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainRemoved")]
		domainRemoved = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainSamlConfigured")]
		domainSamlConfigured = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="domainSamlDeleted")]
		domainSamlDeleted = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="autoProvisioningConfigurationChanged")]
		autoProvisioningConfigurationChanged = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberJoined")]
		organizationMemberJoined = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberProductJoinRequested")]
		organizationMemberProductJoinRequested = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberProductJoinRequestRejected")]
		organizationMemberProductJoinRequestRejected = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="organizationMemberProductJoinRequestApproved")]
		organizationMemberProductJoinRequestApproved = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="codeReferencesUploaded")]
		codeReferencesUploaded = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="codeReferenceDeleted")]
		codeReferenceDeleted = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="codeReferenceStaleBranchDeleted")]
		codeReferenceStaleBranchDeleted = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="segmentCreated")]
		segmentCreated = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="segmentChanged")]
		segmentChanged = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="segmentDeleted")]
		segmentDeleted = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhookSigningKeyDeleted")]
		webhookSigningKeyDeleted = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="webhookSigningKeyCreated")]
		webhookSigningKeyCreated = 74,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeReferenceRequest
	{
		
		/// <summary>
		/// The currently active branches of the repository. Each previously uploaded report that belongs to a non-reported active branch is being deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeBranches")]
		public string[] ActiveBranches { get; set; }
		
		/// <summary>
		/// The source control branch on where the scan was performed. (Source of the branch selector on the ConfigCat Dashboard)
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branch")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Branch { get; set; }
		
		/// <summary>
		/// The related commit's hash. (Appears on the ConfigCat Dashboard)
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitHash")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CommitHash { get; set; }
		
		/// <summary>
		/// The related commit's URL. (Appears on the ConfigCat Dashboard)
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string CommitUrl { get; set; }
		
		/// <summary>
		/// The Config's identifier the scanning was performed against.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		/// <summary>
		/// The actual code reference collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flagReferences")]
		public FlagReference[] FlagReferences { get; set; }
		
		/// <summary>
		/// The source control repository that contains the scanned code. (Source of the repository selector on the ConfigCat Dashboard)
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repository")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Repository { get; set; }
		
		/// <summary>
		/// The scanning tool's name. (Appears on the ConfigCat Dashboard)
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploader")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Uploader { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FlagReference
	{
		
		/// <summary>
		/// The actual references to the given Feature Flag or Setting.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="references")]
		public ReferenceLines[] References { get; set; }
		
		/// <summary>
		/// The identifier of the Feature Flag or Setting the code reference belongs to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public int SettingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferenceLines
	{
		
		/// <summary>
		/// The file's name in where the code reference has been found. (Appears on the ConfigCat Dashboard)
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string File { get; set; }
		
		/// <summary>
		/// The file's url. (Used to point to the file on the repository's website)
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FileUrl { get; set; }
		
		/// <summary>
		/// The lines after the actual reference line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postLines")]
		public ReferenceLine[] PostLines { get; set; }
		
		/// <summary>
		/// The lines before the actual reference line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preLines")]
		public ReferenceLine[] PreLines { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceLine")]
		public ReferenceLine ReferenceLine { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferenceLine
	{
		
		/// <summary>
		/// The line number of the reference line.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public int LineNumber { get; set; }
		
		/// <summary>
		/// The content of the reference line.
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineText")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string LineText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductModel Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public OrganizationModel Organization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	public class ConfigModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ConfigModel_haljson_embeddedProduct Product { get; set; }
	}
	
	public class ConfigModel_haljson_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigModel_haljson_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigModel_haljson_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class ConfigModel_haljson_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public ConfigModel_haljson_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class ConfigModel_haljson_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigModel_haljson_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class ConfigModel_haljson_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class ConfigModel_haljson_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class ConfigModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSettingValueModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="integrationLinks")]
		public IntegrationLinkModel[] IntegrationLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterUserEmail")]
		public string LastUpdaterUserEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterUserFullName")]
		public string LastUpdaterUserFullName { get; set; }
		
		/// <summary>
		/// The percentage rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutPercentageItems")]
		public RolloutPercentageItemModel[] RolloutPercentageItems { get; set; }
		
		/// <summary>
		/// The targeting rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutRules")]
		public RolloutRuleModel[] RolloutRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setting")]
		public SettingDataModel Setting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingTags")]
		public SettingTagModel[] SettingTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The value to serve. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationLinkModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrationLinkType")]
		public System.Nullable<IntegrationLinkModelIntegrationLinkType> IntegrationLinkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IntegrationLinkModelIntegrationLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trello")]
		trello = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jira")]
		jira = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monday")]
		monday = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RolloutPercentageItemModel
	{
		
		/// <summary>
		/// The percentage value for the rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public long Percentage { get; set; }
		
		/// <summary>
		/// The value to serve when the user falls in the percentage rule. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RolloutRuleModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<RolloutRuleModelComparator> Comparator { get; set; }
		
		/// <summary>
		/// The user attribute to compare.
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonAttribute")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ComparisonAttribute { get; set; }
		
		/// <summary>
		/// The value to compare against.
		/// Min length: 0
		/// Max length: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string ComparisonValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentComparator")]
		public System.Nullable<RolloutRuleModelSegmentComparator> SegmentComparator { get; set; }
		
		/// <summary>
		/// The segment to compare against.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		/// <summary>
		/// The value to serve when the comparison matches. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RolloutRuleModelComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isOneOf")]
		isOneOf = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isNotOneOf")]
		isNotOneOf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contains")]
		contains = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="doesNotContain")]
		doesNotContain = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerIsOneOf")]
		semVerIsOneOf = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerIsNotOneOf")]
		semVerIsNotOneOf = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerLess")]
		semVerLess = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerLessOrEquals")]
		semVerLessOrEquals = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerGreater")]
		semVerGreater = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerGreaterOrEquals")]
		semVerGreaterOrEquals = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberEquals")]
		numberEquals = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberDoesNotEqual")]
		numberDoesNotEqual = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberLess")]
		numberLess = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberLessOrEquals")]
		numberLessOrEquals = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberGreater")]
		numberGreater = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberGreaterOrEquals")]
		numberGreaterOrEquals = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sensitiveIsOneOf")]
		sensitiveIsOneOf = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sensitiveIsNotOneOf")]
		sensitiveIsNotOneOf = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RolloutRuleModelSegmentComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isIn")]
		isIn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isNotIn")]
		isNotIn = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SettingDataModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorEmail")]
		public string CreatorEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorFullName")]
		public string CreatorFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public string Hint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWatching")]
		public System.Nullable<System.Boolean> IsWatching { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public System.Nullable<System.Int32> SettingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingType")]
		public System.Nullable<SettingDataModelSettingType> SettingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SettingDataModelSettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
		boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double")]
		_double = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SettingTagModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingTagId")]
		public System.Nullable<System.Int64> SettingTagId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagId")]
		public System.Nullable<System.Int64> TagId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSettingValuesModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ConfigModel Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public EnvironmentModel Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingValues")]
		public ConfigSettingValueModel[] SettingValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectRequest
	{
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 15000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jiraJwtToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(15000)]
		public string JiraJwtToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConfigRequest
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateEnvironmentModel
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Color { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrUpdateEnvironmentAccessModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentAccessType")]
		public System.Nullable<CreateOrUpdateEnvironmentAccessModelEnvironmentAccessType> EnvironmentAccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateOrUpdateEnvironmentAccessModelEnvironmentAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="readOnly")]
		readOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePermissionGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public AccessType AccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateConfig")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateEnvironment")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSegments")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSetting")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateTag")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteConfig")]
		public System.Nullable<System.Boolean> CanDeleteConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteEnvironment")]
		public System.Nullable<System.Boolean> CanDeleteEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSegments")]
		public System.Nullable<System.Boolean> CanDeleteSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSetting")]
		public System.Nullable<System.Boolean> CanDeleteSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteTag")]
		public System.Nullable<System.Boolean> CanDeleteTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageIntegrations")]
		public System.Nullable<System.Boolean> CanManageIntegrations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageProductPreferences")]
		public System.Nullable<System.Boolean> CanManageProductPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageWebhook")]
		public System.Nullable<System.Boolean> CanManageWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canRotateSdkKey")]
		public System.Nullable<System.Boolean> CanRotateSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canTagSetting")]
		public System.Nullable<System.Boolean> CanTagSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canUseExportImport")]
		public System.Nullable<System.Boolean> CanUseExportImport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductAuditLog")]
		public System.Nullable<System.Boolean> CanViewProductAuditLog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductStatistics")]
		public System.Nullable<System.Boolean> CanViewProductStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewSdkKey")]
		public System.Nullable<System.Boolean> CanViewSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentAccesses")]
		public CreateOrUpdateEnvironmentAccessModel[] EnvironmentAccesses { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newEnvironmentAccessType")]
		public CreateOrUpdateEnvironmentAccessModelEnvironmentAccessType NewEnvironmentAccessType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProductRequest
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSegmentModel
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public RolloutRuleModelComparator Comparator { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comparisonAttribute")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ComparisonAttribute { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string ComparisonValue { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSettingInitialValues
	{
		
		/// <summary>
		/// A short description for the setting, shown on the Dashboard UI.
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hint")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Hint { get; set; }
		
		/// <summary>
		/// Optional, initial values of the feature flag or setting in the given Environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialValues")]
		public InitialValue[] InitialValues { get; set; }
		
		/// <summary>
		/// The key of the setting.
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// Pattern: ^[a-zA-Z]+[a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z]+[a-zA-Z0-9_]*")]
		public string Key { get; set; }
		
		/// <summary>
		/// The name of the setting, shown on the Dashboard UI.
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="settingType")]
		public CreateSettingInitialValuesSettingType SettingType { get; set; }
		
		/// <summary>
		/// The IDs of the tags which are attached to the setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public int[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InitialValue
	{
		
		/// <summary>
		/// The ID of the Environment where the initial value should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// The initial value in the given Environment. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateSettingInitialValuesSettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
		boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double")]
		_double = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTagModel
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Color { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteIntegrationLinkModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasRemainingIntegrationLink")]
		public System.Nullable<System.Boolean> HasRemainingIntegrationLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRepositoryReportsRequest
	{
		
		/// <summary>
		/// If it's set, only this branch's reports belonging to the given repository will be deleted.
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Branch { get; set; }
		
		/// <summary>
		/// The Config's identifier from where the reports should be deleted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		/// <summary>
		/// The source control repository which's reports should be deleted.
		/// Required
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repository")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Repository { get; set; }
		
		/// <summary>
		/// If it's set, only this setting's reports belonging to the given repository will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public System.Nullable<System.Int32> SettingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentAccessModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentAccessType")]
		public CreateOrUpdateEnvironmentAccessModelEnvironmentAccessType EnvironmentAccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EnvironmentAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="full")]
		full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="readOnly")]
		readOnly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="none")]
		none = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class EnvironmentModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public EnvironmentModel_haljson_embeddedProduct Product { get; set; }
	}
	
	public class EnvironmentModel_haljson_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentModel_haljson_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentModel_haljson_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class EnvironmentModel_haljson_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public EnvironmentModel_haljson_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class EnvironmentModel_haljson_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentModel_haljson_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class EnvironmentModel_haljson_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class EnvironmentModel_haljson_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class EnvironmentModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationLinkDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ConfigModel Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public EnvironmentModel Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setting")]
		public SettingDataModel Setting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegrationLinkDetailsModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allIntegrationLinkCount")]
		public System.Nullable<System.Int32> AllIntegrationLinkCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public IntegrationLinkDetail[] Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IntegrationLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trello")]
		trello = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="jira")]
		jira = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monday")]
		monday = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InviteMembersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public long PermissionGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JsonNode
	{
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public JsonNodeOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public JsonNode Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="root")]
		public JsonNode Root { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JsonNodeOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="propertyNameCaseInsensitive")]
		public System.Nullable<System.Boolean> PropertyNameCaseInsensitive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JsonPatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public PatchOperation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatchOperation
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public JsonPointer From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="op")]
		public System.Nullable<PatchOperationOp> Op { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public JsonPointer Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public JsonNode Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JsonPointer
	{
		
		[System.Runtime.Serialization.DataMember(Name="isUriEncoded")]
		public System.Nullable<System.Boolean> IsUriEncoded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<JsonPointerKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public PointerSegment[] Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JsonPointerKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unspecified")]
		unspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="plain")]
		plain = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="uriEncoded")]
		uriEncoded = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PointerSegment
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatchOperationOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="add")]
		add = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="remove")]
		remove = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="replace")]
		replace = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="move")]
		move = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copy")]
		copy = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="test")]
		test = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MeModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public System.Nullable<System.Int64> PermissionGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="add")]
		add = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="remove")]
		remove = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="replace")]
		replace = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="move")]
		move = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="copy")]
		copy = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="test")]
		test = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class OrganizationModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionGroupModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public AccessType AccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateConfig")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateEnvironment")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSegments")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSetting")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateTag")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteConfig")]
		public System.Nullable<System.Boolean> CanDeleteConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteEnvironment")]
		public System.Nullable<System.Boolean> CanDeleteEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSegments")]
		public System.Nullable<System.Boolean> CanDeleteSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSetting")]
		public System.Nullable<System.Boolean> CanDeleteSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteTag")]
		public System.Nullable<System.Boolean> CanDeleteTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageIntegrations")]
		public System.Nullable<System.Boolean> CanManageIntegrations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageProductPreferences")]
		public System.Nullable<System.Boolean> CanManageProductPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageWebhook")]
		public System.Nullable<System.Boolean> CanManageWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canRotateSdkKey")]
		public System.Nullable<System.Boolean> CanRotateSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canTagSetting")]
		public System.Nullable<System.Boolean> CanTagSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canUseExportImport")]
		public System.Nullable<System.Boolean> CanUseExportImport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductAuditLog")]
		public System.Nullable<System.Boolean> CanViewProductAuditLog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductStatistics")]
		public System.Nullable<System.Boolean> CanViewProductStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewSdkKey")]
		public System.Nullable<System.Boolean> CanViewSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentAccesses")]
		public EnvironmentAccessModel[] EnvironmentAccesses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newEnvironmentAccessType")]
		public CreateOrUpdateEnvironmentAccessModelEnvironmentAccessType NewEnvironmentAccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public System.Nullable<System.Int64> PermissionGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductModel Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionGroupModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionGroupModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionGroupModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public AccessType AccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateConfig")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateEnvironment")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSegments")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSetting")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateTag")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteConfig")]
		public System.Nullable<System.Boolean> CanDeleteConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteEnvironment")]
		public System.Nullable<System.Boolean> CanDeleteEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSegments")]
		public System.Nullable<System.Boolean> CanDeleteSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSetting")]
		public System.Nullable<System.Boolean> CanDeleteSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteTag")]
		public System.Nullable<System.Boolean> CanDeleteTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageIntegrations")]
		public System.Nullable<System.Boolean> CanManageIntegrations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageProductPreferences")]
		public System.Nullable<System.Boolean> CanManageProductPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageWebhook")]
		public System.Nullable<System.Boolean> CanManageWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canRotateSdkKey")]
		public System.Nullable<System.Boolean> CanRotateSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canTagSetting")]
		public System.Nullable<System.Boolean> CanTagSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canUseExportImport")]
		public System.Nullable<System.Boolean> CanUseExportImport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductAuditLog")]
		public System.Nullable<System.Boolean> CanViewProductAuditLog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductStatistics")]
		public System.Nullable<System.Boolean> CanViewProductStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewSdkKey")]
		public System.Nullable<System.Boolean> CanViewSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentAccesses")]
		public EnvironmentAccessModel[] EnvironmentAccesses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newEnvironmentAccessType")]
		public CreateOrUpdateEnvironmentAccessModelEnvironmentAccessType NewEnvironmentAccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public System.Nullable<System.Int64> PermissionGroupId { get; set; }
	}
	
	public class PermissionGroupModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public PermissionGroupModel_haljson_embeddedProduct Product { get; set; }
	}
	
	public class PermissionGroupModel_haljson_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionGroupModel_haljson_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionGroupModel_haljson_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class PermissionGroupModel_haljson_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public PermissionGroupModel_haljson_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class PermissionGroupModel_haljson_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionGroupModel_haljson_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class PermissionGroupModel_haljson_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class PermissionGroupModel_haljson_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class PermissionGroupModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class ProductModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public ProductModel_haljson_embeddedOrganization Organization { get; set; }
	}
	
	public class ProductModel_haljson_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductModel_haljson_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class ProductModel_haljson_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class ProductModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RolloutRuleComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isOneOf")]
		isOneOf = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isNotOneOf")]
		isNotOneOf = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="contains")]
		contains = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="doesNotContain")]
		doesNotContain = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerIsOneOf")]
		semVerIsOneOf = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerIsNotOneOf")]
		semVerIsNotOneOf = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerLess")]
		semVerLess = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerLessOrEquals")]
		semVerLessOrEquals = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerGreater")]
		semVerGreater = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="semVerGreaterOrEquals")]
		semVerGreaterOrEquals = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberEquals")]
		numberEquals = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberDoesNotEqual")]
		numberDoesNotEqual = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberLess")]
		numberLess = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberLessOrEquals")]
		numberLessOrEquals = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberGreater")]
		numberGreater = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="numberGreaterOrEquals")]
		numberGreaterOrEquals = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sensitiveIsOneOf")]
		sensitiveIsOneOf = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sensitiveIsNotOneOf")]
		sensitiveIsNotOneOf = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SdkKeysModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public string Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondary")]
		public string Secondary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SegmentComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isIn")]
		isIn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="isNotIn")]
		isNotIn = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SegmentListModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorEmail")]
		public string CreatorEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorFullName")]
		public string CreatorFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterEmail")]
		public string LastUpdaterEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterFullName")]
		public string LastUpdaterFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Int32> Usage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SegmentListModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentListModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentListModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorEmail")]
		public string CreatorEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorFullName")]
		public string CreatorFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterEmail")]
		public string LastUpdaterEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterFullName")]
		public string LastUpdaterFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Int32> Usage { get; set; }
	}
	
	public class SegmentListModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SegmentListModel_haljson_embeddedProduct Product { get; set; }
	}
	
	public class SegmentListModel_haljson_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentListModel_haljson_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentListModel_haljson_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class SegmentListModel_haljson_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public SegmentListModel_haljson_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class SegmentListModel_haljson_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentListModel_haljson_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class SegmentListModel_haljson_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class SegmentListModel_haljson_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class SegmentListModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SegmentModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public RolloutRuleModelComparator Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparisonAttribute")]
		public string ComparisonAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		public string ComparisonValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorEmail")]
		public string CreatorEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorFullName")]
		public string CreatorFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterEmail")]
		public string LastUpdaterEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterFullName")]
		public string LastUpdaterFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SegmentModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public RolloutRuleModelComparator Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparisonAttribute")]
		public string ComparisonAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		public string ComparisonValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorEmail")]
		public string CreatorEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorFullName")]
		public string CreatorFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterEmail")]
		public string LastUpdaterEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterFullName")]
		public string LastUpdaterFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	public class SegmentModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SegmentModel_haljson_embeddedProduct Product { get; set; }
	}
	
	public class SegmentModel_haljson_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentModel_haljson_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentModel_haljson_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class SegmentModel_haljson_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public SegmentModel_haljson_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class SegmentModel_haljson_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SegmentModel_haljson_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class SegmentModel_haljson_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class SegmentModel_haljson_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class SegmentModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SettingModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configName")]
		public string ConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public string Hint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public System.Nullable<System.Int32> SettingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingType")]
		public System.Nullable<SettingModelSettingType> SettingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagModel[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SettingModelSettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
		boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double")]
		_double = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public ProductModel Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagId")]
		public System.Nullable<System.Int64> TagId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SettingModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configName")]
		public string ConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public string Hint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public System.Nullable<System.Int32> SettingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingType")]
		public System.Nullable<SettingModel_haljsonSettingType> SettingType { get; set; }
	}
	
	public class SettingModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public SettingModel_haljson_embeddedTags[] SettingModel_haljson_embeddedTags { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingModel_haljson_embeddedTags_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingModel_haljson_embeddedTags_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagId")]
		public System.Nullable<System.Int64> TagId { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SettingModel_haljson_embeddedTags_embeddedProduct Product { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingModel_haljson_embeddedTags_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingModel_haljson_embeddedTags_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public SettingModel_haljson_embeddedTags_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingModel_haljson_embeddedTags_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class SettingModel_haljson_embeddedTags_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class SettingModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SettingModel_haljsonSettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
		boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double")]
		_double = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
		boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double")]
		_double = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SettingValueModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ConfigModel Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public EnvironmentModel Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrationLinks")]
		public IntegrationLinkModel[] IntegrationLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterUserEmail")]
		public string LastUpdaterUserEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterUserFullName")]
		public string LastUpdaterUserFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The percentage rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutPercentageItems")]
		public RolloutPercentageItemModel[] RolloutPercentageItems { get; set; }
		
		/// <summary>
		/// The targeting rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutRules")]
		public RolloutRuleModel[] RolloutRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setting")]
		public SettingDataModel Setting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingTags")]
		public SettingTagModel[] SettingTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The value to serve. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SettingValueModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterUserEmail")]
		public string LastUpdaterUserEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdaterUserFullName")]
		public string LastUpdaterUserFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The percentage rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutPercentageItems")]
		public RolloutPercentageItemModel[] RolloutPercentageItems { get; set; }
		
		/// <summary>
		/// The targeting rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutRules")]
		public RolloutRuleModel[] RolloutRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The value to serve. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	public class SettingValueModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public SettingValueModel_haljson_embeddedConfig Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public SettingValueModel_haljson_embeddedEnvironment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrationLinks")]
		public SettingValueModel_haljson_embeddedIntegrationLinks[] SettingValueModel_haljson_embeddedIntegrationLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setting")]
		public SettingValueModel_haljson_embeddedSetting Setting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingTags")]
		public SettingValueModel_haljson_embeddedSettingTags[] SettingValueModel_haljson_embeddedSettingTags { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedConfig_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedConfig_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SettingValueModel_haljson_embeddedConfig_embeddedProduct Product { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedConfig_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedConfig_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public SettingValueModel_haljson_embeddedConfig_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedConfig_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedConfig_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedEnvironment_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedEnvironment_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SettingValueModel_haljson_embeddedEnvironment_embeddedProduct Product { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedEnvironment_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedIntegrationLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrationLinkType")]
		public IntegrationLinkModelIntegrationLinkType IntegrationLinkType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class SettingValueModel_haljson_embeddedSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorEmail")]
		public string CreatorEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creatorFullName")]
		public string CreatorFullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public string Hint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isWatching")]
		public System.Nullable<System.Boolean> IsWatching { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public System.Nullable<System.Int32> SettingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingType")]
		public System.Nullable<SettingValueModel_haljson_embeddedSettingSettingType> SettingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SettingValueModel_haljson_embeddedSettingSettingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="boolean")]
		boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="int")]
		_int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="double")]
		_double = 3,
	}
	
	public class SettingValueModel_haljson_embeddedSettingTags
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settingTagId")]
		public System.Nullable<System.Int64> SettingTagId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagId")]
		public System.Nullable<System.Int64> TagId { get; set; }
	}
	
	public class SettingValueModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagModel_haljson
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagModel_haljson_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagModel_haljson_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagId")]
		public System.Nullable<System.Int64> TagId { get; set; }
	}
	
	public class TagModel_haljson_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public TagModel_haljson_embeddedProduct Product { get; set; }
	}
	
	public class TagModel_haljson_embeddedProduct
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagModel_haljson_embeddedProduct_embedded _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagModel_haljson_embeddedProduct_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonRequired")]
		public System.Nullable<System.Boolean> ReasonRequired { get; set; }
	}
	
	public class TagModel_haljson_embeddedProduct_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public TagModel_haljson_embeddedProduct_embeddedOrganization Organization { get; set; }
	}
	
	public class TagModel_haljson_embeddedProduct_embeddedOrganization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagModel_haljson_embeddedProduct_embeddedOrganization_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organizationId")]
		public string OrganizationId { get; set; }
	}
	
	public class TagModel_haljson_embeddedProduct_embeddedOrganization_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string Products { get; set; }
	}
	
	public class TagModel_haljson_embeddedProduct_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public string Configs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public string Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permission-groups")]
		public string Permission_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	public class TagModel_haljson_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConfigRequest
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateEnvironmentModel
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Color { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePermissionGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public AccessType AccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateConfig")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateEnvironment")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSegments")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateSetting")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canCreateOrUpdateTag")]
		public System.Nullable<System.Boolean> CanCreateOrUpdateTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteConfig")]
		public System.Nullable<System.Boolean> CanDeleteConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteEnvironment")]
		public System.Nullable<System.Boolean> CanDeleteEnvironment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSegments")]
		public System.Nullable<System.Boolean> CanDeleteSegments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteSetting")]
		public System.Nullable<System.Boolean> CanDeleteSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canDeleteTag")]
		public System.Nullable<System.Boolean> CanDeleteTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageIntegrations")]
		public System.Nullable<System.Boolean> CanManageIntegrations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageProductPreferences")]
		public System.Nullable<System.Boolean> CanManageProductPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canManageWebhook")]
		public System.Nullable<System.Boolean> CanManageWebhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canRotateSdkKey")]
		public System.Nullable<System.Boolean> CanRotateSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canTagSetting")]
		public System.Nullable<System.Boolean> CanTagSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canUseExportImport")]
		public System.Nullable<System.Boolean> CanUseExportImport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductAuditLog")]
		public System.Nullable<System.Boolean> CanViewProductAuditLog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewProductStatistics")]
		public System.Nullable<System.Boolean> CanViewProductStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canViewSdkKey")]
		public System.Nullable<System.Boolean> CanViewSdkKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentAccesses")]
		public CreateOrUpdateEnvironmentAccessModel[] EnvironmentAccesses { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newEnvironmentAccessType")]
		public CreateOrUpdateEnvironmentAccessModelEnvironmentAccessType NewEnvironmentAccessType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProductRequest
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSegmentModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public RolloutRuleModelComparator Comparator { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonAttribute")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string ComparisonAttribute { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonValue")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(65535)]
		public string ComparisonValue { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSettingValueModel
	{
		
		/// <summary>
		/// The percentage rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutPercentageItems")]
		public RolloutPercentageItemModel[] RolloutPercentageItems { get; set; }
		
		/// <summary>
		/// The targeting rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutRules")]
		public RolloutRuleModel[] RolloutRules { get; set; }
		
		/// <summary>
		/// The value to serve. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSettingValueWithSettingIdModel
	{
		
		/// <summary>
		/// The percentage rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutPercentageItems")]
		public RolloutPercentageItemModel[] RolloutPercentageItems { get; set; }
		
		/// <summary>
		/// The targeting rule collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutRules")]
		public RolloutRuleModel[] RolloutRules { get; set; }
		
		/// <summary>
		/// The id of the Setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingId")]
		public System.Nullable<System.Int32> SettingId { get; set; }
		
		/// <summary>
		/// The value to serve. It must respect the setting type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSettingValuesWithIdModel
	{
		
		/// <summary>
		/// The values to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settingValues")]
		public UpdateSettingValueWithSettingIdModel[] SettingValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTagModel
	{
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Color { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// V1Code_referencesPost v1/code-references
		/// </summary>
		/// <returns>Success</returns>
		public async Task V1Code_referencesPostAsync(CodeReferenceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/code-references";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// V1Code_referencesDelete_reportsPost v1/code-references/delete-reports
		/// </summary>
		/// <returns>Success</returns>
		public async Task V1Code_referencesDelete_reportsPostAsync(DeleteRepositoryReportsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/code-references/delete-reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Config
		/// This endpoint removes a Config identified by the `configId` parameter.
		/// V1Configs_configIdDelete v1/configs/{configId}
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		public async Task V1Configs_configIdDeleteAsync(string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Config
		/// This endpoint returns the metadata of a Config
		/// identified by the `configId`.
		/// V1Configs_configIdGet v1/configs/{configId}
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		/// <returns>When everything is ok, the config data returned.</returns>
		public async Task<ConfigModel> V1Configs_configIdGetAsync(string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Config
		/// This endpoint updates a Config identified by the `configId` parameter.
		/// V1Configs_configIdPut v1/configs/{configId}
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		public async Task<ConfigModel> V1Configs_configIdPutAsync(string configId, UpdateConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Deleted Settings
		/// This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
		/// V1Configs_configIdDeleted_settingsGet v1/configs/{configId}/deleted-settings
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		public async Task<SettingModel[]> V1Configs_configIdDeleted_settingsGetAsync(string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId))+"/deleted-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get SDK Key
		/// This endpoint returns the SDK Key for your Config in a specified Environment.
		/// V1Configs_configIdEnvironments_environmentIdGet v1/configs/{configId}/environments/{environmentId}
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		/// <param name="environmentId">The identifier of the Environment.</param>
		public async Task<SdkKeysModel> V1Configs_configIdEnvironments_environmentIdGetAsync(string configId, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId))+"/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SdkKeysModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get values
		/// This endpoint returns the value of a specified Config's Feature Flags or Settings identified by the `configId` parameter
		/// in a specified Environment identified by the `environmentId` parameter.
		/// 
		/// The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
		/// The `value` represents what the clients will get when the evaluation requests of our SDKs
		/// are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
		/// 
		/// The `rolloutRules` and `percentageRules` attributes are representing the current
		/// Targeting and Percentage Rules configuration of the actual Feature Flag or Setting
		/// in an **ordered** collection, which means the order of the returned rules is matching to the
		/// evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
		/// V1Configs_configIdEnvironments_environmentIdValuesGet v1/configs/{configId}/environments/{environmentId}/values
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <returns>When everything is ok, the setting values returned.</returns>
		public async Task<ConfigSettingValuesModel> V1Configs_configIdEnvironments_environmentIdValuesGetAsync(string configId, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId))+"/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/values";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSettingValuesModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post values
		/// This endpoint replaces the values of a specified Config's Feature Flags or Settings identified by the `configId` parameter
		/// in a specified Environment identified by the `environmentId` parameter.
		/// 
		/// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
		/// 
		/// **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't
		/// want to change in its original state. Not listing one means that it will reset.
		/// 
		/// For example: We have the following resource.
		/// ```
		/// {
		/// "settingValues": [
		/// {
		/// "rolloutPercentageItems": [
		/// {
		/// "percentage": 30,
		/// "value": true
		/// },
		/// {
		/// "percentage": 70,
		/// "value": false
		/// }
		/// ],
		/// "rolloutRules": [],
		/// "value": false,
		/// "settingId": 1
		/// }
		/// ]
		/// }
		/// ```
		/// If we send a replace request body as below:
		/// ```
		/// {
		/// "settingValues": [
		/// {
		/// "value": true,
		/// "settingId": 1
		/// }
		/// ]
		/// }
		/// ```
		/// Then besides that the default value is set to `true`, all the Percentage Rules are deleted.
		/// So we get a response like this:
		/// ```
		/// {
		/// "settingValues": [
		/// {
		/// "rolloutPercentageItems": [],
		/// "rolloutRules": [],
		/// "value": true,
		/// "setting":
		/// {
		/// "settingId": 1
		/// }
		/// }
		/// ]
		/// }
		/// ```
		/// 
		/// The `rolloutRules` property describes two types of rules:
		/// 
		/// - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.
		/// - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
		/// V1Configs_configIdEnvironments_environmentIdValuesPostByReason v1/configs/{configId}/environments/{environmentId}/values
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="reason">The reason note for the Audit Log if the Product's "Config changes require a reason" preference is turned on.</param>
		/// <returns>When everything is ok, the updated setting values returned.</returns>
		public async Task<ConfigSettingValuesModel> V1Configs_configIdEnvironments_environmentIdValuesPostByReasonAsync(string configId, string environmentId, string reason, UpdateSettingValuesWithIdModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId))+"/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/values&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSettingValuesModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Flags
		/// This endpoint returns the list of the Feature Flags and Settings defined in a
		/// specified Config, identified by the `configId` parameter.
		/// V1Configs_configIdSettingsGet v1/configs/{configId}/settings
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		public async Task<SettingModel[]> V1Configs_configIdSettingsGetAsync(string configId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Flag
		/// This endpoint creates a new Feature Flag or Setting in a specified Config
		/// identified by the `configId` parameter.
		/// 
		/// **Important:** The `key` attribute must be unique within the given Config.
		/// V1Configs_configIdSettingsPost v1/configs/{configId}/settings
		/// </summary>
		/// <param name="configId">The identifier of the Config.</param>
		public async Task V1Configs_configIdSettingsPostAsync(string configId, CreateSettingInitialValues requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/configs/"+ (configId==null? "" : System.Uri.EscapeDataString(configId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Environment
		/// This endpoint removes an Environment identified by the `environmentId` parameter.
		/// V1Environments_environmentIdDelete v1/environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		public async Task V1Environments_environmentIdDeleteAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Environment
		/// This endpoint returns the metadata of an Environment
		/// identified by the `environmentId`.
		/// V1Environments_environmentIdGet v1/environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <returns>When everything is ok, the environment data returned.</returns>
		public async Task<EnvironmentModel> V1Environments_environmentIdGetAsync(string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnvironmentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Environment
		/// This endpoint updates an Environment identified by the `environmentId` parameter.
		/// V1Environments_environmentIdPut v1/environments/{environmentId}
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		public async Task<EnvironmentModel> V1Environments_environmentIdPutAsync(string environmentId, UpdateEnvironmentModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnvironmentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Integration link
		/// V1Environments_environmentIdSettings_settingIdIntegrationLinks_integrationLinkType_keyDelete v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="settingId">The id of the Setting.</param>
		/// <param name="integrationLinkType">The integration's type.</param>
		/// <param name="key">The key of the integration link.</param>
		/// <returns>When everything is ok.</returns>
		public async Task<DeleteIntegrationLinkModel> V1Environments_environmentIdSettings_settingIdIntegrationLinks_integrationLinkType_keyDeleteAsync(string environmentId, int settingId, IntegrationLinkModelIntegrationLinkType integrationLinkType, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/settings/"+settingId+"/integrationLinks/"+integrationLinkType+"/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteIntegrationLinkModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or update Integration link
		/// V1Environments_environmentIdSettings_settingIdIntegrationLinks_integrationLinkType_keyPost v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="settingId">The id of the Setting.</param>
		/// <param name="integrationLinkType">The integration link's type.</param>
		/// <param name="key">The key of the integration link.</param>
		/// <returns>When everything is ok, the integration link data returned.</returns>
		public async Task<IntegrationLinkModel> V1Environments_environmentIdSettings_settingIdIntegrationLinks_integrationLinkType_keyPostAsync(string environmentId, int settingId, IntegrationLinkModelIntegrationLinkType integrationLinkType, string key, AddOrUpdateIntegrationLinkModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/settings/"+settingId+"/integrationLinks/"+integrationLinkType+"/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationLinkModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get value
		/// This endpoint returns the value of a Feature Flag or Setting
		/// in a specified Environment identified by the `environmentId` parameter.
		/// 
		/// The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
		/// The `value` represents what the clients will get when the evaluation requests of our SDKs
		/// are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
		/// 
		/// The `rolloutRules` and `percentageRules` attributes are representing the current
		/// Targeting and Percentage Rules configuration of the actual Feature Flag or Setting
		/// in an **ordered** collection, which means the order of the returned rules is matching to the
		/// evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
		/// V1Environments_environmentIdSettings_settingIdValueGet v1/environments/{environmentId}/settings/{settingId}/value
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="settingId">The id of the Setting.</param>
		/// <returns>When everything is ok, the setting value data returned.</returns>
		public async Task<SettingValueModel> V1Environments_environmentIdSettings_settingIdValueGetAsync(string environmentId, int settingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/settings/"+settingId+"/value";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update value
		/// This endpoint updates the value of a Feature Flag or Setting
		/// with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment.
		/// 
		/// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
		/// 
		/// The advantage of using JSON Patch is that you can describe individual update operations on a resource
		/// without touching attributes that you don't want to change. It supports collection reordering, so it also
		/// can be used for reordering the targeting rules of a Feature Flag or Setting.
		/// 
		/// For example: We have the following resource.
		/// ```
		/// {
		/// "rolloutPercentageItems": [
		/// {
		/// "percentage": 30,
		/// "value": true
		/// },
		/// {
		/// "percentage": 70,
		/// "value": false
		/// }
		/// ],
		/// "rolloutRules": [],
		/// "value": false
		/// }
		/// ```
		/// If we send an update request body as below:
		/// ```
		/// [
		/// {
		/// "op": "replace",
		/// "path": "/value",
		/// "value": true
		/// }
		/// ]
		/// ```
		/// Only the default value is going to be set to `true` and all the Percentage Rules are remaining unchanged.
		/// So we get a response like this:
		/// ```
		/// {
		/// "rolloutPercentageItems": [
		/// {
		/// "percentage": 30,
		/// "value": true
		/// },
		/// {
		/// "percentage": 70,
		/// "value": false
		/// }
		/// ],
		/// "rolloutRules": [],
		/// "value": true
		/// }
		/// ```
		/// 
		/// The `rolloutRules` property describes two types of rules:
		/// 
		/// - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.
		/// - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
		/// V1Environments_environmentIdSettings_settingIdValuePatchByReason v1/environments/{environmentId}/settings/{settingId}/value
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="settingId">The id of the Setting.</param>
		/// <param name="reason">The reason note for the Audit Log if the Product's "Config changes require a reason" preference is turned on.</param>
		/// <returns>When the patch was successful.</returns>
		public async Task<SettingValueModel> V1Environments_environmentIdSettings_settingIdValuePatchByReasonAsync(string environmentId, int settingId, string reason, JsonPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/settings/"+settingId+"/value&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace value
		/// This endpoint replaces the whole value of a Feature Flag or Setting in a specified Environment.
		/// 
		/// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
		/// 
		/// **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't
		/// want to change in its original state. Not listing one means that it will reset.
		/// 
		/// For example: We have the following resource.
		/// ```
		/// {
		/// "rolloutPercentageItems": [
		/// {
		/// "percentage": 30,
		/// "value": true
		/// },
		/// {
		/// "percentage": 70,
		/// "value": false
		/// }
		/// ],
		/// "rolloutRules": [],
		/// "value": false
		/// }
		/// ```
		/// If we send a replace request body as below:
		/// ```
		/// {
		/// "value": true
		/// }
		/// ```
		/// Then besides that the default value is set to `true`, all the Percentage Rules are deleted.
		/// So we get a response like this:
		/// ```
		/// {
		/// "rolloutPercentageItems": [],
		/// "rolloutRules": [],
		/// "value": true
		/// }
		/// ```
		/// 
		/// The `rolloutRules` property describes two types of rules:
		/// 
		/// - **Targeting rules**: When you want to add or update a targenting rule, the `comparator`, `comparisonAttribute`, and `comparisonValue` members are required.
		/// - **Segment rules**: When you want to add add or update a segment rule, the `segmentId` which identifies the desired segment and the `segmentComparator` members are required.
		/// V1Environments_environmentIdSettings_settingIdValuePutByReason v1/environments/{environmentId}/settings/{settingId}/value
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="settingId">The id of the Setting.</param>
		/// <param name="reason">The reason note for the Audit Log if the Product's "Config changes require a reason" preference is turned on.</param>
		public async Task<SettingValueModel> V1Environments_environmentIdSettings_settingIdValuePutByReasonAsync(string environmentId, int settingId, string reason, UpdateSettingValueModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/settings/"+settingId+"/value&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Integration link
		/// V1IntegrationLink_integrationLinkType_keyDetailsGet v1/integrationLink/{integrationLinkType}/{key}/details
		/// </summary>
		/// <param name="integrationLinkType">The integration link's type.</param>
		/// <param name="key">The key of the integration link.</param>
		/// <returns>When everything is ok, the details for the integration link returned.</returns>
		public async Task<IntegrationLinkDetailsModel> V1IntegrationLink_integrationLinkType_keyDetailsGetAsync(IntegrationLinkModelIntegrationLinkType integrationLinkType, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/integrationLink/"+integrationLinkType+"/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationLinkDetailsModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V1JiraConnectPost v1/jira/Connect
		/// </summary>
		/// <returns>Success</returns>
		public async Task V1JiraConnectPostAsync(ConnectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jira/Connect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// V1JiraEnvironments_environmentIdSettings_settingIdIntegrationLinks_keyPost v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}
		/// </summary>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="settingId">The id of the Setting.</param>
		/// <param name="key">The key of the integration link.</param>
		/// <returns>When everything is ok, the integration link data returned.</returns>
		public async Task<IntegrationLinkModel> V1JiraEnvironments_environmentIdSettings_settingIdIntegrationLinks_keyPostAsync(string environmentId, int settingId, string key, AddOrUpdateJiraIntegrationLinkModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jira/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"/settings/"+settingId+"/integrationLinks/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IntegrationLinkModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get authenticated user details
		/// V1MeGet v1/me
		/// </summary>
		public async Task<MeModel> V1MeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MeModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Organizations
		/// This endpoint returns the list of the Organizations that belongs to the user.
		/// V1OrganizationsGet v1/organizations
		/// </summary>
		public async Task<OrganizationModel[]> V1OrganizationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OrganizationModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Audit log items for Organization
		/// This endpoint returns the list of Audit log items for a given Organization
		/// and the result can be optionally filtered by Product and/or Config and/or Environment.
		/// V1Organizations_organizationIdAuditlogsGetByProductIdAndConfigIdAndEnvironmentIdAndAuditLogTypeAndFromUtcDateTimeAndToUtcDateTime v1/organizations/{organizationId}/auditlogs
		/// </summary>
		/// <param name="organizationId">The identifier of the Organization.</param>
		/// <param name="productId">The identifier of the Product.</param>
		/// <param name="configId">The identifier of the Config.</param>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="auditLogType">Filter Audit logs by Audit log type.</param>
		/// <param name="fromUtcDateTime">Filter Audit logs by starting UTC date.</param>
		/// <param name="toUtcDateTime">Filter Audit logs by ending UTC date.</param>
		public async Task<AuditLogItemModel[]> V1Organizations_organizationIdAuditlogsGetByProductIdAndConfigIdAndEnvironmentIdAndAuditLogTypeAndFromUtcDateTimeAndToUtcDateTimeAsync(string organizationId, string productId, string configId, string environmentId, AuditLogItemModelAuditLogTypeEnum auditLogType, System.DateTimeOffset fromUtcDateTime, System.DateTimeOffset toUtcDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations/"+ (organizationId==null? "" : System.Uri.EscapeDataString(organizationId))+"/auditlogs&productId=" + (productId==null? "" : System.Uri.EscapeDataString(productId))+"&configId=" + (configId==null? "" : System.Uri.EscapeDataString(configId))+"&environmentId=" + (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"&auditLogType=" + auditLogType+"&fromUtcDateTime=" + fromUtcDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toUtcDateTime=" + toUtcDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuditLogItemModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Organization Members
		/// This endpoint returns the list of Members that belongs
		/// to the given Organization, identified by the `organizationId` parameter.
		/// V1Organizations_organizationIdMembersGet v1/organizations/{organizationId}/members
		/// </summary>
		/// <param name="organizationId">The identifier of the Organization.</param>
		public async Task<UserModel[]> V1Organizations_organizationIdMembersGetAsync(string organizationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations/"+ (organizationId==null? "" : System.Uri.EscapeDataString(organizationId))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Member from Organization
		/// This endpoint removes a Member identified by the `userId` from the
		/// given Organization identified by the `organizationId` parameter.
		/// V1Organizations_organizationIdMembers_userIdDelete v1/organizations/{organizationId}/members/{userId}
		/// </summary>
		/// <param name="organizationId">The identifier of the Organization.</param>
		/// <param name="userId">The identifier of the Member.</param>
		public async Task V1Organizations_organizationIdMembers_userIdDeleteAsync(string organizationId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations/"+ (organizationId==null? "" : System.Uri.EscapeDataString(organizationId))+"/members/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Member Permissions
		/// This endpoint adds a Member identified by the `userId` to one or more Permission Groups.
		/// This endpoint can also be used to move a Member between Permission Groups within a Product.
		/// Only a single Permission Group can be set per Product.
		/// V1Organizations_organizationIdMembers_userIdPost v1/organizations/{organizationId}/members/{userId}
		/// </summary>
		/// <param name="organizationId">The identifier of the Organization.</param>
		/// <param name="userId">The identifier of the Member.</param>
		/// <returns>When the addition was successful.</returns>
		public async Task V1Organizations_organizationIdMembers_userIdPostAsync(string organizationId, string userId, AddUserToGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations/"+ (organizationId==null? "" : System.Uri.EscapeDataString(organizationId))+"/members/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create Product
		/// This endpoint creates a new Product in a specified Organization
		/// identified by the `organizationId` parameter, which can be obtained from the [List Organizations](#operation/get-organizations) endpoint.
		/// V1Organizations_organizationIdProductsPost v1/organizations/{organizationId}/products
		/// </summary>
		/// <param name="organizationId">The identifier of the Organization.</param>
		public async Task V1Organizations_organizationIdProductsPostAsync(string organizationId, CreateProductRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/organizations/"+ (organizationId==null? "" : System.Uri.EscapeDataString(organizationId))+"/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Permission Group
		/// This endpoint removes a Permission Group identified by the `permissionGroupId` parameter.
		/// V1Permissions_permissionGroupIdDelete v1/permissions/{permissionGroupId}
		/// </summary>
		/// <param name="permissionGroupId">The identifier of the Permission Group.</param>
		public async Task V1Permissions_permissionGroupIdDeleteAsync(long permissionGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/permissions/"+permissionGroupId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Permission Group
		/// This endpoint returns the metadata of a Permission Group
		/// identified by the `permissionGroupId`.
		/// V1Permissions_permissionGroupIdGet v1/permissions/{permissionGroupId}
		/// </summary>
		/// <param name="permissionGroupId">The identifier of the Permission Group.</param>
		/// <returns>When everything is ok, the permission group data returned.</returns>
		public async Task<PermissionGroupModel> V1Permissions_permissionGroupIdGetAsync(long permissionGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/permissions/"+permissionGroupId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionGroupModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Permission Group
		/// This endpoint updates a Permission Group identified by the `permissionGroupId` parameter.
		/// V1Permissions_permissionGroupIdPut v1/permissions/{permissionGroupId}
		/// </summary>
		/// <param name="permissionGroupId">The identifier of the Permission Group.</param>
		public async Task<PermissionGroupModel> V1Permissions_permissionGroupIdPutAsync(long permissionGroupId, UpdatePermissionGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/permissions/"+permissionGroupId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionGroupModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Products
		/// This endpoint returns the list of the Products that belongs to the user.
		/// V1ProductsGet v1/products
		/// </summary>
		public async Task<ProductModel[]> V1ProductsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Product
		/// This endpoint removes a Product identified by the `productId` parameter.
		/// V1Products_productIdDelete v1/products/{productId}
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task V1Products_productIdDeleteAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Product
		/// This endpoint returns the metadata of a Product
		/// identified by the `productId`.
		/// V1Products_productIdGet v1/products/{productId}
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		/// <returns>When everything is ok, the product data returned.</returns>
		public async Task<ProductModel> V1Products_productIdGetAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Product
		/// This endpoint updates a Product identified by the `productId` parameter.
		/// V1Products_productIdPut v1/products/{productId}
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task<ProductModel> V1Products_productIdPutAsync(string productId, UpdateProductRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Audit log items for Product
		/// This endpoint returns the list of Audit log items for a given Product
		/// and the result can be optionally filtered by Config and/or Environment.
		/// V1Products_productIdAuditlogsGetByConfigIdAndEnvironmentIdAndAuditLogTypeAndFromUtcDateTimeAndToUtcDateTime v1/products/{productId}/auditlogs
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		/// <param name="configId">The identifier of the Config.</param>
		/// <param name="environmentId">The identifier of the Environment.</param>
		/// <param name="auditLogType">Filter Audit logs by Audit log type.</param>
		/// <param name="fromUtcDateTime">Filter Audit logs by starting UTC date.</param>
		/// <param name="toUtcDateTime">Filter Audit logs by ending UTC date.</param>
		public async Task<AuditLogItemModel[]> V1Products_productIdAuditlogsGetByConfigIdAndEnvironmentIdAndAuditLogTypeAndFromUtcDateTimeAndToUtcDateTimeAsync(string productId, string configId, string environmentId, AuditLogItemModelAuditLogTypeEnum auditLogType, System.DateTimeOffset fromUtcDateTime, System.DateTimeOffset toUtcDateTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/auditlogs&configId=" + (configId==null? "" : System.Uri.EscapeDataString(configId))+"&environmentId=" + (environmentId==null? "" : System.Uri.EscapeDataString(environmentId))+"&auditLogType=" + auditLogType+"&fromUtcDateTime=" + fromUtcDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&toUtcDateTime=" + toUtcDateTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuditLogItemModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Configs
		/// This endpoint returns the list of the Configs that belongs to the given Product identified by the
		/// `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdConfigsGet v1/products/{productId}/configs
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task<ConfigModel[]> V1Products_productIdConfigsGetAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/configs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Config
		/// This endpoint creates a new Config in a specified Product
		/// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdConfigsPost v1/products/{productId}/configs
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task V1Products_productIdConfigsPostAsync(string productId, CreateConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/configs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Environments
		/// This endpoint returns the list of the Environments that belongs to the given Product identified by the
		/// `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdEnvironmentsGet v1/products/{productId}/environments
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task<EnvironmentModel[]> V1Products_productIdEnvironmentsGetAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/environments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnvironmentModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Environment
		/// This endpoint creates a new Environment in a specified Product
		/// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdEnvironmentsPost v1/products/{productId}/environments
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task V1Products_productIdEnvironmentsPostAsync(string productId, CreateEnvironmentModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/environments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Product Members
		/// This endpoint returns the list of Members that belongs
		/// to the given Product, identified by the `productId` parameter.
		/// V1Products_productIdMembersGet v1/products/{productId}/members
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task<MemberModel[]> V1Products_productIdMembersGetAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MemberModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite Member
		/// This endpoint invites a Member into the given Product identified by the `productId` parameter.
		/// V1Products_productIdMembersInvitePost v1/products/{productId}/members/invite
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		/// <returns>When the invite was successful.</returns>
		public async Task V1Products_productIdMembersInvitePostAsync(string productId, InviteMembersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/members/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Member from Product
		/// This endpoint removes a Member identified by the `userId` from the
		/// given Product identified by the `productId` parameter.
		/// V1Products_productIdMembers_userIdDelete v1/products/{productId}/members/{userId}
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		/// <param name="userId">The identifier of the Member.</param>
		public async Task V1Products_productIdMembers_userIdDeleteAsync(string productId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/members/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Permission Groups
		/// This endpoint returns the list of the Permission Groups that belongs to the given Product identified by the
		/// `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdPermissionsGet v1/products/{productId}/permissions
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task<PermissionGroupModel[]> V1Products_productIdPermissionsGetAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionGroupModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Permission Group
		/// This endpoint creates a new Permission Group in a specified Product
		/// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdPermissionsPost v1/products/{productId}/permissions
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task V1Products_productIdPermissionsPostAsync(string productId, CreatePermissionGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Segments
		/// This endpoint returns the list of the Segments that belongs to the given Product identified by the
		/// `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdSegmentsGet v1/products/{productId}/segments
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task<SegmentListModel[]> V1Products_productIdSegmentsGetAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/segments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SegmentListModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Segment
		/// This endpoint creates a new Segment in a specified Product
		/// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdSegmentsPost v1/products/{productId}/segments
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task V1Products_productIdSegmentsPostAsync(string productId, CreateSegmentModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/segments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Tags
		/// This endpoint returns the list of the Tags in a
		/// specified Product, identified by the `productId` parameter.
		/// V1Products_productIdTagsGet v1/products/{productId}/tags
		/// </summary>
		/// <param name="productId">The identifier of the Product.</param>
		public async Task<TagModel[]> V1Products_productIdTagsGetAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Tag
		/// This endpoint creates a new Tag in a specified Product
		/// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
		/// V1Products_productIdTagsPost v1/products/{productId}/tags
		/// </summary>
		/// <param name="productId">The identifier of the Organization.</param>
		public async Task V1Products_productIdTagsPostAsync(string productId, CreateTagModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Segment
		/// This endpoint removes a Segment identified by the `segmentId` parameter.
		/// V1Segments_segmentIdDelete v1/segments/{segmentId}
		/// </summary>
		/// <param name="segmentId">The identifier of the Segment.</param>
		public async Task V1Segments_segmentIdDeleteAsync(string segmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/segments/"+ (segmentId==null? "" : System.Uri.EscapeDataString(segmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Segment
		/// This endpoint returns the metadata of a Segment
		/// identified by the `segmentId`.
		/// V1Segments_segmentIdGet v1/segments/{segmentId}
		/// </summary>
		/// <param name="segmentId">The identifier of the Segment.</param>
		/// <returns>When everything is ok, the config data returned.</returns>
		public async Task<SegmentModel> V1Segments_segmentIdGetAsync(string segmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/segments/"+ (segmentId==null? "" : System.Uri.EscapeDataString(segmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SegmentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Segment
		/// This endpoint updates a Segment identified by the `segmentId` parameter.
		/// V1Segments_segmentIdPut v1/segments/{segmentId}
		/// </summary>
		/// <param name="segmentId">The identifier of the Segment.</param>
		public async Task<SegmentModel> V1Segments_segmentIdPutAsync(string segmentId, UpdateSegmentModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/segments/"+ (segmentId==null? "" : System.Uri.EscapeDataString(segmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SegmentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Flag
		/// This endpoint removes a Feature Flag or Setting from a specified Config,
		/// identified by the `configId` parameter.
		/// V1Settings_settingIdDelete v1/settings/{settingId}
		/// </summary>
		/// <param name="settingId">The identifier of the Setting.</param>
		public async Task V1Settings_settingIdDeleteAsync(int settingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+settingId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Flag
		/// This endpoint returns the metadata attributes of a Feature Flag or Setting
		/// identified by the `settingId` parameter.
		/// V1Settings_settingIdGet v1/settings/{settingId}
		/// </summary>
		/// <param name="settingId">The identifier of the Setting.</param>
		/// <returns>When everything is ok, the setting data returned.</returns>
		public async Task<SettingModel> V1Settings_settingIdGetAsync(int settingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+settingId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Flag
		/// This endpoint updates the metadata of a Feature Flag or Setting
		/// with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Config.
		/// 
		/// Only the `name`, `hint` and `tags` attributes are modifiable by this endpoint.
		/// The `tags` attribute is a simple collection of the [tag IDs](#operation/get-tags) attached to the given setting.
		/// 
		/// The advantage of using JSON Patch is that you can describe individual update operations on a resource
		/// without touching attributes that you don't want to change.
		/// 
		/// For example: We have the following resource.
		/// ```
		/// {
		/// "settingId": 5345,
		/// "key": "myGrandFeature",
		/// "name": "Tihs is a naem with soem typos.",
		/// "hint": "This flag controls my grandioso feature.",
		/// "settingType": "boolean",
		/// "tags": [
		/// {
		/// "tagId": 0,
		/// "name": "sample tag",
		/// "color": "whale"
		/// }
		/// ]
		/// }
		/// ```
		/// If we send an update request body as below (it changes the name and adds the already existing tag with the id 2):
		/// ```
		/// [
		/// {
		/// "op": "replace",
		/// "path": "/name",
		/// "value": "This is the name without typos."
		/// },
		/// {
		/// "op": "add",
		/// "path": "/tags/-",
		/// "value": 2
		/// }
		/// ]
		/// ```
		/// Only the `name` and `tags` are going to be updated and all the other attributes are remaining unchanged.
		/// So we get a response like this:
		/// ```
		/// {
		/// "settingId": 5345,
		/// "key": "myGrandFeature",
		/// "name": "This is the name without typos.",
		/// "hint": "This flag controls my grandioso feature.",
		/// "settingType": "boolean",
		/// "tags": [
		/// {
		/// "tagId": 0,
		/// "name": "sample tag",
		/// "color": "whale"
		/// },
		/// {
		/// "tagId": 2,
		/// "name": "another tag",
		/// "color": "koala"
		/// }
		/// ]
		/// }
		/// ```
		/// V1Settings_settingIdPatch v1/settings/{settingId}
		/// </summary>
		/// <param name="settingId">The identifier of the Setting.</param>
		/// <returns>When the update was successful.</returns>
		public async Task<SettingModel> V1Settings_settingIdPatchAsync(int settingId, JsonPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+settingId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get value
		/// This endpoint returns the value of a Feature Flag or Setting
		/// in a specified Environment identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.
		/// 
		/// The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
		/// The `value` represents what the clients will get when the evaluation requests of our SDKs
		/// are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
		/// 
		/// The `rolloutRules` and `percentageRules` attributes are representing the current
		/// Targeting and Percentage Rules configuration of the actual Feature Flag or Setting
		/// in an **ordered** collection, which means the order of the returned rules is matching to the
		/// evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
		/// V1Settings_settingKeyOrIdValueGet v1/settings/{settingKeyOrId}/value
		/// </summary>
		/// <param name="settingKeyOrId">The key or id of the Setting.</param>
		public async Task<SettingValueModel> V1Settings_settingKeyOrIdValueGetAsync(string settingKeyOrId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (settingKeyOrId==null? "" : System.Uri.EscapeDataString(settingKeyOrId))+"/value";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update value
		/// This endpoint updates the value of a Feature Flag or Setting
		/// with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment
		/// identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.
		/// 
		/// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
		/// 
		/// The advantage of using JSON Patch is that you can describe individual update operations on a resource
		/// without touching attributes that you don't want to change. It supports collection reordering, so it also
		/// can be used for reordering the targeting rules of a Feature Flag or Setting.
		/// 
		/// For example: We have the following resource.
		/// ```
		/// {
		/// "rolloutPercentageItems": [
		/// {
		/// "percentage": 30,
		/// "value": true
		/// },
		/// {
		/// "percentage": 70,
		/// "value": false
		/// }
		/// ],
		/// "rolloutRules": [],
		/// "value": false
		/// }
		/// ```
		/// If we send an update request body as below:
		/// ```
		/// [
		/// {
		/// "op": "replace",
		/// "path": "/value",
		/// "value": true
		/// }
		/// ]
		/// ```
		/// Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged.
		/// So we get a response like this:
		/// ```
		/// {
		/// "rolloutPercentageItems": [
		/// {
		/// "percentage": 30,
		/// "value": true
		/// },
		/// {
		/// "percentage": 70,
		/// "value": false
		/// }
		/// ],
		/// "rolloutRules": [],
		/// "value": true
		/// }
		/// ```
		/// V1Settings_settingKeyOrIdValuePatchByReason v1/settings/{settingKeyOrId}/value
		/// </summary>
		/// <param name="settingKeyOrId">The key or id of the Setting.</param>
		/// <param name="reason">The reason note for the Audit Log if the Product's "Config changes require a reason" preference is turned on.</param>
		public async Task<SettingValueModel> V1Settings_settingKeyOrIdValuePatchByReasonAsync(string settingKeyOrId, string reason, JsonPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (settingKeyOrId==null? "" : System.Uri.EscapeDataString(settingKeyOrId))+"/value&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace value
		/// This endpoint replaces the value of a Feature Flag or Setting
		/// in a specified Environment identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.
		/// 
		/// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
		/// 
		/// **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't
		/// want to change to its original state. Not listing one means that it will reset.
		/// 
		/// For example: We have the following resource.
		/// ```
		/// {
		/// "rolloutPercentageItems": [
		/// {
		/// "percentage": 30,
		/// "value": true
		/// },
		/// {
		/// "percentage": 70,
		/// "value": false
		/// }
		/// ],
		/// "rolloutRules": [],
		/// "value": false
		/// }
		/// ```
		/// If we send a replace request body as below:
		/// ```
		/// {
		/// "value": true
		/// }
		/// ```
		/// Then besides that the default served value is set to `true`, all the Percentage Rules are deleted.
		/// So we get a response like this:
		/// ```
		/// {
		/// "rolloutPercentageItems": [],
		/// "rolloutRules": [],
		/// "value": true
		/// }
		/// ```
		/// V1Settings_settingKeyOrIdValuePutByReason v1/settings/{settingKeyOrId}/value
		/// </summary>
		/// <param name="settingKeyOrId">The key or id of the Setting.</param>
		/// <param name="reason">The reason note for the Audit Log if the Product's "Config changes require a reason" preference is turned on.</param>
		public async Task<SettingValueModel> V1Settings_settingKeyOrIdValuePutByReasonAsync(string settingKeyOrId, string reason, UpdateSettingValueModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/settings/"+ (settingKeyOrId==null? "" : System.Uri.EscapeDataString(settingKeyOrId))+"/value&reason=" + (reason==null? "" : System.Uri.EscapeDataString(reason));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingValueModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Tag
		/// This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
		/// V1Tags_tagIdDelete v1/tags/{tagId}
		/// </summary>
		/// <param name="tagId">The identifier of the Tag.</param>
		public async Task V1Tags_tagIdDeleteAsync(long tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/"+tagId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Tag
		/// This endpoint returns the metadata of a Tag
		/// identified by the `tagId`.
		/// V1Tags_tagIdGet v1/tags/{tagId}
		/// </summary>
		/// <param name="tagId">The identifier of the Tag.</param>
		/// <returns>When everything is ok, the tag data returned.</returns>
		public async Task<TagModel> V1Tags_tagIdGetAsync(long tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/"+tagId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Tag
		/// This endpoint updates a Tag identified by the `tagId` parameter.
		/// V1Tags_tagIdPut v1/tags/{tagId}
		/// </summary>
		/// <param name="tagId">The identifier of the Tag.</param>
		public async Task<TagModel> V1Tags_tagIdPutAsync(long tagId, UpdateTagModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/"+tagId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Settings by Tag
		/// This endpoint returns the list of the Settings that
		/// has the specified Tag, identified by the `tagId` parameter.
		/// V1Tags_tagIdSettingsGet v1/tags/{tagId}/settings
		/// </summary>
		/// <param name="tagId">The identifier of the Tag.</param>
		/// <returns>When everything is ok, the settings data returned.</returns>
		public async Task<SettingModel[]> V1Tags_tagIdSettingsGetAsync(long tagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/tags/"+tagId+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SettingModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
