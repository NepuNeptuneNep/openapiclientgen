//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountryObject
	{
		
		/// <summary>
		/// Readable country name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryDisplayName")]
		public string CountryDisplayName { get; set; }
		
		/// <summary>
		/// Readable country name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryName")]
		public string CountryName { get; set; }
		
		/// <summary>
		/// The currency that your account is being billed in (by default `Euros—EUR`). Can change in the Dashboard to US Dollars—USD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The default price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPrice")]
		public string DefaultPrice { get; set; }
		
		/// <summary>
		/// The dialling prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialingPrefix")]
		public string DialingPrefix { get; set; }
		
		/// <summary>
		/// An array of network objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public NetworkObject[] Networks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkObject
	{
		
		/// <summary>
		/// The currency used for prices for this network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The [Mobile Country Code](https://en.wikipedia.org/wiki/Mobile_country_code) of the operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mcc")]
		public string Mcc { get; set; }
		
		/// <summary>
		/// The Mobile Network Code of the operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mnc")]
		public string Mnc { get; set; }
		
		/// <summary>
		/// The Mobile Country Code and Mobile Network Code combined to give a unique reference for the operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkCode")]
		public string NetworkCode { get; set; }
		
		/// <summary>
		/// The company/organisational name of the operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkName")]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// The cost to send a message or make a call to this network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		/// <summary>
		/// The type of network: mobile or landline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PricingCountriesResponse
	{
		
		/// <summary>
		/// The number of countries retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// A list of countries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public CountryObject[] Countries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PricingCountryResponse
	{
		
		/// <summary>
		/// Two letter country code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Readable country name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryDisplayName")]
		public string CountryDisplayName { get; set; }
		
		/// <summary>
		/// Readable country name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryName")]
		public string CountryName { get; set; }
		
		/// <summary>
		/// The currency that your account is being billed in (by default `Euros—EUR`). Can change in the Dashboard to US Dollars—USD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The default price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPrice")]
		public string DefaultPrice { get; set; }
		
		/// <summary>
		/// The dialling prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialingPrefix")]
		public string DialingPrefix { get; set; }
		
		/// <summary>
		/// An array of network objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public NetworkObject[] Networks { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve outbound pricing for all countries.
		/// Retrieves the pricing information for all countries.
		/// 
		/// RetrievePricingAllCountries get-full-pricing/outbound/{type}
		/// </summary>
		/// <param name="type">The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.</param>
		/// <param name="api_key">Your Nexmo API key.</param>
		/// <param name="api_secret">Your Nexmo API secret.</param>
		/// <returns>Pricing response</returns>
		public async Task<PricingCountriesResponse> RetrievePricingAllCountriesAsync(string type, string api_key, string api_secret, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-full-pricing/outbound/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&api_secret=" + (api_secret==null? "" : System.Uri.EscapeDataString(api_secret));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PricingCountriesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve outbound pricing for a specific dialing prefix.
		/// Retrieves the pricing information based on the dialing prefix.
		/// 
		/// RetrievePrefixPricing get-prefix-pricing/outbound/{type}
		/// </summary>
		/// <param name="type">The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.</param>
		/// <param name="api_key">Your Nexmo API key.</param>
		/// <param name="api_secret">Your Nexmo API secret.</param>
		/// <param name="prefix">The numerical dialing prefix to look up pricing for. Examples include 44, 1 and so on.</param>
		/// <returns>Pricing countries response</returns>
		public async Task<PricingCountriesResponse> RetrievePrefixPricingAsync(string type, string api_key, string api_secret, string prefix, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-prefix-pricing/outbound/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&api_secret=" + (api_secret==null? "" : System.Uri.EscapeDataString(api_secret))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PricingCountriesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieve outbound pricing for a specific country.
		/// Retrieves the pricing information based on the specified country.
		/// 
		/// RetrievePricingCountry get-pricing/outbound/{type}
		/// </summary>
		/// <param name="type">The type of service you wish to retrieve data about: either `sms`, `sms-transit` or `voice`.</param>
		/// <param name="api_key">Your Nexmo API key.</param>
		/// <param name="api_secret">Your Nexmo API secret.</param>
		/// <param name="country">A two letter [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). For example, `CA`.</param>
		/// <returns>Pricing information for a specific country.</returns>
		public async Task<PricingCountryResponse> RetrievePricingCountryAsync(string type, string api_key, string api_secret, string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-pricing/outbound/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&api_secret=" + (api_secret==null? "" : System.Uri.EscapeDataString(api_secret))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PricingCountryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
