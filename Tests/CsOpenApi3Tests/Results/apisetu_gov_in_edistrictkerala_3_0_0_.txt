//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcademicCertificateSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaCertificateData CertificateData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaIssuedBy IssuedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaIssuedTo IssuedTo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueDate")]
		public string IssueDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuedAt")]
		public string IssuedAt { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Language { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public int Number { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validFromDate")]
		public string ValidFromDate { get; set; }
	}
	
	public class AcademicCertificateSchemaCertificateData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaCertificateDataExamination Examination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaCertificateDataPerformance Performance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaCertificateDataSchool School { get; set; }
	}
	
	public class AcademicCertificateSchemaCertificateDataExamination
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="month")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Month { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Year { get; set; }
	}
	
	public class AcademicCertificateSchemaCertificateDataPerformance
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaCertificateDataPerformanceSubjects[] AcademicCertificateSchemaCertificateDataPerformanceSubjects { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cgpa")]
		public string Cgpa { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cgpaMax")]
		public string CgpaMax { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grade")]
		public string Grade { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksMax")]
		public string MarksMax { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksTotal")]
		public string MarksTotal { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Result { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultDate")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ResultDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateDate")]
		public string UpdateDate { get; set; }
	}
	
	public class AcademicCertificateSchemaCertificateDataPerformanceSubjects
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gp")]
		public string Gp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gpMax")]
		public string GpMax { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grade")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Grade { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksMax")]
		public int MarksMax { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksMaxPractical")]
		public int MarksMaxPractical { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksMaxTheory")]
		public int MarksMaxTheory { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksPractical")]
		public int MarksPractical { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksTheory")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public int MarksTheory { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="marksTotal")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public int MarksTotal { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	public class AcademicCertificateSchemaCertificateDataSchool
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
	}
	
	public class AcademicCertificateSchemaIssuedBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaIssuedByOrganization Organization { get; set; }
	}
	
	public class AcademicCertificateSchemaIssuedByOrganization
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaIssuedByOrganizationAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tin")]
		public string Tin { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class AcademicCertificateSchemaIssuedByOrganizationAddress
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="house")]
		public string House { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="landmark")]
		public string Landmark { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vtc")]
		public string Vtc { get; set; }
	}
	
	public class AcademicCertificateSchemaIssuedTo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaIssuedToPerson Person { get; set; }
	}
	
	public class AcademicCertificateSchemaIssuedToPerson
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaIssuedToPersonAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AcademicCertificateSchemaIssuedToPersonPhoto Photo { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disabilityStatus")]
		public string DisabilityStatus { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dob")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Dob { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maritalStatus")]
		public string MaritalStatus { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="motherName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string MotherName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="religion")]
		public string Religion { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="swd")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Swd { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="swdIndicator")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string SwdIndicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class AcademicCertificateSchemaIssuedToPersonAddress
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="house")]
		public string House { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="landmark")]
		public string Landmark { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vtc")]
		public string Vtc { get; set; }
	}
	
	public class AcademicCertificateSchemaIssuedToPersonPhoto
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CasteCertificateSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaCertificateData CertificateData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaIssuedBy IssuedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaIssuedTo IssuedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public string ExpiryDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueDate")]
		public string IssueDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuedAt")]
		public string IssuedAt { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Language { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public int Number { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validFromDate")]
		public string ValidFromDate { get; set; }
	}
	
	public class CasteCertificateSchemaCertificateData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public CasteCertificateSchemaCertificateDataCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CasteCertificateSchemaCertificateDataCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SC")]
		SC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ST")]
		ST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OBC")]
		OBC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GC")]
		GC = 3,
	}
	
	public class CasteCertificateSchemaIssuedBy
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaIssuedByOrganization Organization { get; set; }
	}
	
	public class CasteCertificateSchemaIssuedByOrganization
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaIssuedByOrganizationAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tin")]
		public string Tin { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CasteCertificateSchemaIssuedByOrganizationAddress
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="house")]
		public string House { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="landmark")]
		public string Landmark { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vtc")]
		public string Vtc { get; set; }
	}
	
	public class CasteCertificateSchemaIssuedTo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaIssuedToPerson Person { get; set; }
	}
	
	public class CasteCertificateSchemaIssuedToPerson
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaIssuedToPersonAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CasteCertificateSchemaIssuedToPersonPhoto Photo { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dob")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Dob { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maritalStatus")]
		public string MaritalStatus { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="religion")]
		public string Religion { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="swd")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Swd { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="swdIndicator")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string SwdIndicator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CasteCertificateSchemaIssuedToPersonAddress
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="house")]
		public string House { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="landmark")]
		public string Landmark { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pin")]
		public string Pin { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vtc")]
		public string Vtc { get; set; }
	}
	
	public class CasteCertificateSchemaIssuedToPersonPhoto
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsentArtifactSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consent")]
		public ConsentArtifactSchemaConsent Consent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public ConsentArtifactSchemaSignature Signature { get; set; }
	}
	
	public class ConsentArtifactSchemaConsent
	{
		
		/// <summary>
		/// A unique consent id in UUID format.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ConsentArtifactSchemaConsentData Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataConsumer")]
		public ConsentArtifactSchemaConsentDataConsumer DataConsumer { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataProvider")]
		public ConsentArtifactSchemaConsentDataProvider DataProvider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public ConsentArtifactSchemaConsentPermission Permission { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public ConsentArtifactSchemaConsentPurpose Purpose { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ConsentArtifactSchemaConsentUser User { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentData
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Id { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentDataConsumer
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Id { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentDataProvider
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Id { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentPermission
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Access { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public ConsentArtifactSchemaConsentPermissionDateRange DateRange { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public ConsentArtifactSchemaConsentPermissionFrequency Frequency { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentPermissionDateRange
	{
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public System.DateTimeOffset From { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public System.DateTimeOffset To { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentPermissionFrequency
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public double Repeats { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Unit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public double Value { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentPurpose
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Description { get; set; }
	}
	
	public class ConsentArtifactSchemaConsentUser
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string IdNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="idType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string IdType { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mobile")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Mobile { get; set; }
	}
	
	public class ConsentArtifactSchemaSignature
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Community Certificate
		/// API to verify Community Certificate.
		/// Cmcer cmcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task CmcerAsync(CmcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cmcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Conversion Certificate
		/// API to verify Conversion Certificate.
		/// Cncer cncer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task CncerAsync(CncerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cncer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Caste Certificate
		/// API to verify Caste Certificate.
		/// Ctcer ctcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task CtcerAsync(CtcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ctcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Domicile Certificate
		/// API to verify Domicile Certificate.
		/// Dmcer dmcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task DmcerAsync(DmcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dmcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Dependency Certificate
		/// API to verify Dependency Certificate.
		/// Dpcer dpcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task DpcerAsync(DpcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dpcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Destitute Certificate
		/// API to verify Destitute Certificate.
		/// Dscer dscer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task DscerAsync(DscerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dscer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Family Membership Certificate
		/// API to verify Family Membership Certificate.
		/// Fmcer fmcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task FmcerAsync(FmcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fmcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Identification Certificate
		/// API to verify Identification Certificate.
		/// Idcer idcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task IdcerAsync(IdcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "idcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inter-Caste Marriage Certificate
		/// API to verify Inter-Caste Marriage Certificate.
		/// Imcer imcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task ImcerAsync(ImcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "imcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Income Certificate
		/// API to verify Income Certificate.
		/// Incer incer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task IncerAsync(IncerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "incer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Life Certificate
		/// API to verify Life Certificate.
		/// Lfcer lfcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task LfcerAsync(LfcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lfcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Legal Heir Certificate
		/// API to verify Legal Heir Certificate.
		/// Lhcer lhcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task LhcerAsync(LhcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lhcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Location Certificate
		/// API to verify Location Certificate.
		/// Locer locer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task LocerAsync(LocerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "locer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Minority Certificate
		/// API to verify Minority Certificate.
		/// Mncer mncer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task MncerAsync(MncerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mncer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Non-Remarriage Certificate
		/// API to verify Non-Remarriage Certificate.
		/// Nrcer nrcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task NrcerAsync(NrcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nrcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Nativity Certificate
		/// API to verify Nativity Certificate.
		/// Ntcer ntcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task NtcerAsync(NtcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ntcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// One and the Same Certificate
		/// API to verify One and the Same Certificate.
		/// Oscer oscer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task OscerAsync(OscerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oscer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Possession and Non-Attachment Certificate
		/// API to verify Possession and Non-Attachment Certificate.
		/// Pncer pncer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task PncerAsync(PncerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pncer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Possession Certificate
		/// API to verify Possession Certificate.
		/// Pscer pscer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task PscerAsync(PscerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pscer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Relationship Certificate
		/// API to verify Relationship Certificate.
		/// Rlcer rlcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task RlcerAsync(RlcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rlcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Residence Certificate
		/// API to verify Residence Certificate.
		/// Rscer rscer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task RscerAsync(RscerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rscer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Solvency Certificate
		/// API to verify Solvency Certificate.
		/// Slcer slcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task SlcerAsync(SlcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "slcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Valuation Certificate
		/// API to verify Valuation Certificate.
		/// Vlcer vlcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task VlcerAsync(VlcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vlcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Widow-Widower Certificate
		/// API to verify Widow-Widower Certificate.
		/// Wwcer wwcer/certificate
		/// </summary>
		/// <param name="requestBody">Request format</param>
		/// <returns>The certificate data in response body in PDF, XML or JSON format as requested in format parameter.</returns>
		public async Task WwcerAsync(WwcerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wwcer/certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CmcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public CmcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class CmcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CmcerPostBodyFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pdf")]
		pdf = 0,
	}
	
	public class CncerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public CncerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class CncerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class CtcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public CtcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class CtcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class DmcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public DmcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class DmcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class DpcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public DpcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class DpcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class DscerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public DscerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class DscerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class FmcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public FmcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class FmcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class IdcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public IdcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class IdcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class ImcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public ImcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class ImcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class IncerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public IncerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class IncerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class LfcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public LfcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class LfcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class LhcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public LhcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class LhcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class LocerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public LocerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class LocerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class MncerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public MncerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class MncerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class NrcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public NrcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class NrcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class NtcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public NtcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class NtcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class OscerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public OscerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class OscerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class PncerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public PncerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class PncerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class PscerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public PscerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class PscerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class RlcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public RlcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class RlcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class RscerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public RscerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class RscerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class SlcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public SlcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class SlcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class VlcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public VlcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class VlcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
	
	public class WwcerPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateParameters")]
		public WwcerPostBodyCertificateParameters CertificateParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentArtifact")]
		public ConsentArtifactSchema ConsentArtifact { get; set; }
		
		/// <summary>
		/// The format of the certificate in response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CmcerPostBodyFormat Format { get; set; }
		
		/// <summary>
		/// A unique transaction id for this request in UUID format. It is used for tracking the request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="txnId")]
		public string TxnId { get; set; }
	}
	
	public class WwcerPostBodyCertificateParameters
	{
		
		/// <summary>
		/// Application Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aplno")]
		public string Aplno { get; set; }
		
		/// <summary>
		/// Certificate Number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certno")]
		public string Certno { get; set; }
		
		/// <summary>
		/// Security Code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sccd")]
		public string Sccd { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
