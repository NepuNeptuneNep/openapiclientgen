//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthFailed
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public AuthFailedErrors[] AuthFailedErrors { get; set; }
	}
	
	public class AuthFailedErrors
	{
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImprovementProgramJson
	{
		
		/// <summary>
		/// Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_file_b64")]
		public string Image_file_b64 { get; set; }
		
		/// <summary>
		/// Filename of the image, if not provided it will be autodetected form the submitted data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_filename")]
		public string Image_filename { get; set; }
		
		/// <summary>
		/// Source image URL. (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Images with the same tag are grouped together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImprovementProgramJsonResponse
	{
		
		/// <summary>
		/// ID of the submitted image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImprovementProgramMultipart
	{
		
		/// <summary>
		/// Source image file (binary). (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_file")]
		public string Image_file { get; set; }
		
		/// <summary>
		/// Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_file_b64")]
		public string Image_file_b64 { get; set; }
		
		/// <summary>
		/// Filename of the image, if not provided it will be autodetected form the submitted data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_filename")]
		public string Image_filename { get; set; }
		
		/// <summary>
		/// Source image URL. (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Images with the same tag are grouped together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RateLimit
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public RateLimitErrors[] RateLimitErrors { get; set; }
	}
	
	public class RateLimitErrors
	{
		
		/// <summary>
		/// Error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveBgJson
	{
		
		/// <summary>
		/// Whether to add an artificial shadow to the result (default: false). NOTE: Adding shadows is currently only supported for car photos. Other subjects are returned without shadow, even if set to true (this might change in the future).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="add_shadow")]
		public System.Nullable<System.Boolean> Add_shadow { get; set; }
		
		/// <summary>
		/// Adds a solid color background. Can be a hex color code (e.g. 81d4fa, fff) or a color name (e.g. green). For semi-transparency, 4-/8-digit hex codes are also supported (e.g. 81d4fa77). (If this parameter is present, the other bg_ parameters must be empty.)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bg_color")]
		public string Bg_color { get; set; }
		
		/// <summary>
		/// Adds a background image from a URL. The image is centered and resized to fill the canvas while preserving the aspect ratio, unless it already has the exact same dimensions as the foreground image. (If this parameter is present, the other bg_ parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bg_image_url")]
		public string Bg_image_url { get; set; }
		
		/// <summary>
		/// Request either the finalized image ("rgba", default) or an alpha mask ("alpha"). Note: Since remove.bg also applies RGB color corrections on edges, using only the alpha mask often leads to a lower final image quality. Therefore "rgba" is recommended.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public System.Nullable<RemoveBgJsonChannels> Channels { get; set; }
		
		/// <summary>
		/// Whether to crop off all empty regions (default: false). Note that cropping has no effect on the amount of charged credits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crop")]
		public System.Nullable<System.Boolean> Crop { get; set; }
		
		/// <summary>
		/// Adds a margin around the cropped subject (default: 0). Can be an absolute value (e.g. "30px") or relative to the subject size (e.g. "10%"). Can be a single value (all sides), two values (top/bottom and left/right) or four values (top, right, bottom, left). This parameter only has an effect when "crop=true". The maximum margin that can be added on each side is 50% of the subject dimensions or 500 pixels.
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("0")]
		[System.Runtime.Serialization.DataMember(Name="crop_margin")]
		public string Crop_margin { get; set; } = "0";
		
		/// <summary>
		/// Result image format:
		///"auto" = Use PNG format if transparent regions exist, otherwise use JPG format (default),
		///"png" = PNG format with alpha transparency,
		///"jpg" = JPG format, no transparency,
		///"zip" = ZIP format, contains color image and alpha matte image, supports transparency (recommended).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<RemoveBgJsonFormat> Format { get; set; }
		
		/// <summary>
		/// Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_file_b64")]
		public string Image_file_b64 { get; set; }
		
		/// <summary>
		/// Source image URL. (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Positions the subject within the image canvas. Can be "original" (default unless "scale" is given), "center" (default when "scale" is given) or a value from "0%" to "100%" (both horizontal and vertical) or two values (horizontal, vertical).
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("original")]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; } = "original";
		
		/// <summary>
		/// Region of interest: Only contents of this rectangular region can be detected as foreground. Everything outside is considered background and will be removed. The rectangle is defined as two x/y coordinates in the format "x1 y1 x2 y2". The coordinates can be in absolute pixels (suffix 'px') or relative to the width/height of the image (suffix '%'). By default, the whole image is the region of interest ("0% 0% 100% 100%").
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("0% 0% 100% 100%")]
		[System.Runtime.Serialization.DataMember(Name="roi")]
		public string Roi { get; set; } = "0% 0% 100% 100%";
		
		/// <summary>
		/// Scales the subject relative to the total image size. Can be any value from "10%" to "100%", or "original" (default). Scaling the subject implies "position=center" (unless specified otherwise).
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("original")]
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public string Scale { get; set; } = "original";
		
		/// <summary>
		/// Whether to have semi-transparent regions in the result (default: true). NOTE: Semitransparency is currently only supported for car windows (this might change in the future). Other objects are returned without semitransparency, even if set to true.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="semitransparency")]
		public System.Nullable<System.Boolean> Semitransparency { get; set; }
		
		/// <summary>
		/// Maximum output image resolution:
		///"preview" (default) = Resize image to 0.25 megapixels (e.g. 625×400 pixels) – 0.25 credits per image,
		///"full" = Use original image resolution, up to 25 megapixels (e.g. 6250x4000) with formats ZIP or JPG, or up to 10 megapixels (e.g. 4000x2500) with PNG – 1 credit per image),
		///"auto" = Use highest available resolution (based on image size and available credits).
		///
		///For backwards-compatibility this parameter also accepts the values "medium" (up to 1.5 megapixels) and "hd" (up to 4 megapixels) for 1 credit per image. The value "full" is also available under the name "4k" and the value "preview" is aliased as "small" and "regular".
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<RemoveBgJsonSize> Size { get; set; }
		
		/// <summary>
		/// Foreground type:
		///"auto" = Automatically detect kind of foreground,
		///"person" = Use person(s) as foreground,
		///"product" = Use product(s) as foreground.
		///"car" = Use car as foreground,
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RemoveBgJsonType> Type { get; set; }
		
		/// <summary>
		/// Classification level of the detected foreground type:
		///"none" = No classification (X-Type Header won't bet set on the response)
		///"1" = Use coarse classification classes: [person, product, animal, car, other]
		///"2" = Use more specific classification classes: [person, product, animal, car, car_interior, car_part, transportation, graphics, other]
		///"latest" = Always use the latest classification classes available
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_level")]
		public System.Nullable<RemoveBgJsonType_level> Type_level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemoveBgJsonChannels
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rgba = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alpha = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemoveBgJsonFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		png = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jpg = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zip = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemoveBgJsonSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preview = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		auto = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemoveBgJsonType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		person = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		product = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		car = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemoveBgJsonType_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		latest = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveBgJsonResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RemoveBgJsonResponseData Data { get; set; }
	}
	
	public class RemoveBgJsonResponseData
	{
		
		/// <summary>
		/// Height of the foreground image. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreground_height")]
		public System.Nullable<System.Int32> Foreground_height { get; set; }
		
		/// <summary>
		/// Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreground_left")]
		public System.Nullable<System.Int32> Foreground_left { get; set; }
		
		/// <summary>
		/// Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreground_top")]
		public System.Nullable<System.Int32> Foreground_top { get; set; }
		
		/// <summary>
		/// Width of the foreground image. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreground_width")]
		public System.Nullable<System.Int32> Foreground_width { get; set; }
		
		/// <summary>
		/// Base64 encoded string of result image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_b64")]
		public string Result_b64 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveBgMultipart
	{
		
		/// <summary>
		/// Whether to add an artificial shadow to the result (default: false). NOTE: Adding shadows is currently only supported for car photos. Other subjects are returned without shadow, even if set to true (this might change in the future).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="add_shadow")]
		public System.Nullable<System.Boolean> Add_shadow { get; set; }
		
		/// <summary>
		/// Adds a solid color background. Can be a hex color code (e.g. 81d4fa, fff) or a color name (e.g. green). For semi-transparency, 4-/8-digit hex codes are also supported (e.g. 81d4fa77). (If this parameter is present, the other bg_ parameters must be empty.)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bg_color")]
		public string Bg_color { get; set; }
		
		/// <summary>
		/// Adds a background image from a file (binary). The image is centered and resized to fill the canvas while preserving the aspect ratio, unless it already has the exact same dimensions as the foreground image. (If this parameter is present, the other bg_ parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bg_image_file")]
		public string Bg_image_file { get; set; }
		
		/// <summary>
		/// Adds a background image from a URL. The image is centered and resized to fill the canvas while preserving the aspect ratio, unless it already has the exact same dimensions as the foreground image. (If this parameter is present, the other bg_ parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bg_image_url")]
		public string Bg_image_url { get; set; }
		
		/// <summary>
		/// Request either the finalized image ("rgba", default) or an alpha mask ("alpha"). Note: Since remove.bg also applies RGB color corrections on edges, using only the alpha mask often leads to a lower final image quality. Therefore "rgba" is recommended.
		///
		/// </summary>
		[System.ComponentModel.DefaultValue(RemoveBgJsonChannels.rgba)]
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public RemoveBgJsonChannels Channels { get; set; } = RemoveBgJsonChannels.rgba;
		
		/// <summary>
		/// Whether to crop off all empty regions (default: false). Note that cropping has no effect on the amount of charged credits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crop")]
		public System.Nullable<System.Boolean> Crop { get; set; }
		
		/// <summary>
		/// Adds a margin around the cropped subject (default: 0). Can be an absolute value (e.g. "30px") or relative to the subject size (e.g. "10%"). Can be a single value (all sides), two values (top/bottom and left/right) or four values (top, right, bottom, left). This parameter only has an effect when "crop=true". The maximum margin that can be added on each side is 50% of the subject dimensions or 500 pixels.
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("0")]
		[System.Runtime.Serialization.DataMember(Name="crop_margin")]
		public string Crop_margin { get; set; } = "0";
		
		/// <summary>
		/// Result image format:
		///"auto" = Use PNG format if transparent regions exist, otherwise use JPG format (default),
		///"png" = PNG format with alpha transparency,
		///"jpg" = JPG format, no transparency,
		///"zip" = ZIP format, contains color image and alpha matte image, supports transparency (recommended).
		///
		/// </summary>
		[System.ComponentModel.DefaultValue(RemoveBgJsonFormat.auto)]
		[System.Runtime.Serialization.DataMember(Name="format")]
		public RemoveBgJsonFormat Format { get; set; } = RemoveBgJsonFormat.auto;
		
		/// <summary>
		/// Source image file (binary). (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_file")]
		public string Image_file { get; set; }
		
		/// <summary>
		/// Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_file_b64")]
		public string Image_file_b64 { get; set; }
		
		/// <summary>
		/// Source image URL. (If this parameter is present, the other image source parameters must be empty.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Positions the subject within the image canvas. Can be "original" (default unless "scale" is given), "center" (default when "scale" is given) or a value from "0%" to "100%" (both horizontal and vertical) or two values (horizontal, vertical).
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("original")]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; } = "original";
		
		/// <summary>
		/// Region of interest: Only contents of this rectangular region can be detected as foreground. Everything outside is considered background and will be removed. The rectangle is defined as two x/y coordinates in the format "x1 y1 x2 y2". The coordinates can be in absolute pixels (suffix 'px') or relative to the width/height of the image (suffix '%'). By default, the whole image is the region of interest ("0% 0% 100% 100%").
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("0% 0% 100% 100%")]
		[System.Runtime.Serialization.DataMember(Name="roi")]
		public string Roi { get; set; } = "0% 0% 100% 100%";
		
		/// <summary>
		/// Scales the subject relative to the total image size. Can be any value from "10%" to "100%", or "original" (default). Scaling the subject implies "position=center" (unless specified otherwise).
		///
		/// </summary>
		[System.ComponentModel.DefaultValue("original")]
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public string Scale { get; set; } = "original";
		
		/// <summary>
		/// Whether to have semi-transparent regions in the result (default: true). NOTE: Semitransparency is currently only supported for car windows (this might change in the future). Other objects are returned without semitransparency, even if set to true.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="semitransparency")]
		public System.Nullable<System.Boolean> Semitransparency { get; set; }
		
		/// <summary>
		/// Maximum output image resolution:
		///"preview" (default) = Resize image to 0.25 megapixels (e.g. 625×400 pixels) – 0.25 credits per image,
		///"full" = Use original image resolution, up to 25 megapixels (e.g. 6250x4000) with formats ZIP or JPG, or up to 10 megapixels (e.g. 4000x2500) with PNG – 1 credit per image),
		///"auto" = Use highest available resolution (based on image size and available credits).
		///
		///For backwards-compatibility this parameter also accepts the values "medium" (up to 1.5 megapixels) and "hd" (up to 4 megapixels) for 1 credit per image. The value "full" is also available under the name "4k" and the value "preview" is aliased as "small" and "regular".
		///
		/// </summary>
		[System.ComponentModel.DefaultValue(RemoveBgJsonSize.preview)]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public RemoveBgJsonSize Size { get; set; } = RemoveBgJsonSize.preview;
		
		/// <summary>
		/// Foreground type:
		///"auto" = Automatically detect kind of foreground,
		///"person" = Use person(s) as foreground,
		///"product" = Use product(s) as foreground.
		///"car" = Use car as foreground,
		///
		/// </summary>
		[System.ComponentModel.DefaultValue(RemoveBgJsonType.auto)]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public RemoveBgJsonType Type { get; set; } = RemoveBgJsonType.auto;
		
		/// <summary>
		/// Classification level of the detected foreground type:
		///"none" = No classification (X-Type Header won't bet set on the response)
		///"1" = Use coarse classification classes: [person, product, animal, car, other]
		///"2" = Use more specific classification classes: [person, product, animal, car, car_interior, car_part, transportation, graphics, other]
		///"latest" = Always use the latest classification classes available
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type_level")]
		public System.Nullable<RemoveBgMultipartType_level> Type_level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemoveBgMultipartType_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		latest = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fetch credit balance and free API calls.
		/// Get the current credit balance and number of free API calls.
		/// 
		/// Notes:
		/// 
		/// * Balance changes may be delayed by several seconds. To locally keep track of your credit balance, you should therefore only call this endpoint initially (or e.g. when the user manually triggers a refresh), then use the `X-Credits-Charged` response header returned with each image processing response to adjust the local balance.
		/// 
		/// * The "*sizes*" field is always "all", is deprecated and will soon be removed.
		/// 
		/// Fetch_account_infoGet account
		/// </summary>
		public async Task Fetch_account_infoGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit an image to the remove.bg Improvement program
		/// * Contribute an image that remove.bg is currently not able to remove the background from properly
		/// * Help us make remove.bg better
		/// * Get better results for similiar images in the future
		/// 
		/// Notes:
		/// * By submitting images through the API you agree to the <a target="_blank" rel="noopener" href="/ipc">Improvement Program Conditions</a>
		/// * File size: up to 12MB
		/// * up to 100 files per day. <br> Higher Rate Limits are available for Enterprise customers <a href="/support/contact?subject=Improvement+Program+Rate+Limit">upon request</a>.
		/// 
		/// Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
		/// 
		/// Please note that submissions are used on a best-effort basis and the extent of expected improvement varies depending on many factors, including the number of provided images, their complexity and visual similarity. Improvements usually take several weeks to become effective.
		/// 
		/// Improvement_ProgramPost improve
		/// </summary>
		/// <returns>Image submitted</returns>
		public async Task Improvement_ProgramPostAsync(ImprovementProgramJson requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "improve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove the background of an image
		/// Removes the background of a JPG/PNG image.
		/// 
		/// * File size: up to 12 MB
		/// * Image source: File upload (binary or as base64 encoded string) or download from URL
		/// * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
		/// * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)
		/// 
		/// Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
		/// 
		/// Background_RemovalPost removebg
		/// </summary>
		/// <returns>Image background removed</returns>
		public async Task<RemoveBgJsonResponse> Background_RemovalPostAsync(RemoveBgJson requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "removebg";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RemoveBgJsonResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
