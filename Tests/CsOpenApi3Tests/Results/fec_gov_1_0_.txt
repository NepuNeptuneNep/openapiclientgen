//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCandidateSearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCandidateSearchList
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditCandidateSearch[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCase
	{
		
		[System.Runtime.Serialization.DataMember(Name="audit_case_id")]
		public string Audit_case_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audit_id")]
		public System.Nullable<System.Int32> Audit_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_description")]
		public string Committee_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_designation")]
		public string Committee_designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="far_release_date")]
		public System.Nullable<System.DateOnly> Far_release_date { get; set; }
		
		/// <summary>
		/// 
		///URL for retrieving the PDF document
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link_to_report")]
		public string Link_to_report { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_category_list")]
		public AuditCaseCategoryRelation[] Primary_category_list { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCaseCategoryRelation
	{
		
		[System.Runtime.Serialization.DataMember(Name="primary_category_id")]
		public string Primary_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_category_name")]
		public string Primary_category_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_category_list")]
		public AuditCaseSubCategory[] Sub_category_list { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCaseSubCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="sub_category_id")]
		public string Sub_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_category_name")]
		public string Sub_category_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCaseCategoryRelationPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditCaseCategoryRelation[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OffsetInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCasePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditCase[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCaseSubCategoryPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditCaseSubCategory[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="primary_category_id")]
		public string Primary_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_category_name")]
		public string Primary_category_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_category_list")]
		public AuditCategoryRelation[] Sub_category_list { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCategoryRelation
	{
		
		[System.Runtime.Serialization.DataMember(Name="sub_category_id")]
		public string Sub_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_category_name")]
		public string Sub_category_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCategoryPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditCategory[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCategoryRelationPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditCategoryRelation[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCommitteeSearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditCommitteeSearchList
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditCommitteeSearch[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditPrimaryCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="primary_category_id")]
		public string Primary_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_category_name")]
		public string Primary_category_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuditPrimaryCategoryPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AuditPrimaryCategory[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseF3Filing
	{
		
		[System.Runtime.Serialization.DataMember(Name="amended_address")]
		public string Amended_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amended_by")]
		public System.Nullable<System.Int32> Amended_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment")]
		public string Amendment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public int[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_first_name")]
		public string Candidate_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_middle_name")]
		public string Candidate_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_prefix")]
		public string Candidate_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_suffix")]
		public string Candidate_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Int32> Cash_on_hand_beginning_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateOnly> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public System.Nullable<System.Int32> District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_date")]
		public System.Nullable<System.DateOnly> Election_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_state")]
		public string Election_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="f3z1")]
		public System.Nullable<System.Int32> F3z1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="general_election")]
		public string General_election { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_filing")]
		public System.Nullable<System.Int32> Most_recent_filing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_election")]
		public string Primary_election { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public string Report { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		/// <summary>
		/// Election type 
		///Convention, Primary,
		///General, Special,
		///Runoff etc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rpt_pgi")]
		public string Rpt_pgi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runoff_election")]
		public string Runoff_election { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sign_date")]
		public System.Nullable<System.DateOnly> Sign_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="special_election")]
		public string Special_election { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_1")]
		public string Street_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_2")]
		public string Street_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary_lines")]
		public string Summary_lines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_first_name")]
		public string Treasurer_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_last_name")]
		public string Treasurer_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_middle_name")]
		public string Treasurer_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		public string Treasurer_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseF3FilingPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public BaseF3Filing[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseF3PFiling
	{
		
		[System.Runtime.Serialization.DataMember(Name="amended_by")]
		public System.Nullable<System.Int32> Amended_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment")]
		public string Amendment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public int[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Single> Cash_on_hand_beginning_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Single> Cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateOnly> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Single> Debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debts_owed_to_committee")]
		public System.Nullable<System.Single> Debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_date")]
		public System.Nullable<System.DateOnly> Election_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_state")]
		public string Election_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_subject_to_limits")]
		public System.Nullable<System.Single> Expenditure_subject_to_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="general_election")]
		public string General_election { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_filing")]
		public System.Nullable<System.Int32> Most_recent_filing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_cycle_to_date")]
		public System.Nullable<System.Single> Net_contributions_cycle_to_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_cycle_to_date")]
		public System.Nullable<System.Single> Net_operating_expenditures_cycle_to_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_election")]
		public string Primary_election { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public string Report { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		/// <summary>
		/// Election type 
		///Convention, Primary,
		///General, Special,
		///Runoff etc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rpt_pgi")]
		public string Rpt_pgi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sign_date")]
		public System.Nullable<System.DateOnly> Sign_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_1")]
		public string Street_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_2")]
		public string Street_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_summary_period")]
		public string Subtotal_summary_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary_lines")]
		public string Summary_lines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_first_name")]
		public string Treasurer_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_last_name")]
		public string Treasurer_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_middle_name")]
		public string Treasurer_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		public string Treasurer_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseF3PFilingPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public BaseF3PFiling[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseF3XFiling
	{
		
		[System.Runtime.Serialization.DataMember(Name="amend_address")]
		public string Amend_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amended_by")]
		public System.Nullable<System.Int32> Amended_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment")]
		public string Amendment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public int[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateOnly> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_date")]
		public System.Nullable<System.DateOnly> Election_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_state")]
		public string Election_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_filing")]
		public System.Nullable<System.Int32> Most_recent_filing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="qualified_multicandidate_committee")]
		public string Qualified_multicandidate_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report")]
		public string Report { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		/// <summary>
		/// Election type 
		///Convention, Primary,
		///General, Special,
		///Runoff etc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rpt_pgi")]
		public string Rpt_pgi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sign_date")]
		public System.Nullable<System.DateOnly> Sign_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_1")]
		public string Street_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_2")]
		public string Street_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary_lines")]
		public string Summary_lines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseF3XFilingPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public BaseF3XFiling[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CCTotalsByCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support_oppose_indicator")]
		public string Support_oppose_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CCTotalsByCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CCTotalsByCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarDate
	{
		
		[System.Runtime.Serialization.DataMember(Name="all_day")]
		public System.Nullable<System.Boolean> All_day { get; set; }
		
		/// <summary>
		/// 
		///Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		///Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		///Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		///Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendar_category_id")]
		public System.Nullable<System.Int32> Calendar_category_id { get; set; }
		
		/// <summary>
		/// 
		///Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		///Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		///Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		///Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_id")]
		public System.Nullable<System.Int32> Event_id { get; set; }
		
		/// <summary>
		/// 
		///Can be state address or room.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// The state field only applies to election dates and reporting deadlines, reporting periods and all other dates do not have the array of states to filter on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string[] State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// 
		///A url for that event
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CalendarDatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CalendarDate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Candidate
	{
		
		/// <summary>
		/// Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active_through")]
		public System.Nullable<System.Int32> Active_through { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		///  Candidates who are actively seeking office. If no value is specified, all candidates
		///are returned. When True is specified, only active candidates are returned. When False is
		///specified, only inactive candidates are returned.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_inactive")]
		public System.Nullable<System.Boolean> Candidate_inactive { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_status")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Candidate_status { get; set; }
		
		/// <summary>
		/// 
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string District { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district_number")]
		public System.Nullable<System.Int32> District_number { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_districts")]
		public string[] Election_districts { get; set; }
		
		/// <summary>
		/// Years in which a candidate ran for office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_years")]
		public int[] Election_years { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds_flag")]
		public System.Nullable<System.Boolean> Federal_funds_flag { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's first filing. This is a F2 candidate registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_raised_funds")]
		public System.Nullable<System.Boolean> Has_raised_funds { get; set; }
		
		/// <summary>
		/// inactive years
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inactive_election_years")]
		public int[] Inactive_election_years { get; set; }
		
		/// <summary>
		/// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Incumbent_challenge { get; set; }
		
		/// <summary>
		/// Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Incumbent_challenge_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent Form 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f2_date")]
		public System.Nullable<System.DateOnly> Last_f2_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="load_date")]
		public System.Nullable<System.DateTimeOffset> Load_date { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Office { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: House, Senate or presidential
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Office_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal_committees")]
		public CandidatePrincipal_committees[] CandidatePrincipal_committees { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
	}
	
	public class CandidatePrincipal_committees
	{
		
		/// <summary>
		/// 
		///Affiliated committee or connected organization
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliated_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Affiliated_committee_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_ids")]
		public string[] Candidate_ids { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Committee_type_full { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Designation_full { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f1_date")]
		public System.Nullable<System.DateOnly> Last_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Party_full { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateCommitteeTotalsHouseSenate
	{
		
		[System.Runtime.Serialization.DataMember(Name="all_other_loans")]
		public System.Nullable<System.Double> All_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution")]
		public System.Nullable<System.Double> Candidate_contribution { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_election_year")]
		public int Candidate_election_year { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_refunds")]
		public System.Nullable<System.Double> Contribution_refunds { get; set; }
		
		/// <summary>
		/// Contribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributions")]
		public System.Nullable<System.Double> Contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="election_full")]
		public bool Election_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds")]
		public System.Nullable<System.Double> Federal_funds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements")]
		public System.Nullable<System.Double> Fundraising_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions")]
		public System.Nullable<System.Double> Individual_contributions { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions")]
		public System.Nullable<System.Double> Individual_unitemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_beginning_image_number")]
		public string Last_beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Last_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_by_committee")]
		public System.Nullable<System.Double> Last_debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_to_committee")]
		public System.Nullable<System.Double> Last_debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_net_contributions")]
		public System.Nullable<System.Double> Last_net_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_net_operating_expenditures")]
		public System.Nullable<System.Double> Last_net_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_type_full")]
		public string Last_report_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_year")]
		public System.Nullable<System.Int32> Last_report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments")]
		public System.Nullable<System.Double> Loan_repayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_candidate_loans")]
		public System.Nullable<System.Double> Loan_repayments_candidate_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_other_loans")]
		public System.Nullable<System.Double> Loan_repayments_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans")]
		public System.Nullable<System.Double> Loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_by_candidate")]
		public System.Nullable<System.Double> Loans_made_by_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions")]
		public System.Nullable<System.Double> Net_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures")]
		public System.Nullable<System.Double> Net_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures")]
		public System.Nullable<System.Double> Operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_disbursements")]
		public System.Nullable<System.Double> Other_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts")]
		public System.Nullable<System.Double> Other_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions")]
		public System.Nullable<System.Double> Political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions")]
		public System.Nullable<System.Double> Refunded_individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_coverage_date")]
		public System.Nullable<System.DateTimeOffset> Transaction_coverage_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateCommitteeTotalsHouseSenatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateCommitteeTotalsHouseSenate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateCommitteeTotalsPresidential
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution")]
		public System.Nullable<System.Double> Candidate_contribution { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_election_year")]
		public int Candidate_election_year { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_refunds")]
		public System.Nullable<System.Double> Contribution_refunds { get; set; }
		
		/// <summary>
		/// Contribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributions")]
		public System.Nullable<System.Double> Contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="election_full")]
		public bool Election_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds")]
		public System.Nullable<System.Double> Federal_funds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements")]
		public System.Nullable<System.Double> Fundraising_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions")]
		public System.Nullable<System.Double> Individual_contributions { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions")]
		public System.Nullable<System.Double> Individual_unitemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_beginning_image_number")]
		public string Last_beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Last_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_by_committee")]
		public System.Nullable<System.Double> Last_debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_to_committee")]
		public System.Nullable<System.Double> Last_debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_type_full")]
		public string Last_report_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_year")]
		public System.Nullable<System.Int32> Last_report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made")]
		public System.Nullable<System.Double> Loan_repayments_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received")]
		public System.Nullable<System.Double> Loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received_from_candidate")]
		public System.Nullable<System.Double> Loans_received_from_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions")]
		public System.Nullable<System.Double> Net_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures")]
		public System.Nullable<System.Double> Net_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures")]
		public System.Nullable<System.Double> Operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_disbursements")]
		public System.Nullable<System.Double> Other_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_loans_received")]
		public System.Nullable<System.Double> Other_loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts")]
		public System.Nullable<System.Double> Other_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions")]
		public System.Nullable<System.Double> Political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions")]
		public System.Nullable<System.Double> Refunded_individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_by_candidate")]
		public System.Nullable<System.Double> Repayments_loans_made_by_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans")]
		public System.Nullable<System.Double> Repayments_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_coverage_date")]
		public System.Nullable<System.DateTimeOffset> Transaction_coverage_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committee")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateCommitteeTotalsPresidentialPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateCommitteeTotalsPresidential[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateDetail
	{
		
		/// <summary>
		/// Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active_through")]
		public System.Nullable<System.Int32> Active_through { get; set; }
		
		/// <summary>
		/// City of candidate's address, as reported on their Form 2.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Address_city { get; set; }
		
		/// <summary>
		/// State of candidate's address, as reported on their Form 2.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Address_state { get; set; }
		
		/// <summary>
		/// Street of candidate's address, as reported on their Form 2.
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Address_street_1 { get; set; }
		
		/// <summary>
		/// Additional street information of candidate's address, as reported on their Form 2.
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Address_street_2 { get; set; }
		
		/// <summary>
		/// Zip code of candidate's address, as reported on their Form 2.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// True indicates that a candidate is inactive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_inactive")]
		public System.Nullable<System.Boolean> Candidate_inactive { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_status")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Candidate_status { get; set; }
		
		/// <summary>
		/// 
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string District { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district_number")]
		public System.Nullable<System.Int32> District_number { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_districts")]
		public string[] Election_districts { get; set; }
		
		/// <summary>
		/// Years in which a candidate ran for office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_years")]
		public int[] Election_years { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds_flag")]
		public System.Nullable<System.Boolean> Federal_funds_flag { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's first filing. This is a F2 candidate registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_raised_funds")]
		public System.Nullable<System.Boolean> Has_raised_funds { get; set; }
		
		/// <summary>
		/// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Incumbent_challenge { get; set; }
		
		/// <summary>
		/// Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Incumbent_challenge_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent Form 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f2_date")]
		public System.Nullable<System.DateOnly> Last_f2_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="load_date")]
		public System.Nullable<System.DateTimeOffset> Load_date { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Office { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: House, Senate or presidential
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Office_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Party_full { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateDetailPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateDetail[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateFlags
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federal_funds_flag")]
		public System.Nullable<System.Boolean> Federal_funds_flag { get; set; }
		
		/// <summary>
		/// A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_raised_funds")]
		public System.Nullable<System.Boolean> Has_raised_funds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateFlagsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateFlags[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateHistory
	{
		
		/// <summary>
		/// Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active_through")]
		public System.Nullable<System.Int32> Active_through { get; set; }
		
		/// <summary>
		/// City of candidate's address, as reported on their Form 2.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Address_city { get; set; }
		
		/// <summary>
		/// State of candidate's address, as reported on their Form 2.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Address_state { get; set; }
		
		/// <summary>
		/// Street of candidate's address, as reported on their Form 2.
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Address_street_1 { get; set; }
		
		/// <summary>
		/// Additional street information of candidate's address, as reported on their Form 2.
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Address_street_2 { get; set; }
		
		/// <summary>
		/// Zip code of candidate's address, as reported on their Form 2.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The last year of the cycle for this election.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_election_year")]
		public System.Nullable<System.Int32> Candidate_election_year { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// 
		///True indicates that a candidate is inactive.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_inactive")]
		public System.Nullable<System.Boolean> Candidate_inactive { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_status")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Candidate_status { get; set; }
		
		/// <summary>
		/// 
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string District { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district_number")]
		public System.Nullable<System.Int32> District_number { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_districts")]
		public string[] Election_districts { get; set; }
		
		/// <summary>
		/// Years in which a candidate ran for office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_years")]
		public int[] Election_years { get; set; }
		
		/// <summary>
		/// FEC cycles are included in candidate election years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fec_cycles_in_election")]
		public int[] Fec_cycles_in_election { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's first filing. This is a F2 candidate registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		/// <summary>
		/// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Incumbent_challenge { get; set; }
		
		/// <summary>
		/// Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Incumbent_challenge_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent Form 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f2_date")]
		public System.Nullable<System.DateOnly> Last_f2_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="load_date")]
		public System.Nullable<System.DateTimeOffset> Load_date { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Office { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: House, Senate or presidential
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Office_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Party_full { get; set; }
		
		/// <summary>
		/// Rounded election years in which a candidate ran for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounded_election_years")]
		public int[] Rounded_election_years { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// 
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="two_year_period")]
		public int Two_year_period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateHistoryPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateHistory[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateHistoryTotal
	{
		
		/// <summary>
		/// Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active_through")]
		public System.Nullable<System.Int32> Active_through { get; set; }
		
		/// <summary>
		/// City of candidate's address, as reported on their Form 2.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Address_city { get; set; }
		
		/// <summary>
		/// State of candidate's address, as reported on their Form 2.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Address_state { get; set; }
		
		/// <summary>
		/// Street of candidate's address, as reported on their Form 2.
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Address_street_1 { get; set; }
		
		/// <summary>
		/// Additional street information of candidate's address, as reported on their Form 2.
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Address_street_2 { get; set; }
		
		/// <summary>
		/// Zip code of candidate's address, as reported on their Form 2.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address_zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Address_zip { get; set; }
		
		/// <summary>
		/// The last year of the cycle for this election.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_election_year")]
		public System.Nullable<System.Int32> Candidate_election_year { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// 
		///True indicates that a candidate is inactive.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_inactive")]
		public System.Nullable<System.Boolean> Candidate_inactive { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_status")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Candidate_status { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateOnly> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// 
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string District { get; set; }
		
		/// <summary>
		/// One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district_number")]
		public System.Nullable<System.Int32> District_number { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_districts")]
		public string[] Election_districts { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		/// <summary>
		/// Years in which a candidate ran for office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_years")]
		public int[] Election_years { get; set; }
		
		/// <summary>
		/// FEC cycles are included in candidate election years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fec_cycles_in_election")]
		public int[] Fec_cycles_in_election { get; set; }
		
		/// <summary>
		/// A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federal_funds_flag")]
		public System.Nullable<System.Boolean> Federal_funds_flag { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's first filing. This is a F2 candidate registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		/// <summary>
		/// A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_raised_funds")]
		public System.Nullable<System.Boolean> Has_raised_funds { get; set; }
		
		/// <summary>
		/// One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Incumbent_challenge { get; set; }
		
		/// <summary>
		/// Explains if the candidate is an incumbent, a challenger, or if the seat is open.
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Incumbent_challenge_full { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_election")]
		public bool Is_election { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent Form 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f2_date")]
		public System.Nullable<System.DateOnly> Last_f2_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the candidate's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="load_date")]
		public System.Nullable<System.DateTimeOffset> Load_date { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Office { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: House, Senate or presidential
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Office_full { get; set; }
		
		/// <summary>
		/// Other committees contributions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		/// <summary>
		/// Rounded election years in which a candidate ran for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounded_election_years")]
		public int[] Rounded_election_years { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string State_full { get; set; }
		
		/// <summary>
		/// Transfers from authorized committees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee { get; set; }
		
		/// <summary>
		/// 
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="two_year_period")]
		public int Two_year_period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateHistoryTotalPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateHistoryTotal[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Candidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateSearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office_sought")]
		public string Office_sought { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateSearchList
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateSearch[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateTotal
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// 
		///True indicates that a candidate is inactive.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_inactive")]
		public System.Nullable<System.Boolean> Candidate_inactive { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateOnly> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string District { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district_number")]
		public System.Nullable<System.Int32> District_number { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		/// <summary>
		/// A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federal_funds_flag")]
		public System.Nullable<System.Boolean> Federal_funds_flag { get; set; }
		
		/// <summary>
		/// A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_raised_funds")]
		public System.Nullable<System.Boolean> Has_raised_funds { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_election")]
		public bool Is_election { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Office { get; set; }
		
		/// <summary>
		/// Other committees contributions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string State_full { get; set; }
		
		/// <summary>
		/// Transfers from authorized committees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateTotalAggregate
	{
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district_number")]
		public System.Nullable<System.Int32> District_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office")]
		public string Office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		public string State_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Total_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_debts_owed_by_committee")]
		public System.Nullable<System.Double> Total_debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_disbursements")]
		public System.Nullable<System.Double> Total_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_individual_itemized_contributions")]
		public System.Nullable<System.Double> Total_individual_itemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_other_political_committee_contributions")]
		public System.Nullable<System.Double> Total_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_receipts")]
		public System.Nullable<System.Double> Total_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_transfers_from_other_authorized_committee")]
		public System.Nullable<System.Double> Total_transfers_from_other_authorized_committee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateTotalAggregatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateTotalAggregate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateTotalPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CandidateTotal[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Committee
	{
		
		/// <summary>
		/// 
		///Affiliated committee or connected organization
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliated_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Affiliated_committee_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_ids")]
		public string[] Candidate_ids { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Committee_type_full { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Designation_full { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f1_date")]
		public System.Nullable<System.DateOnly> Last_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Party_full { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_ids")]
		public string[] Sponsor_candidate_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_list")]
		public CommitteeSponsor_candidate_list[] CommitteeSponsor_candidate_list { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
	}
	
	public class CommitteeSponsor_candidate_list
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_id")]
		public string Sponsor_candidate_id { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Sponsor_candidate_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeDetail
	{
		
		/// <summary>
		/// 
		///Affiliated committee or connected organization
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliated_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Affiliated_committee_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_ids")]
		public string[] Candidate_ids { get; set; }
		
		/// <summary>
		/// 
		///City of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Committee_type_full { get; set; }
		
		/// <summary>
		/// 
		///City of committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_city { get; set; }
		
		/// <summary>
		/// 
		///Name 1 of committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_name_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_name_1 { get; set; }
		
		/// <summary>
		/// 
		///Name 2 of committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_name_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_name_2 { get; set; }
		
		/// <summary>
		/// 
		///Full name of committee custodian as reported on the Form 1
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_name_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Custodian_name_full { get; set; }
		
		/// <summary>
		/// 
		///Middle name of committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_name_middle")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_name_middle { get; set; }
		
		/// <summary>
		/// 
		///Name prefix of committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_name_prefix")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_name_prefix { get; set; }
		
		/// <summary>
		/// 
		///Suffix name of the committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_name_suffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_name_suffix { get; set; }
		
		/// <summary>
		/// 
		///Name title of the committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_name_title")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_name_title { get; set; }
		
		/// <summary>
		/// 
		///Phone number of committee custodian as reported on the Form 1
		///
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_phone")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Custodian_phone { get; set; }
		
		/// <summary>
		/// 
		///State of committee custodian as reported on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Custodian_state { get; set; }
		
		/// <summary>
		/// 
		///Street address of the committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_street_1 { get; set; }
		
		/// <summary>
		/// 
		///Second line of the street address of the committee custodian as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Custodian_street_2 { get; set; }
		
		/// <summary>
		/// 
		///Zip code of the committee custodian as reported on the Form 1
		///
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custodian_zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Custodian_zip { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Designation_full { get; set; }
		
		/// <summary>
		/// 
		///Email as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Email { get; set; }
		
		/// <summary>
		/// 
		///Fax as reported on the Form 1
		///
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fax")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Fax { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		/// <summary>
		/// The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Form_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jfc_committee")]
		public CommitteeDetailJfc_committee[] CommitteeDetailJfc_committee { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f1_date")]
		public System.Nullable<System.DateOnly> Last_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// 
		///Indicates if the committee is a leadership PAC
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leadership_pac")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Leadership_pac { get; set; }
		
		/// <summary>
		/// 
		///Indicates if the committee is a lobbyist registrant PAC
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lobbyist_registrant_pac")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Lobbyist_registrant_pac { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Party_full { get; set; }
		
		/// <summary>
		/// 
		///Code for the type of party the committee is, only if applicable
		///
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party_type { get; set; }
		
		/// <summary>
		/// 
		///Description of the type of party the committee is, only if applicable
		///
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Party_type_full { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_ids")]
		public string[] Sponsor_candidate_ids { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// 
		///State of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string State_full { get; set; }
		
		/// <summary>
		/// 
		///Street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_1 { get; set; }
		
		/// <summary>
		/// 
		///Second line of street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_2 { get; set; }
		
		/// <summary>
		/// 
		///City of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_city { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
		
		/// <summary>
		/// 
		///Name 1 of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_name_1 { get; set; }
		
		/// <summary>
		/// 
		///Name 2 of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_name_2 { get; set; }
		
		/// <summary>
		/// 
		///Middle name of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name_middle")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_name_middle { get; set; }
		
		/// <summary>
		/// 
		///Name Prefix of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name_prefix")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_name_prefix { get; set; }
		
		/// <summary>
		/// 
		///Name suffix of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name_suffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_name_suffix { get; set; }
		
		/// <summary>
		/// 
		///Name title of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name_title")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_name_title { get; set; }
		
		/// <summary>
		/// 
		///Phone of committee treasurer as reported on the Form 1
		///
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_phone")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Treasurer_phone { get; set; }
		
		/// <summary>
		/// 
		///State of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_state { get; set; }
		
		/// <summary>
		/// 
		///Street of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_street_1 { get; set; }
		
		/// <summary>
		/// 
		///Second line of the street of committee treasurer as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Treasurer_street_2 { get; set; }
		
		/// <summary>
		/// 
		///Zip code of committee treasurer as reported on the Form 1
		///
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Treasurer_zip { get; set; }
		
		/// <summary>
		/// 
		///Website url as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Website { get; set; }
		
		/// <summary>
		/// 
		///Zip code of committee as reported on the Form 1
		///
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Zip { get; set; }
	}
	
	public class CommitteeDetailJfc_committee
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_id")]
		public string Joint_committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Joint_committee_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeDetailPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeDetail[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeHistory
	{
		
		/// <summary>
		/// 
		///Affiliated committee or connected organization
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliated_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Affiliated_committee_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_ids")]
		public string[] Candidate_ids { get; set; }
		
		/// <summary>
		/// 
		///City of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Committee_type_full { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1), and the committee has filling activity during the cycle
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles_has_activity")]
		public int[] Cycles_has_activity { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s), and the committee files the financial reports
		///('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles_has_financial")]
		public int[] Cycles_has_financial { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Designation_full { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		/// <summary>
		/// 
		///True indicates that a committee is active.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jfc_committee")]
		public CommitteeHistoryJfc_committee[] CommitteeHistoryJfc_committee { get; set; }
		
		/// <summary>
		/// 
		///The latest two year election cycle that the committee has filings
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_cycle_has_activity")]
		public System.Nullable<System.Int32> Last_cycle_has_activity { get; set; }
		
		/// <summary>
		/// 
		///The latest two year election cycle that the committee files the financial reports
		///('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_cycle_has_financial")]
		public System.Nullable<System.Int32> Last_cycle_has_financial { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f1_date")]
		public System.Nullable<System.DateOnly> Last_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Party_full { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// 
		///State of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string State_full { get; set; }
		
		/// <summary>
		/// 
		///Street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_1 { get; set; }
		
		/// <summary>
		/// 
		///Second line of street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_2 { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
		
		/// <summary>
		/// 
		///Zip code of committee as reported on the Form 1
		///
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Zip { get; set; }
	}
	
	public class CommitteeHistoryJfc_committee
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_id")]
		public string Joint_committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Joint_committee_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeHistoryPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeHistory[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeHistoryProfile
	{
		
		/// <summary>
		/// 
		///Affiliated committee or connected organization
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliated_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Affiliated_committee_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_ids")]
		public string[] Candidate_ids { get; set; }
		
		/// <summary>
		/// 
		///City of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///Display the label of committee based on committee type, designation and organization type
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_label")]
		public string Committee_label { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Committee_type_full { get; set; }
		
		/// <summary>
		/// True indicates that a candidate committee had been converted to a PAC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convert_to_pac_flag")]
		public System.Nullable<System.Boolean> Convert_to_pac_flag { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1), and the committee has filling activity during the cycle
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles_has_activity")]
		public int[] Cycles_has_activity { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s), and the committee files the financial reports
		///('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles_has_financial")]
		public int[] Cycles_has_financial { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Designation_full { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		/// <summary>
		/// Year a candidate runs for federal office.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="former_candidate_election_year")]
		public System.Nullable<System.Int32> Former_candidate_election_year { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="former_candidate_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Former_candidate_id { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// Max length: 90
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="former_candidate_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(90)]
		public string Former_candidate_name { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="former_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public string Former_committee_name { get; set; }
		
		/// <summary>
		/// 
		///True indicates that a committee is active.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jfc_committee")]
		public CommitteeHistoryProfileJfc_committee[] CommitteeHistoryProfileJfc_committee { get; set; }
		
		/// <summary>
		/// 
		///The latest two year election cycle that the committee has filings
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_cycle_has_activity")]
		public System.Nullable<System.Int32> Last_cycle_has_activity { get; set; }
		
		/// <summary>
		/// 
		///The latest two year election cycle that the committee files the financial reports
		///('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_cycle_has_financial")]
		public System.Nullable<System.Int32> Last_cycle_has_financial { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f1_date")]
		public System.Nullable<System.DateOnly> Last_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Party_full { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_ids")]
		public string[] Sponsor_candidate_ids { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// 
		///State of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string State_full { get; set; }
		
		/// <summary>
		/// 
		///Street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_1 { get; set; }
		
		/// <summary>
		/// 
		///Second line of street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_2 { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
		
		/// <summary>
		/// 
		///Zip code of committee as reported on the Form 1
		///
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Zip { get; set; }
	}
	
	public class CommitteeHistoryProfileJfc_committee
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_id")]
		public string Joint_committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Joint_committee_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeHistoryProfilePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeHistoryProfile[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Committee[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReports
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregate_amount_personal_contributions_general")]
		public System.Nullable<System.Double> Aggregate_amount_personal_contributions_general { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregate_contributions_personal_funds_primary")]
		public System.Nullable<System.Double> Aggregate_contributions_personal_funds_primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_loans_received_period")]
		public System.Nullable<System.Double> All_loans_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_loans_received_ytd")]
		public System.Nullable<System.Double> All_loans_received_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_other_loans_period")]
		public System.Nullable<System.Double> All_other_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_other_loans_ytd")]
		public System.Nullable<System.Double> All_other_loans_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocated_federal_election_levin_share_period")]
		public System.Nullable<System.Double> Allocated_federal_election_levin_share_period { get; set; }
		
		/// <summary>
		/// 
		///The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		///amendments were filed up to the amendment being inspected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public double[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator_full")]
		public string Amendment_indicator_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendar_ytd")]
		public System.Nullable<System.Int32> Calendar_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution_period")]
		public System.Nullable<System.Double> Candidate_contribution_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution_ytd")]
		public System.Nullable<System.Double> Candidate_contribution_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_calendar_ytd")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_calendar_ytd { get; set; }
		
		/// <summary>
		/// Balance for the committee at the start of the two-year period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_close_ytd")]
		public System.Nullable<System.Double> Cash_on_hand_close_ytd { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinated_expenditures_by_party_committee_period")]
		public System.Nullable<System.Double> Coordinated_expenditures_by_party_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinated_expenditures_by_party_committee_ytd")]
		public System.Nullable<System.Double> Coordinated_expenditures_by_party_committee_ytd { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		/// <summary>
		/// Debts owed to the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_to_committee")]
		public System.Nullable<System.Double> Debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_image_number")]
		public string End_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement_period")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement_ytd")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_subject_to_limits")]
		public System.Nullable<System.Double> Expenditure_subject_to_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contribution_refunds_ytd")]
		public System.Nullable<System.Double> Fed_candidate_committee_contribution_refunds_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contributions_period")]
		public System.Nullable<System.Double> Fed_candidate_committee_contributions_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contributions_ytd")]
		public System.Nullable<System.Double> Fed_candidate_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_contribution_refunds_period")]
		public System.Nullable<System.Double> Fed_candidate_contribution_refunds_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds_period")]
		public System.Nullable<System.Double> Federal_funds_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds_ytd")]
		public System.Nullable<System.Double> Federal_funds_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements_period")]
		public System.Nullable<System.Double> Fundraising_disbursements_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements_ytd")]
		public System.Nullable<System.Double> Fundraising_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_authorized_committee_general")]
		public System.Nullable<System.Double> Gross_receipt_authorized_committee_general { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_authorized_committee_primary")]
		public System.Nullable<System.Double> Gross_receipt_authorized_committee_primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_minus_personal_contribution_general")]
		public System.Nullable<System.Double> Gross_receipt_minus_personal_contribution_general { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_minus_personal_contributions_primary")]
		public System.Nullable<System.Double> Gross_receipt_minus_personal_contributions_primary { get; set; }
		
		/// <summary>
		/// 
		///HTML link to the filing.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_url")]
		public string Html_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_contributions_period")]
		public System.Nullable<System.Double> Independent_contributions_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures_period")]
		public System.Nullable<System.Double> Independent_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures_ytd")]
		public System.Nullable<System.Double> Independent_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_period")]
		public System.Nullable<System.Double> Individual_itemized_contributions_period { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_itemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_period")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_period { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// 
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items_on_hand_liquidated")]
		public System.Nullable<System.Double> Items_on_hand_liquidated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_candidate_loans_period")]
		public System.Nullable<System.Double> Loan_repayments_candidate_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_candidate_loans_ytd")]
		public System.Nullable<System.Double> Loan_repayments_candidate_loans_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made_period")]
		public System.Nullable<System.Double> Loan_repayments_made_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made_ytd")]
		public System.Nullable<System.Double> Loan_repayments_made_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_other_loans_period")]
		public System.Nullable<System.Double> Loan_repayments_other_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_other_loans_ytd")]
		public System.Nullable<System.Double> Loan_repayments_other_loans_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_received_period")]
		public System.Nullable<System.Double> Loan_repayments_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_received_ytd")]
		public System.Nullable<System.Double> Loan_repayments_received_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_by_candidate_period")]
		public System.Nullable<System.Double> Loans_made_by_candidate_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_by_candidate_ytd")]
		public System.Nullable<System.Double> Loans_made_by_candidate_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_period")]
		public System.Nullable<System.Double> Loans_made_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_ytd")]
		public System.Nullable<System.Double> Loans_made_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received_from_candidate_period")]
		public System.Nullable<System.Double> Loans_received_from_candidate_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received_from_candidate_ytd")]
		public System.Nullable<System.Double> Loans_received_from_candidate_ytd { get; set; }
		
		/// <summary>
		/// The method used to file with the FEC, either electronic or on paper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="means_filed")]
		public string Means_filed { get; set; }
		
		/// <summary>
		/// 
		///Report is either new or is the most-recently filed amendment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_file_number")]
		public System.Nullable<System.Double> Most_recent_file_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_cycle_to_date")]
		public System.Nullable<System.Double> Net_contributions_cycle_to_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_period")]
		public System.Nullable<System.Double> Net_contributions_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_ytd")]
		public System.Nullable<System.Double> Net_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_cycle_to_date")]
		public System.Nullable<System.Double> Net_operating_expenditures_cycle_to_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_period")]
		public System.Nullable<System.Double> Net_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Net_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="non_allocated_fed_election_activity_period")]
		public System.Nullable<System.Double> Non_allocated_fed_election_activity_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="non_allocated_fed_election_activity_ytd")]
		public System.Nullable<System.Double> Non_allocated_fed_election_activity_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonfed_share_allocated_disbursements_period")]
		public System.Nullable<System.Double> Nonfed_share_allocated_disbursements_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures_period")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures_ytd")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting_period")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting_ytd")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting_ytd { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_period")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_period { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_period")]
		public System.Nullable<System.Double> Operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_ytd")]
		public System.Nullable<System.Double> Operating_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Other disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_period")]
		public System.Nullable<System.Double> Other_disbursements_period { get; set; }
		
		/// <summary>
		/// Other disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_ytd")]
		public System.Nullable<System.Double> Other_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_operating_expenditures_period")]
		public System.Nullable<System.Double> Other_fed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Other_fed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_receipts_period")]
		public System.Nullable<System.Double> Other_fed_receipts_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_receipts_ytd")]
		public System.Nullable<System.Double> Other_fed_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_loans_received_period")]
		public System.Nullable<System.Double> Other_loans_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_loans_received_ytd")]
		public System.Nullable<System.Double> Other_loans_received_ytd { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Other_political_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts_period")]
		public System.Nullable<System.Double> Other_receipts_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts_ytd")]
		public System.Nullable<System.Double> Other_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_file_number")]
		public System.Nullable<System.Double> Previous_file_number { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		/// <summary>
		/// Individual refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_period")]
		public System.Nullable<System.Double> Refunded_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_individual_contributions_ytd { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_ytd { get; set; }
		
		/// <summary>
		/// Political party refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Political party refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunds_total_contributions_col_total_ytd")]
		public System.Nullable<System.Double> Refunds_total_contributions_col_total_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_by_candidate_period")]
		public System.Nullable<System.Double> Repayments_loans_made_by_candidate_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_candidate_ytd")]
		public System.Nullable<System.Double> Repayments_loans_made_candidate_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans_period")]
		public System.Nullable<System.Double> Repayments_other_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans_ytd")]
		public System.Nullable<System.Double> Repayments_other_loans_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_nonfed_ytd")]
		public System.Nullable<System.Double> Shared_fed_activity_nonfed_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_period")]
		public System.Nullable<System.Double> Shared_fed_activity_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_ytd")]
		public System.Nullable<System.Double> Shared_fed_activity_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_operating_expenditures_period")]
		public System.Nullable<System.Double> Shared_fed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Shared_fed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_nonfed_operating_expenditures_period")]
		public System.Nullable<System.Double> Shared_nonfed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_nonfed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Shared_nonfed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_period")]
		public System.Nullable<System.Double> Subtotal_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_summary_page_period")]
		public System.Nullable<System.Double> Subtotal_summary_page_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_summary_period")]
		public System.Nullable<System.Double> Subtotal_summary_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_summary_ytd")]
		public System.Nullable<System.Double> Subtotal_summary_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_col_total_period")]
		public System.Nullable<System.Double> Total_contribution_refunds_col_total_period { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_period")]
		public System.Nullable<System.Double> Total_contribution_refunds_period { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_ytd")]
		public System.Nullable<System.Double> Total_contribution_refunds_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_contributions_column_total_period")]
		public System.Nullable<System.Double> Total_contributions_column_total_period { get; set; }
		
		/// <summary>
		/// Contribution total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_period")]
		public System.Nullable<System.Double> Total_contributions_period { get; set; }
		
		/// <summary>
		/// Contribution total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_ytd")]
		public System.Nullable<System.Double> Total_contributions_ytd { get; set; }
		
		/// <summary>
		/// Disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_period")]
		public System.Nullable<System.Double> Total_disbursements_period { get; set; }
		
		/// <summary>
		/// Disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_ytd")]
		public System.Nullable<System.Double> Total_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_disbursements_period")]
		public System.Nullable<System.Double> Total_fed_disbursements_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_disbursements_ytd")]
		public System.Nullable<System.Double> Total_fed_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_election_activity_period")]
		public System.Nullable<System.Double> Total_fed_election_activity_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_election_activity_ytd")]
		public System.Nullable<System.Double> Total_fed_election_activity_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_fed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_fed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_receipts_period")]
		public System.Nullable<System.Double> Total_fed_receipts_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_receipts_ytd")]
		public System.Nullable<System.Double> Total_fed_receipts_ytd { get; set; }
		
		/// <summary>
		/// Individual contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_period")]
		public System.Nullable<System.Double> Total_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_ytd")]
		public System.Nullable<System.Double> Total_individual_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loan_repayments_made_period")]
		public System.Nullable<System.Double> Total_loan_repayments_made_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loan_repayments_made_ytd")]
		public System.Nullable<System.Double> Total_loan_repayments_made_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loans_received_period")]
		public System.Nullable<System.Double> Total_loans_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loans_received_ytd")]
		public System.Nullable<System.Double> Total_loans_received_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_nonfed_transfers_period")]
		public System.Nullable<System.Double> Total_nonfed_transfers_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_nonfed_transfers_ytd")]
		public System.Nullable<System.Double> Total_nonfed_transfers_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_period")]
		public System.Nullable<System.Double> Total_period { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_period")]
		public System.Nullable<System.Double> Total_receipts_period { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_ytd")]
		public System.Nullable<System.Double> Total_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_ytd")]
		public System.Nullable<System.Double> Total_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committee_period")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committee_ytd")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committee_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_party_period")]
		public System.Nullable<System.Double> Transfers_from_affiliated_party_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_party_ytd")]
		public System.Nullable<System.Double> Transfers_from_affiliated_party_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_account_period")]
		public System.Nullable<System.Double> Transfers_from_nonfed_account_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_account_ytd")]
		public System.Nullable<System.Double> Transfers_from_nonfed_account_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_levin_period")]
		public System.Nullable<System.Double> Transfers_from_nonfed_levin_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_levin_ytd")]
		public System.Nullable<System.Double> Transfers_from_nonfed_levin_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee_period")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee_ytd")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_affiliated_committee_period")]
		public System.Nullable<System.Double> Transfers_to_affiliated_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_affilitated_committees_ytd")]
		public System.Nullable<System.Double> Transfers_to_affilitated_committees_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee_period")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee_ytd")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee_ytd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsHouseSenate
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregate_amount_personal_contributions_general")]
		public System.Nullable<System.Double> Aggregate_amount_personal_contributions_general { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="aggregate_contributions_personal_funds_primary")]
		public System.Nullable<System.Double> Aggregate_contributions_personal_funds_primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_other_loans_period")]
		public System.Nullable<System.Double> All_other_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_other_loans_ytd")]
		public System.Nullable<System.Double> All_other_loans_ytd { get; set; }
		
		/// <summary>
		/// 
		///The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		///amendments were filed up to the amendment being inspected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public double[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator_full")]
		public string Amendment_indicator_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution_period")]
		public System.Nullable<System.Double> Candidate_contribution_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution_ytd")]
		public System.Nullable<System.Double> Candidate_contribution_ytd { get; set; }
		
		/// <summary>
		/// Balance for the committee at the start of the two-year period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		/// <summary>
		/// Debts owed to the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_to_committee")]
		public System.Nullable<System.Double> Debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_image_number")]
		public string End_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_authorized_committee_general")]
		public System.Nullable<System.Double> Gross_receipt_authorized_committee_general { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_authorized_committee_primary")]
		public System.Nullable<System.Double> Gross_receipt_authorized_committee_primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_minus_personal_contribution_general")]
		public System.Nullable<System.Double> Gross_receipt_minus_personal_contribution_general { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gross_receipt_minus_personal_contributions_primary")]
		public System.Nullable<System.Double> Gross_receipt_minus_personal_contributions_primary { get; set; }
		
		/// <summary>
		/// 
		///HTML link to the filing.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_url")]
		public string Html_url { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_period")]
		public System.Nullable<System.Double> Individual_itemized_contributions_period { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_itemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_period")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_period { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// 
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_candidate_loans_period")]
		public System.Nullable<System.Double> Loan_repayments_candidate_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_candidate_loans_ytd")]
		public System.Nullable<System.Double> Loan_repayments_candidate_loans_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_other_loans_period")]
		public System.Nullable<System.Double> Loan_repayments_other_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_other_loans_ytd")]
		public System.Nullable<System.Double> Loan_repayments_other_loans_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_by_candidate_period")]
		public System.Nullable<System.Double> Loans_made_by_candidate_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_by_candidate_ytd")]
		public System.Nullable<System.Double> Loans_made_by_candidate_ytd { get; set; }
		
		/// <summary>
		/// The method used to file with the FEC, either electronic or on paper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="means_filed")]
		public string Means_filed { get; set; }
		
		/// <summary>
		/// 
		///Report is either new or is the most-recently filed amendment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_file_number")]
		public System.Nullable<System.Double> Most_recent_file_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_period")]
		public System.Nullable<System.Double> Net_contributions_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_ytd")]
		public System.Nullable<System.Double> Net_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_period")]
		public System.Nullable<System.Double> Net_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Net_operating_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_period")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_period { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_period")]
		public System.Nullable<System.Double> Operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_ytd")]
		public System.Nullable<System.Double> Operating_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Other disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_period")]
		public System.Nullable<System.Double> Other_disbursements_period { get; set; }
		
		/// <summary>
		/// Other disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_ytd")]
		public System.Nullable<System.Double> Other_disbursements_ytd { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Other_political_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts_period")]
		public System.Nullable<System.Double> Other_receipts_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts_ytd")]
		public System.Nullable<System.Double> Other_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_file_number")]
		public System.Nullable<System.Double> Previous_file_number { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		/// <summary>
		/// Individual refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_period")]
		public System.Nullable<System.Double> Refunded_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_individual_contributions_ytd { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_ytd { get; set; }
		
		/// <summary>
		/// Political party refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Political party refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunds_total_contributions_col_total_ytd")]
		public System.Nullable<System.Double> Refunds_total_contributions_col_total_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_period")]
		public System.Nullable<System.Double> Subtotal_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_col_total_period")]
		public System.Nullable<System.Double> Total_contribution_refunds_col_total_period { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_period")]
		public System.Nullable<System.Double> Total_contribution_refunds_period { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_ytd")]
		public System.Nullable<System.Double> Total_contribution_refunds_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_contributions_column_total_period")]
		public System.Nullable<System.Double> Total_contributions_column_total_period { get; set; }
		
		/// <summary>
		/// Contribution total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_period")]
		public System.Nullable<System.Double> Total_contributions_period { get; set; }
		
		/// <summary>
		/// Contribution total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_ytd")]
		public System.Nullable<System.Double> Total_contributions_ytd { get; set; }
		
		/// <summary>
		/// Disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_period")]
		public System.Nullable<System.Double> Total_disbursements_period { get; set; }
		
		/// <summary>
		/// Disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_ytd")]
		public System.Nullable<System.Double> Total_disbursements_ytd { get; set; }
		
		/// <summary>
		/// Individual contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_period")]
		public System.Nullable<System.Double> Total_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_ytd")]
		public System.Nullable<System.Double> Total_individual_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loan_repayments_made_period")]
		public System.Nullable<System.Double> Total_loan_repayments_made_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loan_repayments_made_ytd")]
		public System.Nullable<System.Double> Total_loan_repayments_made_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loans_received_period")]
		public System.Nullable<System.Double> Total_loans_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loans_received_ytd")]
		public System.Nullable<System.Double> Total_loans_received_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_operating_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_period")]
		public System.Nullable<System.Double> Total_receipts_period { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_ytd")]
		public System.Nullable<System.Double> Total_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee_period")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee_ytd")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee_period")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee_ytd")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee_ytd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsHouseSenatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeReportsHouseSenate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsIEOnly
	{
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_image_number")]
		public string End_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_contributions_period")]
		public System.Nullable<System.Double> Independent_contributions_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures_period")]
		public System.Nullable<System.Double> Independent_expenditures_period { get; set; }
		
		/// <summary>
		/// 
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		/// <summary>
		/// The method used to file with the FEC, either electronic or on paper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="means_filed")]
		public string Means_filed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsIEOnlyPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeReportsIEOnly[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsPacParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="all_loans_received_period")]
		public System.Nullable<System.Double> All_loans_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_loans_received_ytd")]
		public System.Nullable<System.Double> All_loans_received_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocated_federal_election_levin_share_period")]
		public System.Nullable<System.Double> Allocated_federal_election_levin_share_period { get; set; }
		
		/// <summary>
		/// 
		///The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		///amendments were filed up to the amendment being inspected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public double[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator_full")]
		public string Amendment_indicator_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendar_ytd")]
		public System.Nullable<System.Int32> Calendar_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_calendar_ytd")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_calendar_ytd { get; set; }
		
		/// <summary>
		/// Balance for the committee at the start of the two-year period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_close_ytd")]
		public System.Nullable<System.Double> Cash_on_hand_close_ytd { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinated_expenditures_by_party_committee_period")]
		public System.Nullable<System.Double> Coordinated_expenditures_by_party_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinated_expenditures_by_party_committee_ytd")]
		public System.Nullable<System.Double> Coordinated_expenditures_by_party_committee_ytd { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		/// <summary>
		/// Debts owed to the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_to_committee")]
		public System.Nullable<System.Double> Debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_image_number")]
		public string End_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contribution_refunds_ytd")]
		public System.Nullable<System.Double> Fed_candidate_committee_contribution_refunds_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contributions_period")]
		public System.Nullable<System.Double> Fed_candidate_committee_contributions_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contributions_ytd")]
		public System.Nullable<System.Double> Fed_candidate_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_contribution_refunds_period")]
		public System.Nullable<System.Double> Fed_candidate_contribution_refunds_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		/// <summary>
		/// 
		///HTML link to the filing.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_url")]
		public string Html_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures_period")]
		public System.Nullable<System.Double> Independent_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures_ytd")]
		public System.Nullable<System.Double> Independent_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_period")]
		public System.Nullable<System.Double> Individual_itemized_contributions_period { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_itemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_period")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_period { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// 
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made_period")]
		public System.Nullable<System.Double> Loan_repayments_made_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made_ytd")]
		public System.Nullable<System.Double> Loan_repayments_made_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_received_period")]
		public System.Nullable<System.Double> Loan_repayments_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_received_ytd")]
		public System.Nullable<System.Double> Loan_repayments_received_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_period")]
		public System.Nullable<System.Double> Loans_made_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_ytd")]
		public System.Nullable<System.Double> Loans_made_ytd { get; set; }
		
		/// <summary>
		/// The method used to file with the FEC, either electronic or on paper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="means_filed")]
		public string Means_filed { get; set; }
		
		/// <summary>
		/// 
		///Report is either new or is the most-recently filed amendment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_file_number")]
		public System.Nullable<System.Double> Most_recent_file_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_period")]
		public System.Nullable<System.Double> Net_contributions_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_ytd")]
		public System.Nullable<System.Double> Net_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_period")]
		public System.Nullable<System.Double> Net_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Net_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="non_allocated_fed_election_activity_period")]
		public System.Nullable<System.Double> Non_allocated_fed_election_activity_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="non_allocated_fed_election_activity_ytd")]
		public System.Nullable<System.Double> Non_allocated_fed_election_activity_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonfed_share_allocated_disbursements_period")]
		public System.Nullable<System.Double> Nonfed_share_allocated_disbursements_period { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_period")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_period { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Other disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_period")]
		public System.Nullable<System.Double> Other_disbursements_period { get; set; }
		
		/// <summary>
		/// Other disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_ytd")]
		public System.Nullable<System.Double> Other_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_operating_expenditures_period")]
		public System.Nullable<System.Double> Other_fed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Other_fed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_receipts_period")]
		public System.Nullable<System.Double> Other_fed_receipts_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_receipts_ytd")]
		public System.Nullable<System.Double> Other_fed_receipts_ytd { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Other_political_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_file_number")]
		public System.Nullable<System.Double> Previous_file_number { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		/// <summary>
		/// Individual refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_period")]
		public System.Nullable<System.Double> Refunded_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_individual_contributions_ytd { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_ytd { get; set; }
		
		/// <summary>
		/// Political party refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Political party refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_nonfed_ytd")]
		public System.Nullable<System.Double> Shared_fed_activity_nonfed_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_period")]
		public System.Nullable<System.Double> Shared_fed_activity_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_ytd")]
		public System.Nullable<System.Double> Shared_fed_activity_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_operating_expenditures_period")]
		public System.Nullable<System.Double> Shared_fed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Shared_fed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_nonfed_operating_expenditures_period")]
		public System.Nullable<System.Double> Shared_nonfed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_nonfed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Shared_nonfed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_summary_page_period")]
		public System.Nullable<System.Double> Subtotal_summary_page_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_summary_ytd")]
		public System.Nullable<System.Double> Subtotal_summary_ytd { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_period")]
		public System.Nullable<System.Double> Total_contribution_refunds_period { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_ytd")]
		public System.Nullable<System.Double> Total_contribution_refunds_ytd { get; set; }
		
		/// <summary>
		/// Contribution total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_period")]
		public System.Nullable<System.Double> Total_contributions_period { get; set; }
		
		/// <summary>
		/// Contribution total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_ytd")]
		public System.Nullable<System.Double> Total_contributions_ytd { get; set; }
		
		/// <summary>
		/// Disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_period")]
		public System.Nullable<System.Double> Total_disbursements_period { get; set; }
		
		/// <summary>
		/// Disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_ytd")]
		public System.Nullable<System.Double> Total_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_disbursements_period")]
		public System.Nullable<System.Double> Total_fed_disbursements_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_disbursements_ytd")]
		public System.Nullable<System.Double> Total_fed_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_election_activity_period")]
		public System.Nullable<System.Double> Total_fed_election_activity_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_election_activity_ytd")]
		public System.Nullable<System.Double> Total_fed_election_activity_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_fed_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_fed_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_receipts_period")]
		public System.Nullable<System.Double> Total_fed_receipts_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_fed_receipts_ytd")]
		public System.Nullable<System.Double> Total_fed_receipts_ytd { get; set; }
		
		/// <summary>
		/// Individual contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_period")]
		public System.Nullable<System.Double> Total_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_ytd")]
		public System.Nullable<System.Double> Total_individual_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_nonfed_transfers_period")]
		public System.Nullable<System.Double> Total_nonfed_transfers_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_nonfed_transfers_ytd")]
		public System.Nullable<System.Double> Total_nonfed_transfers_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_operating_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_period")]
		public System.Nullable<System.Double> Total_receipts_period { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_ytd")]
		public System.Nullable<System.Double> Total_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_party_period")]
		public System.Nullable<System.Double> Transfers_from_affiliated_party_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_party_ytd")]
		public System.Nullable<System.Double> Transfers_from_affiliated_party_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_account_period")]
		public System.Nullable<System.Double> Transfers_from_nonfed_account_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_account_ytd")]
		public System.Nullable<System.Double> Transfers_from_nonfed_account_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_levin_period")]
		public System.Nullable<System.Double> Transfers_from_nonfed_levin_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_levin_ytd")]
		public System.Nullable<System.Double> Transfers_from_nonfed_levin_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_affiliated_committee_period")]
		public System.Nullable<System.Double> Transfers_to_affiliated_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_affilitated_committees_ytd")]
		public System.Nullable<System.Double> Transfers_to_affilitated_committees_ytd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsPacPartyPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeReportsPacParty[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeReports[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsPresidential
	{
		
		/// <summary>
		/// 
		///The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		///amendments were filed up to the amendment being inspected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public double[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator_full")]
		public string Amendment_indicator_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution_period")]
		public System.Nullable<System.Double> Candidate_contribution_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution_ytd")]
		public System.Nullable<System.Double> Candidate_contribution_ytd { get; set; }
		
		/// <summary>
		/// Balance for the committee at the start of the two-year period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		/// <summary>
		/// Debts owed to the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_to_committee")]
		public System.Nullable<System.Double> Debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_image_number")]
		public string End_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement_period")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement_ytd")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_subject_to_limits")]
		public System.Nullable<System.Double> Expenditure_subject_to_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds_period")]
		public System.Nullable<System.Double> Federal_funds_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds_ytd")]
		public System.Nullable<System.Double> Federal_funds_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements_period")]
		public System.Nullable<System.Double> Fundraising_disbursements_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements_ytd")]
		public System.Nullable<System.Double> Fundraising_disbursements_ytd { get; set; }
		
		/// <summary>
		/// 
		///HTML link to the filing.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_url")]
		public string Html_url { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_period")]
		public System.Nullable<System.Double> Individual_itemized_contributions_period { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_itemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_period")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_period { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions_ytd")]
		public System.Nullable<System.Double> Individual_unitemized_contributions_ytd { get; set; }
		
		/// <summary>
		/// 
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items_on_hand_liquidated")]
		public System.Nullable<System.Double> Items_on_hand_liquidated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received_from_candidate_period")]
		public System.Nullable<System.Double> Loans_received_from_candidate_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received_from_candidate_ytd")]
		public System.Nullable<System.Double> Loans_received_from_candidate_ytd { get; set; }
		
		/// <summary>
		/// The method used to file with the FEC, either electronic or on paper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="means_filed")]
		public string Means_filed { get; set; }
		
		/// <summary>
		/// 
		///Report is either new or is the most-recently filed amendment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_file_number")]
		public System.Nullable<System.Double> Most_recent_file_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions_cycle_to_date")]
		public System.Nullable<System.Double> Net_contributions_cycle_to_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures_cycle_to_date")]
		public System.Nullable<System.Double> Net_operating_expenditures_cycle_to_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures_period")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures_ytd")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting_period")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting_ytd")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting_ytd { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_period")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_period { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_period")]
		public System.Nullable<System.Double> Operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_ytd")]
		public System.Nullable<System.Double> Operating_expenditures_ytd { get; set; }
		
		/// <summary>
		/// Other disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_period")]
		public System.Nullable<System.Double> Other_disbursements_period { get; set; }
		
		/// <summary>
		/// Other disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements_ytd")]
		public System.Nullable<System.Double> Other_disbursements_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_loans_received_period")]
		public System.Nullable<System.Double> Other_loans_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_loans_received_ytd")]
		public System.Nullable<System.Double> Other_loans_received_ytd { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Other_political_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts_period")]
		public System.Nullable<System.Double> Other_receipts_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts_ytd")]
		public System.Nullable<System.Double> Other_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Party committees contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_file_number")]
		public System.Nullable<System.Double> Previous_file_number { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		/// <summary>
		/// Individual refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_period")]
		public System.Nullable<System.Double> Refunded_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_individual_contributions_ytd { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Other committee refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions_ytd { get; set; }
		
		/// <summary>
		/// Political party refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_period")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_period { get; set; }
		
		/// <summary>
		/// Political party refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions_ytd")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_by_candidate_period")]
		public System.Nullable<System.Double> Repayments_loans_made_by_candidate_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_candidate_ytd")]
		public System.Nullable<System.Double> Repayments_loans_made_candidate_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans_period")]
		public System.Nullable<System.Double> Repayments_other_loans_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans_ytd")]
		public System.Nullable<System.Double> Repayments_other_loans_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal_summary_period")]
		public System.Nullable<System.Double> Subtotal_summary_period { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_period")]
		public System.Nullable<System.Double> Total_contribution_refunds_period { get; set; }
		
		/// <summary>
		/// Total contribution refunds total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds_ytd")]
		public System.Nullable<System.Double> Total_contribution_refunds_ytd { get; set; }
		
		/// <summary>
		/// Contribution total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_period")]
		public System.Nullable<System.Double> Total_contributions_period { get; set; }
		
		/// <summary>
		/// Contribution total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contributions_ytd")]
		public System.Nullable<System.Double> Total_contributions_ytd { get; set; }
		
		/// <summary>
		/// Disbursements total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_period")]
		public System.Nullable<System.Double> Total_disbursements_period { get; set; }
		
		/// <summary>
		/// Disbursements total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements_ytd")]
		public System.Nullable<System.Double> Total_disbursements_ytd { get; set; }
		
		/// <summary>
		/// Individual contributions total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_period")]
		public System.Nullable<System.Double> Total_individual_contributions_period { get; set; }
		
		/// <summary>
		/// Individual contributions total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions_ytd")]
		public System.Nullable<System.Double> Total_individual_contributions_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loan_repayments_made_period")]
		public System.Nullable<System.Double> Total_loan_repayments_made_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loan_repayments_made_ytd")]
		public System.Nullable<System.Double> Total_loan_repayments_made_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loans_received_period")]
		public System.Nullable<System.Double> Total_loans_received_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_loans_received_ytd")]
		public System.Nullable<System.Double> Total_loans_received_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures_period")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures_ytd")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_period")]
		public System.Nullable<System.Double> Total_period { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_period")]
		public System.Nullable<System.Double> Total_receipts_period { get; set; }
		
		/// <summary>
		/// Anything of value (money, goods, services or property) received by a political committee total for the year to date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts_ytd")]
		public System.Nullable<System.Double> Total_receipts_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_ytd")]
		public System.Nullable<System.Double> Total_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committee_period")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committee_ytd")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committee_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee_period")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee_ytd")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee_ytd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeReportsPresidentialPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeReportsPresidential[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeSearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeSearchList
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeSearch[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotals
	{
		
		[System.Runtime.Serialization.DataMember(Name="all_loans_received")]
		public System.Nullable<System.Double> All_loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="all_other_loans")]
		public System.Nullable<System.Double> All_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocated_federal_election_levin_share")]
		public System.Nullable<System.Double> Allocated_federal_election_levin_share { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution")]
		public System.Nullable<System.Double> Candidate_contribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation")]
		public string Committee_designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation_full")]
		public string Committee_designation_full { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Committee_state { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		public string Committee_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_refunds")]
		public System.Nullable<System.Double> Contribution_refunds { get; set; }
		
		/// <summary>
		/// Contribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributions")]
		public System.Nullable<System.Double> Contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributions_ie_and_party_expenditures_made_percent")]
		public System.Nullable<System.Double> Contributions_ie_and_party_expenditures_made_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="convention_exp")]
		public System.Nullable<System.Double> Convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinated_expenditures_by_party_committee")]
		public System.Nullable<System.Double> Coordinated_expenditures_by_party_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exp_prior_years_subject_limits")]
		public System.Nullable<System.Double> Exp_prior_years_subject_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exp_subject_limits")]
		public System.Nullable<System.Double> Exp_subject_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contributions")]
		public System.Nullable<System.Double> Fed_candidate_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_contribution_refunds")]
		public System.Nullable<System.Double> Fed_candidate_contribution_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_disbursements")]
		public System.Nullable<System.Double> Fed_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_election_activity")]
		public System.Nullable<System.Double> Fed_election_activity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_operating_expenditures")]
		public System.Nullable<System.Double> Fed_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_receipts")]
		public System.Nullable<System.Double> Fed_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds")]
		public System.Nullable<System.Double> Federal_funds { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency_full")]
		public string Filing_frequency_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements")]
		public System.Nullable<System.Double> Fundraising_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures")]
		public System.Nullable<System.Double> Independent_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions")]
		public System.Nullable<System.Double> Individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions_percent")]
		public System.Nullable<System.Double> Individual_contributions_percent { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions")]
		public System.Nullable<System.Double> Individual_unitemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_convention_exp")]
		public System.Nullable<System.Double> Itemized_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_other_disb")]
		public System.Nullable<System.Double> Itemized_other_disb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_other_income")]
		public System.Nullable<System.Double> Itemized_other_income { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_other_refunds")]
		public System.Nullable<System.Double> Itemized_other_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_refunds_relating_convention_exp")]
		public System.Nullable<System.Double> Itemized_refunds_relating_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_beginning_image_number")]
		public string Last_beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Last_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_by_committee")]
		public System.Nullable<System.Double> Last_debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_to_committee")]
		public System.Nullable<System.Double> Last_debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_type_full")]
		public string Last_report_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_year")]
		public System.Nullable<System.Int32> Last_report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments")]
		public System.Nullable<System.Double> Loan_repayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_candidate_loans")]
		public System.Nullable<System.Double> Loan_repayments_candidate_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made")]
		public System.Nullable<System.Double> Loan_repayments_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_other_loans")]
		public System.Nullable<System.Double> Loan_repayments_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_received")]
		public System.Nullable<System.Double> Loan_repayments_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans")]
		public System.Nullable<System.Double> Loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_and_loan_repayments_made")]
		public System.Nullable<System.Double> Loans_and_loan_repayments_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_and_loan_repayments_received")]
		public System.Nullable<System.Double> Loans_and_loan_repayments_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made")]
		public System.Nullable<System.Double> Loans_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_by_candidate")]
		public System.Nullable<System.Double> Loans_made_by_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received")]
		public System.Nullable<System.Double> Loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received_from_candidate")]
		public System.Nullable<System.Double> Loans_received_from_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions")]
		public System.Nullable<System.Double> Net_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures")]
		public System.Nullable<System.Double> Net_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="non_allocated_fed_election_activity")]
		public System.Nullable<System.Double> Non_allocated_fed_election_activity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures")]
		public System.Nullable<System.Double> Operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_percent")]
		public System.Nullable<System.Double> Operating_expenditures_percent { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_disbursements")]
		public System.Nullable<System.Double> Other_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_operating_expenditures")]
		public System.Nullable<System.Double> Other_fed_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_receipts")]
		public System.Nullable<System.Double> Other_fed_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_loans_received")]
		public System.Nullable<System.Double> Other_loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts")]
		public System.Nullable<System.Double> Other_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_refunds")]
		public System.Nullable<System.Double> Other_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party_and_other_committee_contributions_percent")]
		public System.Nullable<System.Double> Party_and_other_committee_contributions_percent { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions")]
		public System.Nullable<System.Double> Political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions")]
		public System.Nullable<System.Double> Refunded_individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunds_relating_convention_exp")]
		public System.Nullable<System.Double> Refunds_relating_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_by_candidate")]
		public System.Nullable<System.Double> Repayments_loans_made_by_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans")]
		public System.Nullable<System.Double> Repayments_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity")]
		public System.Nullable<System.Double> Shared_fed_activity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_nonfed")]
		public System.Nullable<System.Double> Shared_fed_activity_nonfed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_operating_expenditures")]
		public System.Nullable<System.Double> Shared_fed_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_nonfed_operating_expenditures")]
		public System.Nullable<System.Double> Shared_nonfed_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_exp_subject_limits")]
		public System.Nullable<System.Double> Total_exp_subject_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_independent_contributions")]
		public System.Nullable<System.Double> Total_independent_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_independent_expenditures")]
		public System.Nullable<System.Double> Total_independent_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_transfers")]
		public System.Nullable<System.Double> Total_transfers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_coverage_date")]
		public System.Nullable<System.DateOnly> Transaction_coverage_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committee")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_party")]
		public System.Nullable<System.Double> Transfers_from_affiliated_party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_account")]
		public System.Nullable<System.Double> Transfers_from_nonfed_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_levin")]
		public System.Nullable<System.Double> Transfers_from_nonfed_levin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_affiliated_committee")]
		public System.Nullable<System.Double> Transfers_to_affiliated_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_convention_exp")]
		public System.Nullable<System.Double> Unitemized_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_other_disb")]
		public System.Nullable<System.Double> Unitemized_other_disb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_other_income")]
		public System.Nullable<System.Double> Unitemized_other_income { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_other_refunds")]
		public System.Nullable<System.Double> Unitemized_other_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_refunds_relating_convention_exp")]
		public System.Nullable<System.Double> Unitemized_refunds_relating_convention_exp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsHouseSenate
	{
		
		[System.Runtime.Serialization.DataMember(Name="all_other_loans")]
		public System.Nullable<System.Double> All_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution")]
		public System.Nullable<System.Double> Candidate_contribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation")]
		public string Committee_designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation_full")]
		public string Committee_designation_full { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Committee_state { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		public string Committee_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_refunds")]
		public System.Nullable<System.Double> Contribution_refunds { get; set; }
		
		/// <summary>
		/// Contribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributions")]
		public System.Nullable<System.Double> Contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributions_ie_and_party_expenditures_made_percent")]
		public System.Nullable<System.Double> Contributions_ie_and_party_expenditures_made_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency_full")]
		public string Filing_frequency_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions")]
		public System.Nullable<System.Double> Individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions_percent")]
		public System.Nullable<System.Double> Individual_contributions_percent { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions")]
		public System.Nullable<System.Double> Individual_unitemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_beginning_image_number")]
		public string Last_beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Last_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_by_committee")]
		public System.Nullable<System.Double> Last_debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_to_committee")]
		public System.Nullable<System.Double> Last_debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_type_full")]
		public string Last_report_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_year")]
		public System.Nullable<System.Int32> Last_report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments")]
		public System.Nullable<System.Double> Loan_repayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_candidate_loans")]
		public System.Nullable<System.Double> Loan_repayments_candidate_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_other_loans")]
		public System.Nullable<System.Double> Loan_repayments_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans")]
		public System.Nullable<System.Double> Loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made_by_candidate")]
		public System.Nullable<System.Double> Loans_made_by_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions")]
		public System.Nullable<System.Double> Net_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures")]
		public System.Nullable<System.Double> Net_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures")]
		public System.Nullable<System.Double> Operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_percent")]
		public System.Nullable<System.Double> Operating_expenditures_percent { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_disbursements")]
		public System.Nullable<System.Double> Other_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts")]
		public System.Nullable<System.Double> Other_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party_and_other_committee_contributions_percent")]
		public System.Nullable<System.Double> Party_and_other_committee_contributions_percent { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions")]
		public System.Nullable<System.Double> Political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions")]
		public System.Nullable<System.Double> Refunded_individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_coverage_date")]
		public System.Nullable<System.DateOnly> Transaction_coverage_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_from_other_authorized_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsHouseSenatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeTotalsHouseSenate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsIEOnly
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Committee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributions_ie_and_party_expenditures_made_percent")]
		public System.Nullable<System.Double> Contributions_ie_and_party_expenditures_made_percent { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency_full")]
		public string Filing_frequency_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions_percent")]
		public System.Nullable<System.Double> Individual_contributions_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_beginning_image_number")]
		public string Last_beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Last_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_percent")]
		public System.Nullable<System.Double> Operating_expenditures_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party_and_other_committee_contributions_percent")]
		public System.Nullable<System.Double> Party_and_other_committee_contributions_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_independent_contributions")]
		public System.Nullable<System.Double> Total_independent_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_independent_expenditures")]
		public System.Nullable<System.Double> Total_independent_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_coverage_date")]
		public System.Nullable<System.DateOnly> Transaction_coverage_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsIEOnlyPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeTotalsIEOnly[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsPacParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="all_loans_received")]
		public System.Nullable<System.Double> All_loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allocated_federal_election_levin_share")]
		public System.Nullable<System.Double> Allocated_federal_election_levin_share { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation")]
		public string Committee_designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation_full")]
		public string Committee_designation_full { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Committee_state { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		public string Committee_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_refunds")]
		public System.Nullable<System.Double> Contribution_refunds { get; set; }
		
		/// <summary>
		/// Contribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributions")]
		public System.Nullable<System.Double> Contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributions_ie_and_party_expenditures_made_percent")]
		public System.Nullable<System.Double> Contributions_ie_and_party_expenditures_made_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="convention_exp")]
		public System.Nullable<System.Double> Convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinated_expenditures_by_party_committee")]
		public System.Nullable<System.Double> Coordinated_expenditures_by_party_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exp_prior_years_subject_limits")]
		public System.Nullable<System.Double> Exp_prior_years_subject_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exp_subject_limits")]
		public System.Nullable<System.Double> Exp_subject_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_committee_contributions")]
		public System.Nullable<System.Double> Fed_candidate_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_candidate_contribution_refunds")]
		public System.Nullable<System.Double> Fed_candidate_contribution_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_disbursements")]
		public System.Nullable<System.Double> Fed_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_election_activity")]
		public System.Nullable<System.Double> Fed_election_activity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_operating_expenditures")]
		public System.Nullable<System.Double> Fed_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fed_receipts")]
		public System.Nullable<System.Double> Fed_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds")]
		public System.Nullable<System.Double> Federal_funds { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency_full")]
		public string Filing_frequency_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures")]
		public System.Nullable<System.Double> Independent_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions")]
		public System.Nullable<System.Double> Individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions_percent")]
		public System.Nullable<System.Double> Individual_contributions_percent { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions")]
		public System.Nullable<System.Double> Individual_unitemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_convention_exp")]
		public System.Nullable<System.Double> Itemized_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_other_disb")]
		public System.Nullable<System.Double> Itemized_other_disb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_other_income")]
		public System.Nullable<System.Double> Itemized_other_income { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_other_refunds")]
		public System.Nullable<System.Double> Itemized_other_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemized_refunds_relating_convention_exp")]
		public System.Nullable<System.Double> Itemized_refunds_relating_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_beginning_image_number")]
		public string Last_beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Last_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_by_committee")]
		public System.Nullable<System.Double> Last_debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_to_committee")]
		public System.Nullable<System.Double> Last_debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_type_full")]
		public string Last_report_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_year")]
		public System.Nullable<System.Int32> Last_report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made")]
		public System.Nullable<System.Double> Loan_repayments_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_received")]
		public System.Nullable<System.Double> Loan_repayments_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_and_loan_repayments_made")]
		public System.Nullable<System.Double> Loans_and_loan_repayments_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_and_loan_repayments_received")]
		public System.Nullable<System.Double> Loans_and_loan_repayments_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_made")]
		public System.Nullable<System.Double> Loans_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions")]
		public System.Nullable<System.Double> Net_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures")]
		public System.Nullable<System.Double> Net_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="non_allocated_fed_election_activity")]
		public System.Nullable<System.Double> Non_allocated_fed_election_activity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures")]
		public System.Nullable<System.Double> Operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_percent")]
		public System.Nullable<System.Double> Operating_expenditures_percent { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_disbursements")]
		public System.Nullable<System.Double> Other_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_operating_expenditures")]
		public System.Nullable<System.Double> Other_fed_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_fed_receipts")]
		public System.Nullable<System.Double> Other_fed_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_refunds")]
		public System.Nullable<System.Double> Other_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party_and_other_committee_contributions_percent")]
		public System.Nullable<System.Double> Party_and_other_committee_contributions_percent { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions")]
		public System.Nullable<System.Double> Political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions")]
		public System.Nullable<System.Double> Refunded_individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunds_relating_convention_exp")]
		public System.Nullable<System.Double> Refunds_relating_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity")]
		public System.Nullable<System.Double> Shared_fed_activity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_activity_nonfed")]
		public System.Nullable<System.Double> Shared_fed_activity_nonfed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_fed_operating_expenditures")]
		public System.Nullable<System.Double> Shared_fed_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shared_nonfed_operating_expenditures")]
		public System.Nullable<System.Double> Shared_nonfed_operating_expenditures { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_ids")]
		public string[] Sponsor_candidate_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_list")]
		public CommitteeTotalsPacPartySponsor_candidate_list[] CommitteeTotalsPacPartySponsor_candidate_list { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_exp_subject_limits")]
		public System.Nullable<System.Double> Total_exp_subject_limits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_transfers")]
		public System.Nullable<System.Double> Total_transfers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_coverage_date")]
		public System.Nullable<System.DateOnly> Transaction_coverage_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_party")]
		public System.Nullable<System.Double> Transfers_from_affiliated_party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_account")]
		public System.Nullable<System.Double> Transfers_from_nonfed_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_nonfed_levin")]
		public System.Nullable<System.Double> Transfers_from_nonfed_levin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_affiliated_committee")]
		public System.Nullable<System.Double> Transfers_to_affiliated_committee { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_convention_exp")]
		public System.Nullable<System.Double> Unitemized_convention_exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_other_disb")]
		public System.Nullable<System.Double> Unitemized_other_disb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_other_income")]
		public System.Nullable<System.Double> Unitemized_other_income { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_other_refunds")]
		public System.Nullable<System.Double> Unitemized_other_refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitemized_refunds_relating_convention_exp")]
		public System.Nullable<System.Double> Unitemized_refunds_relating_convention_exp { get; set; }
	}
	
	public class CommitteeTotalsPacPartySponsor_candidate_list
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_id")]
		public string Sponsor_candidate_id { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sponsor_candidate_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Sponsor_candidate_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsPacPartyPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeTotalsPacParty[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeTotals[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsPerCycle
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_contribution")]
		public System.Nullable<System.Double> Candidate_contribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation")]
		public string Committee_designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation_full")]
		public string Committee_designation_full { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Committee_state { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		public string Committee_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_refunds")]
		public System.Nullable<System.Double> Contribution_refunds { get; set; }
		
		/// <summary>
		/// Contribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributions")]
		public System.Nullable<System.Double> Contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributions_ie_and_party_expenditures_made_percent")]
		public System.Nullable<System.Double> Contributions_ie_and_party_expenditures_made_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_funds")]
		public System.Nullable<System.Double> Federal_funds { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency_full")]
		public string Filing_frequency_full { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements")]
		public System.Nullable<System.Double> Fundraising_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions")]
		public System.Nullable<System.Double> Individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual_contributions_percent")]
		public System.Nullable<System.Double> Individual_contributions_percent { get; set; }
		
		/// <summary>
		/// Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_itemized_contributions")]
		public System.Nullable<System.Double> Individual_itemized_contributions { get; set; }
		
		/// <summary>
		/// Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_unitemized_contributions")]
		public System.Nullable<System.Double> Individual_unitemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_beginning_image_number")]
		public string Last_beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_cash_on_hand_end_period")]
		public System.Nullable<System.Double> Last_cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_by_committee")]
		public System.Nullable<System.Double> Last_debts_owed_by_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debts_owed_to_committee")]
		public System.Nullable<System.Double> Last_debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_type_full")]
		public string Last_report_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_report_year")]
		public System.Nullable<System.Int32> Last_report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loan_repayments_made")]
		public System.Nullable<System.Double> Loan_repayments_made { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received")]
		public System.Nullable<System.Double> Loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loans_received_from_candidate")]
		public System.Nullable<System.Double> Loans_received_from_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_contributions")]
		public System.Nullable<System.Double> Net_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="net_operating_expenditures")]
		public System.Nullable<System.Double> Net_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_fundraising_expenditures")]
		public System.Nullable<System.Double> Offsets_to_fundraising_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_legal_accounting")]
		public System.Nullable<System.Double> Offsets_to_legal_accounting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures")]
		public System.Nullable<System.Double> Operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures_percent")]
		public System.Nullable<System.Double> Operating_expenditures_percent { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_disbursements")]
		public System.Nullable<System.Double> Other_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_loans_received")]
		public System.Nullable<System.Double> Other_loans_received { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_political_committee_contributions")]
		public System.Nullable<System.Double> Other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="other_receipts")]
		public System.Nullable<System.Double> Other_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party_and_other_committee_contributions_percent")]
		public System.Nullable<System.Double> Party_and_other_committee_contributions_percent { get; set; }
		
		/// <summary>
		/// Party affiliated with a candidate or committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="political_party_committee_contributions")]
		public System.Nullable<System.Double> Political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_individual_contributions")]
		public System.Nullable<System.Double> Refunded_individual_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_other_political_committee_contributions")]
		public System.Nullable<System.Double> Refunded_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refunded_political_party_committee_contributions")]
		public System.Nullable<System.Double> Refunded_political_party_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_by_candidate")]
		public System.Nullable<System.Double> Repayments_loans_made_by_candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans")]
		public System.Nullable<System.Double> Repayments_other_loans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_form")]
		public string Report_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Total_offsets_to_operating_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_coverage_date")]
		public System.Nullable<System.DateOnly> Transaction_coverage_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committee")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committee")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committee { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitteeTotalsPerCyclePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommitteeTotalsPerCycle[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommunicationCost
	{
		
		[System.Runtime.Serialization.DataMember(Name="action_code")]
		public string Action_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action_code_full")]
		public string Action_code_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_first_name")]
		public string Candidate_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_middle_name")]
		public string Candidate_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_district")]
		public string Candidate_office_district { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_full")]
		public string Candidate_office_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state")]
		public string Candidate_office_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="communication_class")]
		public string Communication_class { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="communication_type")]
		public string Communication_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="communication_type_full")]
		public string Communication_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="form_type_code")]
		public string Form_type_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_sub_id")]
		public System.Nullable<System.Int32> Original_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_general_indicator")]
		public string Primary_general_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_general_indicator_description")]
		public string Primary_general_indicator_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public string Purpose { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type")]
		public string Schedule_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type_full")]
		public string Schedule_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		public string State_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public System.Nullable<System.Int32> Sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support_oppose_indicator")]
		public string Support_oppose_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tran_id")]
		public string Tran_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_amount")]
		public System.Nullable<System.Double> Transaction_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_date")]
		public System.Nullable<System.DateOnly> Transaction_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_type")]
		public string Transaction_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommunicationCostByCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate")]
		public string Candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public string Committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="support_oppose_indicator")]
		public string Support_oppose_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommunicationCostByCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommunicationCostByCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommunicationCostPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CommunicationCost[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ECTotalsByCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ECTotalsByCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ECTotalsByCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EFilings
	{
		
		[System.Runtime.Serialization.DataMember(Name="amended_by")]
		public System.Nullable<System.Int32> Amended_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public int[] Amendment_chain { get; set; }
		
		/// <summary>
		/// 
		///Number of times the report has been amended.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_number")]
		public System.Nullable<System.Int32> Amendment_number { get; set; }
		
		/// <summary>
		/// 
		///For amendments, this file_number is the file_number of the previous report that is being amended. Refer to the amended_by for the most recent version of the report.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amends_file")]
		public System.Nullable<System.Int32> Amends_file { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateOnly> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ending_image_number")]
		public string Ending_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		/// <summary>
		/// Filing ID number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		/// <summary>
		/// Timestamp of electronic or paper record that FEC received
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filed_date")]
		public System.Nullable<System.DateOnly> Filed_date { get; set; }
		
		/// <summary>
		/// The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form_type")]
		public string Form_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="html_url")]
		public string Html_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		/// <summary>
		/// Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="load_timestamp")]
		public System.Nullable<System.DateTimeOffset> Load_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_filing")]
		public System.Nullable<System.Int32> Most_recent_filing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateTimeOffset> Receipt_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EFilingsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EFilings[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EfilingsAmendments
	{
		
		/// <summary>
		/// 
		///The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		///amendments were filed up to the amendment being inspected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public double[] Amendment_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="depth")]
		public System.Nullable<System.Double> Depth { get; set; }
		
		/// <summary>
		/// Filing ID number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Double> Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longest_chain")]
		public double[] Longest_chain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_filing")]
		public System.Nullable<System.Double> Most_recent_filing { get; set; }
		
		/// <summary>
		/// 
		///Previous filing ID number
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_file_number")]
		public System.Nullable<System.Double> Previous_file_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EfilingsAmendmentsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EfilingsAmendments[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Election
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_election_year")]
		public System.Nullable<System.Int32> Candidate_election_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_pcc_id")]
		public string Candidate_pcc_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_pcc_name")]
		public string Candidate_pcc_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_ids")]
		public string[] Committee_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incumbent_challenge_full")]
		public string Incumbent_challenge_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_disbursements")]
		public System.Nullable<System.Double> Total_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_receipts")]
		public System.Nullable<System.Double> Total_receipts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionDate
	{
		
		[System.Runtime.Serialization.DataMember(Name="active_election")]
		public System.Nullable<System.Boolean> Active_election { get; set; }
		
		/// <summary>
		/// Date the record was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_date")]
		public System.Nullable<System.DateTimeOffset> Create_date { get; set; }
		
		/// <summary>
		/// Date of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_date")]
		public System.Nullable<System.DateOnly> Election_date { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_district")]
		public System.Nullable<System.Int32> Election_district { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_notes")]
		public string Election_notes { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_party")]
		public string Election_party { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_state")]
		public string Election_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_type_full")]
		public string Election_type_full { get; set; }
		
		/// <summary>
		/// Election type 
		///Convention, Primary,
		///General, Special,
		///Runoff etc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_type_id")]
		public string Election_type_id { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office_sought")]
		public string Office_sought { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_general_date")]
		public System.Nullable<System.DateOnly> Primary_general_date { get; set; }
		
		/// <summary>
		/// Date the record was updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.DateTimeOffset> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionDatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ElectionDate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Election[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionSearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_status")]
		public string Candidate_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incumbent_id")]
		public string Incumbent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incumbent_name")]
		public string Incumbent_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office")]
		public string Office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionSearchPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ElectionSearch[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures")]
		public System.Nullable<System.Double> Independent_expenditures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Electioneering
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		/// <summary>
		/// 
		///"If an electioneering cost targets several candidates, the total cost is
		///divided by the number of candidates. If it only mentions one candidate
		///the full cost of the communication is listed."
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculated_candidate_share")]
		public System.Nullable<System.Double> Calculated_candidate_share { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_district")]
		public string Candidate_district { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_state")]
		public string Candidate_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// 
		///It is the airing, broadcast, cablecast or other dissemination of the communication.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communication_date")]
		public System.Nullable<System.DateOnly> Communication_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_amount")]
		public System.Nullable<System.Double> Disbursement_amount { get; set; }
		
		/// <summary>
		/// 
		///Disbursement date includes actual disbursements and execution of contracts creating
		///an obligation to make disbursements (SB date of disbursement).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursement_date")]
		public System.Nullable<System.DateOnly> Disbursement_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_type")]
		public string Election_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link_id")]
		public System.Nullable<System.Int32> Link_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_of_candidates")]
		public System.Nullable<System.Double> Number_of_candidates { get; set; }
		
		/// <summary>
		/// 
		///Name of the entity that received the payment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_state")]
		public string Payee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// 
		///The pubic distribution date is the date that triggers disclosure of the
		///electioneering communication (date reported on page 1 of Form 9).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_distribution_date")]
		public System.Nullable<System.DateOnly> Public_distribution_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purpose_description")]
		public string Purpose_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sb_image_num")]
		public string Sb_image_num { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sb_link_id")]
		public string Sb_link_id { get; set; }
		
		/// <summary>
		/// 
		///The identifier for each electioneering record.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public System.Nullable<System.Int32> Sub_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectioneeringByCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate")]
		public string Candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public string Committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectioneeringByCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ElectioneeringByCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectioneeringPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public SeekInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Electioneering[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SeekInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_indexes")]
		public string Last_indexes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Int32> Per_page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionsList
	{
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		public string Office { get; set; }
		
		/// <summary>
		/// US state or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElectionsListPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ElectionsList[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityReceiptDisbursementTotals
	{
		
		/// <summary>
		/// Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative_candidate_disbursements")]
		public System.Nullable<System.Single> Cumulative_candidate_disbursements { get; set; }
		
		/// <summary>
		/// Cumulative candidate receipts in a two year period, adjusted to avoid double counting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative_candidate_receipts")]
		public System.Nullable<System.Single> Cumulative_candidate_receipts { get; set; }
		
		/// <summary>
		/// Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative_pac_disbursements")]
		public System.Nullable<System.Single> Cumulative_pac_disbursements { get; set; }
		
		/// <summary>
		/// Cumulative PAC recipts in a two year period, adjusted to avoid double counting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative_pac_receipts")]
		public System.Nullable<System.Single> Cumulative_pac_receipts { get; set; }
		
		/// <summary>
		/// Cumulative party disbursements in a two year period, adjusted to avoid double counting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative_party_disbursements")]
		public System.Nullable<System.Single> Cumulative_party_disbursements { get; set; }
		
		/// <summary>
		/// Cumulative party receipts in a two year period, adjusted to avoid double counting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cumulative_party_receipts")]
		public System.Nullable<System.Single> Cumulative_party_receipts { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public System.Nullable<System.DateOnly> End_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityReceiptDisbursementTotalsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EntityReceiptDisbursementTotals[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Filings
	{
		
		/// <summary>
		/// 
		///Additional banks or depositories in which the committee deposits funds, holds accounts, rents safety deposit boxes or maintains funds.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additional_bank_names")]
		public string[] Additional_bank_names { get; set; }
		
		/// <summary>
		/// 
		///The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		///amendments were filed up to the amendment being inspected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_chain")]
		public double[] Amendment_chain { get; set; }
		
		/// <summary>
		/// 
		///The first value in the chain is the original filing.  The ordering in the chain reflects the order the
		///amendments were filed up to the amendment being inspected.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		/// <summary>
		/// 
		///Amendment version
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_version")]
		public System.Nullable<System.Int32> Amendment_version { get; set; }
		
		/// <summary>
		/// 
		///City of bank or depository as reported on the Form 1
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_depository_city")]
		public string Bank_depository_city { get; set; }
		
		/// <summary>
		/// 
		///Primary bank or depository in which the committee deposits funds,holds accounts, rents safety deposit boxes or maintains funds.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_depository_name")]
		public string Bank_depository_name { get; set; }
		
		/// <summary>
		/// 
		///State of bank or depository as reported on the Form 1
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_depository_state")]
		public string Bank_depository_state { get; set; }
		
		/// <summary>
		/// 
		///Street of bank or depository as reported on their Form 1.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_depository_street_1")]
		public string Bank_depository_street_1 { get; set; }
		
		/// <summary>
		/// 
		///Second line of the street of bank or depository as reported on the Form 1
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_depository_street_2")]
		public string Bank_depository_street_2 { get; set; }
		
		/// <summary>
		/// 
		///Zip code of bank or depository as reported on the Form 1
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bank_depository_zip")]
		public string Bank_depository_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		/// <summary>
		/// Balance for the committee at the start of the two-year period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_beginning_period")]
		public System.Nullable<System.Double> Cash_on_hand_beginning_period { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateOnly> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateOnly> Coverage_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		/// <summary>
		/// Debts owed to the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_to_committee")]
		public System.Nullable<System.Double> Debts_owed_to_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_description")]
		public string Document_description { get; set; }
		
		/// <summary>
		/// 
		///The type of document for documents other than reports:
		///    - 2 24 Hour Contribution Notice
		///    - 4 48 Hour Contribution Notice
		///    - A Debt Settlement Statement
		///    - B Acknowledgment of Receipt of Debt Settlement Statement
		///    - C RFAI: Debt Settlement First Notice
		///    - D Commission Debt Settlement Review
		///    - E Commission Response TO Debt Settlement Request
		///    - F Administrative Termination
		///    - G Debt Settlement Plan Amendment
		///    - H Disavowal Notice
		///    - I Disavowal Response
		///    - J Conduit Report
		///    - K Termination Approval
		///    - L Repeat Non-Filer Notice
		///    - M Filing Frequency Change Notice
		///    - N Paper Amendment to Electronic Report
		///    - O Acknowledgment of Filing Frequency Change
		///    - S RFAI: Debt Settlement Second
		///    - T Miscellaneous Report TO FEC
		///    - V Repeat Violation Notice (441A OR 441B)
		///    - P Notice of Paper Filing
		///    - R F3L Filing Frequency Change Notice
		///    - Q Acknowledgment of F3L Filing Frequency Change
		///    - U Unregistered Committee Notice
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document_type")]
		public string Document_type { get; set; }
		
		/// <summary>
		/// 
		///The type of document for documents other than reports:
		///    - 2 24 Hour Contribution Notice
		///    - 4 48 Hour Contribution Notice
		///    - A Debt Settlement Statement
		///    - B Acknowledgment of Receipt of Debt Settlement Statement
		///    - C RFAI: Debt Settlement First Notice
		///    - D Commission Debt Settlement Review
		///    - E Commission Response TO Debt Settlement Request
		///    - F Administrative Termination
		///    - G Debt Settlement Plan Amendment
		///    - H Disavowal Notice
		///    - I Disavowal Response
		///    - J Conduit Report
		///    - K Termination Approval
		///    - L Repeat Non-Filer Notice
		///    - M Filing Frequency Change Notice
		///    - N Paper Amendment to Electronic Report
		///    - O Acknowledgment of Filing Frequency Change
		///    - S RFAI: Debt Settlement Second
		///    - T Miscellaneous Report TO FEC
		///    - V Repeat Violation Notice (441A OR 441B)
		///    - P Notice of Paper Filing
		///    - R F3L Filing Frequency Change Notice
		///    - Q Acknowledgment of F3L Filing Frequency Change
		///    - U Unregistered Committee Notice
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="document_type_full")]
		public string Document_type_full { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ending_image_number")]
		public string Ending_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_file_id")]
		public string Fec_file_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		/// <summary>
		/// Filing ID number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		/// <summary>
		/// 
		///The forms filed are categorized based on the nature of the filing:
		///    - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		///    - NOTICE F5, F24, F6, F9, F10, F11
		///    - STATEMENT F1, F2
		///    - OTHER F1M, F8, F99, F12, FRQ
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form_category")]
		public string Form_category { get; set; }
		
		/// <summary>
		/// The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form_type")]
		public string Form_type { get; set; }
		
		/// <summary>
		/// House personal funds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="house_personal_funds")]
		public System.Nullable<System.Double> House_personal_funds { get; set; }
		
		/// <summary>
		/// 
		///HTML link to the filing.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html_url")]
		public string Html_url { get; set; }
		
		/// <summary>
		/// 
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_amended")]
		public System.Nullable<System.Boolean> Is_amended { get; set; }
		
		/// <summary>
		/// The method used to file with the FEC, either electronic or on paper.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="means_filed")]
		public string Means_filed { get; set; }
		
		/// <summary>
		/// 
		///Report is either new or is the most-recently filed amendment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="most_recent_file_number")]
		public System.Nullable<System.Int32> Most_recent_file_number { get; set; }
		
		/// <summary>
		/// Net donations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="net_donations")]
		public System.Nullable<System.Double> Net_donations { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="office")]
		public string Office { get; set; }
		
		/// <summary>
		/// Opposition personal funds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opposition_personal_funds")]
		public System.Nullable<System.Double> Opposition_personal_funds { get; set; }
		
		/// <summary>
		/// 
		///Number of pages in the document
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		/// <summary>
		/// 
		///pdf link to the filing
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// 
		///Previous filing ID number
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_file_number")]
		public System.Nullable<System.Int32> Previous_file_number { get; set; }
		
		/// <summary>
		/// 
		///Primary general indicator
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary_general_indicator")]
		public string Primary_general_indicator { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateOnly> Receipt_date { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		/// <summary>
		/// 
		///Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		///    - 1 Statement of Organization
		///    - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		///    - 3 Second Notice - Reports
		///    - 4 Request for Additional Information
		///    - 5 Informational - Reports
		///    - 6 Second Notice - Statement of Organization
		///    - 7 Failure to File
		///    - 8 From Public Disclosure
		///    - 9 From Multi Candidate Status
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request_type")]
		public string Request_type { get; set; }
		
		/// <summary>
		/// Senate personal funds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="senate_personal_funds")]
		public System.Nullable<System.Double> Senate_personal_funds { get; set; }
		
		/// <summary>
		/// US state or territory where a candidate runs for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public string Sub_id { get; set; }
		
		/// <summary>
		/// Total communications cost
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_communication_cost")]
		public System.Nullable<System.Double> Total_communication_cost { get; set; }
		
		/// <summary>
		/// Total disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_disbursements")]
		public System.Nullable<System.Double> Total_disbursements { get; set; }
		
		/// <summary>
		/// Total independent expenditures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_independent_expenditures")]
		public System.Nullable<System.Double> Total_independent_expenditures { get; set; }
		
		/// <summary>
		/// Total individual contributions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_individual_contributions")]
		public System.Nullable<System.Double> Total_individual_contributions { get; set; }
		
		/// <summary>
		/// Total receipts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_receipts")]
		public System.Nullable<System.Double> Total_receipts { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		public string Treasurer_name { get; set; }
		
		/// <summary>
		/// Date the record was updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.DateOnly> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilingsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Filings[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IETotalsByCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support_oppose_indicator")]
		public string Support_oppose_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IETotalsByCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public IETotalsByCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InauguralDonations
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// Name of contributor
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contributor_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Contributor_name { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public double Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_donation")]
		public System.Nullable<System.Double> Total_donation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InauguralDonationsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public InauguralDonations[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationsLog
	{
		
		/// <summary>
		/// Amendent types:
		///    -N   new
		///    -A   amendment
		///    -T   terminated
		///    -C   consolidated
		///    -M   multi-candidate
		///    -S   secondary
		///
		///NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		/// <summary>
		/// 
		///Unique identifier for the electronic or paper report. This number is used to construct
		///PDF URLs to the original document.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier of the registered filer.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_committee_id")]
		public string Candidate_committee_id { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Beginning date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_start_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_start_date { get; set; }
		
		/// <summary>
		/// Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ending_image_number")]
		public string Ending_image_number { get; set; }
		
		/// <summary>
		/// The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form_type")]
		public string Form_type { get; set; }
		
		/// <summary>
		/// Date the FEC received the electronic or paper record
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipt_date")]
		public System.Nullable<System.DateTimeOffset> Receipt_date { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		/// <summary>
		/// 
		///Status of the transactional report.
		///    -0- Transaction is entered 
		///          into the system.
		///          But not verified.
		///    -1- Transaction is verified.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_num")]
		public System.Nullable<System.Int32> Status_num { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier of the transactional report.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public System.Nullable<System.Int32> Sub_id { get; set; }
		
		/// <summary>
		/// 
		///Date when the report is entered into the database
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary_data_complete_date")]
		public System.Nullable<System.DateTimeOffset> Summary_data_complete_date { get; set; }
		
		/// <summary>
		/// 
		///Same day or a day after the report is loaded in the database
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary_data_verification_date")]
		public System.Nullable<System.DateTimeOffset> Summary_data_verification_date { get; set; }
		
		/// <summary>
		/// 
		///Date when the report is processed completely
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_data_complete_date")]
		public System.Nullable<System.DateOnly> Transaction_data_complete_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationsLogPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public OperationsLog[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialByCandidate
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// 
		///Candidate last name
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_party_affiliation")]
		public string Candidate_party_affiliation { get; set; }
		
		/// <summary>
		/// State of contributor
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Contributor_state { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		/// <summary>
		/// Net contributions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="net_receipts")]
		public System.Nullable<System.Double> Net_receipts { get; set; }
		
		/// <summary>
		/// 
		///Net receipts, in millions
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounded_net_receipts")]
		public System.Nullable<System.Double> Rounded_net_receipts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialByCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PresidentialByCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialBySize
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///
		/// Max length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(0)]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// 
		///Contributions received
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contribution_receipt_amount")]
		public System.Nullable<System.Double> Contribution_receipt_amount { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		/// <summary>
		/// 
		///The total all contributions in the following ranges:
		///```
		///  -0    $200 and under
		///  -200  $200.01 - $499.99
		///  -500  $500 - $999.99
		///  -1000 $1000 - $1999.99
		///  -2000 $2000 +
		///```
		///Unitemized contributions are included in the `0` category.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// 
		///The total all contributions range id.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size_range_id")]
		public System.Nullable<System.Int32> Size_range_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialBySizePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PresidentialBySize[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialByState
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///
		/// Max length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		[System.ComponentModel.DataAnnotations.MaxLength(0)]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// 
		///Contributions received
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contribution_receipt_amount")]
		public System.Nullable<System.Double> Contribution_receipt_amount { get; set; }
		
		/// <summary>
		/// State of contributor
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contribution_state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Contribution_state { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialByStatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PresidentialByState[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialCoverage
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// Ending date of the reporting period
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage_end_date")]
		public System.Nullable<System.DateTimeOffset> Coverage_end_date { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialCoveragePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PresidentialCoverage[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialSummary
	{
		
		/// <summary>
		/// 
		///candidate contributions less repayments
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_contributions_less_repayments")]
		public System.Nullable<System.Double> Candidate_contributions_less_repayments { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		/// <summary>
		/// 
		///Candidate last name
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_party_affiliation")]
		public string Candidate_party_affiliation { get; set; }
		
		/// <summary>
		/// Ending cash balance on the most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end")]
		public System.Nullable<System.Double> Cash_on_hand_end { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_designation")]
		public string Committee_designation { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// Debts owed by the committee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		/// <summary>
		/// 
		///disbursements less offsets
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disbursements_less_offsets")]
		public System.Nullable<System.Double> Disbursements_less_offsets { get; set; }
		
		/// <summary>
		/// Year of election
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		/// <summary>
		/// 
		///exempt legal accounting disbursement
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exempt_legal_accounting_disbursement")]
		public System.Nullable<System.Double> Exempt_legal_accounting_disbursement { get; set; }
		
		/// <summary>
		/// Federal funds: Public funding of presidential elections means that qualified presidential candidates                 receive federal government funds to pay for the valid expenses of their political campaigns                 in both the primary and general elections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federal_funds")]
		public System.Nullable<System.Double> Federal_funds { get; set; }
		
		/// <summary>
		/// 
		///fundraising disbursements
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundraising_disbursements")]
		public System.Nullable<System.Double> Fundraising_disbursements { get; set; }
		
		/// <summary>
		/// 
		///individual contributions less refunds
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individual_contributions_less_refunds")]
		public System.Nullable<System.Double> Individual_contributions_less_refunds { get; set; }
		
		/// <summary>
		/// 
		///Contributions received
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="net_receipts")]
		public System.Nullable<System.Double> Net_receipts { get; set; }
		
		/// <summary>
		/// Offsets to operating expenditures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsets_to_operating_expenditures")]
		public System.Nullable<System.Double> Offsets_to_operating_expenditures { get; set; }
		
		/// <summary>
		/// Total operating expenditures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operating_expenditures")]
		public System.Nullable<System.Double> Operating_expenditures { get; set; }
		
		/// <summary>
		/// Other disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other_disbursements")]
		public System.Nullable<System.Double> Other_disbursements { get; set; }
		
		/// <summary>
		/// 
		///pac contributions less refunds
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pac_contributions_less_refunds")]
		public System.Nullable<System.Double> Pac_contributions_less_refunds { get; set; }
		
		/// <summary>
		/// 
		///party contributions less refunds
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_contributions_less_refunds")]
		public System.Nullable<System.Double> Party_contributions_less_refunds { get; set; }
		
		/// <summary>
		/// 
		///repayments loans made by candidate
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repayments_loans_made_by_candidate")]
		public System.Nullable<System.Double> Repayments_loans_made_by_candidate { get; set; }
		
		/// <summary>
		/// 
		///repayments other loans
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repayments_other_loans")]
		public System.Nullable<System.Double> Repayments_other_loans { get; set; }
		
		/// <summary>
		/// 
		///Net receipts, in millions
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rounded_net_receipts")]
		public System.Nullable<System.Double> Rounded_net_receipts { get; set; }
		
		/// <summary>
		/// 
		///total contribution refunds
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_contribution_refunds")]
		public System.Nullable<System.Double> Total_contribution_refunds { get; set; }
		
		/// <summary>
		/// 
		///total loan repayments made
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_loan_repayments_made")]
		public System.Nullable<System.Double> Total_loan_repayments_made { get; set; }
		
		/// <summary>
		/// 
		///transfers from affiliated committees
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfers_from_affiliated_committees")]
		public System.Nullable<System.Double> Transfers_from_affiliated_committees { get; set; }
		
		/// <summary>
		/// 
		///transfers to other authorized committees
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfers_to_other_authorized_committees")]
		public System.Nullable<System.Double> Transfers_to_other_authorized_committees { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PresidentialSummaryPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PresidentialSummary[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RadAnalyst
	{
		
		/// <summary>
		/// ID of RAD analyst.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyst_id")]
		public System.Nullable<System.Double> Analyst_id { get; set; }
		
		/// <summary>
		/// Short ID of RAD analyst.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyst_short_id")]
		public System.Nullable<System.Double> Analyst_short_id { get; set; }
		
		/// <summary>
		/// Date of most recent RAD analyst assignment change
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment_update_date")]
		public System.Nullable<System.DateOnly> Assignment_update_date { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// Email of RAD analyst
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Email { get; set; }
		
		/// <summary>
		/// Fist name of RAD analyst
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string First_name { get; set; }
		
		/// <summary>
		/// Last name of RAD analyst
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Branch of RAD analyst
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rad_branch")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Rad_branch { get; set; }
		
		/// <summary>
		/// Telephone extension of RAD analyst
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="telephone_ext")]
		public System.Nullable<System.Double> Telephone_ext { get; set; }
		
		/// <summary>
		/// Title of RAD analyst
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RadAnalystPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public RadAnalyst[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportDate
	{
		
		/// <summary>
		/// Date the record was created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_date")]
		public System.Nullable<System.DateOnly> Create_date { get; set; }
		
		/// <summary>
		/// Date the report is due
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due_date")]
		public System.Nullable<System.DateOnly> Due_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		/// <summary>
		/// Date the record was updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.DateOnly> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportDatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ReportDate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportType
	{
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type_full")]
		public string Report_type_full { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleA
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator_desc")]
		public string Amendment_indicator_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_schedule_name")]
		public string Back_reference_schedule_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_transaction_id")]
		public string Back_reference_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_first_name")]
		public string Candidate_first_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_middle_name")]
		public string Candidate_middle_name { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_office_district")]
		public string Candidate_office_district { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_full")]
		public string Candidate_office_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state")]
		public string Candidate_office_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state_full")]
		public string Candidate_office_state_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_prefix")]
		public string Candidate_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_suffix")]
		public string Candidate_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public CommitteeHistory Committee { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_city")]
		public string Conduit_committee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_id")]
		public string Conduit_committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_name")]
		public string Conduit_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_state")]
		public string Conduit_committee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street1")]
		public string Conduit_committee_street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street2")]
		public string Conduit_committee_street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_zip")]
		public System.Nullable<System.Int32> Conduit_committee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_receipt_amount")]
		public System.Nullable<System.Double> Contribution_receipt_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_receipt_date")]
		public System.Nullable<System.DateOnly> Contribution_receipt_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor")]
		public CommitteeHistory Contributor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_aggregate_ytd")]
		public System.Nullable<System.Double> Contributor_aggregate_ytd { get; set; }
		
		/// <summary>
		/// City of contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_city")]
		public string Contributor_city { get; set; }
		
		/// <summary>
		/// Employer of contributor, filers need to make an effort to gather this information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_employer")]
		public string Contributor_employer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_first_name")]
		public string Contributor_first_name { get; set; }
		
		/// <summary>
		/// The FEC identifier should be represented here if the contributor is registered with the FEC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_id")]
		public string Contributor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_last_name")]
		public string Contributor_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_middle_name")]
		public string Contributor_middle_name { get; set; }
		
		/// <summary>
		/// Name of contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_name")]
		public string Contributor_name { get; set; }
		
		/// <summary>
		/// Occupation of contributor, filers need to make an effort to gather this information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_occupation")]
		public string Contributor_occupation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_prefix")]
		public string Contributor_prefix { get; set; }
		
		/// <summary>
		/// State of contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_state")]
		public string Contributor_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_street_1")]
		public string Contributor_street_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_street_2")]
		public string Contributor_street_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_suffix")]
		public string Contributor_suffix { get; set; }
		
		/// <summary>
		/// Zip code of contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_zip")]
		public string Contributor_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="donor_committee_name")]
		public string Donor_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_type")]
		public string Election_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_type_full")]
		public string Election_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type_desc")]
		public string Entity_type_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_election_type_desc")]
		public string Fec_election_type_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_election_year")]
		public string Fec_election_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing_form")]
		public string Filing_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="increased_limit")]
		public string Increased_limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_individual")]
		public System.Nullable<System.Boolean> Is_individual { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number")]
		public string Line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number_label")]
		public string Line_number_label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link_id")]
		public System.Nullable<System.Int32> Link_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load_date")]
		public System.Nullable<System.DateTimeOffset> Load_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code")]
		public string Memo_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code_full")]
		public string Memo_code_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_text")]
		public string Memo_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoed_subtotal")]
		public System.Nullable<System.Boolean> Memoed_subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="national_committee_nonfederal_account")]
		public string National_committee_nonfederal_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_sub_id")]
		public string Original_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipt_type")]
		public string Receipt_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipt_type_desc")]
		public string Receipt_type_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipt_type_full")]
		public string Receipt_type_full { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_committee_designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Recipient_committee_designation { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_committee_org_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Recipient_committee_org_type { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipient_committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Recipient_committee_type { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type")]
		public string Schedule_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type_full")]
		public string Schedule_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public string Sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// 
		///This is a two-year period that is derived from the year a transaction took place in the
		///Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		///(contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		///the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		///have the date  of the transaction, we fall back to using the report year (report_year in both
		///tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		///specified, the results default to the most current cycle.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="two_year_transaction_period")]
		public System.Nullable<System.Int32> Two_year_transaction_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unused_contbr_id")]
		public string Unused_contbr_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByEmployer
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Employer of contributor as reported on the committee's filing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="employer")]
		public string Employer { get; set; }
		
		/// <summary>
		/// Sum of transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByEmployerPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleAByEmployer[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByOccupation
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Occupation of contributor as reported on the committee's filing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="occupation")]
		public string Occupation { get; set; }
		
		/// <summary>
		/// Sum of transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByOccupationPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleAByOccupation[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleABySize
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public int Size { get; set; }
		
		/// <summary>
		/// Sum of transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleABySizeCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleABySizeCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleABySizeCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleABySizePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleABySize[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByState
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// US state or territory
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// US state or territory
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		public string State_full { get; set; }
		
		/// <summary>
		/// Sum of transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByStateCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		public string State_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByStateCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleAByStateCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByStatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleAByState[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByStateRecipientTotals
	{
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		public string Committee_type_full { get; set; }
		
		/// <summary>
		/// Number of records making up the total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		/// <summary>
		/// US state or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// US state or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		public string State_full { get; set; }
		
		/// <summary>
		/// The calculated total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByStateRecipientTotalsPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleAByStateRecipientTotals[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByZip
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// US state or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// US state or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		public string State_full { get; set; }
		
		/// <summary>
		/// Sum of transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAByZipPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleAByZip[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAEfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_schedule_name")]
		public string Back_reference_schedule_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_transaction_id")]
		public string Back_reference_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public CommitteeHistory Committee { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_city")]
		public string Conduit_committee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_id")]
		public string Conduit_committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_name")]
		public string Conduit_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_state")]
		public string Conduit_committee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street1")]
		public string Conduit_committee_street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street2")]
		public string Conduit_committee_street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_zip")]
		public System.Nullable<System.Int32> Conduit_committee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_receipt_amount")]
		public System.Nullable<System.Double> Contribution_receipt_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contribution_receipt_date")]
		public System.Nullable<System.DateOnly> Contribution_receipt_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_aggregate_ytd")]
		public System.Nullable<System.Double> Contributor_aggregate_ytd { get; set; }
		
		/// <summary>
		/// City of contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_city")]
		public string Contributor_city { get; set; }
		
		/// <summary>
		/// Employer of contributor, filers need to make an effort to gather this information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_employer")]
		public string Contributor_employer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_first_name")]
		public string Contributor_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_last_name")]
		public string Contributor_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_middle_name")]
		public string Contributor_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_name")]
		public string Contributor_name { get; set; }
		
		/// <summary>
		/// Occupation of contributor, filers need to make an effort to gather this information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_occupation")]
		public string Contributor_occupation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_prefix")]
		public string Contributor_prefix { get; set; }
		
		/// <summary>
		/// State of contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_state")]
		public string Contributor_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contributor_suffix")]
		public string Contributor_suffix { get; set; }
		
		/// <summary>
		/// Zip code of contributor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contributor_zip")]
		public string Contributor_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Int32> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_election_type_desc")]
		public string Fec_election_type_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public int File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing")]
		public EFilings Filing { get; set; }
		
		/// <summary>
		/// 
		///An unique identifier for each page where the electronic or paper filing is reported.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number")]
		public string Line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load_timestamp")]
		public System.Nullable<System.DateTimeOffset> Load_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code")]
		public string Memo_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_text")]
		public string Memo_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pgo")]
		public string Pgo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related_line_number")]
		public int Related_line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAEfilePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleAEfile[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleAPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public SeekInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleA[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleB
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator_desc")]
		public string Amendment_indicator_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_schedule_id")]
		public string Back_reference_schedule_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_transaction_id")]
		public string Back_reference_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beneficiary_committee_name")]
		public string Beneficiary_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_first_name")]
		public string Candidate_first_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_middle_name")]
		public string Candidate_middle_name { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_description")]
		public string Candidate_office_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_district")]
		public string Candidate_office_district { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state")]
		public string Candidate_office_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state_full")]
		public string Candidate_office_state_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_prefix")]
		public string Candidate_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_suffix")]
		public string Candidate_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_code")]
		public string Category_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_code_full")]
		public string Category_code_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comm_dt")]
		public System.Nullable<System.DateOnly> Comm_dt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public CommitteeHistory Committee { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_city")]
		public string Conduit_committee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_name")]
		public string Conduit_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_state")]
		public string Conduit_committee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street1")]
		public string Conduit_committee_street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street2")]
		public string Conduit_committee_street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_zip")]
		public System.Nullable<System.Int32> Conduit_committee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_amount")]
		public System.Nullable<System.Double> Disbursement_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_date")]
		public System.Nullable<System.DateOnly> Disbursement_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_description")]
		public string Disbursement_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_purpose_category")]
		public string Disbursement_purpose_category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_type")]
		public string Disbursement_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_type_description")]
		public string Disbursement_type_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_type")]
		public string Election_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="election_type_full")]
		public string Election_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type_desc")]
		public string Entity_type_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_election_type_desc")]
		public string Fec_election_type_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_election_year")]
		public string Fec_election_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing_form")]
		public string Filing_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number")]
		public string Line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number_label")]
		public string Line_number_label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link_id")]
		public System.Nullable<System.Int32> Link_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load_date")]
		public System.Nullable<System.DateTimeOffset> Load_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code")]
		public string Memo_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code_full")]
		public string Memo_code_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_text")]
		public string Memo_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoed_subtotal")]
		public System.Nullable<System.Boolean> Memoed_subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="national_committee_nonfederal_account")]
		public string National_committee_nonfederal_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_sub_id")]
		public string Original_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_employer")]
		public string Payee_employer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_first_name")]
		public string Payee_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_last_name")]
		public string Payee_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_middle_name")]
		public string Payee_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_occupation")]
		public string Payee_occupation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_prefix")]
		public string Payee_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_suffix")]
		public string Payee_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_city")]
		public string Recipient_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_committee")]
		public CommitteeHistory Recipient_committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_committee_id")]
		public string Recipient_committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_state")]
		public string Recipient_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_zip")]
		public string Recipient_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ref_disp_excess_flg")]
		public string Ref_disp_excess_flg { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type")]
		public string Schedule_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type_full")]
		public string Schedule_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="semi_annual_bundled_refund")]
		public System.Nullable<System.Double> Semi_annual_bundled_refund { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spender_committee_designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Spender_committee_designation { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spender_committee_org_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Spender_committee_org_type { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spender_committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Spender_committee_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public string Sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
		
		/// <summary>
		/// 
		///This is a two-year period that is derived from the year a transaction took place in the
		///Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		///(contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		///the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		///have the date  of the transaction, we fall back to using the report year (report_year in both
		///tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		///specified, the results default to the most current cycle.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="two_year_transaction_period")]
		public System.Nullable<System.Int32> Two_year_transaction_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unused_recipient_committee_id")]
		public string Unused_recipient_committee_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBByPurpose
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo_count")]
		public System.Nullable<System.Int32> Memo_count { get; set; }
		
		/// <summary>
		/// 
		///Schedule B disbursements aggregated by memoed items only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo_total")]
		public System.Nullable<System.Double> Memo_total { get; set; }
		
		/// <summary>
		/// Purpose of the expenditure
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public string Purpose { get; set; }
		
		/// <summary>
		/// 
		///Schedule B disbursements aggregated by non-memoed items only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBByPurposePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleBByPurpose[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBByRecipient
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// Disbursements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_total_disbursements")]
		public System.Nullable<System.Double> Committee_total_disbursements { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo_count")]
		public System.Nullable<System.Int32> Memo_count { get; set; }
		
		/// <summary>
		/// 
		///Schedule B disbursements aggregated by memoed items only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo_total")]
		public System.Nullable<System.Double> Memo_total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_disbursement_percent")]
		public System.Nullable<System.Double> Recipient_disbursement_percent { get; set; }
		
		/// <summary>
		/// Name of the entity receiving the disbursement
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// 
		///Schedule B disbursements aggregated by non-memoed items only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBByRecipientID
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo_count")]
		public System.Nullable<System.Int32> Memo_count { get; set; }
		
		/// <summary>
		/// 
		///Schedule B disbursements aggregated by memoed items only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo_total")]
		public System.Nullable<System.Double> Memo_total { get; set; }
		
		/// <summary>
		/// The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipient_id")]
		public string Recipient_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		/// <summary>
		/// 
		///Schedule B disbursements aggregated by non-memoed items only
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBByRecipientIDPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleBByRecipientID[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBByRecipientPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public SeekInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleBByRecipient[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBEfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_schedule_name")]
		public string Back_reference_schedule_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_transaction_id")]
		public string Back_reference_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beneficiary_committee_name")]
		public string Beneficiary_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_district")]
		public string Candidate_office_district { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public CommitteeHistory Committee { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_amount")]
		public System.Nullable<System.Double> Disbursement_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_date")]
		public System.Nullable<System.DateOnly> Disbursement_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_description")]
		public string Disbursement_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_type")]
		public string Disbursement_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public int File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing")]
		public EFilings Filing { get; set; }
		
		/// <summary>
		/// 
		///An unique identifier for each page where the electronic or paper filing is reported.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_notice")]
		public System.Nullable<System.Boolean> Is_notice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number")]
		public string Line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load_timestamp")]
		public System.Nullable<System.DateTimeOffset> Load_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code")]
		public string Memo_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_text")]
		public string Memo_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_city")]
		public string Recipient_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_name")]
		public string Recipient_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_prefix")]
		public string Recipient_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_state")]
		public string Recipient_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_suffix")]
		public string Recipient_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_zip")]
		public string Recipient_zip { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related_line_number")]
		public int Related_line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="semi_annual_bundled_refund")]
		public System.Nullable<System.Int32> Semi_annual_bundled_refund { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBEfilePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleBEfile[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleBPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public SeekInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleB[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleE
	{
		
		[System.Runtime.Serialization.DataMember(Name="action_code")]
		public string Action_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action_code_full")]
		public string Action_code_full { get; set; }
		
		/// <summary>
		/// Amendent types:
		///    -N   new
		///    -A   amendment
		///    -T   terminated
		///    -C   consolidated
		///    -M   multi-candidate
		///    -S   secondary
		///
		///NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		/// <summary>
		/// 
		///Number of times the report has been amended.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amendment_number")]
		public System.Nullable<System.Int32> Amendment_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_schedule_name")]
		public string Back_reference_schedule_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_transaction_id")]
		public string Back_reference_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate")]
		public string Candidate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_first_name")]
		public string Candidate_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_middle_name")]
		public string Candidate_middle_name { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_office_district")]
		public string Candidate_office_district { get; set; }
		
		/// <summary>
		/// US state or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state")]
		public string Candidate_office_state { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_party")]
		public string Candidate_party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_prefix")]
		public string Candidate_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_suffix")]
		public string Candidate_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_code")]
		public string Category_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_code_full")]
		public string Category_code_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public CommitteeHistory Committee { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_city")]
		public string Conduit_committee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_id")]
		public string Conduit_committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_name")]
		public string Conduit_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_state")]
		public string Conduit_committee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street1")]
		public string Conduit_committee_street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street2")]
		public string Conduit_committee_street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_zip")]
		public System.Nullable<System.Int32> Conduit_committee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dissemination_date")]
		public System.Nullable<System.DateOnly> Dissemination_date { get; set; }
		
		/// <summary>
		/// Election type 
		///Convention, Primary,
		///General, Special,
		///Runoff etc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_type")]
		public string Election_type { get; set; }
		
		/// <summary>
		/// Election type 
		///Convention, Primary,
		///General, Special,
		///Runoff etc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="election_type_full")]
		public string Election_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_amount")]
		public System.Nullable<System.Double> Expenditure_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_date")]
		public System.Nullable<System.DateOnly> Expenditure_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_description")]
		public string Expenditure_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_first_name")]
		public string Filer_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_last_name")]
		public string Filer_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_middle_name")]
		public string Filer_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_prefix")]
		public string Filer_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_suffix")]
		public string Filer_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing_date")]
		public System.Nullable<System.DateOnly> Filing_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing_form")]
		public string Filing_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_sign_date")]
		public System.Nullable<System.DateOnly> Independent_sign_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_sign_name")]
		public string Independent_sign_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_notice")]
		public System.Nullable<System.Boolean> Is_notice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number")]
		public string Line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link_id")]
		public System.Nullable<System.Int32> Link_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code")]
		public string Memo_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code_full")]
		public string Memo_code_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_text")]
		public string Memo_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoed_subtotal")]
		public System.Nullable<System.Boolean> Memoed_subtotal { get; set; }
		
		/// <summary>
		/// 
		///Report is either new or is the most-recently filed amendment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notary_commission_expiration_date")]
		public System.Nullable<System.DateOnly> Notary_commission_expiration_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notary_sign_date")]
		public System.Nullable<System.DateOnly> Notary_sign_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notary_sign_name")]
		public string Notary_sign_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office_total_ytd")]
		public System.Nullable<System.Double> Office_total_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_sub_id")]
		public string Original_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_city")]
		public string Payee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_first_name")]
		public string Payee_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_last_name")]
		public string Payee_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_middle_name")]
		public string Payee_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_prefix")]
		public string Payee_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_state")]
		public string Payee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_street_1")]
		public string Payee_street_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_street_2")]
		public string Payee_street_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_suffix")]
		public string Payee_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_zip")]
		public string Payee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_file_number")]
		public System.Nullable<System.Int32> Previous_file_number { get; set; }
		
		/// <summary>
		/// Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// 
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Int32> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type")]
		public string Schedule_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type_full")]
		public string Schedule_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public string Sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support_oppose_indicator")]
		public string Support_oppose_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleEByCandidate
	{
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_name")]
		public string Committee_name { get; set; }
		
		/// <summary>
		/// 
		///Number of records making up the total.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// 
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="support_oppose_indicator")]
		public string Support_oppose_indicator { get; set; }
		
		/// <summary>
		/// Sum of transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleEByCandidatePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleEByCandidate[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleEEfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_schedule_name")]
		public string Back_reference_schedule_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_transaction_id")]
		public string Back_reference_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="beginning_image_number")]
		public string Beginning_image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_first_name")]
		public string Candidate_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_middle_name")]
		public string Candidate_middle_name { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		/// <summary>
		/// Federal office candidate runs for: H, S or P
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		/// <summary>
		/// Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_office_district")]
		public string Candidate_office_district { get; set; }
		
		/// <summary>
		/// US state or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state")]
		public string Candidate_office_state { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_party")]
		public string Candidate_party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_prefix")]
		public string Candidate_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_suffix")]
		public string Candidate_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_code")]
		public string Category_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public CommitteeHistory Committee { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="csv_url")]
		public string Csv_url { get; set; }
		
		/// <summary>
		/// 
		///Date when a PAC distrubutes or disseminates an independent expenditure
		///and pays for it in the same reporting period
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dissemination_date")]
		public System.Nullable<System.DateOnly> Dissemination_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_amount")]
		public System.Nullable<System.Int32> Expenditure_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_date")]
		public System.Nullable<System.DateOnly> Expenditure_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expenditure_description")]
		public string Expenditure_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fec_url")]
		public string Fec_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public int File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_first_name")]
		public string Filer_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_last_name")]
		public string Filer_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_middle_name")]
		public string Filer_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_prefix")]
		public string Filer_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_suffix")]
		public string Filer_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing")]
		public EFilings Filing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing_form")]
		public string Filing_form { get; set; }
		
		/// <summary>
		/// 
		///An unique identifier for each page where the electronic or paper filing is reported.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_notice")]
		public System.Nullable<System.Boolean> Is_notice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number")]
		public string Line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load_timestamp")]
		public System.Nullable<System.DateTimeOffset> Load_timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code")]
		public string Memo_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_text")]
		public string Memo_text { get; set; }
		
		/// <summary>
		/// 
		///Report is either new or is the most-recently filed amendment
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="most_recent")]
		public System.Nullable<System.Boolean> Most_recent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notary_sign_date")]
		public System.Nullable<System.DateOnly> Notary_sign_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office_total_ytd")]
		public System.Nullable<System.Single> Office_total_ytd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_city")]
		public string Payee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_first_name")]
		public string Payee_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_last_name")]
		public string Payee_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_middle_name")]
		public string Payee_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_prefix")]
		public string Payee_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_state")]
		public string Payee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_street_1")]
		public string Payee_street_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_street_2")]
		public string Payee_street_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_suffix")]
		public string Payee_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_zip")]
		public string Payee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pdf_url")]
		public string Pdf_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="related_line_number")]
		public int Related_line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		/// <summary>
		/// Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="support_oppose_indicator")]
		public string Support_oppose_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleEEfilePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleEEfile[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleEPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public SeekInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleE[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleH4
	{
		
		[System.Runtime.Serialization.DataMember(Name="additional_description")]
		public string Additional_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administrative_activity_inidcator")]
		public string Administrative_activity_inidcator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administrative_voter_drive_activity_indicator")]
		public string Administrative_voter_drive_activity_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator")]
		public string Amendment_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendment_indicator_desc")]
		public string Amendment_indicator_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_schedule_id")]
		public string Back_reference_schedule_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="back_reference_transaction_id")]
		public string Back_reference_transaction_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_first_name")]
		public string Candidate_first_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_id")]
		public string Candidate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_last_name")]
		public string Candidate_last_name { get; set; }
		
		/// <summary>
		/// Name of candidate running for office
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_name")]
		public string Candidate_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office")]
		public string Candidate_office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_description")]
		public string Candidate_office_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_district")]
		public string Candidate_office_district { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state")]
		public string Candidate_office_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candidate_office_state_full")]
		public string Candidate_office_state_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_code")]
		public string Category_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category_code_full")]
		public string Category_code_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public CommitteeHistory Committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_city")]
		public string Conduit_committee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_id")]
		public string Conduit_committee_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_name")]
		public string Conduit_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_state")]
		public string Conduit_committee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street1")]
		public string Conduit_committee_street1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_street2")]
		public string Conduit_committee_street2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conduit_committee_zip")]
		public System.Nullable<System.Int32> Conduit_committee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Double> Cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direct_candidate_support_activity_indicator")]
		public string Direct_candidate_support_activity_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_amount")]
		public System.Nullable<System.Double> Disbursement_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_type")]
		public string Disbursement_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursement_type_full")]
		public string Disbursement_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public string Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type_desc")]
		public string Entity_type_desc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_amount_year_to_date")]
		public System.Nullable<System.Double> Event_amount_year_to_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_purpose_category_type")]
		public string Event_purpose_category_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_purpose_category_type_full")]
		public string Event_purpose_category_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_purpose_date")]
		public System.Nullable<System.DateOnly> Event_purpose_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_purpose_description")]
		public string Event_purpose_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_purpose_name")]
		public string Event_purpose_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempt_activity_indicator")]
		public string Exempt_activity_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federal_share")]
		public System.Nullable<System.Double> Federal_share { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_number")]
		public System.Nullable<System.Int32> File_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filer_committee_name")]
		public string Filer_committee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filing_form")]
		public string Filing_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundraising_activity_indicator")]
		public string Fundraising_activity_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="general_voter_drive_activity_indicator")]
		public string General_voter_drive_activity_indicator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_number")]
		public string Image_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line_number")]
		public string Line_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link_id")]
		public System.Nullable<System.Int32> Link_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="load_date")]
		public System.Nullable<System.DateTimeOffset> Load_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code")]
		public string Memo_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_code_description")]
		public string Memo_code_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo_text")]
		public string Memo_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonfederal_share")]
		public System.Nullable<System.Double> Nonfederal_share { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_sub_id")]
		public string Original_sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_city")]
		public string Payee_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_first_name")]
		public string Payee_first_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_last_name")]
		public string Payee_last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_middle_name")]
		public string Payee_middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_name")]
		public string Payee_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_prefix")]
		public string Payee_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_state")]
		public string Payee_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_suffix")]
		public string Payee_suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payee_zip")]
		public string Payee_zip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="published_committee_reference_parity_check")]
		public string Published_committee_reference_parity_check { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_type")]
		public string Report_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="report_year")]
		public System.Nullable<System.Double> Report_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type")]
		public string Schedule_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule_type_full")]
		public string Schedule_type_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub_id")]
		public string Sub_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_id")]
		public string Transaction_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleH4Page
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public SeekInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ScheduleH4[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StateElectionOfficeInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="address_line1")]
		public string Address_line1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address_line2")]
		public string Address_line2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax_number")]
		public string Fax_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailing_address1")]
		public string Mailing_address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailing_address2")]
		public string Mailing_address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailing_city")]
		public string Mailing_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailing_state")]
		public string Mailing_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mailing_zipcode")]
		public string Mailing_zipcode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office_name")]
		public string Office_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="office_type")]
		public string Office_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_phone_number")]
		public string Primary_phone_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondary_phone_number")]
		public string Secondary_phone_number { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state_full_name")]
		public string State_full_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website_url1")]
		public string Website_url1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website_url2")]
		public string Website_url2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip_code")]
		public string Zip_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StateElectionOfficeInfoPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public StateElectionOfficeInfo[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TotalByOffice
	{
		
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office")]
		public string Office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_disbursements")]
		public System.Nullable<System.Double> Total_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_individual_itemized_contributions")]
		public System.Nullable<System.Double> Total_individual_itemized_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_other_political_committee_contributions")]
		public System.Nullable<System.Double> Total_other_political_committee_contributions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_receipts")]
		public System.Nullable<System.Double> Total_receipts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_transfers_from_other_authorized_committee")]
		public System.Nullable<System.Double> Total_transfers_from_other_authorized_committee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TotalByOfficeByParty
	{
		
		[System.Runtime.Serialization.DataMember(Name="election_year")]
		public System.Nullable<System.Int32> Election_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="office")]
		public string Office { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_disbursements")]
		public System.Nullable<System.Double> Total_disbursements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_receipts")]
		public System.Nullable<System.Double> Total_receipts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TotalByOfficeByPartyPage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public TotalByOfficeByParty[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TotalByOfficePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public TotalByOffice[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TotalsCommittee
	{
		
		/// <summary>
		/// 
		///Affiliated committee or connected organization
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affiliated_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Affiliated_committee_name { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candidate_ids")]
		public string[] Candidate_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash_on_hand_end_period")]
		public System.Nullable<System.Double> Cash_on_hand_end_period { get; set; }
		
		/// <summary>
		/// 
		///City of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee_id")]
		public string Committee_id { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Committee_type { get; set; }
		
		/// <summary>
		/// The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="committee_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Committee_type_full { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public int Cycle { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles")]
		public int[] Cycles { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1), and the committee has filling activity during the cycle
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles_has_activity")]
		public int[] Cycles_has_activity { get; set; }
		
		/// <summary>
		/// 
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s), and the committee files the financial reports
		///('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycles_has_financial")]
		public int[] Cycles_has_financial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debts_owed_by_committee")]
		public System.Nullable<System.Double> Debts_owed_by_committee { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Designation { get; set; }
		
		/// <summary>
		/// The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///
		/// Max length: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="designation_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Designation_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disbursements")]
		public System.Nullable<System.Double> Disbursements { get; set; }
		
		/// <summary>
		/// The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filing_frequency")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Filing_frequency { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_f1_date")]
		public System.Nullable<System.DateOnly> First_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first_file_date")]
		public System.Nullable<System.DateOnly> First_file_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="independent_expenditures")]
		public System.Nullable<System.Double> Independent_expenditures { get; set; }
		
		/// <summary>
		/// 
		///True indicates that a committee is active.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jfc_committee")]
		public TotalsCommitteeJfc_committee[] TotalsCommitteeJfc_committee { get; set; }
		
		/// <summary>
		/// 
		///The latest two year election cycle that the committee has filings
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_cycle_has_activity")]
		public System.Nullable<System.Int32> Last_cycle_has_activity { get; set; }
		
		/// <summary>
		/// 
		///The latest two year election cycle that the committee files the financial reports
		///('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_cycle_has_financial")]
		public System.Nullable<System.Int32> Last_cycle_has_financial { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent Form 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_f1_date")]
		public System.Nullable<System.DateOnly> Last_f1_date { get; set; }
		
		/// <summary>
		/// The day the FEC received the committee's most recent filing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_file_date")]
		public System.Nullable<System.DateOnly> Last_file_date { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type")]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Organization_type { get; set; }
		
		/// <summary>
		/// The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_type_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Organization_type_full { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party")]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Party { get; set; }
		
		/// <summary>
		/// Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="party_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Party_full { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public System.Nullable<System.Double> Receipts { get; set; }
		
		/// <summary>
		/// 
		///State of the committee's address as filed on the Form 1
		///
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string State { get; set; }
		
		/// <summary>
		/// 
		///State of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state_full")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string State_full { get; set; }
		
		/// <summary>
		/// 
		///Street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_1")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_1 { get; set; }
		
		/// <summary>
		/// 
		///Second line of street address of committee as reported on the Form 1
		///
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_2")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Street_2 { get; set; }
		
		/// <summary>
		/// Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treasurer_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Treasurer_name { get; set; }
		
		/// <summary>
		/// 
		///Zip code of committee as reported on the Form 1
		///
		/// Max length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Zip { get; set; }
	}
	
	public class TotalsCommitteeJfc_committee
	{
		
		/// <summary>
		/// 
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_id")]
		public string Joint_committee_id { get; set; }
		
		/// <summary>
		/// The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joint_committee_name")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Joint_committee_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TotalsCommitteePage
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public OffsetInfo Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public TotalsCommittee[] Results { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// 
		/// This endpoint contains Final Audit Reports approved by the Commission since inception.
		/// The search can be based on information about the audited committee (Name, FEC ID Number, Type,
		/// Election Cycle) or the issues covered in the report.
		/// 
		/// Audit_caseGetByMax_election_cycleAndQAndSub_category_idAndCycleAndSort_null_onlyAndAudit_case_idAndSort_hide_nullAndCandidate_idAndQqAndPer_pageAndSortAndMin_election_cycleAndAudit_idAndCommittee_designationAndApi_keyAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndPrimary_category_id audit-case/
		/// </summary>
		/// <param name="max_election_cycle">
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///</param>
		/// <param name="q">The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.</param>
		/// <param name="sub_category_id">
		///The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="audit_case_id">
		///Primary/foreign key for audit tables
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="qq">Name of candidate running for office</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="min_election_cycle">
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///</param>
		/// <param name="audit_id">
		///The audit issue. Each subcategory has an unique ID
		///</param>
		/// <param name="committee_designation">Type of committee:
		///        - H or S - Congressional
		///        - P - Presidential
		///        - X or Y or Z - Party
		///        - N or Q - PAC
		///        - I - Independent expenditure
		///        - O - Super PAC 
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="primary_category_id">
		///Audit category ID (table PK)
		///</param>
		public async Task Audit_caseGetByMax_election_cycleAndQAndSub_category_idAndCycleAndSort_null_onlyAndAudit_case_idAndSort_hide_nullAndCandidate_idAndQqAndPer_pageAndSortAndMin_election_cycleAndAudit_idAndCommittee_designationAndApi_keyAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndPrimary_category_idAsync(
					int max_election_cycle, 
					string[] q, 
					string sub_category_id, 
					int[] cycle, 
					bool sort_null_only, 
					string[] audit_case_id, 
					bool sort_hide_null, 
					string[] candidate_id, 
					string[] qq, 
					int per_page, 
					string[] sort, 
					int min_election_cycle, 
					int[] audit_id, 
					string committee_designation, 
					string api_key, 
					string[] committee_type, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string primary_category_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit-case/?max_election_cycle="+max_election_cycle+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"))+"&sub_category_id=" + (sub_category_id==null? "" : System.Uri.EscapeDataString(sub_category_id))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&"+string.Join("&", audit_case_id.Select(z => $"audit_case_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", qq.Select(z => $"qq={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&min_election_cycle="+min_election_cycle+"&"+string.Join("&", audit_id.Select(z => $"audit_id={z}"))+"&committee_designation=" + (committee_designation==null? "" : System.Uri.EscapeDataString(committee_designation))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", committee_type.Select(z => $"committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&primary_category_id=" + (primary_category_id==null? "" : System.Uri.EscapeDataString(primary_category_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This lists the options for the categories and subcategories available in the /audit-search/ endpoint.
		/// 
		/// Audit_categoryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndPrimary_category_idAndSortAndPrimary_category_name audit-category/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="primary_category_id">
		///Audit category ID (table PK)
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="primary_category_name">Primary Audit Category
		///    - No Findings or Issues/Not a Committee
		///    - Net Outstanding Campaign/Convention Expenditures/Obligations
		///    - Payments/Disgorgements
		///    - Allocation Issues
		///    - Prohibited Contributions
		///    - Disclosure
		///    - Recordkeeping
		///    - Repayment to US Treasury
		///    - Other
		///    - Misstatement of Financial Activity
		///    - Excessive Contributions
		///    - Failure to File Reports/Schedules/Notices
		///    - Loans
		///    - Referred Findings Not Listed
		///</param>
		public async Task Audit_categoryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndPrimary_category_idAndSortAndPrimary_category_nameAsync(string api_key, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, string[] primary_category_id, string sort, string[] primary_category_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit-category/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", primary_category_id.Select(z => $"primary_category_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", primary_category_name.Select(z => $"primary_category_name={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This lists the options for the primary categories available in the /audit-search/ endpoint.
		/// 
		/// Audit_primary_categoryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndPrimary_category_idAndSortAndPrimary_category_name audit-primary-category/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="primary_category_id">
		///Audit category ID (table PK)
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="primary_category_name">Primary Audit Category
		///    - No Findings or Issues/Not a Committee
		///    - Net Outstanding Campaign/Convention Expenditures/Obligations
		///    - Payments/Disgorgements
		///    - Allocation Issues
		///    - Prohibited Contributions
		///    - Disclosure
		///    - Recordkeeping
		///    - Repayment to US Treasury
		///    - Other
		///    - Misstatement of Financial Activity
		///    - Excessive Contributions
		///    - Failure to File Reports/Schedules/Notices
		///    - Loans
		///    - Referred Findings Not Listed
		///</param>
		public async Task Audit_primary_categoryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndPrimary_category_idAndSortAndPrimary_category_nameAsync(string api_key, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, string[] primary_category_id, string sort, string[] primary_category_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audit-primary-category/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", primary_category_id.Select(z => $"primary_category_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", primary_category_name.Select(z => $"primary_category_name={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other
		/// events into one calendar.
		/// 
		/// State and report type filtering is no longer available.
		/// 
		/// Calendar_datesGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndMax_start_dateAndPer_pageAndSortAndEvent_id calendar-dates/
		/// </summary>
		/// <param name="calendar_category_id">
		///Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		///Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		///Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		///Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="description">Brief description of event</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="max_end_date">
		///The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="summary">Longer description of event</param>
		/// <param name="min_end_date">
		///The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="min_start_date">
		///The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="max_start_date">
		///The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="event_id">An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.</param>
		public async Task Calendar_datesGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndMax_start_dateAndPer_pageAndSortAndEvent_idAsync(
					int[] calendar_category_id, 
					string api_key, 
					string[] description, 
					bool sort_nulls_last, 
					bool sort_null_only, 
					int page, 
					System.DateOnly max_end_date, 
					string[] summary, 
					System.DateOnly min_end_date, 
					bool sort_hide_null, 
					System.DateOnly min_start_date, 
					System.DateOnly max_start_date, 
					int per_page, 
					string sort, 
					int event_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendar-dates/?"+string.Join("&", calendar_category_id.Select(z => $"calendar_category_id={z}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", description.Select(z => $"description={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_null_only="+sort_null_only+"&page="+page+"&max_end_date="+max_end_date+"&"+string.Join("&", summary.Select(z => $"summary={System.Uri.EscapeDataString(z.ToString())}"))+"&min_end_date="+min_end_date+"&sort_hide_null="+sort_hide_null+"&min_start_date="+min_start_date+"&max_start_date="+max_start_date+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&event_id="+event_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.
		/// 
		/// Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other
		/// events into one calendar.
		/// 
		/// State filtering now applies to elections, reports and reporting periods.
		/// 
		/// Presidential pre-primary report due dates are not shown on even years.
		/// Filers generally opt to file monthly rather than submit over 50 pre-primary election
		/// reports. All reporting deadlines are available at /reporting-dates/ for reference.
		/// 
		/// This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql)
		/// that creates the calendar.
		/// 
		/// 
		/// Calendar_datesExportGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndPer_pageAndMax_start_dateAndRendererAndSortAndEvent_id calendar-dates/export/
		/// </summary>
		/// <param name="calendar_category_id">
		///Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40,
		///Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20,
		///Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26,
		///Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="description">Brief description of event</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="max_end_date">
		///The maximum end date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="summary">Longer description of event</param>
		/// <param name="min_end_date">
		///The minimum end date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="min_start_date">
		///The minimum start date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="max_start_date">
		///The maximum start date.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="event_id">An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.</param>
		public async Task Calendar_datesExportGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndPer_pageAndMax_start_dateAndRendererAndSortAndEvent_idAsync(
					int[] calendar_category_id, 
					string api_key, 
					string[] description, 
					bool sort_nulls_last, 
					bool sort_null_only, 
					int page, 
					System.DateOnly max_end_date, 
					string[] summary, 
					System.DateOnly min_end_date, 
					bool sort_hide_null, 
					System.DateOnly min_start_date, 
					int per_page, 
					System.DateOnly max_start_date, 
					Calendar_datesExportGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndPer_pageAndMax_start_dateAndRendererAndSortAndEvent_idRenderer renderer, 
					string sort, 
					int event_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "calendar-dates/export/?"+string.Join("&", calendar_category_id.Select(z => $"calendar_category_id={z}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", description.Select(z => $"description={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_null_only="+sort_null_only+"&page="+page+"&max_end_date="+max_end_date+"&"+string.Join("&", summary.Select(z => $"summary={System.Uri.EscapeDataString(z.ToString())}"))+"&min_end_date="+min_end_date+"&sort_hide_null="+sort_hide_null+"&min_start_date="+min_start_date+"&per_page="+per_page+"&max_start_date="+max_start_date+"&renderer=" + renderer+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&event_id="+event_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint is useful for finding detailed information about a particular candidate. Use the
		/// `candidate_id` to find the most recent information about that candidate.
		/// 
		/// Candidate_candidate_idGetByIncumbent_challengeAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndPageAndStateAndYear candidate/{candidate_id}/
		/// </summary>
		/// <param name="incumbent_challenge">One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="federal_funds_flag">A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="name">Name (candidate or committee) to search for. Alias for 'q'.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="candidate_status">One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="has_raised_funds">A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="year">Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idGetByIncumbent_challengeAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndPageAndStateAndYearAsync(
					string[] incumbent_challenge, 
					int[] cycle, 
					bool sort_null_only, 
					bool federal_funds_flag, 
					bool sort_hide_null, 
					string[] name, 
					int per_page, 
					int[] election_year, 
					string[] office, 
					string sort, 
					string[] candidate_status, 
					string[] district, 
					string api_key, 
					bool has_raised_funds, 
					string[] party, 
					bool sort_nulls_last, 
					int page, 
					string[] state, 
					string year, 
					string candidate_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/?"+string.Join("&", incumbent_challenge.Select(z => $"incumbent_challenge={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&federal_funds_flag="+federal_funds_flag+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", name.Select(z => $"name={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", candidate_status.Select(z => $"candidate_status={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&has_raised_funds="+has_raised_funds+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&year=" + (year==null? "" : System.Uri.EscapeDataString(year));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint is useful for finding detailed information about a particular committee or
		/// filer. Use the `committee_id` to find the most recent information about the committee.
		/// 
		/// Candidate_candidate_idCommitteesGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndYearAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndFiling_frequencyAndOrganization_typeAndDesignationAndSort candidate/{candidate_id}/committees/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="cycle">
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="year">A year that the committee was active— (after original registration date     or filing but before expiration date)</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="filing_frequency">The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///</param>
		/// <param name="organization_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		/// <param name="designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idCommitteesGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndYearAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndFiling_frequencyAndOrganization_typeAndDesignationAndSortAsync(string api_key, string[] committee_type, int[] cycle, bool sort_null_only, int page, int[] year, bool sort_nulls_last, bool sort_hide_null, int per_page, string[] filing_frequency, string[] organization_type, string[] designation, string sort, string candidate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/committees/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", committee_type.Select(z => $"committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", year.Select(z => $"year={z}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", filing_frequency.Select(z => $"filing_frequency={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", organization_type.Select(z => $"organization_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", designation.Select(z => $"designation={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		/// 
		/// Candidate_candidate_idCommitteesHistoryGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort candidate/{candidate_id}/committees/history/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idCommitteesHistoryGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSortAsync(string api_key, bool election_full, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, string[] designation, string sort, string candidate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/committees/history/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", designation.Select(z => $"designation={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		/// 
		/// Candidate_candidate_idCommitteesHistory_cycleGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort candidate/{candidate_id}/committees/history/{cycle}/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="cycle">
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idCommitteesHistory_cycleGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSortAsync(string api_key, bool election_full, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, string[] designation, string sort, int cycle, string candidate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/committees/history/"+cycle+"/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", designation.Select(z => $"designation={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// All official records and reports filed by or delivered to the FEC.
		/// 
		/// Note: because the filings data includes many records, counts for large
		/// result sets are approximate; you will want to page through the records until no records are returned.
		/// 
		/// Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_number candidate/{candidate_id}/filings/
		/// </summary>
		/// <param name="is_amended">
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="form_category">
		///The forms filed are categorized based on the nature of the filing:
		///    - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		///    - NOTICE F5, F24, F6, F9, F10, F11
		///    - STATEMENT F1, F2
		///    - OTHER F1M, F8, F99, F12, FRQ
		///</param>
		/// <param name="request_type">
		///Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		///    - 1 Statement of Organization
		///    - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		///    - 3 Second Notice - Reports
		///    - 4 Request for Additional Information
		///    - 5 Informational - Reports
		///    - 6 Second Notice - Statement of Organization
		///    - 7 Failure to File
		///    - 8 From Public Disclosure
		///    - 9 From Multi Candidate Status
		///</param>
		/// <param name="primary_general_indicator">
		///Primary, general or special election indicator.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="file_number">Filing ID number</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="filer_type">The method used to file with the FEC, either electronic or on paper.</param>
		/// <param name="most_recent">
		///Report is either new or is the most-recently filed amendment
		///</param>
		/// <param name="report_type">Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="form_type">The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="report_year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="amendment_indicator">Amendent types:
		///    -N   new
		///    -A   amendment
		///    -T   terminated
		///    -C   consolidated
		///    -M   multi-candidate
		///    -S   secondary
		///
		///NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		///</param>
		/// <param name="document_type">
		///The type of document for documents other than reports:
		///    - 2 24 Hour Contribution Notice
		///    - 4 48 Hour Contribution Notice
		///    - A Debt Settlement Statement
		///    - B Acknowledgment of Receipt of Debt Settlement Statement
		///    - C RFAI: Debt Settlement First Notice
		///    - D Commission Debt Settlement Review
		///    - E Commission Response TO Debt Settlement Request
		///    - F Administrative Termination
		///    - G Debt Settlement Plan Amendment
		///    - H Disavowal Notice
		///    - I Disavowal Response
		///    - J Conduit Report
		///    - K Termination Approval
		///    - L Repeat Non-Filer Notice
		///    - M Filing Frequency Change Notice
		///    - N Paper Amendment to Electronic Report
		///    - O Acknowledgment of Filing Frequency Change
		///    - S RFAI: Debt Settlement Second
		///    - T Miscellaneous Report TO FEC
		///    - V Repeat Violation Notice (441A OR 441B)
		///    - P Notice of Paper Filing
		///    - R F3L Filing Frequency Change Notice
		///    - Q Acknowledgment of F3L Filing Frequency Change
		///    - U Unregistered Committee Notice
		///</param>
		/// <param name="beginning_image_number">
		///Unique identifier for the electronic or paper report. This number is used to construct
		///PDF URLs to the original document.
		///</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberAsync(
					bool is_amended, 
					System.DateOnly min_receipt_date, 
					string[] form_category, 
					string[] request_type, 
					string[] primary_general_indicator, 
					int[] cycle, 
					bool sort_null_only, 
					System.DateOnly max_receipt_date, 
					bool sort_hide_null, 
					int[] file_number, 
					int per_page, 
					string[] office, 
					string[] sort, 
					string[] q_filer, 
					string[] district, 
					string api_key, 
					Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type filer_type, 
					bool most_recent, 
					string[] report_type, 
					string committee_type, 
					string[] party, 
					string[] form_type, 
					bool sort_nulls_last, 
					int page, 
					string[] state, 
					int[] report_year, 
					string[] amendment_indicator, 
					string[] document_type, 
					string[] beginning_image_number, 
					string candidate_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/filings/?is_amended="+is_amended+"&min_receipt_date="+min_receipt_date+"&"+string.Join("&", form_category.Select(z => $"form_category={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", request_type.Select(z => $"request_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", primary_general_indicator.Select(z => $"primary_general_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", file_number.Select(z => $"file_number={z}"))+"&per_page="+per_page+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&filer_type=" + filer_type+"&most_recent="+most_recent+"&"+string.Join("&", report_type.Select(z => $"report_type={System.Uri.EscapeDataString(z.ToString())}"))+"&committee_type=" + (committee_type==null? "" : System.Uri.EscapeDataString(committee_type))+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", form_type.Select(z => $"form_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", report_year.Select(z => $"report_year={z}"))+"&"+string.Join("&", amendment_indicator.Select(z => $"amendment_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", document_type.Select(z => $"document_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", beginning_image_number.Select(z => $"beginning_image_number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Find out a candidate's characteristics over time. This is particularly useful if the
		/// candidate runs for the same office in different districts or you want to know more about a candidate's
		/// previous races.
		/// 
		/// This information is organized by `candidate_id`, so it won't help you find a candidate
		/// who ran for different offices over time; candidates get a new ID for each office.
		/// 
		/// Candidate_candidate_idHistoryGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last candidate/{candidate_id}/history/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idHistoryGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_lastAsync(int page, string api_key, bool sort_hide_null, bool election_full, int per_page, bool sort_null_only, string sort, bool sort_nulls_last, string candidate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/history/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&election_full="+election_full+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Find out a candidate's characteristics over time. This is particularly useful if the
		/// candidate runs for the same office in different districts or you want to know more about a candidate's
		/// previous races.
		/// 
		/// This information is organized by `candidate_id`, so it won't help you find a candidate
		/// who ran for different offices over time; candidates get a new ID for each office.
		/// 
		/// Candidate_candidate_idHistory_cycleGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last candidate/{candidate_id}/history/{cycle}/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idHistory_cycleGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_lastAsync(int page, string api_key, bool sort_hide_null, bool election_full, int per_page, bool sort_null_only, string sort, bool sort_nulls_last, int cycle, string candidate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/history/"+cycle+"/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&election_full="+election_full+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
		/// which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
		/// 
		/// The cycle is named after the even-numbered year and includes the year before it. To obtain
		/// totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
		/// is the next year — for example, in 2015, the current cycle is 2016.
		/// 
		/// For presidential and Senate candidates, multiple two-year cycles exist between elections.
		/// 
		/// 
		/// Candidate_candidate_idTotalsGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndSort candidate/{candidate_id}/totals/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		public async Task Candidate_candidate_idTotalsGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, bool election_full, int[] cycle, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, string sort, string candidate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidate/"+ (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"/totals/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Fetch basic information about candidates, and use parameters to filter results to the
		/// candidates you're looking for.
		/// 
		/// Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a
		/// particular office sought. If a candidate runs for the same office multiple times, the ID
		/// stays the same. If the same person runs for another office — for example, a House
		/// candidate runs for a Senate office — that candidate will get a unique ID for each office.
		/// 
		/// CandidatesGetByIncumbent_challengeAndMin_first_file_dateAndQAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndMax_first_file_dateAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndYear candidates/
		/// </summary>
		/// <param name="incumbent_challenge">One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.</param>
		/// <param name="min_first_file_date">Selects all candidates whose first filing was received by the FEC after this date.</param>
		/// <param name="q">Name of candidate running for office</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="federal_funds_flag">A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="name">Name (candidate or committee) to search for. Alias for 'q'.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="candidate_status">One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///</param>
		/// <param name="max_first_file_date">Selects all candidates whose first filing was received by the FEC before this date.</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="has_raised_funds">A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="is_active_candidate"> Candidates who are actively seeking office. If no value is specified, all candidates
		///are returned. When True is specified, only active candidates are returned. When False is
		///specified, only inactive candidates are returned.
		///</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="year">Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.</param>
		public async Task CandidatesGetByIncumbent_challengeAndMin_first_file_dateAndQAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndMax_first_file_dateAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndYearAsync(
					string[] incumbent_challenge, 
					System.DateOnly min_first_file_date, 
					string[] q, 
					int[] cycle, 
					bool sort_null_only, 
					bool federal_funds_flag, 
					bool sort_hide_null, 
					string[] candidate_id, 
					string[] name, 
					int per_page, 
					int[] election_year, 
					string[] office, 
					string sort, 
					string[] candidate_status, 
					System.DateOnly max_first_file_date, 
					string[] district, 
					string api_key, 
					bool has_raised_funds, 
					string[] party, 
					bool sort_nulls_last, 
					bool is_active_candidate, 
					int page, 
					string[] state, 
					string year, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidates/?"+string.Join("&", incumbent_challenge.Select(z => $"incumbent_challenge={System.Uri.EscapeDataString(z.ToString())}"))+"&min_first_file_date="+min_first_file_date+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&federal_funds_flag="+federal_funds_flag+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", name.Select(z => $"name={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", candidate_status.Select(z => $"candidate_status={System.Uri.EscapeDataString(z.ToString())}"))+"&max_first_file_date="+max_first_file_date+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&has_raised_funds="+has_raised_funds+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&is_active_candidate="+is_active_candidate+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&year=" + (year==null? "" : System.Uri.EscapeDataString(year));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Fetch basic information about candidates and their principal committees.
		/// 
		/// Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a
		/// particular office sought. If a candidate runs for the same office over time, that ID
		/// stays the same. If the same person runs for multiple offices — for example, a House
		/// candidate runs for a Senate office — that candidate will get a unique ID for each office.
		/// 
		/// The candidate endpoints primarily use data from FEC registration
		/// [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and
		/// [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information.
		/// 
		/// CandidatesSearchGetByIncumbent_challengeAndMin_first_file_dateAndQAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndMax_first_file_dateAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndYear candidates/search/
		/// </summary>
		/// <param name="incumbent_challenge">One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.</param>
		/// <param name="min_first_file_date">Selects all candidates whose first filing was received by the FEC after this date.</param>
		/// <param name="q">Name of candidate running for office</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="federal_funds_flag">A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="name">Name (candidate or committee) to search for. Alias for 'q'.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="candidate_status">One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///</param>
		/// <param name="max_first_file_date">Selects all candidates whose first filing was received by the FEC before this date.</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="has_raised_funds">A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="is_active_candidate"> Candidates who are actively seeking office. If no value is specified, all candidates
		///are returned. When True is specified, only active candidates are returned. When False is
		///specified, only inactive candidates are returned.
		///</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="year">Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.</param>
		public async Task CandidatesSearchGetByIncumbent_challengeAndMin_first_file_dateAndQAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndMax_first_file_dateAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndYearAsync(
					string[] incumbent_challenge, 
					System.DateOnly min_first_file_date, 
					string[] q, 
					int[] cycle, 
					bool sort_null_only, 
					bool federal_funds_flag, 
					bool sort_hide_null, 
					string[] candidate_id, 
					string[] name, 
					int per_page, 
					int[] election_year, 
					string[] office, 
					string sort, 
					string[] candidate_status, 
					System.DateOnly max_first_file_date, 
					string[] district, 
					string api_key, 
					bool has_raised_funds, 
					string[] party, 
					bool sort_nulls_last, 
					bool is_active_candidate, 
					int page, 
					string[] state, 
					string year, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidates/search/?"+string.Join("&", incumbent_challenge.Select(z => $"incumbent_challenge={System.Uri.EscapeDataString(z.ToString())}"))+"&min_first_file_date="+min_first_file_date+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&federal_funds_flag="+federal_funds_flag+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", name.Select(z => $"name={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", candidate_status.Select(z => $"candidate_status={System.Uri.EscapeDataString(z.ToString())}"))+"&max_first_file_date="+max_first_file_date+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&has_raised_funds="+has_raised_funds+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&is_active_candidate="+is_active_candidate+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&year=" + (year==null? "" : System.Uri.EscapeDataString(year));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Aggregated candidate receipts and disbursements grouped by cycle.
		/// 
		/// CandidatesTotalsGetByMax_disbursementsAndQAndCycleAndSort_null_onlyAndMax_cash_on_hand_end_periodAndMax_debts_owed_by_committeeAndMin_disbursementsAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndOfficeAndSortAndDistrictAndApi_keyAndElection_fullAndMin_debts_owed_by_committeeAndMax_receiptsAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndMin_cash_on_hand_end_periodAndMin_receipts candidates/totals/
		/// </summary>
		/// <param name="max_disbursements">Maximum aggregated disbursements</param>
		/// <param name="q">Name of candidate running for office</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_cash_on_hand_end_period">Maximum cash on hand</param>
		/// <param name="max_debts_owed_by_committee">Maximum debt</param>
		/// <param name="min_disbursements">Minimum aggregated disbursements</param>
		/// <param name="federal_funds_flag">A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="district">District of candidate</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="min_debts_owed_by_committee">Minimum debt</param>
		/// <param name="max_receipts">Maximum aggregated receipts</param>
		/// <param name="has_raised_funds">A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)</param>
		/// <param name="party">Three-letter party code</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="is_active_candidate"> Candidates who are actively seeking office. If no value is specified, all candidates
		///are returned. When True is specified, only active candidates are returned. When False is
		///specified, only inactive candidates are returned.
		///</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">State of candidate</param>
		/// <param name="min_cash_on_hand_end_period">Minimum cash on hand</param>
		/// <param name="min_receipts">Minimum aggregated receipts</param>
		public async Task CandidatesTotalsGetByMax_disbursementsAndQAndCycleAndSort_null_onlyAndMax_cash_on_hand_end_periodAndMax_debts_owed_by_committeeAndMin_disbursementsAndFederal_funds_flagAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndOfficeAndSortAndDistrictAndApi_keyAndElection_fullAndMin_debts_owed_by_committeeAndMax_receiptsAndHas_raised_fundsAndPartyAndSort_nulls_lastAndIs_active_candidateAndPageAndStateAndMin_cash_on_hand_end_periodAndMin_receiptsAsync(
					string max_disbursements, 
					string[] q, 
					int[] cycle, 
					bool sort_null_only, 
					string max_cash_on_hand_end_period, 
					string max_debts_owed_by_committee, 
					string min_disbursements, 
					bool federal_funds_flag, 
					bool sort_hide_null, 
					string[] candidate_id, 
					int per_page, 
					int[] election_year, 
					string[] office, 
					string sort, 
					string[] district, 
					string api_key, 
					bool election_full, 
					string min_debts_owed_by_committee, 
					string max_receipts, 
					bool has_raised_funds, 
					string[] party, 
					bool sort_nulls_last, 
					bool is_active_candidate, 
					int page, 
					string[] state, 
					string min_cash_on_hand_end_period, 
					string min_receipts, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidates/totals/?max_disbursements=" + (max_disbursements==null? "" : System.Uri.EscapeDataString(max_disbursements))+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&max_cash_on_hand_end_period=" + (max_cash_on_hand_end_period==null? "" : System.Uri.EscapeDataString(max_cash_on_hand_end_period))+"&max_debts_owed_by_committee=" + (max_debts_owed_by_committee==null? "" : System.Uri.EscapeDataString(max_debts_owed_by_committee))+"&min_disbursements=" + (min_disbursements==null? "" : System.Uri.EscapeDataString(min_disbursements))+"&federal_funds_flag="+federal_funds_flag+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&min_debts_owed_by_committee=" + (min_debts_owed_by_committee==null? "" : System.Uri.EscapeDataString(min_debts_owed_by_committee))+"&max_receipts=" + (max_receipts==null? "" : System.Uri.EscapeDataString(max_receipts))+"&has_raised_funds="+has_raised_funds+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&is_active_candidate="+is_active_candidate+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&min_cash_on_hand_end_period=" + (min_cash_on_hand_end_period==null? "" : System.Uri.EscapeDataString(min_cash_on_hand_end_period))+"&min_receipts=" + (min_receipts==null? "" : System.Uri.EscapeDataString(min_receipts));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Candidate total receipts and disbursements aggregated by `aggregate_by`.
		/// 
		/// CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_by candidates/totals/aggregates/
		/// </summary>
		/// <param name="max_election_cycle">
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="min_election_cycle">
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="is_active_candidate"> Candidates who are actively seeking office. If no value is specified, all candidates
		///are returned. When True is specified, only active candidates are returned. When False is
		///specified, only inactive candidates are returned.
		///</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="aggregate_by">Candidate totals aggregate_by (Chose one of dropdown options):
		///        - ' ' grouped by election year
		///        - office grouped by election year, by office
		///        - office-state grouped by election year, by office, by state
		///        - office-state-district grouped by election year, by office, by state, by district
		///        - office-party grouped by election year, by office, by party
		///</param>
		public async Task CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byAsync(
					int max_election_cycle, 
					bool sort_null_only, 
					bool sort_hide_null, 
					int per_page, 
					int[] election_year, 
					CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice office, 
					string[] sort, 
					int min_election_cycle, 
					string[] district, 
					string api_key, 
					bool election_full, 
					CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byParty party, 
					bool is_active_candidate, 
					int page, 
					string[] state, 
					bool sort_nulls_last, 
					CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byAggregate_by aggregate_by, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidates/totals/aggregates/?max_election_cycle="+max_election_cycle+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&office=" + office+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&min_election_cycle="+min_election_cycle+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&party=" + party+"&is_active_candidate="+is_active_candidate+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&aggregate_by=" + aggregate_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Aggregated candidate receipts and disbursements grouped by office by cycle.
		/// 
		/// CandidatesTotalsBy_officeGetByApi_keyAndMax_election_cycleAndElection_fullAndIs_active_candidateAndPageAndSort_null_onlyAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortAndMin_election_cycle candidates/totals/by_office/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="max_election_cycle">
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="is_active_candidate"> Candidates who are actively seeking office. If no value is specified, all candidates
		///are returned. When True is specified, only active candidates are returned. When False is
		///specified, only inactive candidates are returned.
		///</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="election_year">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="min_election_cycle">
		///Filter records to only those that are applicable to a given two-year
		///period. This cycle follows the traditional House election cycle and
		///subdivides the presidential and Senate elections into comparable
		///two-year blocks. The cycle begins with an odd year and is named for its
		///ending, even year.
		///</param>
		public async Task CandidatesTotalsBy_officeGetByApi_keyAndMax_election_cycleAndElection_fullAndIs_active_candidateAndPageAndSort_null_onlyAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortAndMin_election_cycleAsync(string api_key, int max_election_cycle, bool election_full, bool is_active_candidate, int page, bool sort_null_only, bool sort_nulls_last, int[] election_year, bool sort_hide_null, int per_page, CandidatesTotalsBy_officeGetByApi_keyAndMax_election_cycleAndElection_fullAndIs_active_candidateAndPageAndSort_null_onlyAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortAndMin_election_cycleOffice office, string sort, int min_election_cycle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidates/totals/by_office/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&max_election_cycle="+max_election_cycle+"&election_full="+election_full+"&is_active_candidate="+is_active_candidate+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_nulls_last="+sort_nulls_last+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&office=" + office+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&min_election_cycle="+min_election_cycle;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Aggregated candidate receipts and disbursements grouped by office by party by cycle.
		/// 
		/// CandidatesTotalsBy_officeBy_partyGetByApi_keyAndElection_fullAndSort_null_onlyAndPageAndIs_active_candidateAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSort candidates/totals/by_office/by_party/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="is_active_candidate"> Candidates who are actively seeking office. If no value is specified, all candidates
		///are returned. When True is specified, only active candidates are returned. When False is
		///specified, only inactive candidates are returned.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="election_year">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task CandidatesTotalsBy_officeBy_partyGetByApi_keyAndElection_fullAndSort_null_onlyAndPageAndIs_active_candidateAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortAsync(string api_key, bool election_full, bool sort_null_only, int page, bool is_active_candidate, bool sort_nulls_last, int[] election_year, bool sort_hide_null, int per_page, CandidatesTotalsBy_officeBy_partyGetByApi_keyAndElection_fullAndSort_null_onlyAndPageAndIs_active_candidateAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortOffice office, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "candidates/totals/by_office/by_party/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&sort_null_only="+sort_null_only+"&page="+page+"&is_active_candidate="+is_active_candidate+"&sort_nulls_last="+sort_nulls_last+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&office=" + office+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint is useful for finding detailed information about a particular committee or
		/// filer. Use the `committee_id` to find the most recent information about the committee.
		/// 
		/// Committee_committee_idGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndYearAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndFiling_frequencyAndOrganization_typeAndDesignationAndSort committee/{committee_id}/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="cycle">
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="year">A year that the committee was active— (after original registration date     or filing but before expiration date)</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="filing_frequency">The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///</param>
		/// <param name="organization_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		/// <param name="designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		public async Task Committee_committee_idGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndYearAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndFiling_frequencyAndOrganization_typeAndDesignationAndSortAsync(string api_key, string[] committee_type, int[] cycle, bool sort_null_only, int page, int[] year, bool sort_nulls_last, bool sort_hide_null, int per_page, string[] filing_frequency, string[] organization_type, string[] designation, string sort, string committee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", committee_type.Select(z => $"committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", year.Select(z => $"year={z}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", filing_frequency.Select(z => $"filing_frequency={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", organization_type.Select(z => $"organization_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", designation.Select(z => $"designation={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint is useful for finding detailed information about a particular candidate. Use the
		/// `candidate_id` to find the most recent information about that candidate.
		/// 
		/// Committee_committee_idCandidatesGetByIncumbent_challengeAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndPageAndStateAndYear committee/{committee_id}/candidates/
		/// </summary>
		/// <param name="incumbent_challenge">One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="federal_funds_flag">A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="name">Name (candidate or committee) to search for. Alias for 'q'.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="candidate_status">One-letter code explaining if the candidate is:
		///        - C present candidate
		///        - F future candidate
		///        - N not yet a candidate
		///        - P prior candidate
		///</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="has_raised_funds">A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="year">Retrieve records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		public async Task Committee_committee_idCandidatesGetByIncumbent_challengeAndCycleAndSort_null_onlyAndFederal_funds_flagAndSort_hide_nullAndNameAndPer_pageAndElection_yearAndOfficeAndSortAndCandidate_statusAndDistrictAndApi_keyAndHas_raised_fundsAndPartyAndSort_nulls_lastAndPageAndStateAndYearAsync(
					string[] incumbent_challenge, 
					int[] cycle, 
					bool sort_null_only, 
					bool federal_funds_flag, 
					bool sort_hide_null, 
					string[] name, 
					int per_page, 
					int[] election_year, 
					string[] office, 
					string sort, 
					string[] candidate_status, 
					string[] district, 
					string api_key, 
					bool has_raised_funds, 
					string[] party, 
					bool sort_nulls_last, 
					int page, 
					string[] state, 
					string year, 
					string committee_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/candidates/?"+string.Join("&", incumbent_challenge.Select(z => $"incumbent_challenge={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&federal_funds_flag="+federal_funds_flag+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", name.Select(z => $"name={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", candidate_status.Select(z => $"candidate_status={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&has_raised_funds="+has_raised_funds+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&year=" + (year==null? "" : System.Uri.EscapeDataString(year));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Find out a candidate's characteristics over time. This is particularly useful if the
		/// candidate runs for the same office in different districts or you want to know more about a candidate's
		/// previous races.
		/// 
		/// This information is organized by `candidate_id`, so it won't help you find a candidate
		/// who ran for different offices over time; candidates get a new ID for each office.
		/// 
		/// Committee_committee_idCandidatesHistoryGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last committee/{committee_id}/candidates/history/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		public async Task Committee_committee_idCandidatesHistoryGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_lastAsync(int page, string api_key, bool sort_hide_null, bool election_full, int per_page, bool sort_null_only, string sort, bool sort_nulls_last, string committee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/candidates/history/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&election_full="+election_full+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Find out a candidate's characteristics over time. This is particularly useful if the
		/// candidate runs for the same office in different districts or you want to know more about a candidate's
		/// previous races.
		/// 
		/// This information is organized by `candidate_id`, so it won't help you find a candidate
		/// who ran for different offices over time; candidates get a new ID for each office.
		/// 
		/// Committee_committee_idCandidatesHistory_cycleGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last committee/{committee_id}/candidates/history/{cycle}/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		public async Task Committee_committee_idCandidatesHistory_cycleGetByPageAndApi_keyAndSort_hide_nullAndElection_fullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_lastAsync(int page, string api_key, bool sort_hide_null, bool election_full, int per_page, bool sort_null_only, string sort, bool sort_nulls_last, string committee_id, int cycle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/candidates/history/"+cycle+"/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&election_full="+election_full+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// All official records and reports filed by or delivered to the FEC.
		/// 
		/// Note: because the filings data includes many records, counts for large
		/// result sets are approximate; you will want to page through the records until no records are returned.
		/// 
		/// Committee_committee_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_number committee/{committee_id}/filings/
		/// </summary>
		/// <param name="is_amended">
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="form_category">
		///The forms filed are categorized based on the nature of the filing:
		///    - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		///    - NOTICE F5, F24, F6, F9, F10, F11
		///    - STATEMENT F1, F2
		///    - OTHER F1M, F8, F99, F12, FRQ
		///</param>
		/// <param name="request_type">
		///Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		///    - 1 Statement of Organization
		///    - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		///    - 3 Second Notice - Reports
		///    - 4 Request for Additional Information
		///    - 5 Informational - Reports
		///    - 6 Second Notice - Statement of Organization
		///    - 7 Failure to File
		///    - 8 From Public Disclosure
		///    - 9 From Multi Candidate Status
		///</param>
		/// <param name="primary_general_indicator">
		///Primary, general or special election indicator.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="file_number">Filing ID number</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="filer_type">The method used to file with the FEC, either electronic or on paper.</param>
		/// <param name="most_recent">
		///Report is either new or is the most-recently filed amendment
		///</param>
		/// <param name="report_type">Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="form_type">The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="report_year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="amendment_indicator">Amendent types:
		///    -N   new
		///    -A   amendment
		///    -T   terminated
		///    -C   consolidated
		///    -M   multi-candidate
		///    -S   secondary
		///
		///NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		///</param>
		/// <param name="document_type">
		///The type of document for documents other than reports:
		///    - 2 24 Hour Contribution Notice
		///    - 4 48 Hour Contribution Notice
		///    - A Debt Settlement Statement
		///    - B Acknowledgment of Receipt of Debt Settlement Statement
		///    - C RFAI: Debt Settlement First Notice
		///    - D Commission Debt Settlement Review
		///    - E Commission Response TO Debt Settlement Request
		///    - F Administrative Termination
		///    - G Debt Settlement Plan Amendment
		///    - H Disavowal Notice
		///    - I Disavowal Response
		///    - J Conduit Report
		///    - K Termination Approval
		///    - L Repeat Non-Filer Notice
		///    - M Filing Frequency Change Notice
		///    - N Paper Amendment to Electronic Report
		///    - O Acknowledgment of Filing Frequency Change
		///    - S RFAI: Debt Settlement Second
		///    - T Miscellaneous Report TO FEC
		///    - V Repeat Violation Notice (441A OR 441B)
		///    - P Notice of Paper Filing
		///    - R F3L Filing Frequency Change Notice
		///    - Q Acknowledgment of F3L Filing Frequency Change
		///    - U Unregistered Committee Notice
		///</param>
		/// <param name="beginning_image_number">
		///Unique identifier for the electronic or paper report. This number is used to construct
		///PDF URLs to the original document.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		public async Task Committee_committee_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberAsync(
					bool is_amended, 
					System.DateOnly min_receipt_date, 
					string[] form_category, 
					string[] request_type, 
					string[] primary_general_indicator, 
					int[] cycle, 
					bool sort_null_only, 
					System.DateOnly max_receipt_date, 
					bool sort_hide_null, 
					int[] file_number, 
					int per_page, 
					string[] office, 
					string[] sort, 
					string[] q_filer, 
					string[] district, 
					string api_key, 
					Committee_committee_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type filer_type, 
					bool most_recent, 
					string[] report_type, 
					string committee_type, 
					string[] party, 
					string[] form_type, 
					bool sort_nulls_last, 
					int page, 
					string[] state, 
					int[] report_year, 
					string[] amendment_indicator, 
					string[] document_type, 
					string[] beginning_image_number, 
					string committee_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/filings/?is_amended="+is_amended+"&min_receipt_date="+min_receipt_date+"&"+string.Join("&", form_category.Select(z => $"form_category={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", request_type.Select(z => $"request_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", primary_general_indicator.Select(z => $"primary_general_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", file_number.Select(z => $"file_number={z}"))+"&per_page="+per_page+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&filer_type=" + filer_type+"&most_recent="+most_recent+"&"+string.Join("&", report_type.Select(z => $"report_type={System.Uri.EscapeDataString(z.ToString())}"))+"&committee_type=" + (committee_type==null? "" : System.Uri.EscapeDataString(committee_type))+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", form_type.Select(z => $"form_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", report_year.Select(z => $"report_year={z}"))+"&"+string.Join("&", amendment_indicator.Select(z => $"amendment_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", document_type.Select(z => $"document_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", beginning_image_number.Select(z => $"beginning_image_number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		/// 
		/// Committee_committee_idHistoryGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort committee/{committee_id}/history/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		public async Task Committee_committee_idHistoryGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSortAsync(string api_key, bool election_full, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, string[] designation, string sort, string committee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/history/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", designation.Select(z => $"designation={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.
		/// 
		/// Committee_committee_idHistory_cycleGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSort committee/{committee_id}/history/{cycle}/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="cycle">
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///</param>
		public async Task Committee_committee_idHistory_cycleGetByApi_keyAndElection_fullAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndDesignationAndSortAsync(string api_key, bool election_full, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, string[] designation, string sort, string committee_id, int cycle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/history/"+cycle+"/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", designation.Select(z => $"designation={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Each report represents the summary information from Form 3, Form 3X and Form 3P.
		/// These reports have key statistics that illuminate the financial status of a given committee.
		/// Things like cash on hand, debts owed by committee, total receipts, and total disbursements
		/// are especially helpful for understanding a committee's financial dealings.
		/// 
		/// By default, this endpoint includes both amended and final versions of each report. To restrict
		/// to only the final versions of each report, use `is_amended=false`; to retrieve only reports that
		/// have been amended, use `is_amended=true`.
		/// 
		/// Several different reporting structures exist, depending on the type of organization that
		/// submits financial information. To see an example of these reporting requirements,
		/// look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.
		/// 
		/// DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		/// label these fields while conveying clear meaning to ensure accessibility for all users.
		/// 
		/// Committee_committee_idReportsGetByMin_party_coordinated_expendituresAndIs_amendedAndMax_party_coordinated_expendituresAndMax_cash_on_hand_end_period_amountAndMax_disbursements_amountAndMax_debts_owed_expendituresAndMin_receipts_amountAndCycleAndSort_null_onlyAndMin_debts_owed_amountAndSort_hide_nullAndCandidate_idAndMin_independent_expendituresAndPer_pageAndSortAndApi_keyAndMax_receipts_amountAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndPageAndYearAndMax_independent_expendituresAndTypeAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMin_total_contributionsAndBeginning_image_number committee/{committee_id}/reports/
		/// </summary>
		/// <param name="min_party_coordinated_expenditures">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="is_amended">
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///</param>
		/// <param name="max_party_coordinated_expenditures">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="max_cash_on_hand_end_period_amount">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="max_disbursements_amount">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="max_debts_owed_expenditures">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="min_receipts_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="min_debts_owed_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="min_independent_expenditures">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="max_receipts_amount">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="report_type">Report type; prefix with "-" to exclude. Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///</param>
		/// <param name="max_total_contributions">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="max_independent_expenditures">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="min_cash_on_hand_end_period_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="min_disbursements_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="min_total_contributions">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="beginning_image_number">
		///Unique identifier for the electronic or paper report. This number is used to construct
		///PDF URLs to the original document.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		public async Task Committee_committee_idReportsGetByMin_party_coordinated_expendituresAndIs_amendedAndMax_party_coordinated_expendituresAndMax_cash_on_hand_end_period_amountAndMax_disbursements_amountAndMax_debts_owed_expendituresAndMin_receipts_amountAndCycleAndSort_null_onlyAndMin_debts_owed_amountAndSort_hide_nullAndCandidate_idAndMin_independent_expendituresAndPer_pageAndSortAndApi_keyAndMax_receipts_amountAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndPageAndYearAndMax_independent_expendituresAndTypeAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMin_total_contributionsAndBeginning_image_numberAsync(
					string min_party_coordinated_expenditures, 
					bool is_amended, 
					string max_party_coordinated_expenditures, 
					string max_cash_on_hand_end_period_amount, 
					string max_disbursements_amount, 
					string max_debts_owed_expenditures, 
					string min_receipts_amount, 
					int[] cycle, 
					bool sort_null_only, 
					string min_debts_owed_amount, 
					bool sort_hide_null, 
					string candidate_id, 
					string min_independent_expenditures, 
					int per_page, 
					string[] sort, 
					string api_key, 
					string max_receipts_amount, 
					string[] report_type, 
					string max_total_contributions, 
					bool sort_nulls_last, 
					int page, 
					int[] year, 
					string max_independent_expenditures, 
					string[] type, 
					string min_cash_on_hand_end_period_amount, 
					string min_disbursements_amount, 
					string min_total_contributions, 
					string[] beginning_image_number, 
					string committee_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/reports/?min_party_coordinated_expenditures=" + (min_party_coordinated_expenditures==null? "" : System.Uri.EscapeDataString(min_party_coordinated_expenditures))+"&is_amended="+is_amended+"&max_party_coordinated_expenditures=" + (max_party_coordinated_expenditures==null? "" : System.Uri.EscapeDataString(max_party_coordinated_expenditures))+"&max_cash_on_hand_end_period_amount=" + (max_cash_on_hand_end_period_amount==null? "" : System.Uri.EscapeDataString(max_cash_on_hand_end_period_amount))+"&max_disbursements_amount=" + (max_disbursements_amount==null? "" : System.Uri.EscapeDataString(max_disbursements_amount))+"&max_debts_owed_expenditures=" + (max_debts_owed_expenditures==null? "" : System.Uri.EscapeDataString(max_debts_owed_expenditures))+"&min_receipts_amount=" + (min_receipts_amount==null? "" : System.Uri.EscapeDataString(min_receipts_amount))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&min_debts_owed_amount=" + (min_debts_owed_amount==null? "" : System.Uri.EscapeDataString(min_debts_owed_amount))+"&sort_hide_null="+sort_hide_null+"&candidate_id=" + (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"&min_independent_expenditures=" + (min_independent_expenditures==null? "" : System.Uri.EscapeDataString(min_independent_expenditures))+"&per_page="+per_page+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&max_receipts_amount=" + (max_receipts_amount==null? "" : System.Uri.EscapeDataString(max_receipts_amount))+"&"+string.Join("&", report_type.Select(z => $"report_type={System.Uri.EscapeDataString(z.ToString())}"))+"&max_total_contributions=" + (max_total_contributions==null? "" : System.Uri.EscapeDataString(max_total_contributions))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", year.Select(z => $"year={z}"))+"&max_independent_expenditures=" + (max_independent_expenditures==null? "" : System.Uri.EscapeDataString(max_independent_expenditures))+"&"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&min_cash_on_hand_end_period_amount=" + (min_cash_on_hand_end_period_amount==null? "" : System.Uri.EscapeDataString(min_cash_on_hand_end_period_amount))+"&min_disbursements_amount=" + (min_disbursements_amount==null? "" : System.Uri.EscapeDataString(min_disbursements_amount))+"&min_total_contributions=" + (min_total_contributions==null? "" : System.Uri.EscapeDataString(min_total_contributions))+"&"+string.Join("&", beginning_image_number.Select(z => $"beginning_image_number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
		/// which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
		/// 
		/// The cycle is named after the even-numbered year and includes the year before it. To obtain
		/// totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
		/// is the next year — for example, in 2015, the current cycle is 2016.
		/// 
		/// For presidential and Senate candidates, multiple two-year cycles exist between elections.
		/// 
		/// 
		/// Committee_committee_idTotalsGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_nulls_lastAndSortAndCycleAndSort_null_only committee/{committee_id}/totals/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		public async Task Committee_committee_idTotalsGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_nulls_lastAndSortAndCycleAndSort_null_onlyAsync(int page, string api_key, bool sort_hide_null, int per_page, bool sort_nulls_last, string sort, int[] cycle, bool sort_null_only, string committee_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committee/"+ (committee_id==null? "" : System.Uri.EscapeDataString(committee_id))+"/totals/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort_nulls_last="+sort_nulls_last+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Fetch basic information about committees and filers. Use parameters to filter for
		/// particular characteristics.
		/// 
		/// 
		/// CommitteesGetByTreasurer_nameAndQAndMin_first_file_dateAndCycleAndSponsor_candidate_idAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndFiling_frequencyAndSortAndMax_first_file_dateAndMin_first_f1_dateAndApi_keyAndMin_last_f1_dateAndCommittee_typeAndPartyAndSort_nulls_lastAndPageAndYearAndCommittee_idAndStateAndMax_last_f1_dateAndMax_first_f1_dateAndDesignationAndOrganization_type committees/
		/// </summary>
		/// <param name="treasurer_name">Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.</param>
		/// <param name="q">The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.</param>
		/// <param name="min_first_file_date">Filter for committees whose first filing was received on or after this date.</param>
		/// <param name="cycle">
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///</param>
		/// <param name="sponsor_candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="filing_frequency">The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="max_first_file_date">Filter for committees whose first filing was received on or before this date.</param>
		/// <param name="min_first_f1_date">Filter for committees whose first Form 1 was received on or after this date.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_last_f1_date">Filter for committees whose latest Form 1 was received on or after this date.</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="year">A year that the committee was active— (after original registration date     or filing but before expiration date)</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="state">US state or territory</param>
		/// <param name="max_last_f1_date">Filter for committees whose latest Form 1 was received on or before this date.</param>
		/// <param name="max_first_f1_date">Filter for committees whose first Form 1 was received on or before this date.</param>
		/// <param name="designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="organization_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		public async Task CommitteesGetByTreasurer_nameAndQAndMin_first_file_dateAndCycleAndSponsor_candidate_idAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndFiling_frequencyAndSortAndMax_first_file_dateAndMin_first_f1_dateAndApi_keyAndMin_last_f1_dateAndCommittee_typeAndPartyAndSort_nulls_lastAndPageAndYearAndCommittee_idAndStateAndMax_last_f1_dateAndMax_first_f1_dateAndDesignationAndOrganization_typeAsync(
					string[] treasurer_name, 
					string[] q, 
					System.DateOnly min_first_file_date, 
					int[] cycle, 
					string[] sponsor_candidate_id, 
					bool sort_null_only, 
					bool sort_hide_null, 
					string[] candidate_id, 
					int per_page, 
					string[] filing_frequency, 
					string sort, 
					System.DateOnly max_first_file_date, 
					System.DateOnly min_first_f1_date, 
					string api_key, 
					System.DateOnly min_last_f1_date, 
					string[] committee_type, 
					string[] party, 
					bool sort_nulls_last, 
					int page, 
					int[] year, 
					string[] committee_id, 
					string[] state, 
					System.DateOnly max_last_f1_date, 
					System.DateOnly max_first_f1_date, 
					string[] designation, 
					string[] organization_type, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "committees/?"+string.Join("&", treasurer_name.Select(z => $"treasurer_name={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"))+"&min_first_file_date="+min_first_file_date+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&"+string.Join("&", sponsor_candidate_id.Select(z => $"sponsor_candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", filing_frequency.Select(z => $"filing_frequency={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&max_first_file_date="+max_first_file_date+"&min_first_f1_date="+min_first_f1_date+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_last_f1_date="+min_last_f1_date+"&"+string.Join("&", committee_type.Select(z => $"committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", year.Select(z => $"year={z}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&max_last_f1_date="+max_last_f1_date+"&max_first_f1_date="+max_first_f1_date+"&"+string.Join("&", designation.Select(z => $"designation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", organization_type.Select(z => $"organization_type={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// 52 U.S.C. 30118 allows "communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject," including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances.
		/// 
		/// Communication_costsGetByMin_dateAndSupport_oppose_indicatorAndMax_image_numberAndMin_image_numberAndSort_null_onlyAndSort_hide_nullAndMin_amountAndPer_pageAndCandidate_idAndLine_numberAndSortAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount communication_costs/
		/// </summary>
		/// <param name="min_date">Minimum date</param>
		/// <param name="support_oppose_indicator">Support or opposition</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		public async Task Communication_costsGetByMin_dateAndSupport_oppose_indicatorAndMax_image_numberAndMin_image_numberAndSort_null_onlyAndSort_hide_nullAndMin_amountAndPer_pageAndCandidate_idAndLine_numberAndSortAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amountAsync(
					System.DateOnly min_date, 
					string[] support_oppose_indicator, 
					string max_image_number, 
					string min_image_number, 
					bool sort_null_only, 
					bool sort_hide_null, 
					string min_amount, 
					int per_page, 
					string[] candidate_id, 
					string line_number, 
					string sort, 
					string api_key, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					string max_amount, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication_costs/?min_date="+min_date+"&"+string.Join("&", support_oppose_indicator.Select(z => $"support_oppose_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&per_page="+per_page+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Communication cost aggregated by candidate ID and committee ID.
		/// Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSort communication_costs/aggregates/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="support_oppose_indicator">Support or opposition</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator support_oppose_indicator, int[] cycle, bool sort_null_only, int page, string[] committee_id, bool sort_nulls_last, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication_costs/aggregates/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&support_oppose_indicator=" + support_oppose_indicator+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Communication cost aggregated by candidate ID and committee ID.
		/// Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSort communication_costs/by_candidate/
		/// </summary>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="support_oppose">Support or opposition</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortAsync(string district, string api_key, Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator support_oppose, bool election_full, int[] cycle, bool sort_null_only, int page, string state, bool sort_nulls_last, bool sort_hide_null, string[] candidate_id, int per_page, Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice office, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication_costs/by_candidate/?district=" + (district==null? "" : System.Uri.EscapeDataString(district))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&support_oppose=" + support_oppose+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&office=" + office+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Total communications costs aggregated across committees on supported or opposed candidates by cycle or candidate election year.
		/// 
		/// Communication_costsTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort communication_costs/totals/by_candidate/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task Communication_costsTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, bool election_full, int[] cycle, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "communication_costs/totals/by_candidate/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Basic information about electronic files coming into the FEC, posted as they are received.
		/// EfileFilingsGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer efile/filings/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="file_number">Filing ID number</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		public async Task EfileFilingsGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filerAsync(string api_key, System.DateOnly min_receipt_date, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, System.DateOnly max_receipt_date, bool sort_hide_null, int[] file_number, int per_page, string sort, string[] q_filer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "efile/filings/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_receipt_date="+min_receipt_date+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", file_number.Select(z => $"file_number={z}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Key financial data reported periodically by committees as they are reported. This feed includes summary
		/// information from the the House F3 reports, the presidential F3p reports and the PAC and party
		/// F3x reports.
		/// 
		/// Generally, committees file reports on a quarterly or monthly basis, but
		/// some must also submit a report 12 days before primary elections. Therefore, during the primary
		/// season, the period covered by this file may be different for different committees. These totals
		/// also incorporate any changes made by committees, if any report covering the period is amended.
		/// 
		/// DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		/// label these fields while conveying clear meaning to ensure accessibility for all users.
		/// 
		/// EfileReportsHouse_senateGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer efile/reports/house-senate/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="file_number">Filing ID number</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		public async Task EfileReportsHouse_senateGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filerAsync(string api_key, System.DateOnly min_receipt_date, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, System.DateOnly max_receipt_date, bool sort_hide_null, int[] file_number, int per_page, string sort, string[] q_filer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "efile/reports/house-senate/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_receipt_date="+min_receipt_date+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", file_number.Select(z => $"file_number={z}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Key financial data reported periodically by committees as they are reported. This feed includes summary
		/// information from the the House F3 reports, the presidential F3p reports and the PAC and party
		/// F3x reports.
		/// 
		/// Generally, committees file reports on a quarterly or monthly basis, but
		/// some must also submit a report 12 days before primary elections. Therefore, during the primary
		/// season, the period covered by this file may be different for different committees. These totals
		/// also incorporate any changes made by committees, if any report covering the period is amended.
		/// 
		/// DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		/// label these fields while conveying clear meaning to ensure accessibility for all users.
		/// 
		/// EfileReportsPac_partyGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer efile/reports/pac-party/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="file_number">Filing ID number</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		public async Task EfileReportsPac_partyGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filerAsync(string api_key, System.DateOnly min_receipt_date, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, System.DateOnly max_receipt_date, bool sort_hide_null, int[] file_number, int per_page, string sort, string[] q_filer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "efile/reports/pac-party/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_receipt_date="+min_receipt_date+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", file_number.Select(z => $"file_number={z}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Key financial data reported periodically by committees as they are reported. This feed includes summary
		/// information from the the House F3 reports, the presidential F3p reports and the PAC and party
		/// F3x reports.
		/// 
		/// Generally, committees file reports on a quarterly or monthly basis, but
		/// some must also submit a report 12 days before primary elections. Therefore, during the primary
		/// season, the period covered by this file may be different for different committees. These totals
		/// also incorporate any changes made by committees, if any report covering the period is amended.
		/// 
		/// DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		/// label these fields while conveying clear meaning to ensure accessibility for all users.
		/// 
		/// EfileReportsPresidentialGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filer efile/reports/presidential/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="file_number">Filing ID number</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		public async Task EfileReportsPresidentialGetByApi_keyAndMin_receipt_dateAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndSortAndQ_filerAsync(string api_key, System.DateOnly min_receipt_date, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, System.DateOnly max_receipt_date, bool sort_hide_null, int[] file_number, int per_page, string sort, string[] q_filer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "efile/reports/presidential/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_receipt_date="+min_receipt_date+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", file_number.Select(z => $"file_number={z}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// FEC election dates since 1995.
		/// 
		/// Election_datesGetByElection_stateAndMax_election_dateAndElection_districtAndMin_update_dateAndSort_null_onlyAndSort_hide_nullAndMax_create_dateAndPer_pageAndElection_yearAndSortAndMin_create_dateAndApi_keyAndElection_partyAndOffice_soughtAndSort_nulls_lastAndPageAndMax_update_dateAndElection_type_idAndMax_primary_general_dateAndMin_election_dateAndMin_primary_general_date election-dates/
		/// </summary>
		/// <param name="election_state">
		///State or territory of the office sought.
		///</param>
		/// <param name="max_election_date">
		///The maximum date of election.
		///</param>
		/// <param name="election_district">
		///House district of the office sought, if applicable.
		///</param>
		/// <param name="min_update_date">
		///The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="max_create_date">
		///The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="min_create_date">
		///The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_party">
		///Party, if applicable.
		///</param>
		/// <param name="office_sought">
		///House, Senate or presidential office.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="max_update_date">
		///The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="election_type_id">
		///Election type id
		///</param>
		/// <param name="max_primary_general_date">
		///The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="min_election_date">
		///The minimum date of election.
		///</param>
		/// <param name="min_primary_general_date">
		///The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		public async Task Election_datesGetByElection_stateAndMax_election_dateAndElection_districtAndMin_update_dateAndSort_null_onlyAndSort_hide_nullAndMax_create_dateAndPer_pageAndElection_yearAndSortAndMin_create_dateAndApi_keyAndElection_partyAndOffice_soughtAndSort_nulls_lastAndPageAndMax_update_dateAndElection_type_idAndMax_primary_general_dateAndMin_election_dateAndMin_primary_general_dateAsync(
					string[] election_state, 
					System.DateOnly max_election_date, 
					string[] election_district, 
					System.DateOnly min_update_date, 
					bool sort_null_only, 
					bool sort_hide_null, 
					System.DateOnly max_create_date, 
					int per_page, 
					string[] election_year, 
					string sort, 
					System.DateOnly min_create_date, 
					string api_key, 
					string[] election_party, 
					string[] office_sought, 
					bool sort_nulls_last, 
					int page, 
					System.DateOnly max_update_date, 
					string[] election_type_id, 
					System.DateOnly max_primary_general_date, 
					System.DateOnly min_election_date, 
					System.DateOnly min_primary_general_date, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "election-dates/?"+string.Join("&", election_state.Select(z => $"election_state={System.Uri.EscapeDataString(z.ToString())}"))+"&max_election_date="+max_election_date+"&"+string.Join("&", election_district.Select(z => $"election_district={System.Uri.EscapeDataString(z.ToString())}"))+"&min_update_date="+min_update_date+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&max_create_date="+max_create_date+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&min_create_date="+min_create_date+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", election_party.Select(z => $"election_party={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", office_sought.Select(z => $"office_sought={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&max_update_date="+max_update_date+"&"+string.Join("&", election_type_id.Select(z => $"election_type_id={System.Uri.EscapeDataString(z.ToString())}"))+"&max_primary_general_date="+max_primary_general_date+"&min_election_date="+min_election_date+"&min_primary_general_date="+min_primary_general_date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:
		/// 
		/// _The communication refers to a clearly identified federal candidate._
		/// 
		/// _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._
		/// 
		/// _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._
		/// 
		/// ElectioneeringGetByMin_dateAndApi_keyAndDescriptionAndSort_null_onlyAndPageAndCommittee_idAndReport_yearAndLast_indexAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndMin_amountAndMax_dateAndMax_amountAndSort electioneering/
		/// </summary>
		/// <param name="min_date">Minimum disbursement date</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="report_year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="last_index">Index of last result from previous page</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="max_date">Maximum disbursement date</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task ElectioneeringGetByMin_dateAndApi_keyAndDescriptionAndSort_null_onlyAndPageAndCommittee_idAndReport_yearAndLast_indexAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndMin_amountAndMax_dateAndMax_amountAndSortAsync(
					System.DateOnly min_date, 
					string api_key, 
					string description, 
					bool sort_null_only, 
					int page, 
					string[] committee_id, 
					int[] report_year, 
					int last_index, 
					bool sort_nulls_last, 
					bool sort_hide_null, 
					string[] candidate_id, 
					int per_page, 
					string min_amount, 
					System.DateOnly max_date, 
					string max_amount, 
					string sort, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "electioneering/?min_date="+min_date+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", report_year.Select(z => $"report_year={z}"))+"&last_index="+last_index+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&max_date="+max_date+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Electioneering communications costs aggregates
		/// ElectioneeringAggregatesGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort electioneering/aggregates/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task ElectioneeringAggregatesGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, int[] cycle, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "electioneering/aggregates/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Electioneering costs aggregated by candidate
		/// ElectioneeringBy_candidateGetByDistrictAndApi_keyAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSort electioneering/by_candidate/
		/// </summary>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task ElectioneeringBy_candidateGetByDistrictAndApi_keyAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortAsync(string district, string api_key, bool election_full, int[] cycle, bool sort_null_only, int page, string state, bool sort_nulls_last, bool sort_hide_null, string[] candidate_id, int per_page, Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice office, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "electioneering/by_candidate/?district=" + (district==null? "" : System.Uri.EscapeDataString(district))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&office=" + office+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Total electioneering communications spent on candidates by cycle
		/// or candidate election year
		/// 
		/// ElectioneeringTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort electioneering/totals/by_candidate/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task ElectioneeringTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, bool election_full, int[] cycle, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "electioneering/totals/by_candidate/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Look at the top-level financial information for all candidates running for the same
		/// office.
		/// 
		/// Choose a 2-year cycle, and `house`, `senate` or `presidential`.
		/// 
		/// If you are looking for a Senate seat, you will need to select the state using a two-letter
		/// abbreviation.
		/// 
		/// House races require state and a two-digit district number.
		/// 
		/// Since this endpoint reflects financial information, it will only have candidates once they file
		/// financial reporting forms. Query the `/candidates` endpoint to retrieve an-up-to-date list of all the
		/// candidates that filed to run for a particular seat.
		/// 
		/// ElectionsGetByDistrictAndApi_keyAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndOfficeAndSort elections/
		/// </summary>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task ElectionsGetByDistrictAndApi_keyAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndOfficeAndSortAsync(string district, string api_key, bool election_full, int cycle, bool sort_null_only, int page, string state, bool sort_nulls_last, bool sort_hide_null, int per_page, Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice office, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "elections/?district=" + (district==null? "" : System.Uri.EscapeDataString(district))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&cycle="+cycle+"&sort_null_only="+sort_null_only+"&page="+page+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&office=" + office+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// List elections by cycle, office, state, and district.
		/// 
		/// ElectionsSearchGetByZipAndDistrictAndApi_keyAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndStateAndSort_hide_nullAndPer_pageAndOfficeAndSort elections/search/
		/// </summary>
		/// <param name="zip">Zip code</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		public async Task ElectionsSearchGetByZipAndDistrictAndApi_keyAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndStateAndSort_hide_nullAndPer_pageAndOfficeAndSortAsync(int[] zip, string[] district, string api_key, int[] cycle, bool sort_null_only, bool sort_nulls_last, int page, string[] state, bool sort_hide_null, int per_page, Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice[] office, string[] sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "elections/search/?"+string.Join("&", zip.Select(z => $"zip={z}"))+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", office.Select(z => $"office={z}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// List elections by cycle, office, state, and district.
		/// 
		/// ElectionsSummaryGetByStateAndDistrictAndApi_keyAndElection_fullAndOfficeAndCycle elections/summary/
		/// </summary>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="cycle">
		///Two-year election cycle in which a candidate runs for office.
		///Calculated from Form 2. The cycle begins with
		///an odd year and is named for its ending, even year. This cycle follows
		///the traditional house election cycle and subdivides the presidential
		///and Senate elections into comparable two-year blocks. To retrieve data for
		///the entire four years of a presidential term or six years of a senatorial term,
		///you will need the `election_full` flag.
		///</param>
		public async Task ElectionsSummaryGetByStateAndDistrictAndApi_keyAndElection_fullAndOfficeAndCycleAsync(string state, string district, string api_key, bool election_full, Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice office, int cycle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "elections/summary/?state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&district=" + (district==null? "" : System.Uri.EscapeDataString(district))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&office=" + office+"&cycle="+cycle;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// All official records and reports filed by or delivered to the FEC.
		/// 
		/// Note: because the filings data includes many records, counts for large
		/// result sets are approximate; you will want to page through the records until no records are returned.
		/// 
		/// FilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndCommittee_idAndAmendment_indicatorAndDocument_typeAndBeginning_image_number filings/
		/// </summary>
		/// <param name="is_amended">
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="form_category">
		///The forms filed are categorized based on the nature of the filing:
		///    - REPORT F3, F3X, F3P, F3L, F4, F5, F7, F13
		///    - NOTICE F5, F24, F6, F9, F10, F11
		///    - STATEMENT F1, F2
		///    - OTHER F1M, F8, F99, F12, FRQ
		///</param>
		/// <param name="request_type">
		///Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:
		///    - 1 Statement of Organization
		///    - 2 Report of Receipts and Expenditures (Form 3 and 3X)
		///    - 3 Second Notice - Reports
		///    - 4 Request for Additional Information
		///    - 5 Informational - Reports
		///    - 6 Second Notice - Statement of Organization
		///    - 7 Failure to File
		///    - 8 From Public Disclosure
		///    - 9 From Multi Candidate Status
		///</param>
		/// <param name="primary_general_indicator">
		///Primary, general or special election indicator.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="file_number">Filing ID number</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="filer_type">The method used to file with the FEC, either electronic or on paper.</param>
		/// <param name="most_recent">
		///Report is either new or is the most-recently filed amendment
		///</param>
		/// <param name="report_type">Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="form_type">The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="report_year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="amendment_indicator">Amendent types:
		///    -N   new
		///    -A   amendment
		///    -T   terminated
		///    -C   consolidated
		///    -M   multi-candidate
		///    -S   secondary
		///
		///NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		///</param>
		/// <param name="document_type">
		///The type of document for documents other than reports:
		///    - 2 24 Hour Contribution Notice
		///    - 4 48 Hour Contribution Notice
		///    - A Debt Settlement Statement
		///    - B Acknowledgment of Receipt of Debt Settlement Statement
		///    - C RFAI: Debt Settlement First Notice
		///    - D Commission Debt Settlement Review
		///    - E Commission Response TO Debt Settlement Request
		///    - F Administrative Termination
		///    - G Debt Settlement Plan Amendment
		///    - H Disavowal Notice
		///    - I Disavowal Response
		///    - J Conduit Report
		///    - K Termination Approval
		///    - L Repeat Non-Filer Notice
		///    - M Filing Frequency Change Notice
		///    - N Paper Amendment to Electronic Report
		///    - O Acknowledgment of Filing Frequency Change
		///    - S RFAI: Debt Settlement Second
		///    - T Miscellaneous Report TO FEC
		///    - V Repeat Violation Notice (441A OR 441B)
		///    - P Notice of Paper Filing
		///    - R F3L Filing Frequency Change Notice
		///    - Q Acknowledgment of F3L Filing Frequency Change
		///    - U Unregistered Committee Notice
		///</param>
		/// <param name="beginning_image_number">
		///Unique identifier for the electronic or paper report. This number is used to construct
		///PDF URLs to the original document.
		///</param>
		public async Task FilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndCommittee_idAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberAsync(
					bool is_amended, 
					System.DateOnly min_receipt_date, 
					string[] form_category, 
					string[] request_type, 
					string[] primary_general_indicator, 
					int[] cycle, 
					bool sort_null_only, 
					System.DateOnly max_receipt_date, 
					bool sort_hide_null, 
					string[] candidate_id, 
					int[] file_number, 
					int per_page, 
					string[] office, 
					string[] sort, 
					string[] q_filer, 
					string[] district, 
					string api_key, 
					FilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndCommittee_idAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type filer_type, 
					bool most_recent, 
					string[] report_type, 
					string committee_type, 
					string[] party, 
					string[] form_type, 
					bool sort_nulls_last, 
					int page, 
					string[] state, 
					int[] report_year, 
					string[] committee_id, 
					string[] amendment_indicator, 
					string[] document_type, 
					string[] beginning_image_number, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "filings/?is_amended="+is_amended+"&min_receipt_date="+min_receipt_date+"&"+string.Join("&", form_category.Select(z => $"form_category={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", request_type.Select(z => $"request_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", primary_general_indicator.Select(z => $"primary_general_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", file_number.Select(z => $"file_number={z}"))+"&per_page="+per_page+"&"+string.Join("&", office.Select(z => $"office={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", district.Select(z => $"district={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&filer_type=" + filer_type+"&most_recent="+most_recent+"&"+string.Join("&", report_type.Select(z => $"report_type={System.Uri.EscapeDataString(z.ToString())}"))+"&committee_type=" + (committee_type==null? "" : System.Uri.EscapeDataString(committee_type))+"&"+string.Join("&", party.Select(z => $"party={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", form_type.Select(z => $"form_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", report_year.Select(z => $"report_year={z}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", amendment_indicator.Select(z => $"amendment_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", document_type.Select(z => $"document_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", beginning_image_number.Select(z => $"beginning_image_number={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Search legal documents by document type, or across all document types using keywords, parameter values and ranges.
		/// 
		/// LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_name legal/search/
		/// </summary>
		/// <param name="case_statutory_citation">
		///Statutory citations
		///</param>
		/// <param name="af_min_rtb_date">
		///The earliest Reason to Believe date
		///</param>
		/// <param name="af_report_year">
		///Admin fine report year
		///</param>
		/// <param name="q">
		///Text to search legal documents for
		///</param>
		/// <param name="from_hit">
		///Get results starting from this index
		///</param>
		/// <param name="ao_requestor_type">
		///Code of the advisory opinion requestor type.
		///</param>
		/// <param name="case_max_close_date">
		///The latest date closed of case
		///</param>
		/// <param name="ao_is_pending">
		///AO is pending
		///</param>
		/// <param name="af_fd_fine_amount">
		///Final Determination fine amount
		///</param>
		/// <param name="case_min_open_date">
		///The earliest date opened of case
		///</param>
		/// <param name="ao_min_issue_date">
		///Earliest issue date of advisory opinion
		///</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="ao_citation_require_all">
		///Require all citations to be in document (default behavior is any)
		///</param>
		/// <param name="case_doc_category_id">
		///Select one or more case_doc_category_id to filter by corresponding CASE_DOCUMENT_CATEGORY:
		///        - 1 - Conciliation and Settlement Agreements
		///        - 2 - Complaint, Responses, Designation of Counsel and Extensions of Time
		///        - 3 - General Counsel Reports, Briefs, Notifications and Responses
		///        - 4 - Certifications
		///        - 5 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance
		///        - 6 - Statement of Reasons 
		///        - 1001 - ADR Settlement Agreements
		///        - 1002 - Complaint, Responses, Designation of Counsel and Extensions of Time
		///        - 1003 - ADR Memoranda, Notifications and Responses
		///        - 1004 - Certifications
		///        - 1005 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance
		///        - 1006 - Statement of Reasons 
		///        - 2001 - Administrative Fine Case
		///</param>
		/// <param name="ao_status">
		///Status of AO (pending, withdrawn, or final)
		///</param>
		/// <param name="af_max_rtb_date">
		///The latest Reason to Believe date
		///</param>
		/// <param name="af_rtb_fine_amount">
		///Reason to Believe fine amount
		///</param>
		/// <param name="case_respondents">
		///Cases respondents
		///</param>
		/// <param name="ao_entity_name">
		///Name of commenter or representative
		///</param>
		/// <param name="ao_requestor">
		///The requestor of the advisory opinion
		///</param>
		/// <param name="ao_category">
		///Category of the document
		///</param>
		/// <param name="ao_regulatory_citation">
		///Regulatory citations
		///</param>
		/// <param name="case_regulatory_citation">
		///Regulatory citations
		///</param>
		/// <param name="case_citation_require_all">
		///Require all citations to be in document (default behavior is any)
		///</param>
		/// <param name="case_dispositions">
		///Cases dispositions
		///</param>
		/// <param name="ao_name">
		///Force advisory opinion name
		///</param>
		/// <param name="af_max_fd_date">
		///The latest Final Determination date
		///</param>
		/// <param name="ao_max_request_date">
		///Latest request date of advisory opinion
		///</param>
		/// <param name="mur_type">
		///Type of MUR : current or archived
		///</param>
		/// <param name="hits_returned">
		///Number of results to return (max 10)
		///</param>
		/// <param name="case_election_cycles">
		///Cases election cycles
		///</param>
		/// <param name="case_min_close_date">
		///The earliest date closed of case
		///</param>
		/// <param name="ao_max_issue_date">
		///Latest issue date of advisory opinion
		///</param>
		/// <param name="af_committee_id">
		///Admin fine committee ID
		///</param>
		/// <param name="af_min_fd_date">
		///The earliest Final Determination date
		///</param>
		/// <param name="case_max_open_date">
		///The latest date opened of case
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="ao_min_request_date">
		///Earliest request date of advisory opinion
		///</param>
		/// <param name="ao_no">
		///Force advisory opinion number
		///</param>
		/// <param name="type">
		///Choose a legal document type
		///</param>
		/// <param name="case_no">
		///Enforcement matter case number
		///</param>
		/// <param name="ao_statutory_citation">
		///Statutory citations
		///</param>
		/// <param name="af_name">
		///Admin fine committee name
		///</param>
		public async Task LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameAsync(
					string[] case_statutory_citation, 
					System.DateOnly af_min_rtb_date, 
					string af_report_year, 
					string q, 
					int from_hit, 
					int[] ao_requestor_type, 
					System.DateOnly case_max_close_date, 
					bool ao_is_pending, 
					int af_fd_fine_amount, 
					System.DateOnly case_min_open_date, 
					System.DateOnly ao_min_issue_date, 
					string sort, 
					bool ao_citation_require_all, 
					string[] case_doc_category_id, 
					string ao_status, 
					System.DateOnly af_max_rtb_date, 
					int af_rtb_fine_amount, 
					string case_respondents, 
					string[] ao_entity_name, 
					string ao_requestor, 
					string[] ao_category, 
					string[] ao_regulatory_citation, 
					string[] case_regulatory_citation, 
					bool case_citation_require_all, 
					string[] case_dispositions, 
					string[] ao_name, 
					System.DateOnly af_max_fd_date, 
					System.DateOnly ao_max_request_date, 
					LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameMur_type mur_type, 
					int hits_returned, 
					int case_election_cycles, 
					System.DateOnly case_min_close_date, 
					System.DateOnly ao_max_issue_date, 
					string af_committee_id, 
					System.DateOnly af_min_fd_date, 
					System.DateOnly case_max_open_date, 
					string api_key, 
					System.DateOnly ao_min_request_date, 
					string[] ao_no, 
					LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameType type, 
					string[] case_no, 
					string[] ao_statutory_citation, 
					string[] af_name, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "legal/search/?"+string.Join("&", case_statutory_citation.Select(z => $"case_statutory_citation={System.Uri.EscapeDataString(z.ToString())}"))+"&af_min_rtb_date="+af_min_rtb_date+"&af_report_year=" + (af_report_year==null? "" : System.Uri.EscapeDataString(af_report_year))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&from_hit="+from_hit+"&"+string.Join("&", ao_requestor_type.Select(z => $"ao_requestor_type={z}"))+"&case_max_close_date="+case_max_close_date+"&ao_is_pending="+ao_is_pending+"&af_fd_fine_amount="+af_fd_fine_amount+"&case_min_open_date="+case_min_open_date+"&ao_min_issue_date="+ao_min_issue_date+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&ao_citation_require_all="+ao_citation_require_all+"&"+string.Join("&", case_doc_category_id.Select(z => $"case_doc_category_id={System.Uri.EscapeDataString(z.ToString())}"))+"&ao_status=" + (ao_status==null? "" : System.Uri.EscapeDataString(ao_status))+"&af_max_rtb_date="+af_max_rtb_date+"&af_rtb_fine_amount="+af_rtb_fine_amount+"&case_respondents=" + (case_respondents==null? "" : System.Uri.EscapeDataString(case_respondents))+"&"+string.Join("&", ao_entity_name.Select(z => $"ao_entity_name={System.Uri.EscapeDataString(z.ToString())}"))+"&ao_requestor=" + (ao_requestor==null? "" : System.Uri.EscapeDataString(ao_requestor))+"&"+string.Join("&", ao_category.Select(z => $"ao_category={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ao_regulatory_citation.Select(z => $"ao_regulatory_citation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", case_regulatory_citation.Select(z => $"case_regulatory_citation={System.Uri.EscapeDataString(z.ToString())}"))+"&case_citation_require_all="+case_citation_require_all+"&"+string.Join("&", case_dispositions.Select(z => $"case_dispositions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ao_name.Select(z => $"ao_name={System.Uri.EscapeDataString(z.ToString())}"))+"&af_max_fd_date="+af_max_fd_date+"&ao_max_request_date="+ao_max_request_date+"&mur_type=" + mur_type+"&hits_returned="+hits_returned+"&case_election_cycles="+case_election_cycles+"&case_min_close_date="+case_min_close_date+"&ao_max_issue_date="+ao_max_issue_date+"&af_committee_id=" + (af_committee_id==null? "" : System.Uri.EscapeDataString(af_committee_id))+"&af_min_fd_date="+af_min_fd_date+"&case_max_open_date="+case_max_open_date+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&ao_min_request_date="+ao_min_request_date+"&"+string.Join("&", ao_no.Select(z => $"ao_no={System.Uri.EscapeDataString(z.ToString())}"))+"&type=" + type+"&"+string.Join("&", case_no.Select(z => $"case_no={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ao_statutory_citation.Select(z => $"ao_statutory_citation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", af_name.Select(z => $"af_name={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Search for candidates or committees by name. If you're looking for information on a
		/// particular person or group, using a name to find the `candidate_id` or `committee_id` on
		/// this endpoint can be a helpful first step.
		/// 
		/// NamesAudit_candidatesGetByApi_keyAndQ names/audit_candidates/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="q">Name (candidate or committee) to search for</param>
		public async Task NamesAudit_candidatesGetByApi_keyAndQAsync(string api_key, string[] q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/audit_candidates/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Search for candidates or committees by name. If you're looking for information on a
		/// particular person or group, using a name to find the `candidate_id` or `committee_id` on
		/// this endpoint can be a helpful first step.
		/// 
		/// NamesAudit_committeesGetByApi_keyAndQ names/audit_committees/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="q">Name (candidate or committee) to search for</param>
		public async Task NamesAudit_committeesGetByApi_keyAndQAsync(string api_key, string[] q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/audit_committees/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Search for candidates or committees by name. If you're looking for information on a
		/// particular person or group, using a name to find the `candidate_id` or `committee_id` on
		/// this endpoint can be a helpful first step.
		/// 
		/// NamesCandidatesGetByApi_keyAndQ names/candidates/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="q">Name (candidate or committee) to search for</param>
		public async Task NamesCandidatesGetByApi_keyAndQAsync(string api_key, string[] q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/candidates/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Search for candidates or committees by name. If you're looking for information on a
		/// particular person or group, using a name to find the `candidate_id` or `committee_id` on
		/// this endpoint can be a helpful first step.
		/// 
		/// NamesCommitteesGetByApi_keyAndQ names/committees/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="q">Name (candidate or committee) to search for</param>
		public async Task NamesCommitteesGetByApi_keyAndQAsync(string api_key, string[] q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/committees/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", q.Select(z => $"q={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// The Operations log contains details of each report loaded into the database. It is primarily
		/// used as status check to determine when all of the data processes, from initial entry through
		/// review are complete.
		/// 
		/// Operations_logGetByMin_receipt_dateAndCandidate_committee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndMax_transaction_data_complete_dateAndPer_pageAndSortAndApi_keyAndReport_typeAndMin_transaction_data_complete_dateAndForm_typeAndSort_nulls_lastAndMax_coverage_end_dateAndPageAndReport_yearAndStatus_numAndAmendment_indicatorAndBeginning_image_numberAndMin_coverage_end_date operations-log/
		/// </summary>
		/// <param name="min_receipt_date">
		///Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="candidate_committee_id">
		///A unique identifier of the registered filer.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="max_receipt_date">
		///Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="max_transaction_data_complete_date">
		///Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="report_type">Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///</param>
		/// <param name="min_transaction_data_complete_date">
		///Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="form_type">The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="max_coverage_end_date">
		///Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="report_year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="status_num">
		///Status of the transactional report.
		///    -0- Transaction is entered 
		///          into the system.
		///          But not verified.
		///    -1- Transaction is verified.
		///</param>
		/// <param name="amendment_indicator">Amendent types:
		///    -N   new
		///    -A   amendment
		///    -T   terminated
		///    -C   consolidated
		///    -M   multi-candidate
		///    -S   secondary
		///
		///NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		///</param>
		/// <param name="beginning_image_number">
		///Unique identifier for the electronic or paper report. This number is used to construct
		///PDF URLs to the original document.
		///</param>
		/// <param name="min_coverage_end_date">
		///Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		public async Task Operations_logGetByMin_receipt_dateAndCandidate_committee_idAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndMax_transaction_data_complete_dateAndPer_pageAndSortAndApi_keyAndReport_typeAndMin_transaction_data_complete_dateAndForm_typeAndSort_nulls_lastAndMax_coverage_end_dateAndPageAndReport_yearAndStatus_numAndAmendment_indicatorAndBeginning_image_numberAndMin_coverage_end_dateAsync(
					System.DateOnly min_receipt_date, 
					string[] candidate_committee_id, 
					bool sort_null_only, 
					System.DateOnly max_receipt_date, 
					bool sort_hide_null, 
					System.DateOnly max_transaction_data_complete_date, 
					int per_page, 
					string[] sort, 
					string api_key, 
					string[] report_type, 
					System.DateOnly min_transaction_data_complete_date, 
					string[] form_type, 
					bool sort_nulls_last, 
					System.DateOnly max_coverage_end_date, 
					int page, 
					int[] report_year, 
					string[] status_num, 
					string[] amendment_indicator, 
					string[] beginning_image_number, 
					System.DateOnly min_coverage_end_date, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "operations-log/?min_receipt_date="+min_receipt_date+"&"+string.Join("&", candidate_committee_id.Select(z => $"candidate_committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&max_transaction_data_complete_date="+max_transaction_data_complete_date+"&per_page="+per_page+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", report_type.Select(z => $"report_type={System.Uri.EscapeDataString(z.ToString())}"))+"&min_transaction_data_complete_date="+min_transaction_data_complete_date+"&"+string.Join("&", form_type.Select(z => $"form_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&max_coverage_end_date="+max_coverage_end_date+"&page="+page+"&"+string.Join("&", report_year.Select(z => $"report_year={z}"))+"&"+string.Join("&", status_num.Select(z => $"status_num={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", amendment_indicator.Select(z => $"amendment_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", beginning_image_number.Select(z => $"beginning_image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&min_coverage_end_date="+min_coverage_end_date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Net receipts per candidate.
		/// 
		/// Filter with `contributor_state='US'` for national totals
		/// 
		/// PresidentialContributionsBy_candidateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndContributor_stateAndSort presidential/contributions/by_candidate/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="contributor_state">State of contributor</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task PresidentialContributionsBy_candidateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndContributor_stateAndSortAsync(string api_key, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, int per_page, int[] election_year, string[] contributor_state, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "presidential/contributions/by_candidate/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&"+string.Join("&", contributor_state.Select(z => $"contributor_state={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Contribution receipts by size per candidate.
		/// 
		/// Filter by candidate_id, election_year and/or size
		/// 
		/// PresidentialContributionsBy_sizeGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSizeAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort presidential/contributions/by_size/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="size">
		///The total all contributions in the following ranges:
		///```
		///  -0    $200 and under
		///  -200  $200.01 - $499.99
		///  -500  $500 - $999.99
		///  -1000 $1000 - $1999.99
		///  -2000 $2000 +
		///```
		///Unitemized contributions are included in the `0` category.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task PresidentialContributionsBy_sizeGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSizeAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSortAsync(string api_key, bool sort_nulls_last, int page, bool sort_null_only, int[] size, bool sort_hide_null, string[] candidate_id, int per_page, int[] election_year, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "presidential/contributions/by_size/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&"+string.Join("&", size.Select(z => $"size={z}"))+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Contribution receipts by state per candidate.
		/// 
		/// Filter by candidate_id and/or election_year
		/// 
		/// PresidentialContributionsBy_stateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort presidential/contributions/by_state/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task PresidentialContributionsBy_stateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSortAsync(string api_key, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, string[] candidate_id, int per_page, int[] election_year, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "presidential/contributions/by_state/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Coverage end date per candidate.
		/// 
		/// Filter by candidate_id and/or election_year
		/// 
		/// PresidentialCoverage_end_dateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort presidential/coverage_end_date/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task PresidentialCoverage_end_dateGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSortAsync(string api_key, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, string[] candidate_id, int per_page, int[] election_year, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "presidential/coverage_end_date/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Financial summary per candidate.
		/// 
		/// Filter by candidate_id and/or election_year
		/// 
		/// PresidentialFinancial_summaryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSort presidential/financial_summary/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///  -P00000001    All candidates
		///  -P00000002    Democrasts
		///  -P00000003    Republicans
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="election_year">Year of election</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task PresidentialFinancial_summaryGetByApi_keyAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndElection_yearAndSortAsync(string api_key, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, string[] candidate_id, int per_page, int[] election_year, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "presidential/financial_summary/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", election_year.Select(z => $"election_year={z}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Use this endpoint to look up the RAD Analyst for a committee.
		/// 
		/// The mission of the Reports Analysis Division (RAD) is to ensure that
		/// campaigns and political committees file timely and accurate reports that fully disclose
		/// their financial activities.  RAD is responsible for reviewing statements and financial
		/// reports filed by political committees participating in federal elections, providing
		/// assistance and guidance to the committees to properly file their reports, and for taking
		/// appropriate action to ensure compliance with the Federal Election Campaign Act (FECA).
		/// 
		/// Rad_analystGetByApi_keyAndMin_assignment_update_dateAndTelephone_extAndAnalyst_idAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndNameAndPer_pageAndEmailAndTitleAndSortAndMax_assignment_update_dateAndAnalyst_short_id rad-analyst/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_assignment_update_date">Filter results for assignment updates made after this date</param>
		/// <param name="telephone_ext">Telephone extension of RAD analyst</param>
		/// <param name="analyst_id">ID of RAD analyst</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="name">Name of RAD analyst</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="email">Email of RAD analyst</param>
		/// <param name="title">Title of RAD analyst</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="max_assignment_update_date">Filter results for assignment updates made before this date</param>
		/// <param name="analyst_short_id">Short ID of RAD analyst</param>
		public async Task Rad_analystGetByApi_keyAndMin_assignment_update_dateAndTelephone_extAndAnalyst_idAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndNameAndPer_pageAndEmailAndTitleAndSortAndMax_assignment_update_dateAndAnalyst_short_idAsync(
					string api_key, 
					System.DateOnly min_assignment_update_date, 
					int[] telephone_ext, 
					int[] analyst_id, 
					bool sort_null_only, 
					int page, 
					string[] committee_id, 
					bool sort_nulls_last, 
					bool sort_hide_null, 
					string[] name, 
					int per_page, 
					string[] email, 
					string[] title, 
					string sort, 
					System.DateOnly max_assignment_update_date, 
					int[] analyst_short_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rad-analyst/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_assignment_update_date="+min_assignment_update_date+"&"+string.Join("&", telephone_ext.Select(z => $"telephone_ext={z}"))+"&"+string.Join("&", analyst_id.Select(z => $"analyst_id={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", name.Select(z => $"name={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", email.Select(z => $"email={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", title.Select(z => $"title={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&max_assignment_update_date="+max_assignment_update_date+"&"+string.Join("&", analyst_short_id.Select(z => $"analyst_short_id={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// FEC election dates since 1995.
		/// 
		/// Reporting_datesGetByApi_keyAndMin_update_dateAndReport_typeAndMin_due_dateAndSort_null_onlyAndPageAndMax_due_dateAndReport_yearAndSort_nulls_lastAndMax_create_dateAndMax_update_dateAndPer_pageAndSort_hide_nullAndSortAndMin_create_date reporting-dates/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_update_date">
		///The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="report_type">Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///    - 90S Post Inaugural Supplement
		///    - 90D Post Inaugural
		///    - 48  48 Hour Notification
		///    - 24  24 Hour Notification
		///    - M7S July Monthly/Semi-Annual
		///    - MSA Monthly Semi-Annual (MY)
		///    - MYS Monthly Year End/Semi-Annual
		///    - Q2S July Quarterly/Semi-Annual
		///    - QSA Quarterly Semi-Annual (MY)
		///    - QYS Quarterly Year End/Semi-Annual
		///    - QYE Quarterly Semi-Annual (YE)
		///    - QMS Quarterly Mid-Year/ Semi-Annual
		///    - MSY Monthly Semi-Annual (YE)
		///</param>
		/// <param name="min_due_date">
		///The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="max_due_date">
		///The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="report_year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="max_create_date">
		///The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="max_update_date">
		///The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="min_create_date">
		///The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		public async Task Reporting_datesGetByApi_keyAndMin_update_dateAndReport_typeAndMin_due_dateAndSort_null_onlyAndPageAndMax_due_dateAndReport_yearAndSort_nulls_lastAndMax_create_dateAndMax_update_dateAndPer_pageAndSort_hide_nullAndSortAndMin_create_dateAsync(
					string api_key, 
					System.DateOnly min_update_date, 
					string[] report_type, 
					System.DateOnly min_due_date, 
					bool sort_null_only, 
					int page, 
					System.DateOnly max_due_date, 
					int[] report_year, 
					bool sort_nulls_last, 
					System.DateOnly max_create_date, 
					System.DateOnly max_update_date, 
					int per_page, 
					bool sort_hide_null, 
					string sort, 
					System.DateOnly min_create_date, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reporting-dates/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_update_date="+min_update_date+"&"+string.Join("&", report_type.Select(z => $"report_type={System.Uri.EscapeDataString(z.ToString())}"))+"&min_due_date="+min_due_date+"&sort_null_only="+sort_null_only+"&page="+page+"&max_due_date="+max_due_date+"&"+string.Join("&", report_year.Select(z => $"report_year={z}"))+"&sort_nulls_last="+sort_nulls_last+"&max_create_date="+max_create_date+"&max_update_date="+max_update_date+"&per_page="+per_page+"&sort_hide_null="+sort_hide_null+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&min_create_date="+min_create_date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Each report represents the summary information from Form 3, Form 3X and Form 3P.
		/// These reports have key statistics that illuminate the financial status of a given committee.
		/// Things like cash on hand, debts owed by committee, total receipts, and total disbursements
		/// are especially helpful for understanding a committee's financial dealings.
		/// 
		/// By default, this endpoint includes both amended and final versions of each report. To restrict
		/// to only the final versions of each report, use `is_amended=false`; to retrieve only reports that
		/// have been amended, use `is_amended=true`.
		/// 
		/// Several different reporting structures exist, depending on the type of organization that
		/// submits financial information. To see an example of these reporting requirements,
		/// look at the summary and detailed summary pages of Form 3, Form 3X, and Form 3P.
		/// 
		/// DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly
		/// label these fields while conveying clear meaning to ensure accessibility for all users.
		/// 
		/// Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recent reports/{entity_type}/
		/// </summary>
		/// <param name="max_party_coordinated_expenditures">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="max_debts_owed_expenditures">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="min_receipts_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="min_debts_owed_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="max_receipt_date">
		///Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		/// <param name="q_spender">
		///Keyword search for spender name or ID
		///</param>
		/// <param name="max_receipts_amount">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="filer_type">The method used to file with the FEC, either electronic or on paper.</param>
		/// <param name="report_type">Report type; prefix with "-" to exclude. Name of report where the underlying data comes from:
		///    - 10D Pre-Election
		///    - 10G Pre-General
		///    - 10P Pre-Primary
		///    - 10R Pre-Run-Off
		///    - 10S Pre-Special
		///    - 12C Pre-Convention
		///    - 12G Pre-General
		///    - 12P Pre-Primary
		///    - 12R Pre-Run-Off
		///    - 12S Pre-Special
		///    - 30D Post-Election
		///    - 30G Post-General
		///    - 30P Post-Primary
		///    - 30R Post-Run-Off
		///    - 30S Post-Special
		///    - 60D Post-Convention
		///    - M1  January Monthly
		///    - M10 October Monthly
		///    - M11 November Monthly
		///    - M12 December Monthly
		///    - M2  February Monthly
		///    - M3  March Monthly
		///    - M4  April Monthly
		///    - M5  May Monthly
		///    - M6  June Monthly
		///    - M7  July Monthly
		///    - M8  August Monthly
		///    - M9  September Monthly
		///    - MY  Mid-Year Report
		///    - Q1  April Quarterly
		///    - Q2  July Quarterly
		///    - Q3  October Quarterly
		///    - TER Termination Report
		///    - YE  Year-End
		///    - ADJ COMP ADJUST AMEND
		///    - CA  COMPREHENSIVE AMEND
		///</param>
		/// <param name="max_total_contributions">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="max_independent_expenditures">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="min_total_contributions">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="min_party_coordinated_expenditures">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="beginning_image_number">
		///Unique identifier for the electronic or paper report. This number is used to construct
		///PDF URLs to the original document.
		///</param>
		/// <param name="min_receipt_date">
		///Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD)
		///</param>
		/// <param name="is_amended">
		///False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
		///</param>
		/// <param name="max_disbursements_amount">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="max_cash_on_hand_end_period_amount">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="amendment_indicator">Amendent types:
		///    -N   new
		///    -A   amendment
		///    -T   terminated
		///    -C   consolidated
		///    -M   multi-candidate
		///    -S   secondary
		///
		///NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="min_independent_expenditures">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="q_filer">
		///Keyword search for filer name or ID
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="year">
		///Forms with coverage date - 
		///    year from the coverage ending date.
		///Forms without coverage date - 
		///    year from the receipt date.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="min_cash_on_hand_end_period_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="min_disbursements_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="most_recent">
		///Report is either new or is the most-recently filed amendment
		///</param>
		/// <param name="entity_type">Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac-party`, `house-senate`, or `ie-only`</param>
		public async Task Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentAsync(
					string max_party_coordinated_expenditures, 
					string max_debts_owed_expenditures, 
					string min_receipts_amount, 
					string min_debts_owed_amount, 
					System.DateOnly max_receipt_date, 
					bool sort_hide_null, 
					string candidate_id, 
					string[] sort, 
					string[] q_spender, 
					string max_receipts_amount, 
					Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentFiler_type filer_type, 
					string[] report_type, 
					string max_total_contributions, 
					bool sort_nulls_last, 
					string max_independent_expenditures, 
					string min_total_contributions, 
					string min_party_coordinated_expenditures, 
					string[] beginning_image_number, 
					System.DateOnly min_receipt_date, 
					bool is_amended, 
					string max_disbursements_amount, 
					string max_cash_on_hand_end_period_amount, 
					string[] amendment_indicator, 
					int[] cycle, 
					bool sort_null_only, 
					string min_independent_expenditures, 
					int per_page, 
					string[] q_filer, 
					string api_key, 
					string[] committee_type, 
					int page, 
					int[] year, 
					string[] committee_id, 
					string min_cash_on_hand_end_period_amount, 
					string min_disbursements_amount, 
					bool most_recent, 
					Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentEntity_type entity_type, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/"+entity_type+"/?max_party_coordinated_expenditures=" + (max_party_coordinated_expenditures==null? "" : System.Uri.EscapeDataString(max_party_coordinated_expenditures))+"&max_debts_owed_expenditures=" + (max_debts_owed_expenditures==null? "" : System.Uri.EscapeDataString(max_debts_owed_expenditures))+"&min_receipts_amount=" + (min_receipts_amount==null? "" : System.Uri.EscapeDataString(min_receipts_amount))+"&min_debts_owed_amount=" + (min_debts_owed_amount==null? "" : System.Uri.EscapeDataString(min_debts_owed_amount))+"&max_receipt_date="+max_receipt_date+"&sort_hide_null="+sort_hide_null+"&candidate_id=" + (candidate_id==null? "" : System.Uri.EscapeDataString(candidate_id))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", q_spender.Select(z => $"q_spender={System.Uri.EscapeDataString(z.ToString())}"))+"&max_receipts_amount=" + (max_receipts_amount==null? "" : System.Uri.EscapeDataString(max_receipts_amount))+"&filer_type=" + filer_type+"&"+string.Join("&", report_type.Select(z => $"report_type={System.Uri.EscapeDataString(z.ToString())}"))+"&max_total_contributions=" + (max_total_contributions==null? "" : System.Uri.EscapeDataString(max_total_contributions))+"&sort_nulls_last="+sort_nulls_last+"&max_independent_expenditures=" + (max_independent_expenditures==null? "" : System.Uri.EscapeDataString(max_independent_expenditures))+"&min_total_contributions=" + (min_total_contributions==null? "" : System.Uri.EscapeDataString(min_total_contributions))+"&min_party_coordinated_expenditures=" + (min_party_coordinated_expenditures==null? "" : System.Uri.EscapeDataString(min_party_coordinated_expenditures))+"&"+string.Join("&", beginning_image_number.Select(z => $"beginning_image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&min_receipt_date="+min_receipt_date+"&is_amended="+is_amended+"&max_disbursements_amount=" + (max_disbursements_amount==null? "" : System.Uri.EscapeDataString(max_disbursements_amount))+"&max_cash_on_hand_end_period_amount=" + (max_cash_on_hand_end_period_amount==null? "" : System.Uri.EscapeDataString(max_cash_on_hand_end_period_amount))+"&"+string.Join("&", amendment_indicator.Select(z => $"amendment_indicator={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&min_independent_expenditures=" + (min_independent_expenditures==null? "" : System.Uri.EscapeDataString(min_independent_expenditures))+"&per_page="+per_page+"&"+string.Join("&", q_filer.Select(z => $"q_filer={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", committee_type.Select(z => $"committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&"+string.Join("&", year.Select(z => $"year={z}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&min_cash_on_hand_end_period_amount=" + (min_cash_on_hand_end_period_amount==null? "" : System.Uri.EscapeDataString(min_cash_on_hand_end_period_amount))+"&min_disbursements_amount=" + (min_disbursements_amount==null? "" : System.Uri.EscapeDataString(min_disbursements_amount))+"&most_recent="+most_recent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This description is for both ​`/schedules​/schedule_a​/` and ​ `/schedules​/schedule_a​/{sub_id}​/`.
		/// 
		/// This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the `/schedules/schedule_a/` endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our "is_individual" methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).
		/// ​The `/schedules​/schedule_a​/` endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the `last_indexes` object from pagination to the URL of your last request as additional parameters.
		/// For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the two scenarios of following pagination information:
		/// 
		/// case #1:
		/// ```
		/// pagination: {
		/// pages: 2152643,
		/// per_page: 20,
		/// count: 43052850,
		/// last_indexes: {
		/// last_index: "230880619",
		/// last_contribution_receipt_date: "2014-01-01"
		/// }
		/// }
		/// ```
		/// <br/>
		/// case #2 (results which include contribution_receipt_date = NULL):
		/// 
		/// ```
		/// pagination: {
		/// pages: 2152644,
		/// per_page: 20,
		/// count: 43052850,
		/// last_indexes: {
		/// last_index: "230880639",
		/// sort_null_only: True
		/// }
		/// }
		/// ```
		/// To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL and when reaching `contribution_receipt_date=NULL`, append `last_index=230880639` and `sort_null_only=True`. We strongly advise paging through these results using sort indices. The default sort is acending by `contribution_receipt_date` (`deprecated`, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.
		/// 
		/// Calls to ​`/schedules​/schedule_a​/` may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.
		/// 
		/// To avoid throwing the "out of range" exception on the last page, one recommandation is to use total count and `per_page` to control the traverse loop of results.
		/// 
		/// ​The `/schedules​/schedule_a​/{sub_id}​/` endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.
		/// 
		/// 
		/// SchedulesSchedule_aGetByIs_individualAndMin_dateAndMax_image_numberAndMin_image_numberAndContributor_typeAndContributor_idAndRecipient_committee_org_typeAndContributor_employerAndSort_null_onlyAndLast_indexAndContributor_nameAndMin_amountAndSort_hide_nullAndRecipient_committee_designationAndMax_load_dateAndRecipient_committee_typeAndSortAndLast_contribution_receipt_dateAndLast_contribution_receipt_amountAndLine_numberAndContributor_stateAndPer_pageAndApi_keyAndTwo_year_transaction_periodAndContributor_zipAndMin_load_dateAndContributor_occupationAndContributor_cityAndCommittee_idAndImage_numberAndMax_dateAndMax_amount schedules/schedule_a/
		/// </summary>
		/// <param name="is_individual">Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.</param>
		/// <param name="min_date">Minimum date</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="contributor_type">Filters individual or committee contributions based on line number</param>
		/// <param name="contributor_id">The FEC identifier should be represented here if the contributor is registered with the FEC.</param>
		/// <param name="recipient_committee_org_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		/// <param name="contributor_employer">Employer of contributor, filers need to make an effort to gather this information</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="last_index">Index of last result from previous page</param>
		/// <param name="contributor_name">Name of contributor</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="recipient_committee_designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="max_load_date">Maximum load date</param>
		/// <param name="recipient_committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="last_contribution_receipt_date">When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.</param>
		/// <param name="last_contribution_receipt_amount">When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="contributor_state">State of contributor</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="two_year_transaction_period">
		///This is a two-year period that is derived from the year a transaction took place in the
		///Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		///(contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		///the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		///have the date  of the transaction, we fall back to using the report year (report_year in both
		///tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		///specified, the results default to the most current cycle.
		///</param>
		/// <param name="contributor_zip">Zip code of contributor</param>
		/// <param name="min_load_date">Minimum load date</param>
		/// <param name="contributor_occupation">Occupation of contributor, filers need to make an effort to gather this information</param>
		/// <param name="contributor_city">City of contributor</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		public async Task SchedulesSchedule_aGetByIs_individualAndMin_dateAndMax_image_numberAndMin_image_numberAndContributor_typeAndContributor_idAndRecipient_committee_org_typeAndContributor_employerAndSort_null_onlyAndLast_indexAndContributor_nameAndMin_amountAndSort_hide_nullAndRecipient_committee_designationAndMax_load_dateAndRecipient_committee_typeAndSortAndLast_contribution_receipt_dateAndLast_contribution_receipt_amountAndLine_numberAndContributor_stateAndPer_pageAndApi_keyAndTwo_year_transaction_periodAndContributor_zipAndMin_load_dateAndContributor_occupationAndContributor_cityAndCommittee_idAndImage_numberAndMax_dateAndMax_amountAsync(
					bool is_individual, 
					System.DateOnly min_date, 
					string max_image_number, 
					string min_image_number, 
					string[] contributor_type, 
					string[] contributor_id, 
					string[] recipient_committee_org_type, 
					string[] contributor_employer, 
					bool sort_null_only, 
					int last_index, 
					string[] contributor_name, 
					string min_amount, 
					bool sort_hide_null, 
					string[] recipient_committee_designation, 
					System.DateOnly max_load_date, 
					string[] recipient_committee_type, 
					string sort, 
					System.DateOnly last_contribution_receipt_date, 
					float last_contribution_receipt_amount, 
					string line_number, 
					string[] contributor_state, 
					int per_page, 
					string api_key, 
					int[] two_year_transaction_period, 
					string[] contributor_zip, 
					System.DateOnly min_load_date, 
					string[] contributor_occupation, 
					string[] contributor_city, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					string max_amount, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/?is_individual="+is_individual+"&min_date="+min_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&"+string.Join("&", contributor_type.Select(z => $"contributor_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_id.Select(z => $"contributor_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", recipient_committee_org_type.Select(z => $"recipient_committee_org_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_employer.Select(z => $"contributor_employer={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&last_index="+last_index+"&"+string.Join("&", contributor_name.Select(z => $"contributor_name={System.Uri.EscapeDataString(z.ToString())}"))+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", recipient_committee_designation.Select(z => $"recipient_committee_designation={System.Uri.EscapeDataString(z.ToString())}"))+"&max_load_date="+max_load_date+"&"+string.Join("&", recipient_committee_type.Select(z => $"recipient_committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&last_contribution_receipt_date="+last_contribution_receipt_date+"&last_contribution_receipt_amount="+last_contribution_receipt_amount+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&"+string.Join("&", contributor_state.Select(z => $"contributor_state={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", two_year_transaction_period.Select(z => $"two_year_transaction_period={z}"))+"&"+string.Join("&", contributor_zip.Select(z => $"contributor_zip={System.Uri.EscapeDataString(z.ToString())}"))+"&min_load_date="+min_load_date+"&"+string.Join("&", contributor_occupation.Select(z => $"contributor_occupation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_city.Select(z => $"contributor_city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s employer name. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// SchedulesSchedule_aBy_employerGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSort_hide_nullAndEmployerAndPer_pageAndSort schedules/schedule_a/by_employer/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="employer">Employer of contributor as reported on the committee's filing</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_employerGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSort_hide_nullAndEmployerAndPer_pageAndSortAsync(string api_key, int[] cycle, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, bool sort_hide_null, string[] employer, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_employer/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", employer.Select(z => $"employer={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s occupation. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// SchedulesSchedule_aBy_occupationGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndOccupationAndSort_hide_nullAndPer_pageAndSort schedules/schedule_a/by_occupation/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="occupation">Occupation of contributor as reported on the committee's filing</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_occupationGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndOccupationAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, int[] cycle, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, string[] occupation, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_occupation/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&"+string.Join("&", occupation.Select(z => $"occupation={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides individual contributions received by a committee, aggregated by size:
		/// 
		/// ```
		/// - $200 and under
		/// - $200.01 - $499.99
		/// - $500 - $999.99
		/// - $1000 - $1999.99
		/// - $2000 +
		/// ```
		/// 
		/// The $200.00 and under category includes contributions of $200 or less combined with unitemized individual contributions.
		/// 
		/// SchedulesSchedule_aBy_sizeGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSizeAndSort_hide_nullAndPer_pageAndSort schedules/schedule_a/by_size/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="size">
		///The total all contributions in the following ranges:
		///```
		///  -0    $200 and under
		///  -200  $200.01 - $499.99
		///  -500  $500 - $999.99
		///  -1000 $1000 - $1999.99
		///  -2000 $2000 +
		///```
		///Unitemized contributions are included in the `0` category.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_sizeGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndSizeAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, int[] cycle, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, int[] size, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_size/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&"+string.Join("&", size.Select(z => $"size={z}"))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides itemized individual contributions received by a committee, aggregated by size of contribution and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// SchedulesSchedule_aBy_sizeBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSort schedules/schedule_a/by_size/by_candidate/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_sizeBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, bool election_full, int[] cycle, bool sort_null_only, bool sort_nulls_last, int page, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_size/by_candidate/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s state. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// SchedulesSchedule_aBy_stateGetByApi_keyAndHide_nullAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort schedules/schedule_a/by_state/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="hide_null">Exclude values with missing state</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">State of contributor</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_stateGetByApi_keyAndHide_nullAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, bool hide_null, int[] cycle, bool sort_null_only, int page, string[] state, string[] committee_id, bool sort_nulls_last, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_state/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&hide_null="+hide_null+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state and candidate. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// SchedulesSchedule_aBy_stateBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSort schedules/schedule_a/by_state/by_candidate/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_stateBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, bool election_full, int[] cycle, bool sort_null_only, bool sort_nulls_last, int page, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_state/by_candidate/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Itemized individual contributions aggregated by contributor’s state, candidate, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// 
		/// SchedulesSchedule_aBy_stateBy_candidateTotalsGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSort schedules/schedule_a/by_state/by_candidate/totals/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_stateBy_candidateTotalsGetByApi_keyAndElection_fullAndCycleAndSort_null_onlyAndSort_nulls_lastAndPageAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, bool election_full, int[] cycle, bool sort_null_only, bool sort_nulls_last, int page, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_state/by_candidate/totals/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides itemized individual contributions received by a committee, aggregated by contributor’s state, committee type and cycle. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// SchedulesSchedule_aBy_stateTotalsGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort schedules/schedule_a/by_state/totals/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///        - all All Committee Types
		///        - all_candidates All Candidate Committee Types (H, S, P)
		///        - all_pacs All PAC Committee Types (N, O, Q, V, W)
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_stateTotalsGetByApi_keyAndCommittee_typeAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, string[] committee_type, int[] cycle, bool sort_null_only, int page, string[] state, bool sort_nulls_last, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_state/totals/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", committee_type.Select(z => $"committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides itemized individual contributions received by a committee, aggregated by the contributor’s ZIP code. If you are interested in our “is_individual” methodology, review the [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology). Unitemized individual contributions are not included.
		/// 
		/// SchedulesSchedule_aBy_zipGetByZipAndApi_keyAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort schedules/schedule_a/by_zip/
		/// </summary>
		/// <param name="zip">Zip code of contributor</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">State of contributor</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_aBy_zipGetByZipAndApi_keyAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSortAsync(string[] zip, string api_key, int[] cycle, bool sort_null_only, int page, string[] state, string[] committee_id, bool sort_nulls_last, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/by_zip/?"+string.Join("&", zip.Select(z => $"zip={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", state.Select(z => $"state={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints.
		/// 
		/// SchedulesSchedule_aEfileGetByMin_dateAndMax_image_numberAndContributor_employerAndMin_image_numberAndSort_null_onlyAndSort_hide_nullAndContributor_nameAndMin_amountAndPer_pageAndContributor_stateAndSortAndLine_numberAndApi_keyAndContributor_occupationAndContributor_cityAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount schedules/schedule_a/efile/
		/// </summary>
		/// <param name="min_date">Minimum date</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="contributor_employer">Employer of contributor, filers need to make an effort to gather this information</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="contributor_name">Name of contributor</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="contributor_state">State of contributor</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="contributor_occupation">Occupation of contributor, filers need to make an effort to gather this information</param>
		/// <param name="contributor_city">City of contributor</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		public async Task SchedulesSchedule_aEfileGetByMin_dateAndMax_image_numberAndContributor_employerAndMin_image_numberAndSort_null_onlyAndSort_hide_nullAndContributor_nameAndMin_amountAndPer_pageAndContributor_stateAndSortAndLine_numberAndApi_keyAndContributor_occupationAndContributor_cityAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amountAsync(
					System.DateOnly min_date, 
					string max_image_number, 
					string[] contributor_employer, 
					string min_image_number, 
					bool sort_null_only, 
					bool sort_hide_null, 
					string[] contributor_name, 
					string min_amount, 
					int per_page, 
					string[] contributor_state, 
					string sort, 
					string line_number, 
					string api_key, 
					string[] contributor_occupation, 
					string[] contributor_city, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					string max_amount, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/efile/?min_date="+min_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&"+string.Join("&", contributor_employer.Select(z => $"contributor_employer={System.Uri.EscapeDataString(z.ToString())}"))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", contributor_name.Select(z => $"contributor_name={System.Uri.EscapeDataString(z.ToString())}"))+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&per_page="+per_page+"&"+string.Join("&", contributor_state.Select(z => $"contributor_state={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", contributor_occupation.Select(z => $"contributor_occupation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_city.Select(z => $"contributor_city={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This description is for both ​`/schedules​/schedule_a​/` and ​ `/schedules​/schedule_a​/{sub_id}​/`.
		/// 
		/// This endpoint provides itemized receipts. Schedule A records describe itemized receipts, including contributions from individuals. If you are interested in contributions from an individual, use the `/schedules/schedule_a/` endpoint. For a more complete description of all Schedule A records visit [About receipts data](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/about-receipts-data/). If you are interested in our "is_individual" methodology visit our [methodology page](https://www.fec.gov/campaign-finance-data/about-campaign-finance-data/methodology/).
		/// ​The `/schedules​/schedule_a​/` endpoint is not paginated by page number. This endpoint uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset. To request the next page, you should append the values found in the `last_indexes` object from pagination to the URL of your last request as additional parameters.
		/// For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the two scenarios of following pagination information:
		/// 
		/// case #1:
		/// ```
		/// pagination: {
		/// pages: 2152643,
		/// per_page: 20,
		/// count: 43052850,
		/// last_indexes: {
		/// last_index: "230880619",
		/// last_contribution_receipt_date: "2014-01-01"
		/// }
		/// }
		/// ```
		/// <br/>
		/// case #2 (results which include contribution_receipt_date = NULL):
		/// 
		/// ```
		/// pagination: {
		/// pages: 2152644,
		/// per_page: 20,
		/// count: 43052850,
		/// last_indexes: {
		/// last_index: "230880639",
		/// sort_null_only: True
		/// }
		/// }
		/// ```
		/// To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL and when reaching `contribution_receipt_date=NULL`, append `last_index=230880639` and `sort_null_only=True`. We strongly advise paging through these results using sort indices. The default sort is acending by `contribution_receipt_date` (`deprecated`, will be descending). If you do not page using sort indices, some transactions may be unintentionally filtered out.
		/// 
		/// Calls to ​`/schedules​/schedule_a​/` may return many records. For large result sets, the record counts found in the pagination object are approximate; you will need to page through the records until no records are returned.
		/// 
		/// To avoid throwing the "out of range" exception on the last page, one recommandation is to use total count and `per_page` to control the traverse loop of results.
		/// 
		/// ​The `/schedules​/schedule_a​/{sub_id}​/` endpoint returns a single transaction, but it does include a pagination object class. Please ignore the information in that object class.
		/// 
		/// 
		/// SchedulesSchedule_a_sub_idGetByIs_individualAndMin_dateAndMax_image_numberAndMin_image_numberAndContributor_typeAndContributor_idAndRecipient_committee_org_typeAndContributor_employerAndSort_null_onlyAndLast_indexAndContributor_nameAndMin_amountAndSort_hide_nullAndRecipient_committee_designationAndMax_load_dateAndRecipient_committee_typeAndSortAndLast_contribution_receipt_dateAndLast_contribution_receipt_amountAndLine_numberAndContributor_stateAndPer_pageAndApi_keyAndTwo_year_transaction_periodAndContributor_zipAndMin_load_dateAndContributor_occupationAndContributor_cityAndCommittee_idAndImage_numberAndMax_dateAndMax_amount schedules/schedule_a/{sub_id}/
		/// </summary>
		/// <param name="is_individual">Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.</param>
		/// <param name="min_date">Minimum date</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="contributor_type">Filters individual or committee contributions based on line number</param>
		/// <param name="contributor_id">The FEC identifier should be represented here if the contributor is registered with the FEC.</param>
		/// <param name="recipient_committee_org_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		/// <param name="contributor_employer">Employer of contributor, filers need to make an effort to gather this information</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="last_index">Index of last result from previous page</param>
		/// <param name="contributor_name">Name of contributor</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="recipient_committee_designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="max_load_date">Maximum load date</param>
		/// <param name="recipient_committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="last_contribution_receipt_date">When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.</param>
		/// <param name="last_contribution_receipt_amount">When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="contributor_state">State of contributor</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="two_year_transaction_period">
		///This is a two-year period that is derived from the year a transaction took place in the
		///Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		///(contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		///the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		///have the date  of the transaction, we fall back to using the report year (report_year in both
		///tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		///specified, the results default to the most current cycle.
		///</param>
		/// <param name="contributor_zip">Zip code of contributor</param>
		/// <param name="min_load_date">Minimum load date</param>
		/// <param name="contributor_occupation">Occupation of contributor, filers need to make an effort to gather this information</param>
		/// <param name="contributor_city">City of contributor</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		public async Task SchedulesSchedule_a_sub_idGetByIs_individualAndMin_dateAndMax_image_numberAndMin_image_numberAndContributor_typeAndContributor_idAndRecipient_committee_org_typeAndContributor_employerAndSort_null_onlyAndLast_indexAndContributor_nameAndMin_amountAndSort_hide_nullAndRecipient_committee_designationAndMax_load_dateAndRecipient_committee_typeAndSortAndLast_contribution_receipt_dateAndLast_contribution_receipt_amountAndLine_numberAndContributor_stateAndPer_pageAndApi_keyAndTwo_year_transaction_periodAndContributor_zipAndMin_load_dateAndContributor_occupationAndContributor_cityAndCommittee_idAndImage_numberAndMax_dateAndMax_amountAsync(
					bool is_individual, 
					System.DateOnly min_date, 
					string max_image_number, 
					string min_image_number, 
					string[] contributor_type, 
					string[] contributor_id, 
					string[] recipient_committee_org_type, 
					string[] contributor_employer, 
					bool sort_null_only, 
					int last_index, 
					string[] contributor_name, 
					string min_amount, 
					bool sort_hide_null, 
					string[] recipient_committee_designation, 
					System.DateOnly max_load_date, 
					string[] recipient_committee_type, 
					string sort, 
					System.DateOnly last_contribution_receipt_date, 
					float last_contribution_receipt_amount, 
					string line_number, 
					string[] contributor_state, 
					int per_page, 
					string api_key, 
					int[] two_year_transaction_period, 
					string[] contributor_zip, 
					System.DateOnly min_load_date, 
					string[] contributor_occupation, 
					string[] contributor_city, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					string max_amount, 
					string sub_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_a/"+ (sub_id==null? "" : System.Uri.EscapeDataString(sub_id))+"/?is_individual="+is_individual+"&min_date="+min_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&"+string.Join("&", contributor_type.Select(z => $"contributor_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_id.Select(z => $"contributor_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", recipient_committee_org_type.Select(z => $"recipient_committee_org_type={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_employer.Select(z => $"contributor_employer={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&last_index="+last_index+"&"+string.Join("&", contributor_name.Select(z => $"contributor_name={System.Uri.EscapeDataString(z.ToString())}"))+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", recipient_committee_designation.Select(z => $"recipient_committee_designation={System.Uri.EscapeDataString(z.ToString())}"))+"&max_load_date="+max_load_date+"&"+string.Join("&", recipient_committee_type.Select(z => $"recipient_committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&last_contribution_receipt_date="+last_contribution_receipt_date+"&last_contribution_receipt_amount="+last_contribution_receipt_amount+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&"+string.Join("&", contributor_state.Select(z => $"contributor_state={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", two_year_transaction_period.Select(z => $"two_year_transaction_period={z}"))+"&"+string.Join("&", contributor_zip.Select(z => $"contributor_zip={System.Uri.EscapeDataString(z.ToString())}"))+"&min_load_date="+min_load_date+"&"+string.Join("&", contributor_occupation.Select(z => $"contributor_occupation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", contributor_city.Select(z => $"contributor_city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule B filings describe itemized disbursements. This data
		/// explains how committees and other filers spend their money. These figures are
		/// reported as part of forms F3, F3X and F3P.
		/// 
		/// The data is divided in two-year periods, called `two_year_transaction_period`, which
		/// is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will
		/// default to the most recent two-year period that is named after the ending,
		/// even-numbered year.
		/// 
		/// Due to the large quantity of Schedule B filings, this endpoint is not paginated by
		/// page number. Instead, you can request the next page of results by adding the values in
		/// the `last_indexes` object from `pagination` to the URL of your last request. For
		/// example, when sorting by `disbursement_date`, you might receive a page of
		/// results with the following pagination information:
		/// 
		/// ```
		/// pagination: {
		/// pages: 965191,
		/// per_page: 20,
		/// count: 19303814,
		/// last_indexes: {
		/// last_index: "230906248",
		/// last_disbursement_date: "2014-07-04"
		/// }
		/// }
		/// ```
		/// 
		/// To fetch the next page of sorted results, append `last_index=230906248` and
		/// `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through
		/// these results by using the sort indices (defaults to sort by disbursement date, e.g.
		/// `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.
		/// This resource uses keyset pagination to improve query performance
		/// and these indices are required to properly page through this large dataset.
		/// 
		/// Note: because the Schedule B data includes many records, counts for
		/// large result sets are approximate; you will want to page through the records until no records are returned.
		/// 
		/// SchedulesSchedule_bGetByMin_dateAndSpender_committee_designationAndRecipient_committee_idAndLast_disbursement_dateAndMax_image_numberAndDisbursement_descriptionAndDisbursement_purpose_categoryAndMin_image_numberAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLine_numberAndSortAndRecipient_cityAndSpender_committee_typeAndLast_disbursement_amountAndSpender_committee_org_typeAndApi_keyAndTwo_year_transaction_periodAndCommittee_idAndImage_numberAndMax_dateAndRecipient_nameAndMax_amountAndRecipient_state schedules/schedule_b/
		/// </summary>
		/// <param name="min_date">Minimum date</param>
		/// <param name="spender_committee_designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="recipient_committee_id">The FEC identifier should be represented here if the contributor is registered with the FEC.</param>
		/// <param name="last_disbursement_date">When sorting by `disbursement_date`, this is populated with the `disbursement_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="disbursement_description">Description of disbursement</param>
		/// <param name="disbursement_purpose_category">Disbursement purpose category</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="last_index">Index of last result from previous page</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="recipient_city">City of recipient</param>
		/// <param name="spender_committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="last_disbursement_amount">When sorting by `disbursement_amount`, this is populated with the `disbursement_amount` of the last result.  However, you will need to pass the index of that last result to `last_index` to get the next page.</param>
		/// <param name="spender_committee_org_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="two_year_transaction_period">
		///This is a two-year period that is derived from the year a transaction took place in the
		///Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		///(contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		///the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		///have the date  of the transaction, we fall back to using the report year (report_year in both
		///tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		///specified, the results default to the most current cycle.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="recipient_name">Name of the entity receiving the disbursement</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		/// <param name="recipient_state">State of recipient</param>
		public async Task SchedulesSchedule_bGetByMin_dateAndSpender_committee_designationAndRecipient_committee_idAndLast_disbursement_dateAndMax_image_numberAndDisbursement_descriptionAndDisbursement_purpose_categoryAndMin_image_numberAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLine_numberAndSortAndRecipient_cityAndSpender_committee_typeAndLast_disbursement_amountAndSpender_committee_org_typeAndApi_keyAndTwo_year_transaction_periodAndCommittee_idAndImage_numberAndMax_dateAndRecipient_nameAndMax_amountAndRecipient_stateAsync(
					System.DateOnly min_date, 
					string[] spender_committee_designation, 
					string[] recipient_committee_id, 
					System.DateOnly last_disbursement_date, 
					string max_image_number, 
					string[] disbursement_description, 
					string[] disbursement_purpose_category, 
					string min_image_number, 
					bool sort_null_only, 
					int last_index, 
					bool sort_hide_null, 
					string min_amount, 
					int per_page, 
					string line_number, 
					string sort, 
					string[] recipient_city, 
					string[] spender_committee_type, 
					float last_disbursement_amount, 
					string[] spender_committee_org_type, 
					string api_key, 
					int[] two_year_transaction_period, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					string[] recipient_name, 
					string max_amount, 
					string[] recipient_state, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_b/?min_date="+min_date+"&"+string.Join("&", spender_committee_designation.Select(z => $"spender_committee_designation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", recipient_committee_id.Select(z => $"recipient_committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&last_disbursement_date="+last_disbursement_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&"+string.Join("&", disbursement_description.Select(z => $"disbursement_description={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", disbursement_purpose_category.Select(z => $"disbursement_purpose_category={System.Uri.EscapeDataString(z.ToString())}"))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&sort_null_only="+sort_null_only+"&last_index="+last_index+"&sort_hide_null="+sort_hide_null+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&per_page="+per_page+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", recipient_city.Select(z => $"recipient_city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", spender_committee_type.Select(z => $"spender_committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&last_disbursement_amount="+last_disbursement_amount+"&"+string.Join("&", spender_committee_org_type.Select(z => $"spender_committee_org_type={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", two_year_transaction_period.Select(z => $"two_year_transaction_period={z}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&"+string.Join("&", recipient_name.Select(z => $"recipient_name={System.Uri.EscapeDataString(z.ToString())}"))+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount))+"&"+string.Join("&", recipient_state.Select(z => $"recipient_state={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting,
		/// memoed items are not included.
		/// Purpose is a combination of transaction codes, category codes and disbursement description.
		/// Inspect the `disbursement_purpose` sql function within the migrations for more details.
		/// 
		/// SchedulesSchedule_bBy_purposeGetByApi_keyAndPurposeAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort schedules/schedule_b/by_purpose/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="purpose">Disbursement purpose category</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_bBy_purposeGetByApi_keyAndPurposeAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, string[] purpose, int[] cycle, bool sort_null_only, int page, string[] committee_id, bool sort_nulls_last, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_b/by_purpose/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", purpose.Select(z => $"purpose={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule B disbursements aggregated by recipient name. To avoid double counting,
		/// memoed items are not included.
		/// 
		/// SchedulesSchedule_bBy_recipientGetByApi_keyAndRecipient_nameAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSort schedules/schedule_b/by_recipient/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="recipient_name">Name of the entity receiving the disbursement</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_bBy_recipientGetByApi_keyAndRecipient_nameAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, string[] recipient_name, int[] cycle, bool sort_null_only, int page, string[] committee_id, bool sort_nulls_last, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_b/by_recipient/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", recipient_name.Select(z => $"recipient_name={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule B disbursements aggregated by recipient committee ID, if applicable.
		/// To avoid double counting, memoed items are not included.
		/// 
		/// SchedulesSchedule_bBy_recipient_idGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndRecipient_idAndSort_hide_nullAndPer_pageAndSort schedules/schedule_b/by_recipient_id/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="recipient_id">The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_bBy_recipient_idGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndRecipient_idAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, int[] cycle, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, string[] recipient_id, bool sort_hide_null, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_b/by_recipient_id/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&"+string.Join("&", recipient_id.Select(z => $"recipient_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints.
		/// 
		/// SchedulesSchedule_bEfileGetByMin_dateAndApi_keyAndDisbursement_descriptionAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndImage_numberAndSort_hide_nullAndMax_dateAndPer_pageAndMin_amountAndMax_amountAndSortAndRecipient_cityAndRecipient_state schedules/schedule_b/efile/
		/// </summary>
		/// <param name="min_date">When sorting by `disbursement_date`, this is populated with the         `disbursement_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="disbursement_description">Description of disbursement</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="max_date">When sorting by `disbursement_date`, this is populated with the         `disbursement_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="min_amount">Filter for all amounts less than a value.</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="recipient_city">City of recipient</param>
		/// <param name="recipient_state">State of recipient</param>
		public async Task SchedulesSchedule_bEfileGetByMin_dateAndApi_keyAndDisbursement_descriptionAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndImage_numberAndSort_hide_nullAndMax_dateAndPer_pageAndMin_amountAndMax_amountAndSortAndRecipient_cityAndRecipient_stateAsync(
					System.DateOnly min_date, 
					string api_key, 
					string[] disbursement_description, 
					bool sort_null_only, 
					int page, 
					string[] committee_id, 
					bool sort_nulls_last, 
					string[] image_number, 
					bool sort_hide_null, 
					System.DateOnly max_date, 
					int per_page, 
					string min_amount, 
					string max_amount, 
					string sort, 
					string[] recipient_city, 
					string[] recipient_state, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_b/efile/?min_date="+min_date+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", disbursement_description.Select(z => $"disbursement_description={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&max_date="+max_date+"&per_page="+per_page+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", recipient_city.Select(z => $"recipient_city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", recipient_state.Select(z => $"recipient_state={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule B filings describe itemized disbursements. This data
		/// explains how committees and other filers spend their money. These figures are
		/// reported as part of forms F3, F3X and F3P.
		/// 
		/// The data is divided in two-year periods, called `two_year_transaction_period`, which
		/// is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will
		/// default to the most recent two-year period that is named after the ending,
		/// even-numbered year.
		/// 
		/// Due to the large quantity of Schedule B filings, this endpoint is not paginated by
		/// page number. Instead, you can request the next page of results by adding the values in
		/// the `last_indexes` object from `pagination` to the URL of your last request. For
		/// example, when sorting by `disbursement_date`, you might receive a page of
		/// results with the following pagination information:
		/// 
		/// ```
		/// pagination: {
		/// pages: 965191,
		/// per_page: 20,
		/// count: 19303814,
		/// last_indexes: {
		/// last_index: "230906248",
		/// last_disbursement_date: "2014-07-04"
		/// }
		/// }
		/// ```
		/// 
		/// To fetch the next page of sorted results, append `last_index=230906248` and
		/// `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through
		/// these results by using the sort indices (defaults to sort by disbursement date, e.g.
		/// `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.
		/// This resource uses keyset pagination to improve query performance
		/// and these indices are required to properly page through this large dataset.
		/// 
		/// Note: because the Schedule B data includes many records, counts for
		/// large result sets are approximate; you will want to page through the records until no records are returned.
		/// 
		/// SchedulesSchedule_b_sub_idGetByMin_dateAndSpender_committee_designationAndRecipient_committee_idAndLast_disbursement_dateAndMax_image_numberAndDisbursement_descriptionAndDisbursement_purpose_categoryAndMin_image_numberAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLine_numberAndSortAndRecipient_cityAndSpender_committee_typeAndLast_disbursement_amountAndSpender_committee_org_typeAndApi_keyAndTwo_year_transaction_periodAndCommittee_idAndImage_numberAndMax_dateAndRecipient_nameAndMax_amountAndRecipient_state schedules/schedule_b/{sub_id}/
		/// </summary>
		/// <param name="min_date">Minimum date</param>
		/// <param name="spender_committee_designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="recipient_committee_id">The FEC identifier should be represented here if the contributor is registered with the FEC.</param>
		/// <param name="last_disbursement_date">When sorting by `disbursement_date`, this is populated with the `disbursement_date` of the last result. However, you will need to pass the index of that last result to `last_index` to get the next page.</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="disbursement_description">Description of disbursement</param>
		/// <param name="disbursement_purpose_category">Disbursement purpose category</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="last_index">Index of last result from previous page</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="recipient_city">City of recipient</param>
		/// <param name="spender_committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="last_disbursement_amount">When sorting by `disbursement_amount`, this is populated with the `disbursement_amount` of the last result.  However, you will need to pass the index of that last result to `last_index` to get the next page.</param>
		/// <param name="spender_committee_org_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="two_year_transaction_period">
		///This is a two-year period that is derived from the year a transaction took place in the
		///Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
		///(contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
		///the two_year_transaction_period is named after the ending, even-numbered year. If we do not
		///have the date  of the transaction, we fall back to using the report year (report_year in both
		///tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
		///specified, the results default to the most current cycle.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="recipient_name">Name of the entity receiving the disbursement</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		/// <param name="recipient_state">State of recipient</param>
		public async Task SchedulesSchedule_b_sub_idGetByMin_dateAndSpender_committee_designationAndRecipient_committee_idAndLast_disbursement_dateAndMax_image_numberAndDisbursement_descriptionAndDisbursement_purpose_categoryAndMin_image_numberAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLine_numberAndSortAndRecipient_cityAndSpender_committee_typeAndLast_disbursement_amountAndSpender_committee_org_typeAndApi_keyAndTwo_year_transaction_periodAndCommittee_idAndImage_numberAndMax_dateAndRecipient_nameAndMax_amountAndRecipient_stateAsync(
					System.DateOnly min_date, 
					string[] spender_committee_designation, 
					string[] recipient_committee_id, 
					System.DateOnly last_disbursement_date, 
					string max_image_number, 
					string[] disbursement_description, 
					string[] disbursement_purpose_category, 
					string min_image_number, 
					bool sort_null_only, 
					int last_index, 
					bool sort_hide_null, 
					string min_amount, 
					int per_page, 
					string line_number, 
					string sort, 
					string[] recipient_city, 
					string[] spender_committee_type, 
					float last_disbursement_amount, 
					string[] spender_committee_org_type, 
					string api_key, 
					int[] two_year_transaction_period, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					string[] recipient_name, 
					string max_amount, 
					string[] recipient_state, 
					string sub_id, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_b/"+ (sub_id==null? "" : System.Uri.EscapeDataString(sub_id))+"/?min_date="+min_date+"&"+string.Join("&", spender_committee_designation.Select(z => $"spender_committee_designation={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", recipient_committee_id.Select(z => $"recipient_committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&last_disbursement_date="+last_disbursement_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&"+string.Join("&", disbursement_description.Select(z => $"disbursement_description={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", disbursement_purpose_category.Select(z => $"disbursement_purpose_category={System.Uri.EscapeDataString(z.ToString())}"))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&sort_null_only="+sort_null_only+"&last_index="+last_index+"&sort_hide_null="+sort_hide_null+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&per_page="+per_page+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", recipient_city.Select(z => $"recipient_city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", spender_committee_type.Select(z => $"spender_committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&last_disbursement_amount="+last_disbursement_amount+"&"+string.Join("&", spender_committee_org_type.Select(z => $"spender_committee_org_type={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", two_year_transaction_period.Select(z => $"two_year_transaction_period={z}"))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&"+string.Join("&", recipient_name.Select(z => $"recipient_name={System.Uri.EscapeDataString(z.ToString())}"))+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount))+"&"+string.Join("&", recipient_state.Select(z => $"recipient_state={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule C shows all loans, endorsements and loan guarantees a committee
		/// receives or makes.
		/// 
		/// The committee continues to report the loan until it is repaid.
		/// 
		/// SchedulesSchedule_cGetByMin_payment_to_dateAndMax_image_numberAndMin_image_numberAndMax_incurred_dateAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLoan_source_nameAndLine_numberAndSortAndMax_payment_to_dateAndCandidate_nameAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMin_incurred_dateAndMax_amount schedules/schedule_c/
		/// </summary>
		/// <param name="min_payment_to_date">
		///Minimum payment to date
		///</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="max_incurred_date">
		///Maximum incurred date
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="last_index">Index of last result from previous page</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="min_amount">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="loan_source_name">Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,               other line of credit, or personal funds of the candidate</param>
		/// <param name="line_number">
		///Filter for form and line number using the following format:
		///`FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter
		///down to all entries from form `F3X` line number `16`.
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="max_payment_to_date">
		///Maximum payment to date
		///</param>
		/// <param name="candidate_name">Name of candidate running for office</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="min_incurred_date">
		///Minimum incurred date
		///</param>
		/// <param name="max_amount">
		///Filter for all amounts less than a value.
		///</param>
		public async Task SchedulesSchedule_cGetByMin_payment_to_dateAndMax_image_numberAndMin_image_numberAndMax_incurred_dateAndSort_null_onlyAndLast_indexAndSort_hide_nullAndMin_amountAndPer_pageAndLoan_source_nameAndLine_numberAndSortAndMax_payment_to_dateAndCandidate_nameAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMin_incurred_dateAndMax_amountAsync(
					int min_payment_to_date, 
					string max_image_number, 
					string min_image_number, 
					System.DateOnly max_incurred_date, 
					bool sort_null_only, 
					int last_index, 
					bool sort_hide_null, 
					string min_amount, 
					int per_page, 
					string[] loan_source_name, 
					string line_number, 
					string sort, 
					int max_payment_to_date, 
					string[] candidate_name, 
					string api_key, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly min_incurred_date, 
					string max_amount, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_c/?min_payment_to_date="+min_payment_to_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&max_incurred_date="+max_incurred_date+"&sort_null_only="+sort_null_only+"&last_index="+last_index+"&sort_hide_null="+sort_hide_null+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&per_page="+per_page+"&"+string.Join("&", loan_source_name.Select(z => $"loan_source_name={System.Uri.EscapeDataString(z.ToString())}"))+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&max_payment_to_date="+max_payment_to_date+"&"+string.Join("&", candidate_name.Select(z => $"candidate_name={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&min_incurred_date="+min_incurred_date+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule C shows all loans, endorsements and loan guarantees a committee
		/// receives or makes.
		/// 
		/// The committee continues to report the loan until it is repaid.
		/// 
		/// SchedulesSchedule_c_sub_idGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last schedules/schedule_c/{sub_id}/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		public async Task SchedulesSchedule_c_sub_idGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_lastAsync(int page, string api_key, bool sort_hide_null, int per_page, bool sort_null_only, string sort, bool sort_nulls_last, string sub_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_c/"+ (sub_id==null? "" : System.Uri.EscapeDataString(sub_id))+"/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule D, it shows debts and obligations owed to or by the committee that are
		/// required to be disclosed.
		/// 
		/// 
		/// 
		/// SchedulesSchedule_dGetByMax_payment_periodAndMin_dateAndMax_image_numberAndMax_amount_outstanding_closeAndMin_image_numberAndSort_null_onlyAndMin_payment_periodAndMin_amount_incurredAndCreditor_debtor_nameAndSort_hide_nullAndCandidate_idAndPer_pageAndMin_amount_outstanding_beginningAndSortAndMin_amount_outstanding_closeAndApi_keyAndNature_of_debtAndMax_amount_incurredAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount_outstanding_beginning schedules/schedule_d/
		/// </summary>
		/// <param name="min_date">Minimum load date</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum load date</param>
		public async Task SchedulesSchedule_dGetByMax_payment_periodAndMin_dateAndMax_image_numberAndMax_amount_outstanding_closeAndMin_image_numberAndSort_null_onlyAndMin_payment_periodAndMin_amount_incurredAndCreditor_debtor_nameAndSort_hide_nullAndCandidate_idAndPer_pageAndMin_amount_outstanding_beginningAndSortAndMin_amount_outstanding_closeAndApi_keyAndNature_of_debtAndMax_amount_incurredAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount_outstanding_beginningAsync(
					float max_payment_period, 
					System.DateOnly min_date, 
					string max_image_number, 
					float max_amount_outstanding_close, 
					string min_image_number, 
					bool sort_null_only, 
					float min_payment_period, 
					float min_amount_incurred, 
					string[] creditor_debtor_name, 
					bool sort_hide_null, 
					string[] candidate_id, 
					int per_page, 
					float min_amount_outstanding_beginning, 
					string sort, 
					float min_amount_outstanding_close, 
					string api_key, 
					string nature_of_debt, 
					float max_amount_incurred, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					float max_amount_outstanding_beginning, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_d/?max_payment_period="+max_payment_period+"&min_date="+min_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&max_amount_outstanding_close="+max_amount_outstanding_close+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&sort_null_only="+sort_null_only+"&min_payment_period="+min_payment_period+"&min_amount_incurred="+min_amount_incurred+"&"+string.Join("&", creditor_debtor_name.Select(z => $"creditor_debtor_name={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&min_amount_outstanding_beginning="+min_amount_outstanding_beginning+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&min_amount_outstanding_close="+min_amount_outstanding_close+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&nature_of_debt=" + (nature_of_debt==null? "" : System.Uri.EscapeDataString(nature_of_debt))+"&max_amount_incurred="+max_amount_incurred+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&max_amount_outstanding_beginning="+max_amount_outstanding_beginning;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule D, it shows debts and obligations owed to or by the committee that are
		/// required to be disclosed.
		/// 
		/// 
		/// 
		/// SchedulesSchedule_d_sub_idGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last schedules/schedule_d/{sub_id}/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		public async Task SchedulesSchedule_d_sub_idGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_lastAsync(int page, string api_key, bool sort_hide_null, int per_page, bool sort_null_only, string sort, bool sort_nulls_last, string sub_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_d/"+ (sub_id==null? "" : System.Uri.EscapeDataString(sub_id))+"/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC
		/// bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with
		/// the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.
		/// 
		/// An independent expenditure is an expenditure for a communication "expressly advocating the election or
		/// defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with,
		/// or at the request or suggestion of, a candidate, a candidate’s authorized committee, or their agents, or
		/// a political party or its agents."
		/// 
		/// Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don't double count expenditures
		/// and the totals are more accurate. You can still find the information from 24 and 48 hour reports in
		/// `/schedule/schedule_e/`.
		/// 
		/// Due to the large quantity of Schedule E filings, this endpoint is not paginated by
		/// page number. Instead, you can request the next page of results by adding the values in
		/// the `last_indexes` object from `pagination` to the URL of your last request. For
		/// example, when sorting by `expenditure_amount`, you might receive a page of
		/// results with the following pagination information:
		/// 
		/// ```
		/// "pagination": {
		/// "count": 152623,
		/// "last_indexes": {
		/// "last_index": "3023037",
		/// "last_expenditure_amount": -17348.5
		/// },
		/// "per_page": 20,
		/// "pages": 7632
		/// }
		/// }
		/// ```
		/// 
		/// To fetch the next page of sorted results, append `last_index=3023037` and
		/// `last_expenditure_amount=` to the URL.  We strongly advise paging through
		/// these results by using the sort indices (defaults to sort by disbursement date,
		/// e.g. `last_disbursement_date`), otherwise some resources may be unintentionally
		/// filtered out.  This resource uses keyset pagination to improve query performance
		/// and these indices are required to properly page through this large dataset.
		/// 
		/// Note: because the Schedule E data includes many records, counts for
		/// large result sets are approximate; you will want to page through the records until no records are returned.
		/// 
		/// SchedulesSchedule_eGetByLast_expenditure_dateAndMax_image_numberAndIs_noticeAndPayee_nameAndMin_amountAndCandidate_idAndSort_hide_nullAndLast_office_total_ytdAndSortAndMin_filing_dateAndQ_spenderAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndLast_expenditure_amountAndImage_numberAndMax_dateAndMax_dissemination_dateAndMin_dateAndFiling_formAndSupport_oppose_indicatorAndMin_image_numberAndCycleAndMax_filing_dateAndSort_null_onlyAndLast_support_oppose_indicatorAndLast_indexAndPer_pageAndCandidate_office_districtAndLine_numberAndApi_keyAndCommittee_idAndCandidate_partyAndMax_amountAndMost_recentAndCandidate_office schedules/schedule_e/
		/// </summary>
		/// <param name="last_expenditure_date">
		///When sorting by `expenditure_date`,
		///this is populated with the `expenditure_date` of the last result.
		///However, you will need to pass the index of that last result to
		///`last_index` to get the next page.
		///</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="is_notice">
		///Record filed as 24- or 48-hour notice.
		///</param>
		/// <param name="payee_name">
		///Name of the entity that received the payment.
		///</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="last_office_total_ytd">
		///When sorting by `office_total_ytd`,
		///this is populated with the `office_total_ytd` of the last result.
		///However, you will need to pass the index of that last result to
		///`last_index` to get the next page.'
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="min_filing_date">
		///Selects all filings received after this date
		///</param>
		/// <param name="q_spender">
		///Keyword search for spender name or ID
		///</param>
		/// <param name="min_dissemination_date">Selects all items distributed by this committee after this date</param>
		/// <param name="candidate_office_state">US state or territory</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="last_expenditure_amount">
		///When sorting by `expenditure_amount`,
		///this is populated with the `expenditure_amount` of the last result.
		///However, you will need to pass the index of that last result to
		///`last_index` to get the next page.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="max_dissemination_date">Selects all items distributed by this committee before this date</param>
		/// <param name="min_date">Minimum date</param>
		/// <param name="filing_form">The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///</param>
		/// <param name="support_oppose_indicator">Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="max_filing_date">
		///Selects all filings received before this date
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="last_support_oppose_indicator">
		///When sorting by `support_oppose_indicator`,
		///this is populated with the `support_oppose_indicator` of the last result.
		///However, you will need to pass the index of that last result to `last_index`
		///to get the next page.'
		///</param>
		/// <param name="last_index">Index of last result from previous page</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="candidate_office_district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="candidate_party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		/// <param name="most_recent">
		///The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included.
		///</param>
		/// <param name="candidate_office">Federal office candidate runs for: H, S or P</param>
		public async Task SchedulesSchedule_eGetByLast_expenditure_dateAndMax_image_numberAndIs_noticeAndPayee_nameAndMin_amountAndCandidate_idAndSort_hide_nullAndLast_office_total_ytdAndSortAndMin_filing_dateAndQ_spenderAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndLast_expenditure_amountAndImage_numberAndMax_dateAndMax_dissemination_dateAndMin_dateAndFiling_formAndSupport_oppose_indicatorAndMin_image_numberAndCycleAndMax_filing_dateAndSort_null_onlyAndLast_support_oppose_indicatorAndLast_indexAndPer_pageAndCandidate_office_districtAndLine_numberAndApi_keyAndCommittee_idAndCandidate_partyAndMax_amountAndMost_recentAndCandidate_officeAsync(
					System.DateOnly last_expenditure_date, 
					string max_image_number, 
					bool[] is_notice, 
					string[] payee_name, 
					string min_amount, 
					string[] candidate_id, 
					bool sort_hide_null, 
					float last_office_total_ytd, 
					string sort, 
					System.DateOnly min_filing_date, 
					string[] q_spender, 
					System.DateOnly min_dissemination_date, 
					string[] candidate_office_state, 
					bool sort_nulls_last, 
					float last_expenditure_amount, 
					string[] image_number, 
					System.DateOnly max_date, 
					System.DateOnly max_dissemination_date, 
					System.DateOnly min_date, 
					string[] filing_form, 
					Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator[] support_oppose_indicator, 
					string min_image_number, 
					int[] cycle, 
					System.DateOnly max_filing_date, 
					bool sort_null_only, 
					string last_support_oppose_indicator, 
					int last_index, 
					int per_page, 
					string[] candidate_office_district, 
					string line_number, 
					string api_key, 
					string[] committee_id, 
					string[] candidate_party, 
					string max_amount, 
					bool most_recent, 
					string[] candidate_office, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_e/?last_expenditure_date="+last_expenditure_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&"+string.Join("&", is_notice.Select(z => $"is_notice={z}"))+"&"+string.Join("&", payee_name.Select(z => $"payee_name={System.Uri.EscapeDataString(z.ToString())}"))+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&last_office_total_ytd="+last_office_total_ytd+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&min_filing_date="+min_filing_date+"&"+string.Join("&", q_spender.Select(z => $"q_spender={System.Uri.EscapeDataString(z.ToString())}"))+"&min_dissemination_date="+min_dissemination_date+"&"+string.Join("&", candidate_office_state.Select(z => $"candidate_office_state={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&last_expenditure_amount="+last_expenditure_amount+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&max_dissemination_date="+max_dissemination_date+"&min_date="+min_date+"&"+string.Join("&", filing_form.Select(z => $"filing_form={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", support_oppose_indicator.Select(z => $"support_oppose_indicator={z}"))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&max_filing_date="+max_filing_date+"&sort_null_only="+sort_null_only+"&last_support_oppose_indicator=" + (last_support_oppose_indicator==null? "" : System.Uri.EscapeDataString(last_support_oppose_indicator))+"&last_index="+last_index+"&per_page="+per_page+"&"+string.Join("&", candidate_office_district.Select(z => $"candidate_office_district={System.Uri.EscapeDataString(z.ToString())}"))+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", candidate_party.Select(z => $"candidate_party={System.Uri.EscapeDataString(z.ToString())}"))+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount))+"&most_recent="+most_recent+"&"+string.Join("&", candidate_office.Select(z => $"candidate_office={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule E receipts aggregated by recipient candidate. To avoid double
		/// counting, memoed items are not included.
		/// 
		/// SchedulesSchedule_eBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSort schedules/schedule_e/by_candidate/
		/// </summary>
		/// <param name="district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="support_oppose">Support or opposition</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">US state or territory where a candidate runs for office</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="office">Federal office candidate runs for: H, S or P</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_eBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortAsync(
					string district, 
					string api_key, 
					Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator support_oppose, 
					bool election_full, 
					int[] cycle, 
					bool sort_null_only, 
					int page, 
					string state, 
					string[] committee_id, 
					bool sort_nulls_last, 
					bool sort_hide_null, 
					string[] candidate_id, 
					int per_page, 
					Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice office, 
					string sort, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_e/by_candidate/?district=" + (district==null? "" : System.Uri.EscapeDataString(district))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&support_oppose=" + support_oppose+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&page="+page+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&office=" + office+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Efiling endpoints provide real-time campaign finance data received from electronic filers. Efiling endpoints only contain the most recent four months of data and don't contain the processed and coded data that you can find on other endpoints.
		/// 
		/// SchedulesSchedule_eEfileGetByMax_expenditure_amountAndSupport_oppose_indicatorAndMin_expenditure_dateAndFiling_formAndMax_expenditure_dateAndMax_filed_dateAndIs_noticeAndSort_null_onlyAndSort_hide_nullAndPayee_nameAndCandidate_idAndPer_pageAndCandidate_office_districtAndSortAndApi_keyAndMin_expenditure_amountAndSpender_nameAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndPageAndCommittee_idAndCandidate_searchAndImage_numberAndCandidate_partyAndMin_filed_dateAndMax_dissemination_dateAndMost_recentAndCandidate_office schedules/schedule_e/efile/
		/// </summary>
		/// <param name="max_expenditure_amount">Selects all items expended by this committee less than this amount</param>
		/// <param name="support_oppose_indicator">Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.</param>
		/// <param name="min_expenditure_date">Selects all items expended by this committee after this date</param>
		/// <param name="filing_form">The form where the underlying data comes from, for example, Form 1 would appear as F1:
		///    - F1   Statement of Organization
		///    - F1M  Notification of Multicandidate Status
		///    - F2   Statement of Candidacy
		///    - F3   Report of Receipts and Disbursements for an Authorized Committee
		///    - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
		///    - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
		///    - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
		///    - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
		///    - F5   Report of Independent Expenditures Made and Contributions Received
		///    - F6   48 Hour Notice of Contributions/Loans Received
		///    - F7   Report of Communication Costs by Corporations and Membership Organizations
		///    - F8   Debt Settlement Plan
		///    - F9   24 Hour Notice of Disbursements for Electioneering Communications
		///    - F13  Report of Donations Accepted for Inaugural Committee
		///    - F99  Miscellaneous Text
		///    - FRQ  Request for Additional Information
		///</param>
		/// <param name="max_expenditure_date">Selects all items expended by this committee before this date</param>
		/// <param name="max_filed_date">Timestamp of electronic or paper record that FEC received</param>
		/// <param name="is_notice">
		///Record filed as 24- or 48-hour notice.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="payee_name">
		///Name of the entity that received the payment.
		///</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="candidate_office_district">Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="min_expenditure_amount">Selects all items expended by this committee greater than this amount</param>
		/// <param name="spender_name">The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.</param>
		/// <param name="min_dissemination_date">Selects all items distributed by this committee after this date</param>
		/// <param name="candidate_office_state">US state or territory where a candidate runs for office</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="candidate_search">
		///Search for candidates by candiate id or candidate first or last name
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="candidate_party">Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.</param>
		/// <param name="min_filed_date">Timestamp of electronic or paper record that FEC received</param>
		/// <param name="max_dissemination_date">Selects all items distributed by this committee before this date</param>
		/// <param name="most_recent">
		///The report associated with the transaction is either new or is the most-recently filed amendment. Undetermined version (`null`) is always included.
		///</param>
		/// <param name="candidate_office">Federal office candidate runs for: H, S or P</param>
		public async Task SchedulesSchedule_eEfileGetByMax_expenditure_amountAndSupport_oppose_indicatorAndMin_expenditure_dateAndFiling_formAndMax_expenditure_dateAndMax_filed_dateAndIs_noticeAndSort_null_onlyAndSort_hide_nullAndPayee_nameAndCandidate_idAndPer_pageAndCandidate_office_districtAndSortAndApi_keyAndMin_expenditure_amountAndSpender_nameAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndPageAndCommittee_idAndCandidate_searchAndImage_numberAndCandidate_partyAndMin_filed_dateAndMax_dissemination_dateAndMost_recentAndCandidate_officeAsync(
					int max_expenditure_amount, 
					Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator[] support_oppose_indicator, 
					System.DateOnly min_expenditure_date, 
					string[] filing_form, 
					System.DateOnly max_expenditure_date, 
					System.DateOnly max_filed_date, 
					bool is_notice, 
					bool sort_null_only, 
					bool sort_hide_null, 
					string[] payee_name, 
					string[] candidate_id, 
					int per_page, 
					string[] candidate_office_district, 
					string sort, 
					string api_key, 
					int min_expenditure_amount, 
					string[] spender_name, 
					System.DateOnly min_dissemination_date, 
					string[] candidate_office_state, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string[] candidate_search, 
					string[] image_number, 
					string[] candidate_party, 
					System.DateOnly min_filed_date, 
					System.DateOnly max_dissemination_date, 
					bool most_recent, 
					SchedulesSchedule_eEfileGetByMax_expenditure_amountAndSupport_oppose_indicatorAndMin_expenditure_dateAndFiling_formAndMax_expenditure_dateAndMax_filed_dateAndIs_noticeAndSort_null_onlyAndSort_hide_nullAndPayee_nameAndCandidate_idAndPer_pageAndCandidate_office_districtAndSortAndApi_keyAndMin_expenditure_amountAndSpender_nameAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndPageAndCommittee_idAndCandidate_searchAndImage_numberAndCandidate_partyAndMin_filed_dateAndMax_dissemination_dateAndMost_recentAndCandidate_officeCandidate_office candidate_office, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_e/efile/?max_expenditure_amount="+max_expenditure_amount+"&"+string.Join("&", support_oppose_indicator.Select(z => $"support_oppose_indicator={z}"))+"&min_expenditure_date="+min_expenditure_date+"&"+string.Join("&", filing_form.Select(z => $"filing_form={System.Uri.EscapeDataString(z.ToString())}"))+"&max_expenditure_date="+max_expenditure_date+"&max_filed_date="+max_filed_date+"&is_notice="+is_notice+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", payee_name.Select(z => $"payee_name={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&"+string.Join("&", candidate_office_district.Select(z => $"candidate_office_district={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&min_expenditure_amount="+min_expenditure_amount+"&"+string.Join("&", spender_name.Select(z => $"spender_name={System.Uri.EscapeDataString(z.ToString())}"))+"&min_dissemination_date="+min_dissemination_date+"&"+string.Join("&", candidate_office_state.Select(z => $"candidate_office_state={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", candidate_search.Select(z => $"candidate_search={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", candidate_party.Select(z => $"candidate_party={System.Uri.EscapeDataString(z.ToString())}"))+"&min_filed_date="+min_filed_date+"&max_dissemination_date="+max_dissemination_date+"&most_recent="+most_recent+"&candidate_office=" + candidate_office;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Total independent expenditure on supported or opposed candidates by cycle or candidate election year.
		/// 
		/// SchedulesSchedule_eTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSort schedules/schedule_e/totals/by_candidate/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="election_full">`True` indicates that full election period of a candidate.
		///`False` indicates that two year election cycle.</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		public async Task SchedulesSchedule_eTotalsBy_candidateGetByApi_keyAndElection_fullAndCycleAndSort_nulls_lastAndPageAndSort_null_onlyAndSort_hide_nullAndCandidate_idAndPer_pageAndSortAsync(string api_key, bool election_full, int[] cycle, bool sort_nulls_last, int page, bool sort_null_only, bool sort_hide_null, string[] candidate_id, int per_page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_e/totals/by_candidate/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&election_full="+election_full+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&sort_null_only="+sort_null_only+"&sort_hide_null="+sort_hide_null+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&per_page="+per_page+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule F, it shows all special expenditures a national or state party committee
		/// makes in connection with the general election campaigns of federal candidates.
		/// 
		/// These coordinated party expenditures do not count against the contribution limits but are subject to other limits,
		/// these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.
		/// 
		/// SchedulesSchedule_fGetByMin_dateAndMax_image_numberAndCycleAndMin_image_numberAndSort_null_onlyAndPayee_nameAndMin_amountAndPer_pageAndCandidate_idAndSort_hide_nullAndLine_numberAndSortAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amount schedules/schedule_f/
		/// </summary>
		/// <param name="min_date">Minimum date</param>
		/// <param name="max_image_number">Maxium image number of the page where the schedule item is reported</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="min_image_number">Minium image number of the page where the schedule item is reported</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="min_amount">Filter for all amounts greater than a value.</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC.
		///If a person runs for several offices, that person will have separate candidate IDs for each office.
		///First character indicates office - [P]residential, [H]ouse, [S]enate].
		///Second character is the last digit of the two-year period the ID was created.
		///Third and fourth is the candidate state. Presidential IDs don't have state.
		///Fifth and sixth is the district when the candidate first ran. This does not change if the
		///candidate/member's district changes during re-districting. Presidential IDs don't have districts.
		///The rest is sequence.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="line_number">Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="image_number">
		///An unique identifier for each page where the electronic or paper filing is reported.
		///</param>
		/// <param name="max_date">Maximum date</param>
		/// <param name="max_amount">Filter for all amounts less than a value.</param>
		public async Task SchedulesSchedule_fGetByMin_dateAndMax_image_numberAndCycleAndMin_image_numberAndSort_null_onlyAndPayee_nameAndMin_amountAndPer_pageAndCandidate_idAndSort_hide_nullAndLine_numberAndSortAndApi_keyAndSort_nulls_lastAndPageAndCommittee_idAndImage_numberAndMax_dateAndMax_amountAsync(
					System.DateOnly min_date, 
					string max_image_number, 
					int[] cycle, 
					string min_image_number, 
					bool sort_null_only, 
					string[] payee_name, 
					string min_amount, 
					int per_page, 
					string[] candidate_id, 
					bool sort_hide_null, 
					string line_number, 
					string sort, 
					string api_key, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string[] image_number, 
					System.DateOnly max_date, 
					string max_amount, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_f/?min_date="+min_date+"&max_image_number=" + (max_image_number==null? "" : System.Uri.EscapeDataString(max_image_number))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&min_image_number=" + (min_image_number==null? "" : System.Uri.EscapeDataString(min_image_number))+"&sort_null_only="+sort_null_only+"&"+string.Join("&", payee_name.Select(z => $"payee_name={System.Uri.EscapeDataString(z.ToString())}"))+"&min_amount=" + (min_amount==null? "" : System.Uri.EscapeDataString(min_amount))+"&per_page="+per_page+"&"+string.Join("&", candidate_id.Select(z => $"candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&line_number=" + (line_number==null? "" : System.Uri.EscapeDataString(line_number))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", image_number.Select(z => $"image_number={System.Uri.EscapeDataString(z.ToString())}"))+"&max_date="+max_date+"&max_amount=" + (max_amount==null? "" : System.Uri.EscapeDataString(max_amount));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Schedule F, it shows all special expenditures a national or state party committee
		/// makes in connection with the general election campaigns of federal candidates.
		/// 
		/// These coordinated party expenditures do not count against the contribution limits but are subject to other limits,
		/// these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.
		/// 
		/// SchedulesSchedule_f_sub_idGetByPageAndApi_keyAndPer_page schedules/schedule_f/{sub_id}/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		public async Task SchedulesSchedule_f_sub_idGetByPageAndApi_keyAndPer_pageAsync(int page, string api_key, int per_page, string sub_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules/schedule_f/"+ (sub_id==null? "" : System.Uri.EscapeDataString(sub_id))+"/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// State laws and procedures govern elections for state or local offices as well as
		/// how candidates appear on election ballots.
		/// Contact the appropriate state election office for more information.
		/// 
		/// State_election_officeGetByPageAndStateAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_last state-election-office/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="state">
		///Enter a state (Ex: AK, TX, VA etc..) to find the local election offices contact
		///information.
		///
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		public async Task State_election_officeGetByPageAndStateAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndSort_nulls_lastAsync(int page, string state, string api_key, bool sort_hide_null, int per_page, bool sort_null_only, string sort, bool sort_nulls_last, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "state-election-office/?page="+page+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.
		/// 
		/// This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations.
		/// 
		/// TotalsBy_entityGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndCycleAndSort_nulls_last totals/by_entity/
		/// </summary>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		public async Task TotalsBy_entityGetByPageAndApi_keyAndSort_hide_nullAndPer_pageAndSort_null_onlyAndSortAndCycleAndSort_nulls_lastAsync(int page, string api_key, bool sort_hide_null, int per_page, bool sort_null_only, string sort, int cycle, bool sort_nulls_last, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "totals/by_entity/?page="+page+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&sort_null_only="+sort_null_only+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&cycle="+cycle+"&sort_nulls_last="+sort_nulls_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides information about an inaugural committee's Form 13 report of donations accepted.
		/// The data is aggregated by the contributor and the two-year period. We refer to two-year periods as a `cycle`.
		/// 
		/// 
		/// TotalsInaugural_committeesBy_contributorGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndContributor_nameAndSort_hide_nullAndPer_pageAndSort totals/inaugural_committees/by_contributor/
		/// </summary>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="cycle">
		///A two year election cycle that the committee was active- (after original registration
		///date but before expiration date in Form 1s) The cycle begins with
		///an odd year and is named for its ending, even year.
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="contributor_name">Name of contributor</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="sort">
		///Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
		///</param>
		public async Task TotalsInaugural_committeesBy_contributorGetByApi_keyAndCycleAndSort_nulls_lastAndPageAndCommittee_idAndSort_null_onlyAndContributor_nameAndSort_hide_nullAndPer_pageAndSortAsync(string api_key, int[] cycle, bool sort_nulls_last, int page, string[] committee_id, bool sort_null_only, string[] contributor_name, bool sort_hide_null, int per_page, string[] sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "totals/inaugural_committees/by_contributor/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_null_only="+sort_null_only+"&"+string.Join("&", contributor_name.Select(z => $"contributor_name={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// 
		/// This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
		/// which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
		/// 
		/// The cycle is named after the even-numbered year and includes the year before it. To obtain
		/// totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
		/// is the next year — for example, in 2015, the current cycle is 2016.
		/// 
		/// For presidential and Senate candidates, multiple two-year cycles exist between elections.
		/// 
		/// 
		/// Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receipts totals/{entity_type}/
		/// </summary>
		/// <param name="treasurer_name">Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.</param>
		/// <param name="max_disbursements">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="committee_state">US state or territory</param>
		/// <param name="cycle">
		///Filter records to only those that were applicable to a given
		///two-year period.The cycle begins with an odd year and is named
		///for its ending, even year.
		///</param>
		/// <param name="sort_null_only">Toggle that filters out all rows having sort column that is non-null</param>
		/// <param name="sponsor_candidate_id">
		///A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
		///</param>
		/// <param name="min_disbursements">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="min_last_cash_on_hand_end_period">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="max_last_cash_on_hand_end_period">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="sort_hide_null">Hide null values on sorted column(s).</param>
		/// <param name="per_page">The number of results returned per page. Defaults to 20.</param>
		/// <param name="filing_frequency">The one-letter 
		///    code of the filing frequency:
		///         - A Administratively terminated
		///         - D Debt
		///         - M Monthly filer
		///         - Q Quarterly filer
		///         - T Terminated
		///         - W Waived
		///</param>
		/// <param name="sort">Provide a field to sort by. Use `-` for descending order.
		///</param>
		/// <param name="max_last_debts_owed_by_committee">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="min_first_f1_date">Filter for committees whose first Form 1 was received on or after this date.</param>
		/// <param name="committee_designation">The one-letter designation code of the organization:
		///         - A authorized by a candidate
		///         - J joint fundraising committee
		///         - P principal campaign committee of a candidate
		///         - U unauthorized
		///         - B lobbyist/registrant PAC
		///         - D leadership PAC
		///</param>
		/// <param name="api_key">
		///API key for https://api.data.gov. Get one at https://api.data.gov/signup.
		///</param>
		/// <param name="max_receipts">
		///Filter for all amounts less than a value.
		///</param>
		/// <param name="committee_type">The one-letter type code of the organization:
		///        - C communication cost
		///        - D delegate
		///        - E electioneering communication
		///        - H House
		///        - I independent expenditure filer (not a committee)
		///        - N PAC - nonqualified
		///        - O independent expenditure-only (super PACs)
		///        - P presidential
		///        - Q PAC - qualified
		///        - S Senate
		///        - U single candidate independent expenditure
		///        - V PAC with non-contribution account, nonqualified
		///        - W PAC with non-contribution account, qualified
		///        - X party, nonqualified
		///        - Y party, qualified
		///        - Z national party non-federal account
		///</param>
		/// <param name="sort_nulls_last">Toggle that sorts null values last</param>
		/// <param name="page">For paginating through results, starting at page 1</param>
		/// <param name="committee_id">
		///A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
		///</param>
		/// <param name="min_last_debts_owed_by_committee">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="max_first_f1_date">Filter for committees whose first Form 1 was received on or before this date.</param>
		/// <param name="organization_type">The one-letter code for the kind for organization:
		///        - C corporation
		///        - L labor organization
		///        - M membership organization
		///        - T trade association
		///        - V cooperative
		///        - W corporation without capital stock
		///</param>
		/// <param name="min_receipts">
		///Filter for all amounts greater than a value.
		///</param>
		/// <param name="entity_type">Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac`, `party`, `pac-party`,                 `house-senate`, or `ie-only`</param>
		public async Task Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receiptsAsync(
					string[] treasurer_name, 
					string max_disbursements, 
					string[] committee_state, 
					int[] cycle, 
					bool sort_null_only, 
					string[] sponsor_candidate_id, 
					string min_disbursements, 
					string min_last_cash_on_hand_end_period, 
					string max_last_cash_on_hand_end_period, 
					bool sort_hide_null, 
					int per_page, 
					string[] filing_frequency, 
					string sort, 
					string max_last_debts_owed_by_committee, 
					System.DateOnly min_first_f1_date, 
					string[] committee_designation, 
					string api_key, 
					string max_receipts, 
					string[] committee_type, 
					bool sort_nulls_last, 
					int page, 
					string[] committee_id, 
					string min_last_debts_owed_by_committee, 
					System.DateOnly max_first_f1_date, 
					string[] organization_type, 
					string min_receipts, 
					Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receiptsEntity_type entity_type, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "totals/"+entity_type+"/?"+string.Join("&", treasurer_name.Select(z => $"treasurer_name={System.Uri.EscapeDataString(z.ToString())}"))+"&max_disbursements=" + (max_disbursements==null? "" : System.Uri.EscapeDataString(max_disbursements))+"&"+string.Join("&", committee_state.Select(z => $"committee_state={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", cycle.Select(z => $"cycle={z}"))+"&sort_null_only="+sort_null_only+"&"+string.Join("&", sponsor_candidate_id.Select(z => $"sponsor_candidate_id={System.Uri.EscapeDataString(z.ToString())}"))+"&min_disbursements=" + (min_disbursements==null? "" : System.Uri.EscapeDataString(min_disbursements))+"&min_last_cash_on_hand_end_period=" + (min_last_cash_on_hand_end_period==null? "" : System.Uri.EscapeDataString(min_last_cash_on_hand_end_period))+"&max_last_cash_on_hand_end_period=" + (max_last_cash_on_hand_end_period==null? "" : System.Uri.EscapeDataString(max_last_cash_on_hand_end_period))+"&sort_hide_null="+sort_hide_null+"&per_page="+per_page+"&"+string.Join("&", filing_frequency.Select(z => $"filing_frequency={System.Uri.EscapeDataString(z.ToString())}"))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&max_last_debts_owed_by_committee=" + (max_last_debts_owed_by_committee==null? "" : System.Uri.EscapeDataString(max_last_debts_owed_by_committee))+"&min_first_f1_date="+min_first_f1_date+"&"+string.Join("&", committee_designation.Select(z => $"committee_designation={System.Uri.EscapeDataString(z.ToString())}"))+"&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&max_receipts=" + (max_receipts==null? "" : System.Uri.EscapeDataString(max_receipts))+"&"+string.Join("&", committee_type.Select(z => $"committee_type={System.Uri.EscapeDataString(z.ToString())}"))+"&sort_nulls_last="+sort_nulls_last+"&page="+page+"&"+string.Join("&", committee_id.Select(z => $"committee_id={System.Uri.EscapeDataString(z.ToString())}"))+"&min_last_debts_owed_by_committee=" + (min_last_debts_owed_by_committee==null? "" : System.Uri.EscapeDataString(min_last_debts_owed_by_committee))+"&max_first_f1_date="+max_first_f1_date+"&"+string.Join("&", organization_type.Select(z => $"organization_type={System.Uri.EscapeDataString(z.ToString())}"))+"&min_receipts=" + (min_receipts==null? "" : System.Uri.EscapeDataString(min_receipts));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Calendar_datesExportGetByCalendar_category_idAndApi_keyAndDescriptionAndSort_nulls_lastAndSort_null_onlyAndPageAndMax_end_dateAndSummaryAndMin_end_dateAndSort_hide_nullAndMin_start_dateAndPer_pageAndMax_start_dateAndRendererAndSortAndEvent_idRenderer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ics")]
		ics = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="csv")]
		csv = 1,
	}
	
	public enum Candidate_candidate_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="e-file")]
		eMinusfile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paper")]
		paper = 1,
	}
	
	public enum CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byOffice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H")]
		H = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S")]
		S = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P")]
		P = 3,
	}
	
	public enum CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byParty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEM")]
		DEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REP")]
		REP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 3,
	}
	
	public enum CandidatesTotalsAggregatesGetByMax_election_cycleAndSort_null_onlyAndSort_hide_nullAndPer_pageAndElection_yearAndOfficeAndSortAndMin_election_cycleAndDistrictAndApi_keyAndElection_fullAndPartyAndIs_active_candidateAndPageAndStateAndSort_nulls_lastAndAggregate_byAggregate_by
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office")]
		office = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office-state")]
		officeMinusstate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office-state-district")]
		officeMinusstateMinusdistrict = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="office-party")]
		officeMinusparty = 3,
	}
	
	public enum CandidatesTotalsBy_officeGetByApi_keyAndMax_election_cycleAndElection_fullAndIs_active_candidateAndPageAndSort_null_onlyAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortAndMin_election_cycleOffice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H")]
		H = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S")]
		S = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P")]
		P = 3,
	}
	
	public enum CandidatesTotalsBy_officeBy_partyGetByApi_keyAndElection_fullAndSort_null_onlyAndPageAndIs_active_candidateAndSort_nulls_lastAndElection_yearAndSort_hide_nullAndPer_pageAndOfficeAndSortOffice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H")]
		H = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S")]
		S = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P")]
		P = 3,
	}
	
	public enum Committee_committee_idFilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="e-file")]
		eMinusfile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paper")]
		paper = 1,
	}
	
	public enum Communication_costsAggregatesGetByApi_keyAndSupport_oppose_indicatorAndCycleAndSort_null_onlyAndPageAndCommittee_idAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndSortSupport_oppose_indicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S")]
		S = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="O")]
		O = 1,
	}
	
	public enum Communication_costsBy_candidateGetByDistrictAndApi_keyAndSupport_opposeAndElection_fullAndCycleAndSort_null_onlyAndPageAndStateAndSort_nulls_lastAndSort_hide_nullAndCandidate_idAndPer_pageAndOfficeAndSortOffice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="house")]
		house = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="senate")]
		senate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="president")]
		president = 2,
	}
	
	public enum FilingsGetByIs_amendedAndMin_receipt_dateAndForm_categoryAndRequest_typeAndPrimary_general_indicatorAndCycleAndSort_null_onlyAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndFile_numberAndPer_pageAndOfficeAndSortAndQ_filerAndDistrictAndApi_keyAndFiler_typeAndMost_recentAndReport_typeAndCommittee_typeAndPartyAndForm_typeAndSort_nulls_lastAndPageAndStateAndReport_yearAndCommittee_idAndAmendment_indicatorAndDocument_typeAndBeginning_image_numberFiler_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="e-file")]
		eMinusfile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paper")]
		paper = 1,
	}
	
	public enum LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameMur_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="archived")]
		archived = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="current")]
		current = 1,
	}
	
	public enum LegalSearchGetByCase_statutory_citationAndAf_min_rtb_dateAndAf_report_yearAndQAndFrom_hitAndAo_requestor_typeAndCase_max_close_dateAndAo_is_pendingAndAf_fd_fine_amountAndCase_min_open_dateAndAo_min_issue_dateAndSortAndAo_citation_require_allAndCase_doc_category_idAndAo_statusAndAf_max_rtb_dateAndAf_rtb_fine_amountAndCase_respondentsAndAo_entity_nameAndAo_requestorAndAo_categoryAndAo_regulatory_citationAndCase_regulatory_citationAndCase_citation_require_allAndCase_dispositionsAndAo_nameAndAf_max_fd_dateAndAo_max_request_dateAndMur_typeAndHits_returnedAndCase_election_cyclesAndCase_min_close_dateAndAo_max_issue_dateAndAf_committee_idAndAf_min_fd_dateAndCase_max_open_dateAndApi_keyAndAo_min_request_dateAndAo_noAndTypeAndCase_noAndAo_statutory_citationAndAf_nameType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="admin_fines")]
		admin_fines = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="adrs")]
		adrs = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="advisory_opinions")]
		advisory_opinions = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="murs")]
		murs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="regulations")]
		regulations = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="statutes")]
		statutes = 5,
	}
	
	public enum Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentFiler_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="e-file")]
		eMinusfile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="paper")]
		paper = 1,
	}
	
	public enum Reports_entity_typeGetByMax_party_coordinated_expendituresAndMax_debts_owed_expendituresAndMin_receipts_amountAndMin_debts_owed_amountAndMax_receipt_dateAndSort_hide_nullAndCandidate_idAndSortAndQ_spenderAndMax_receipts_amountAndFiler_typeAndReport_typeAndMax_total_contributionsAndSort_nulls_lastAndMax_independent_expendituresAndMin_total_contributionsAndMin_party_coordinated_expendituresAndBeginning_image_numberAndMin_receipt_dateAndIs_amendedAndMax_disbursements_amountAndMax_cash_on_hand_end_period_amountAndAmendment_indicatorAndCycleAndSort_null_onlyAndMin_independent_expendituresAndPer_pageAndQ_filerAndApi_keyAndCommittee_typeAndPageAndYearAndCommittee_idAndMin_cash_on_hand_end_period_amountAndMin_disbursements_amountAndMost_recentEntity_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="presidential")]
		presidential = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pac-party")]
		pacMinusparty = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="house-senate")]
		houseMinussenate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie-only")]
		ieMinusonly = 3,
	}
	
	public enum SchedulesSchedule_eEfileGetByMax_expenditure_amountAndSupport_oppose_indicatorAndMin_expenditure_dateAndFiling_formAndMax_expenditure_dateAndMax_filed_dateAndIs_noticeAndSort_null_onlyAndSort_hide_nullAndPayee_nameAndCandidate_idAndPer_pageAndCandidate_office_districtAndSortAndApi_keyAndMin_expenditure_amountAndSpender_nameAndMin_dissemination_dateAndCandidate_office_stateAndSort_nulls_lastAndPageAndCommittee_idAndCandidate_searchAndImage_numberAndCandidate_partyAndMin_filed_dateAndMax_dissemination_dateAndMost_recentAndCandidate_officeCandidate_office
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="H")]
		H = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S")]
		S = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P")]
		P = 3,
	}
	
	public enum Totals_entity_typeGetByTreasurer_nameAndMax_disbursementsAndCommittee_stateAndCycleAndSort_null_onlyAndSponsor_candidate_idAndMin_disbursementsAndMin_last_cash_on_hand_end_periodAndMax_last_cash_on_hand_end_periodAndSort_hide_nullAndPer_pageAndFiling_frequencyAndSortAndMax_last_debts_owed_by_committeeAndMin_first_f1_dateAndCommittee_designationAndApi_keyAndMax_receiptsAndCommittee_typeAndSort_nulls_lastAndPageAndCommittee_idAndMin_last_debts_owed_by_committeeAndMax_first_f1_dateAndOrganization_typeAndMin_receiptsEntity_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="presidential")]
		presidential = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pac")]
		pac = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="party")]
		party = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pac-party")]
		pacMinusparty = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="house-senate")]
		houseMinussenate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ie-only")]
		ieMinusonly = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
