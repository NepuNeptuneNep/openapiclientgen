//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Configuration_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ok")]
		ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inprogress")]
		inprogress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notstarted")]
		notstarted = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1channel
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Channel resource and owns this Workflow.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the Flex chat channel was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the Flex chat channel was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The SID of the Flex Flow.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FO[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flex_flow_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FO[0-9a-fA-F]{32}$")]
		public string Flex_flow_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Channel resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The SID of the TaskRouter Task. Only valid when integration type is `task`. `null` for integration types `studio` & `external`
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^WT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="task_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WT[0-9a-fA-F]{32}$")]
		public string Task_sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the Flex chat channel resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The SID of the chat user.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^US[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^US[0-9a-fA-F]{32}$")]
		public string User_sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1configuration
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Configuration resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// Agent conversation end methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_conv_end_methods")]
		public object Agent_conv_end_methods { get; set; }
		
		/// <summary>
		/// An object that contains application-specific data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public object Attributes { get; set; }
		
		/// <summary>
		/// Whether call recording is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_recording_enabled")]
		public System.Nullable<System.Boolean> Call_recording_enabled { get; set; }
		
		/// <summary>
		/// The call recording webhook URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_recording_webhook_url")]
		public string Call_recording_webhook_url { get; set; }
		
		/// <summary>
		/// Settings for different limits for Flex Conversations channels attachments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_configs")]
		public string[] Channel_configs { get; set; }
		
		/// <summary>
		/// The SID of the chat service this user belongs to.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chat_service_instance_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Chat_service_instance_sid { get; set; }
		
		/// <summary>
		/// Citrix voice vdi configuration and settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="citrix_voice_vdi")]
		public object Citrix_voice_vdi { get; set; }
		
		/// <summary>
		/// An object that contains the CRM attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crm_attributes")]
		public object Crm_attributes { get; set; }
		
		/// <summary>
		/// The CRM Callback URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crm_callback_url")]
		public string Crm_callback_url { get; set; }
		
		/// <summary>
		/// Whether CRM is present for Flex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crm_enabled")]
		public System.Nullable<System.Boolean> Crm_enabled { get; set; }
		
		/// <summary>
		/// The CRM Fallback URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crm_fallback_url")]
		public string Crm_fallback_url { get; set; }
		
		/// <summary>
		/// The CRM type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crm_type")]
		public string Crm_type { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the Configuration resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the Configuration resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// Configurable parameters for Debugger Integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugger_integration")]
		public object Debugger_integration { get; set; }
		
		/// <summary>
		/// Setting this to true will redirect Flex UI to the URL set in flex_url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flex_insights_drilldown")]
		public System.Nullable<System.Boolean> Flex_insights_drilldown { get; set; }
		
		/// <summary>
		/// Object with enabled/disabled flag with list of workspaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flex_insights_hr")]
		public object Flex_insights_hr { get; set; }
		
		/// <summary>
		/// The SID of the Flex service instance.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flex_service_instance_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Flex_service_instance_sid { get; set; }
		
		/// <summary>
		/// Configurable parameters for Flex UI Status report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flex_ui_status_report")]
		public object Flex_ui_status_report { get; set; }
		
		/// <summary>
		/// URL to redirect to in case drilldown is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flex_url")]
		public string Flex_url { get; set; }
		
		/// <summary>
		/// A list of objects that contain the configurations for the Integrations supported in this configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrations")]
		public string[] Integrations { get; set; }
		
		/// <summary>
		/// Configurable parameters for Markdown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markdown")]
		public object Markdown { get; set; }
		
		/// <summary>
		/// The SID of the Messaging service instance.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^MG[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messaging_service_instance_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^MG[0-9a-fA-F]{32}$")]
		public string Messaging_service_instance_sid { get; set; }
		
		/// <summary>
		/// Configurable parameters for Notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public object Notifications { get; set; }
		
		/// <summary>
		/// Presence and presence ttl configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offline_config")]
		public object Offline_config { get; set; }
		
		/// <summary>
		/// The list of outbound call flows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outbound_call_flows")]
		public object Outbound_call_flows { get; set; }
		
		/// <summary>
		/// The plugin service attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugin_service_attributes")]
		public object Plugin_service_attributes { get; set; }
		
		/// <summary>
		/// Whether the plugin service enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugin_service_enabled")]
		public System.Nullable<System.Boolean> Plugin_service_enabled { get; set; }
		
		/// <summary>
		/// The list of public attributes, which are visible to unauthenticated clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_attributes")]
		public object Public_attributes { get; set; }
		
		/// <summary>
		/// Configurable parameters for Queues Statistics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue_stats_configuration")]
		public object Queue_stats_configuration { get; set; }
		
		/// <summary>
		/// The URL where the Flex instance is hosted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtime_domain")]
		public string Runtime_domain { get; set; }
		
		/// <summary>
		/// The list of serverless service SIDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverless_service_sids")]
		public string[] Serverless_service_sids { get; set; }
		
		/// <summary>
		/// The Flex Service version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_version")]
		public string Service_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Configuration_enum_status Status { get; set; }
		
		/// <summary>
		/// The TaskRouter SID of the offline activity.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^WA[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_offline_activity_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WA[0-9a-fA-F]{32}$")]
		public string Taskrouter_offline_activity_sid { get; set; }
		
		/// <summary>
		/// The Skill description for TaskRouter workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_skills")]
		public string[] Taskrouter_skills { get; set; }
		
		/// <summary>
		/// The SID of the TaskRouter Target TaskQueue.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^WQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_target_taskqueue_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WQ[0-9a-fA-F]{32}$")]
		public string Taskrouter_target_taskqueue_sid { get; set; }
		
		/// <summary>
		/// The SID of the TaskRouter target Workflow.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^WW[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_target_workflow_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WW[0-9a-fA-F]{32}$")]
		public string Taskrouter_target_workflow_sid { get; set; }
		
		/// <summary>
		/// The list of TaskRouter TaskQueues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_taskqueues")]
		public string[] Taskrouter_taskqueues { get; set; }
		
		/// <summary>
		/// The TaskRouter Worker attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_worker_attributes")]
		public object Taskrouter_worker_attributes { get; set; }
		
		/// <summary>
		/// The TaskRouter default channel capacities and availability for workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_worker_channels")]
		public object Taskrouter_worker_channels { get; set; }
		
		/// <summary>
		/// The SID of the TaskRouter Workspace.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^WS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskrouter_workspace_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^WS[0-9a-fA-F]{32}$")]
		public string Taskrouter_workspace_sid { get; set; }
		
		/// <summary>
		/// The object that describes Flex UI characteristics and settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ui_attributes")]
		public object Ui_attributes { get; set; }
		
		/// <summary>
		/// The object that defines the NPM packages and versions to be used in Hosted Flex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ui_dependencies")]
		public object Ui_dependencies { get; set; }
		
		/// <summary>
		/// The primary language of the Flex UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ui_language")]
		public string Ui_language { get; set; }
		
		/// <summary>
		/// The Pinned UI version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ui_version")]
		public string Ui_version { get; set; }
		
		/// <summary>
		/// The absolute URL of the Configuration resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1flex_flow
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Flow resource and owns this Workflow.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channel_type")]
		public System.Nullable<Flexv1flex_flowChannel_type> Channel_type { get; set; }
		
		/// <summary>
		/// The SID of the chat service.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chat_service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Chat_service_sid { get; set; }
		
		/// <summary>
		/// The channel contact's Identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contact_identity")]
		public string Contact_identity { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// Whether the Flex Flow is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// An object that contains specific parameters for the integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integration")]
		public object Integration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integration_type")]
		public System.Nullable<Flexv1flex_flowIntegration_type> Integration_type { get; set; }
		
		/// <summary>
		/// When enabled, the Messaging Channel Janitor will remove active Proxy sessions if the associated Task is deleted outside of the Flex UI. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="janitor_enabled")]
		public System.Nullable<System.Boolean> Janitor_enabled { get; set; }
		
		/// <summary>
		/// When enabled, Flex will keep the chat channel active so that it may be used for subsequent interactions with a contact identity. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="long_lived")]
		public System.Nullable<System.Boolean> Long_lived { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Flex Flow resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FO[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FO[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the Flex Flow resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flexv1flex_flowChannel_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="web")]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="facebook")]
		facebook = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="whatsapp")]
		whatsapp = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line")]
		line = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
		custom = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flexv1flex_flowIntegration_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="studio")]
		studio = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external")]
		external = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="task")]
		task = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_assessments
	{
		
		/// <summary>
		/// The unique SID identifier of the Account.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The id of the Agent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_id")]
		public string Agent_id { get; set; }
		
		/// <summary>
		/// The id of the answer selected by user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_id")]
		public string Answer_id { get; set; }
		
		/// <summary>
		/// The answer text selected by user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_text")]
		public string Answer_text { get; set; }
		
		/// <summary>
		/// Assessment Details associated with an assessment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment")]
		public object Assessment { get; set; }
		
		/// <summary>
		/// The SID of the assessment
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FM[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FM[0-9a-fA-F]{32}$")]
		public string Assessment_sid { get; set; }
		
		/// <summary>
		/// Offset of the conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Double> Offset { get; set; }
		
		/// <summary>
		/// The flag indicating if this assessment is part of report 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public System.Nullable<System.Boolean> Report { get; set; }
		
		/// <summary>
		/// Segment Id of conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment_id")]
		public string Segment_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The email id of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_name")]
		public string User_name { get; set; }
		
		/// <summary>
		/// The weightage given to this comment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_assessments_comment
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The id of the agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_id")]
		public string Agent_id { get; set; }
		
		/// <summary>
		/// The SID of the assessment.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FM[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FM[0-9a-fA-F]{32}$")]
		public string Assessment_sid { get; set; }
		
		/// <summary>
		/// The comment added for assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public object Comment { get; set; }
		
		/// <summary>
		/// The offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Double> Offset { get; set; }
		
		/// <summary>
		/// The flag indicating if this assessment is part of report 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="report")]
		public System.Nullable<System.Boolean> Report { get; set; }
		
		/// <summary>
		/// The id of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment_id")]
		public string Segment_id { get; set; }
		
		/// <summary>
		/// The timestamp when the record is inserted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Double> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The email id of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_email")]
		public string User_email { get; set; }
		
		/// <summary>
		/// The name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_name")]
		public string User_name { get; set; }
		
		/// <summary>
		/// The weightage given to this comment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_conversations
	{
		
		/// <summary>
		/// The id of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The unique id of the conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversation_id")]
		public string Conversation_id { get; set; }
		
		/// <summary>
		/// The count of segments for a conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment_count")]
		public System.Nullable<System.Int32> Segment_count { get; set; }
		
		/// <summary>
		/// The Segments of a conversation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public string[] Segments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_questionnaires
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The flag to enable or disable questionnaire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The description of this questionnaire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The sid of this questionnaire
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GM[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questionnaire_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GM[0-9a-fA-F]{32}$")]
		public string Questionnaire_sid { get; set; }
		
		/// <summary>
		/// The list of questions with category for a questionnaire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public string[] Questions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_questionnaires_category
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The SID of the category
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FY[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FY[0-9a-fA-F]{32}$")]
		public string Category_sid { get; set; }
		
		/// <summary>
		/// The name of this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_questionnaires_question
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The flag  to enable for disable NA for answer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allow_na")]
		public System.Nullable<System.Boolean> Allow_na { get; set; }
		
		/// <summary>
		/// Set of answers for the question
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_set")]
		public object Answer_set { get; set; }
		
		/// <summary>
		/// The answer_set for the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_set_id")]
		public string Answer_set_id { get; set; }
		
		/// <summary>
		/// The Category for the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public object Category { get; set; }
		
		/// <summary>
		/// The description for the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="question")]
		public string Question { get; set; }
		
		/// <summary>
		/// The SID of the question
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^GE[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="question_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^GE[0-9a-fA-F]{32}$")]
		public string Question_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Integer value that tells a particular question is used by how many questionnaires
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Int32> Usage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_segments
	{
		
		/// <summary>
		/// The unique id for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public string Account_id { get; set; }
		
		/// <summary>
		/// The unique id for the agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_id")]
		public string Agent_id { get; set; }
		
		/// <summary>
		/// The link to the agent conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_link")]
		public string Agent_link { get; set; }
		
		/// <summary>
		/// The name of the agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_name")]
		public string Agent_name { get; set; }
		
		/// <summary>
		/// The phone number of the agent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_phone")]
		public string Agent_phone { get; set; }
		
		/// <summary>
		/// The team name to which agent belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_team_name")]
		public string Agent_team_name { get; set; }
		
		/// <summary>
		/// he team name to which agent belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agent_team_name_in_hierarchy")]
		public string Agent_team_name_in_hierarchy { get; set; }
		
		/// <summary>
		/// The percentage scored on the Assessments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment_percentage")]
		public object Assessment_percentage { get; set; }
		
		/// <summary>
		/// The type of the assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessment_type")]
		public object Assessment_type { get; set; }
		
		/// <summary>
		/// The link to the customer conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_link")]
		public string Customer_link { get; set; }
		
		/// <summary>
		/// The name of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_name")]
		public string Customer_name { get; set; }
		
		/// <summary>
		/// The phone number of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_phone")]
		public string Customer_phone { get; set; }
		
		/// <summary>
		/// The date of the conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_contact")]
		public string External_contact { get; set; }
		
		/// <summary>
		/// The unique id for the conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The hyperlink to recording of the task event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_segment_link")]
		public string External_segment_link { get; set; }
		
		/// <summary>
		/// The uuid for the external_segment_link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_segment_link_id")]
		public string External_segment_link_id { get; set; }
		
		/// <summary>
		/// The media identifiers of the conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public object Media { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string Queue { get; set; }
		
		/// <summary>
		/// To unique id of the segment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment_id")]
		public string Segment_id { get; set; }
		
		/// <summary>
		/// The offset value for the recording.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment_recording_offset")]
		public string Segment_recording_offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_session
	{
		
		/// <summary>
		/// The base URL to fetch reports and dashboards
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_url")]
		public string Base_url { get; set; }
		
		/// <summary>
		/// The session expiry date and time, given in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="session_expiry")]
		public string Session_expiry { get; set; }
		
		/// <summary>
		/// The unique ID for the session
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="session_id")]
		public string Session_id { get; set; }
		
		/// <summary>
		/// The URL of this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Unique ID to identify the user's workspace
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workspace_id")]
		public string Workspace_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_settings_answersets
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The list of answer set categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_set_categories")]
		public object Answer_set_categories { get; set; }
		
		/// <summary>
		/// The lis of answer sets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answer_sets")]
		public object Answer_sets { get; set; }
		
		/// <summary>
		/// The details for not applicable answer set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="not_applicable")]
		public object Not_applicable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_settings_comment
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Flex Insights resource and owns this resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public object Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1insights_user_roles
	{
		
		/// <summary>
		/// Flex Insights roles for the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1interaction
	{
		
		/// <summary>
		/// A JSON object that defines the Interaction’s communication channel and includes details about the channel. See the [Outbound SMS](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#agent-initiated-outbound-interactions) and [inbound (API-initiated)](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#api-initiated-contact) Channel object examples.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public object Channel { get; set; }
		
		/// <summary>
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^HQ[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interaction_context_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^HQ[0-9a-fA-F]{32}$")]
		public string Interaction_context_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// A JSON Object representing the routing rules for the Interaction Channel. See [Outbound SMS Example](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#agent-initiated-outbound-interactions) for an example Routing object. The Interactions resource uses TaskRouter for all routing functionality. 
		/// All attributes in the Routing object on your Interaction request body are added “as is” to the task. For a list of known attributes consumed by the Flex UI and/or Flex Insights, see [Known Task Attributes](https://www.twilio.com/docs/flex/developer/conversations/interactions-api#task-attributes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing")]
		public object Routing { get; set; }
		
		/// <summary>
		/// The unique string created by Twilio to identify an Interaction resource, prefixed with KD.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^KD[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^KD[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1interactioninteraction_channel
	{
		
		/// <summary>
		/// The Twilio error code for a failed channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error_code")]
		public System.Nullable<System.Int32> Error_code { get; set; }
		
		/// <summary>
		/// The error message for a failed channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error_message")]
		public string Error_message { get; set; }
		
		/// <summary>
		/// The unique string created by Twilio to identify an Interaction resource, prefixed with KD.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^KD[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interaction_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^KD[0-9a-fA-F]{32}$")]
		public string Interaction_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The unique string created by Twilio to identify an Interaction Channel resource, prefixed with UO.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^UO[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^UO[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Flexv1interactioninteraction_channelStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Flexv1interactioninteraction_channelType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flexv1interactioninteraction_channelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="setup")]
		setup = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flexv1interactioninteraction_channelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="voice")]
		voice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="web")]
		web = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="whatsapp")]
		whatsapp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chat")]
		chat = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="messenger")]
		messenger = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gbm")]
		gbm = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1interactioninteraction_channelinteraction_channel_invite
	{
		
		/// <summary>
		/// The Channel SID for this Invite.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^UO[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^UO[0-9a-fA-F]{32}$")]
		public string Channel_sid { get; set; }
		
		/// <summary>
		/// The Interaction SID for this Channel.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^KD[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interaction_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^KD[0-9a-fA-F]{32}$")]
		public string Interaction_sid { get; set; }
		
		/// <summary>
		/// A JSON object representing the routing rules for the Interaction Channel. See [Outbound SMS Example](https://www.twilio.com/docs/flex/developer/conversations/interactions-api/interactions#agent-initiated-outbound-interactions) for an example Routing object. The Interactions resource uses TaskRouter for all routing functionality. 
		/// All attributes in the Routing object on your Interaction request body are added “as is” to the task. For a list of known attributes consumed by the Flex UI and/or Flex Insights, see [Known Task Attributes](https://www.twilio.com/docs/flex/developer/conversations/interactions-api#task-attributes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routing")]
		public object Routing { get; set; }
		
		/// <summary>
		/// The unique string created by Twilio to identify an Interaction Channel Invite resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^KG[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^KG[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1interactioninteraction_channelinteraction_channel_participant
	{
		
		/// <summary>
		/// The Channel Sid for this Participant.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^UO[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^UO[0-9a-fA-F]{32}$")]
		public string Channel_sid { get; set; }
		
		/// <summary>
		/// The Interaction Sid for this channel.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^KD[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interaction_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^KD[0-9a-fA-F]{32}$")]
		public string Interaction_sid { get; set; }
		
		/// <summary>
		/// The unique string created by Twilio to identify an Interaction Channel Participant resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^UT[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^UT[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Flexv1interactioninteraction_channelinteraction_channel_participantType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flexv1interactioninteraction_channelinteraction_channel_participantType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="supervisor")]
		supervisor = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer")]
		customer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external")]
		external = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agent")]
		agent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1provisioning_status
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Flexv1provisioning_statusStatus> Status { get; set; }
		
		/// <summary>
		/// The absolute URL of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flexv1provisioning_statusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-configured")]
		notMinusconfigured = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flexv1web_channel
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the WebChannel resource and owns this Workflow.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The SID of the Flex Flow.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^FO[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flex_flow_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^FO[0-9a-fA-F]{32}$")]
		public string Flex_flow_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the WebChannel resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the WebChannel resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flex_flow_enum_channel_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="web")]
		web = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="facebook")]
		facebook = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="whatsapp")]
		whatsapp = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line")]
		line = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="custom")]
		custom = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Flex_flow_enum_integration_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="studio")]
		studio = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external")]
		external = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="task")]
		task = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_enum_channel_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="setup")]
		setup = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wrapup")]
		wrapup = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_enum_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="voice")]
		voice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sms")]
		sms = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="email")]
		email = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="web")]
		web = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="whatsapp")]
		whatsapp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chat")]
		chat = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="messenger")]
		messenger = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="gbm")]
		gbm = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_enum_update_channel_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_invite_enum_action
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="accept")]
		accept = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="decline")]
		decline = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_invite_enum_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="taskrouter")]
		taskrouter = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_participant_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="wrapup")]
		wrapup = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Interaction_channel_participant_enum_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="supervisor")]
		supervisor = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="customer")]
		customer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="external")]
		external = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agent")]
		agent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Provisioning_status_enum_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="active")]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not-configured")]
		notMinusconfigured = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Web_channel_enum_chat_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="inactive")]
		inactive = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ListChannel v1/Channels
		/// </summary>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListChannelReturn> ListChannelAsync(int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Channels?PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListChannelReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteChannel v1/Channels/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the Flex chat channel resource to delete.
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteChannelAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Channels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchChannel v1/Channels/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the Flex chat channel resource to fetch.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Flexv1channel> FetchChannelAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Channels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchConfiguration v1/Configuration
		/// </summary>
		/// <param name="UiVersion">The Pinned UI version of the Configuration resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Flexv1configuration> FetchConfigurationAsync(string UiVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Configuration?UiVersion=" + (UiVersion==null? "" : System.Uri.EscapeDataString(UiVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1configuration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListFlexFlow v1/FlexFlows
		/// </summary>
		/// <param name="FriendlyName">The `friendly_name` of the Flex Flow resources to read.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListFlexFlowReturn> ListFlexFlowAsync(string FriendlyName, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/FlexFlows?FriendlyName=" + (FriendlyName==null? "" : System.Uri.EscapeDataString(FriendlyName))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFlexFlowReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteFlexFlow v1/FlexFlows/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the Flex Flow resource to delete.
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteFlexFlowAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/FlexFlows/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchFlexFlow v1/FlexFlows/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the Flex Flow resource to fetch.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Flexv1flex_flow> FetchFlexFlowAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/FlexFlows/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1flex_flow>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get conversation with segment id
		/// ListInsightsConversations v1/Insights/Conversations
		/// </summary>
		/// <param name="SegmentId">Unique Id of the segment for which conversation details needs to be fetched</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInsightsConversationsReturn> ListInsightsConversationsAsync(string SegmentId, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/Conversations?SegmentId=" + (SegmentId==null? "" : System.Uri.EscapeDataString(SegmentId))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsightsConversationsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get assessments done for a conversation by logged in user
		/// ListInsightsAssessments v1/Insights/QualityManagement/Assessments
		/// </summary>
		/// <param name="SegmentId">The id of the segment.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInsightsAssessmentsReturn> ListInsightsAssessmentsAsync(string SegmentId, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Assessments?SegmentId=" + (SegmentId==null? "" : System.Uri.EscapeDataString(SegmentId))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsightsAssessmentsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To create a comment assessment for a conversation
		/// ListInsightsAssessmentsComment v1/Insights/QualityManagement/Assessments/Comments
		/// </summary>
		/// <param name="SegmentId">The id of the segment.</param>
		/// <param name="AgentId">The id of the agent.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInsightsAssessmentsCommentReturn> ListInsightsAssessmentsCommentAsync(string SegmentId, string AgentId, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Assessments/Comments?SegmentId=" + (SegmentId==null? "" : System.Uri.EscapeDataString(SegmentId))+"&AgentId=" + (AgentId==null? "" : System.Uri.EscapeDataString(AgentId))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsightsAssessmentsCommentReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get all the categories
		/// ListInsightsQuestionnairesCategory v1/Insights/QualityManagement/Categories
		/// </summary>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInsightsQuestionnairesCategoryReturn> ListInsightsQuestionnairesCategoryAsync(int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Categories?PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsightsQuestionnairesCategoryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteInsightsQuestionnairesCategory v1/Insights/QualityManagement/Categories/{CategorySid}
		/// </summary>
		/// <param name="CategorySid">The SID of the category to be deleted
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteInsightsQuestionnairesCategoryAsync(string CategorySid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Categories/"+ (CategorySid==null? "" : System.Uri.EscapeDataString(CategorySid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get all questionnaires with questions
		/// ListInsightsQuestionnaires v1/Insights/QualityManagement/Questionnaires
		/// </summary>
		/// <param name="IncludeInactive">Flag indicating whether to include inactive questionnaires or not</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInsightsQuestionnairesReturn> ListInsightsQuestionnairesAsync(bool IncludeInactive, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Questionnaires?IncludeInactive="+IncludeInactive+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsightsQuestionnairesReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To delete the questionnaire
		/// DeleteInsightsQuestionnaires v1/Insights/QualityManagement/Questionnaires/{QuestionnaireSid}
		/// </summary>
		/// <param name="QuestionnaireSid">The SID of the questionnaire
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteInsightsQuestionnairesAsync(string QuestionnaireSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Questionnaires/"+ (QuestionnaireSid==null? "" : System.Uri.EscapeDataString(QuestionnaireSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get the Questionnaire Detail
		/// FetchInsightsQuestionnaires v1/Insights/QualityManagement/Questionnaires/{QuestionnaireSid}
		/// </summary>
		/// <param name="QuestionnaireSid">The SID of the questionnaire
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Flexv1insights_questionnaires> FetchInsightsQuestionnairesAsync(string QuestionnaireSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Questionnaires/"+ (QuestionnaireSid==null? "" : System.Uri.EscapeDataString(QuestionnaireSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1insights_questionnaires>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get all the question for the given categories
		/// ListInsightsQuestionnairesQuestion v1/Insights/QualityManagement/Questions
		/// </summary>
		/// <param name="CategorySid">The list of category SIDs</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInsightsQuestionnairesQuestionReturn> ListInsightsQuestionnairesQuestionAsync(string[] CategorySid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Questions?"+string.Join("&", CategorySid.Select(z => $"CategorySid={System.Uri.EscapeDataString(z.ToString())}"))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsightsQuestionnairesQuestionReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteInsightsQuestionnairesQuestion v1/Insights/QualityManagement/Questions/{QuestionSid}
		/// </summary>
		/// <param name="QuestionSid">The SID of the question
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteInsightsQuestionnairesQuestionAsync(string QuestionSid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Questions/"+ (QuestionSid==null? "" : System.Uri.EscapeDataString(QuestionSid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get the Answer Set Settings for an Account
		/// FetchInsightsSettingsAnswersets v1/Insights/QualityManagement/Settings/AnswerSets
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Flexv1insights_settings_answersets> FetchInsightsSettingsAnswersetsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Settings/AnswerSets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1insights_settings_answersets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get the Comment Settings for an Account
		/// FetchInsightsSettingsComment v1/Insights/QualityManagement/Settings/CommentTags
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Flexv1insights_settings_comment> FetchInsightsSettingsCommentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/QualityManagement/Settings/CommentTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1insights_settings_comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To get segments for given reservation Ids
		/// ListInsightsSegments v1/Insights/Segments
		/// </summary>
		/// <param name="SegmentId">To unique id of the segment</param>
		/// <param name="ReservationId">The list of reservation Ids</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInsightsSegmentsReturn> ListInsightsSegmentsAsync(string SegmentId, string[] ReservationId, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/Segments?SegmentId=" + (SegmentId==null? "" : System.Uri.EscapeDataString(SegmentId))+"&"+string.Join("&", ReservationId.Select(z => $"ReservationId={System.Uri.EscapeDataString(z.ToString())}"))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInsightsSegmentsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// To obtain session details for fetching reports and dashboards
		/// CreateInsightsSession v1/Insights/Session
		/// </summary>
		public async Task CreateInsightsSessionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/Session";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This is used by Flex UI and Quality Management to fetch the Flex Insights roles for the user
		/// FetchInsightsUserRoles v1/Insights/UserRoles
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Flexv1insights_user_roles> FetchInsightsUserRolesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Insights/UserRoles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1insights_user_roles>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Channels for an Interaction.
		/// ListInteractionChannel v1/Interactions/{InteractionSid}/Channels
		/// </summary>
		/// <param name="InteractionSid">The unique string created by Twilio to identify an Interaction resource, prefixed with KD.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInteractionChannelReturn> ListInteractionChannelAsync(string InteractionSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Interactions/"+ (InteractionSid==null? "" : System.Uri.EscapeDataString(InteractionSid))+"/Channels&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInteractionChannelReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Invites for a Channel.
		/// ListInteractionChannelInvite v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Invites
		/// </summary>
		/// <param name="InteractionSid">The Interaction SID for this Channel.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="ChannelSid">The Channel SID for this Participant.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInteractionChannelInviteReturn> ListInteractionChannelInviteAsync(string InteractionSid, string ChannelSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Interactions/"+ (InteractionSid==null? "" : System.Uri.EscapeDataString(InteractionSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Invites&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInteractionChannelInviteReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Participants for a Channel.
		/// ListInteractionChannelParticipant v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants
		/// </summary>
		/// <param name="InteractionSid">The Interaction Sid for this channel.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="ChannelSid">The Channel Sid for this Participant.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInteractionChannelParticipantReturn> ListInteractionChannelParticipantAsync(string InteractionSid, string ChannelSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Interactions/"+ (InteractionSid==null? "" : System.Uri.EscapeDataString(InteractionSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Participants&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInteractionChannelParticipantReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch a Channel for an Interaction.
		/// FetchInteractionChannel v1/Interactions/{InteractionSid}/Channels/{Sid}
		/// </summary>
		/// <param name="InteractionSid">The unique string created by Twilio to identify an Interaction resource, prefixed with KD.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <param name="Sid">The unique string created by Twilio to identify an Interaction Channel resource, prefixed with UO.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Flexv1interactioninteraction_channel> FetchInteractionChannelAsync(string InteractionSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Interactions/"+ (InteractionSid==null? "" : System.Uri.EscapeDataString(InteractionSid))+"/Channels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1interactioninteraction_channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchInteraction v1/Interactions/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the Interaction resource to fetch.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Flexv1interaction> FetchInteractionAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Interactions/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1interaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListWebChannel v1/WebChannels
		/// </summary>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="Page">The page index. This value is simply for client state.
		/// Minimum: 0
		// </param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListWebChannelReturn> ListWebChannelAsync(int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/WebChannels?PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWebChannelReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteWebChannel v1/WebChannels/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the WebChannel resource to delete.
		/// Max length: 34
		/// Min length: 34
		// </param>
		public async Task DeleteWebChannelAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/WebChannels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchWebChannel v1/WebChannels/{Sid}
		/// </summary>
		/// <param name="Sid">The SID of the WebChannel resource to fetch.
		/// Max length: 34
		/// Min length: 34
		// </param>
		/// <returns>OK</returns>
		public async Task<Flexv1web_channel> FetchWebChannelAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/WebChannels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1web_channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchProvisioningStatus v1/account/provision/status
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Flexv1provisioning_status> FetchProvisioningStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/account/provision/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flexv1provisioning_status>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListChannelReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="flex_chat_channels")]
		public Flexv1channel[] Flex_chat_channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListChannelReturnMeta Meta { get; set; }
	}
	
	public class ListChannelReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListFlexFlowReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="flex_flows")]
		public Flexv1flex_flow[] Flex_flows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListFlexFlowReturnMeta Meta { get; set; }
	}
	
	public class ListFlexFlowReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInsightsConversationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="conversations")]
		public Flexv1insights_conversations[] Conversations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInsightsConversationsReturnMeta Meta { get; set; }
	}
	
	public class ListInsightsConversationsReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInsightsAssessmentsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessments")]
		public Flexv1insights_assessments[] Assessments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInsightsAssessmentsReturnMeta Meta { get; set; }
	}
	
	public class ListInsightsAssessmentsReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInsightsAssessmentsCommentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Flexv1insights_assessments_comment[] Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInsightsAssessmentsCommentReturnMeta Meta { get; set; }
	}
	
	public class ListInsightsAssessmentsCommentReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInsightsQuestionnairesCategoryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Flexv1insights_questionnaires_category[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInsightsQuestionnairesCategoryReturnMeta Meta { get; set; }
	}
	
	public class ListInsightsQuestionnairesCategoryReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInsightsQuestionnairesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInsightsQuestionnairesReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questionnaires")]
		public Flexv1insights_questionnaires[] Questionnaires { get; set; }
	}
	
	public class ListInsightsQuestionnairesReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInsightsQuestionnairesQuestionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInsightsQuestionnairesQuestionReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public Flexv1insights_questionnaires_question[] Questions { get; set; }
	}
	
	public class ListInsightsQuestionnairesQuestionReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInsightsSegmentsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInsightsSegmentsReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public Flexv1insights_segments[] Segments { get; set; }
	}
	
	public class ListInsightsSegmentsReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInteractionChannelReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Flexv1interactioninteraction_channel[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInteractionChannelReturnMeta Meta { get; set; }
	}
	
	public class ListInteractionChannelReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInteractionChannelInviteReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="invites")]
		public Flexv1interactioninteraction_channelinteraction_channel_invite[] Invites { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInteractionChannelInviteReturnMeta Meta { get; set; }
	}
	
	public class ListInteractionChannelInviteReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInteractionChannelParticipantReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInteractionChannelParticipantReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="participants")]
		public Flexv1interactioninteraction_channelinteraction_channel_participant[] Participants { get; set; }
	}
	
	public class ListInteractionChannelParticipantReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListWebChannelReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="flex_chat_channels")]
		public Flexv1web_channel[] Flex_chat_channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListWebChannelReturnMeta Meta { get; set; }
	}
	
	public class ListWebChannelReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
