//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Additional details for an ANR crash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ANR
	{
		
		/// <summary>
		/// A stacktrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
	}
	
	/// <summary>
	/// A stacktrace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StackTrace
	{
		
		/// <summary>
		/// The stack trace message. Required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public string Exception { get; set; }
	}
	
	/// <summary>
	/// Android app information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AndroidAppInfo
	{
		
		/// <summary>
		/// The name of the app. Optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The package name of the app. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The internal version code of the app. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public string VersionCode { get; set; }
		
		/// <summary>
		/// The version name of the app. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	/// <summary>
	/// A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AndroidInstrumentationTest
	{
		
		/// <summary>
		/// The java package for the test to be executed. Required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testPackageId")]
		public string TestPackageId { get; set; }
		
		/// <summary>
		/// The InstrumentationTestRunner class. Required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testRunnerClass")]
		public string TestRunnerClass { get; set; }
		
		/// <summary>
		/// Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTargets")]
		public string[] TestTargets { get; set; }
		
		/// <summary>
		/// The flag indicates whether Android Test Orchestrator will be used to run test or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useOrchestrator")]
		public System.Nullable<System.Boolean> UseOrchestrator { get; set; }
	}
	
	/// <summary>
	/// A test of an android application that explores the application on a virtual or physical Android device, finding culprits and crashes as it goes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AndroidRoboTest
	{
		
		/// <summary>
		/// The initial activity that should be used to start the app. Optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appInitialActivity")]
		public string AppInitialActivity { get; set; }
		
		/// <summary>
		/// The java package for the bootstrap. Optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootstrapPackageId")]
		public string BootstrapPackageId { get; set; }
		
		/// <summary>
		/// The runner class for the bootstrap. Optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootstrapRunnerClass")]
		public string BootstrapRunnerClass { get; set; }
		
		/// <summary>
		/// The max depth of the traversal stack Robo can explore. Optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDepth")]
		public System.Nullable<System.Int32> MaxDepth { get; set; }
		
		/// <summary>
		/// The max number of steps/actions Robo can execute. Default is no limit (0). Optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSteps")]
		public System.Nullable<System.Int32> MaxSteps { get; set; }
	}
	
	/// <summary>
	/// An Android mobile test specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AndroidTest
	{
		
		/// <summary>
		/// Android app information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidAppInfo")]
		public AndroidAppInfo AndroidAppInfo { get; set; }
		
		/// <summary>
		/// A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidInstrumentationTest")]
		public AndroidInstrumentationTest AndroidInstrumentationTest { get; set; }
		
		/// <summary>
		/// A test of an android application that explores the application on a virtual or physical Android device, finding culprits and crashes as it goes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidRoboTest")]
		public AndroidRoboTest AndroidRoboTest { get; set; }
		
		/// <summary>
		/// Test Loops are tests that can be launched by the app itself, determining when to run by listening for an intent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidTestLoop")]
		public AndroidTestLoop AndroidTestLoop { get; set; }
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTimeout")]
		public Duration TestTimeout { get; set; }
	}
	
	/// <summary>
	/// Test Loops are tests that can be launched by the app itself, determining when to run by listening for an intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AndroidTestLoop
	{
	}
	
	/// <summary>
	///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Duration
	{
		
		/// <summary>
		/// Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public string Seconds { get; set; }
	}
	
	/// <summary>
	///  `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z". # JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { "@type": "type.googleapis.com/google.profile.Person", "firstName": , "lastName": } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message google.protobuf.Duration): { "@type": "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Any
	{
		
		/// <summary>
		/// A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one "/" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a google.protobuf.Type value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeUrl")]
		public string TypeUrl { get; set; }
		
		/// <summary>
		/// Must be a valid serialized protocol buffer of the above specified type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppStartTime
	{
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullyDrawnTime")]
		public Duration FullyDrawnTime { get; set; }
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialDisplayTime")]
		public Duration InitialDisplayTime { get; set; }
	}
	
	/// <summary>
	/// There was an issue with the assets in this test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetIssue
	{
	}
	
	/// <summary>
	/// A suggestion to use deep links for a Robo run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailableDeepLinks
	{
	}
	
	/// <summary>
	/// Encapsulates the metadata for basic sample series represented by a line chart
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BasicPerfSampleSeries
	{
		
		[System.Runtime.Serialization.DataMember(Name="perfMetricType")]
		public System.Nullable<BasicPerfSampleSeriesPerfMetricType> PerfMetricType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perfUnit")]
		public System.Nullable<BasicPerfSampleSeriesPerfUnit> PerfUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sampleSeriesLabel")]
		public System.Nullable<BasicPerfSampleSeriesSampleSeriesLabel> SampleSeriesLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BasicPerfSampleSeriesPerfMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		perfMetricTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		memory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cpu = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		graphics = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BasicPerfSampleSeriesPerfUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		perfUnitUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kibibyte = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		percent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bytesPerSecond = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		framesPerSecond = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="byte")]
		_byte = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BasicPerfSampleSeriesSampleSeriesLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sampleSeriesTypeUnspecified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		memoryRssPrivate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		memoryRssShared = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		memoryRssTotal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		memoryTotal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cpuUser = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cpuKernel = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cpuTotal = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ntBytesTransferred = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ntBytesReceived = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		networkSent = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		networkReceived = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		graphicsFrameRate = 12,
	}
	
	/// <summary>
	/// The request must provide up to a maximum of 5000 samples to be created; a larger sample size will cause an INVALID_ARGUMENT error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreatePerfSamplesRequest
	{
		
		/// <summary>
		/// The set of PerfSamples to create should not include existing timestamps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perfSamples")]
		public PerfSample[] PerfSamples { get; set; }
	}
	
	/// <summary>
	/// Resource representing a single performance measure or data point
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerfSample
	{
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleTime")]
		public Timestamp SampleTime { get; set; }
		
		/// <summary>
		/// Value observed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Timestamp
	{
		
		/// <summary>
		/// Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public string Seconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchCreatePerfSamplesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="perfSamples")]
		public PerfSample[] PerfSamples { get; set; }
	}
	
	/// <summary>
	/// A warning that Robo encountered a screen that was mostly blank; this may indicate a problem with the app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlankScreen
	{
		
		/// <summary>
		/// The screen id of the element
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenId")]
		public string ScreenId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CPUInfo
	{
		
		/// <summary>
		/// description of the device processor ie '1.8 GHz hexa core 64-bit ARMv8-A'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuProcessor")]
		public string CpuProcessor { get; set; }
		
		/// <summary>
		/// the CPU clock speed in GHz
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuSpeedInGhz")]
		public System.Nullable<System.Single> CpuSpeedInGhz { get; set; }
		
		/// <summary>
		/// the number of CPU cores
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfCores")]
		public System.Nullable<System.Int32> NumberOfCores { get; set; }
	}
	
	/// <summary>
	/// Crash dialog was detected during the test execution
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CrashDialogError
	{
		
		/// <summary>
		/// The name of the package that caused the dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crashPackage")]
		public string CrashPackage { get; set; }
	}
	
	/// <summary>
	/// A notification that Robo detected a splash screen provided by app (vs. Android OS splash screen).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectedAppSplashScreen
	{
	}
	
	/// <summary>
	/// A warning that device ran out of memory
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceOutOfMemory
	{
	}
	
	/// <summary>
	/// Additional details about encountered login screens.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncounteredLoginScreen
	{
		
		/// <summary>
		/// Number of encountered distinct login screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distinctScreens")]
		public System.Nullable<System.Int32> DistinctScreens { get; set; }
		
		/// <summary>
		/// Subset of login screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenIds")]
		public string[] ScreenIds { get; set; }
	}
	
	/// <summary>
	/// Additional details about encountered screens with elements that are not Android UI widgets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncounteredNonAndroidUiWidgetScreen
	{
		
		/// <summary>
		/// Number of encountered distinct screens with non Android UI widgets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distinctScreens")]
		public System.Nullable<System.Int32> DistinctScreens { get; set; }
		
		/// <summary>
		/// Subset of screens which contain non Android UI widgets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenIds")]
		public string[] ScreenIds { get; set; }
	}
	
	/// <summary>
	/// An Environment represents the set of test runs (Steps) from the parent Execution that are configured with the same set of dimensions (Model, Version, Locale, and Orientation). Multiple such runs occur particularly because of features like sharding (splitting up a test suite to run in parallel across devices) and reruns (running a test multiple times to check for different outcomes).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Environment
	{
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public Timestamp CompletionTime { get; set; }
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public Timestamp CreationTime { get; set; }
		
		/// <summary>
		/// Dimension values describing the environment. Dimension values always consist of "Model", "Version", "Locale", and "Orientation". - In response: always set - In create request: always set - In update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValue")]
		public EnvironmentDimensionValueEntry[] DimensionValue { get; set; }
		
		/// <summary>
		/// A short human-readable name to display in the UI. Maximum of 100 characters. For example: Nexus 5, API 27.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. An Environment id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentId")]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Merged test result for environment. If the environment has only one step (no reruns or shards), then the merged result is the same as the step result. If the environment has multiple shards and/or reruns, then the results of shards and reruns that belong to the same environment are merged into one environment result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentResult")]
		public MergedResult EnvironmentResult { get; set; }
		
		/// <summary>
		/// Output only. An Execution id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Output only. A History id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// Output only. A Project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The storage for test results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsStorage")]
		public ResultsStorage ResultsStorage { get; set; }
		
		/// <summary>
		/// Output only. Summaries of shards. Only one shard will present unless sharding feature is enabled in TestExecutionService.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardSummaries")]
		public ShardSummary[] ShardSummaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentDimensionValueEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Merged test result for environment. If the environment has only one step (no reruns or shards), then the merged result is the same as the step result. If the environment has multiple shards and/or reruns, then the results of shards and reruns that belong to the same environment are merged into one environment result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MergedResult
	{
		
		/// <summary>
		/// Interprets a result so that humans and machines can act on it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public Outcome Outcome { get; set; }
		
		/// <summary>
		/// State of the resource
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MergedResultState> State { get; set; }
		
		/// <summary>
		/// The combined and rolled-up result of each test suite that was run as part of this environment. Combining: When the test cases from a suite are run in different steps (sharding), the results are added back together in one overview. (e.g., if shard1 has 2 failures and shard2 has 1 failure than the overview failure_count = 3). Rollup: When test cases from the same suite are run multiple times (flaky), the results are combined (e.g., if testcase1.run1 fails, testcase1.run2 passes, and both testcase2.run1 and testcase2.run2 fail then the overview flaky_count = 1 and failure_count = 1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSuiteOverviews")]
		public TestSuiteOverview[] TestSuiteOverviews { get; set; }
	}
	
	/// <summary>
	/// Interprets a result so that humans and machines can act on it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Outcome
	{
		
		/// <summary>
		/// Details for an outcome with a FAILURE outcome summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureDetail")]
		public FailureDetail FailureDetail { get; set; }
		
		/// <summary>
		/// Details for an outcome with an INCONCLUSIVE outcome summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inconclusiveDetail")]
		public InconclusiveDetail InconclusiveDetail { get; set; }
		
		/// <summary>
		/// Details for an outcome with a SKIPPED outcome summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedDetail")]
		public SkippedDetail SkippedDetail { get; set; }
		
		/// <summary>
		/// Details for an outcome with a SUCCESS outcome summary. LINT.IfChange
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successDetail")]
		public SuccessDetail SuccessDetail { get; set; }
		
		/// <summary>
		/// The simplest way to interpret a result. Required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public System.Nullable<OutcomeSummary> Summary { get; set; }
	}
	
	/// <summary>
	/// Details for an outcome with a FAILURE outcome summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailureDetail
	{
		
		/// <summary>
		/// If the failure was severe because the system (app) under test crashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crashed")]
		public System.Nullable<System.Boolean> Crashed { get; set; }
		
		/// <summary>
		/// If the device ran out of memory during a test, causing the test to crash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceOutOfMemory")]
		public System.Nullable<System.Boolean> DeviceOutOfMemory { get; set; }
		
		/// <summary>
		/// If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedRoboscript")]
		public System.Nullable<System.Boolean> FailedRoboscript { get; set; }
		
		/// <summary>
		/// If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notInstalled")]
		public System.Nullable<System.Boolean> NotInstalled { get; set; }
		
		/// <summary>
		/// If a native process (including any other than the app) crashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherNativeCrash")]
		public System.Nullable<System.Boolean> OtherNativeCrash { get; set; }
		
		/// <summary>
		/// If the test overran some time limit, and that is why it failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timedOut")]
		public System.Nullable<System.Boolean> TimedOut { get; set; }
		
		/// <summary>
		/// If the robo was unable to crawl the app; perhaps because the app did not start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unableToCrawl")]
		public System.Nullable<System.Boolean> UnableToCrawl { get; set; }
	}
	
	/// <summary>
	/// Details for an outcome with an INCONCLUSIVE outcome summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InconclusiveDetail
	{
		
		/// <summary>
		/// If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abortedByUser")]
		public System.Nullable<System.Boolean> AbortedByUser { get; set; }
		
		/// <summary>
		/// If results are being provided to the user in certain cases of infrastructure failures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasErrorLogs")]
		public System.Nullable<System.Boolean> HasErrorLogs { get; set; }
		
		/// <summary>
		/// If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infrastructureFailure")]
		public System.Nullable<System.Boolean> InfrastructureFailure { get; set; }
	}
	
	/// <summary>
	/// Details for an outcome with a SKIPPED outcome summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SkippedDetail
	{
		
		/// <summary>
		/// If the App doesn't support the specific API level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompatibleAppVersion")]
		public System.Nullable<System.Boolean> IncompatibleAppVersion { get; set; }
		
		/// <summary>
		/// If the App doesn't run on the specific architecture, for example, x86.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompatibleArchitecture")]
		public System.Nullable<System.Boolean> IncompatibleArchitecture { get; set; }
		
		/// <summary>
		/// If the requested OS version doesn't run on the specific device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompatibleDevice")]
		public System.Nullable<System.Boolean> IncompatibleDevice { get; set; }
	}
	
	/// <summary>
	/// Details for an outcome with a SUCCESS outcome summary. LINT.IfChange
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuccessDetail
	{
		
		/// <summary>
		/// If a native process other than the app crashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherNativeCrash")]
		public System.Nullable<System.Boolean> OtherNativeCrash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OutcomeSummary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unset = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inconclusive = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flaky = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MergedResultState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknownState = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		complete = 3,
	}
	
	/// <summary>
	/// A summary of a test suite result either parsed from XML or uploaded directly by a user. Note: the API related comments are for StepService only. This message is also being used in ExecutionService in a read only mode for the corresponding step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestSuiteOverview
	{
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elapsedTime")]
		public Duration ElapsedTime { get; set; }
		
		/// <summary>
		/// Number of test cases in error, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCount")]
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		/// <summary>
		/// Number of failed test cases, typically set by the service by parsing the xml_source. May also be set by the user. - In create/response: always set - In update request: never
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureCount")]
		public System.Nullable<System.Int32> FailureCount { get; set; }
		
		/// <summary>
		/// Number of flaky test cases, set by the service by rolling up flaky test attempts. Present only for rollup test suite overview at environment level. A step cannot have flaky test cases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flakyCount")]
		public System.Nullable<System.Int32> FlakyCount { get; set; }
		
		/// <summary>
		/// The name of the test suite. - In create/response: always set - In update request: never
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Number of test cases not run, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedCount")]
		public System.Nullable<System.Int32> SkippedCount { get; set; }
		
		/// <summary>
		/// Number of test cases, typically set by the service by parsing the xml_source. - In create/response: always set - In update request: never
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		/// <summary>
		/// A reference to a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xmlSource")]
		public FileReference XmlSource { get; set; }
	}
	
	/// <summary>
	/// A reference to a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileReference
	{
		
		/// <summary>
		/// The URI of a file stored in Google Cloud Storage. For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000 An INVALID_ARGUMENT error will be returned if the URI format is not supported. - In response: always set - In create/update request: always set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileUri")]
		public string FileUri { get; set; }
	}
	
	/// <summary>
	/// The storage for test results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResultsStorage
	{
		
		/// <summary>
		/// A reference to a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultsStoragePath")]
		public FileReference ResultsStoragePath { get; set; }
		
		/// <summary>
		/// A reference to a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xunitXmlFile")]
		public FileReference XunitXmlFile { get; set; }
	}
	
	/// <summary>
	/// Result summary for a shard in an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShardSummary
	{
		
		/// <summary>
		/// Summaries of the steps belonging to the shard. With flaky_test_attempts enabled from TestExecutionService, more than one run (Step) can present. And the runs will be sorted by multistep_number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public StepSummary[] Runs { get; set; }
		
		/// <summary>
		/// Merged test result for environment. If the environment has only one step (no reruns or shards), then the merged result is the same as the step result. If the environment has multiple shards and/or reruns, then the results of shards and reruns that belong to the same environment are merged into one environment result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardResult")]
		public MergedResult ShardResult { get; set; }
	}
	
	/// <summary>
	/// Lightweight summary of a step within this execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepSummary
	{
	}
	
	/// <summary>
	/// An Execution represents a collection of Steps. For instance, it could represent: - a mobile test executed across a range of device configurations - a jenkins job with a build step followed by a test step The maximum size of an execution message is 1 MiB. An Execution can be updated until its state is set to COMPLETE at which point it becomes immutable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Execution
	{
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public Timestamp CompletionTime { get; set; }
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public Timestamp CreationTime { get; set; }
		
		/// <summary>
		/// The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionDefinitions")]
		public MatrixDimensionDefinition[] DimensionDefinitions { get; set; }
		
		/// <summary>
		/// A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Interprets a result so that humans and machines can act on it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public Outcome Outcome { get; set; }
		
		/// <summary>
		/// The details about how to run the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specification")]
		public Specification Specification { get; set; }
		
		/// <summary>
		/// The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public MergedResultState State { get; set; }
		
		/// <summary>
		/// TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testExecutionMatrixId")]
		public string TestExecutionMatrixId { get; set; }
	}
	
	/// <summary>
	/// One dimension of the matrix of different runs of a step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MatrixDimensionDefinition
	{
	}
	
	/// <summary>
	/// The details about how to run the execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Specification
	{
		
		/// <summary>
		/// An Android mobile test specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidTest")]
		public AndroidTest AndroidTest { get; set; }
		
		/// <summary>
		/// A iOS mobile test specification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosTest")]
		public IosTest IosTest { get; set; }
	}
	
	/// <summary>
	/// A iOS mobile test specification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IosTest
	{
		
		/// <summary>
		/// iOS app information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosAppInfo")]
		public IosAppInfo IosAppInfo { get; set; }
		
		/// <summary>
		/// A Robo test for an iOS application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosRoboTest")]
		public IosRoboTest IosRoboTest { get; set; }
		
		/// <summary>
		/// A game loop test of an iOS application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosTestLoop")]
		public IosTestLoop IosTestLoop { get; set; }
		
		/// <summary>
		/// A test of an iOS application that uses the XCTest framework.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iosXcTest")]
		public IosXcTest IosXcTest { get; set; }
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTimeout")]
		public Duration TestTimeout { get; set; }
	}
	
	/// <summary>
	/// iOS app information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IosAppInfo
	{
		
		/// <summary>
		/// The name of the app. Required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A Robo test for an iOS application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IosRoboTest
	{
	}
	
	/// <summary>
	/// A game loop test of an iOS application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IosTestLoop
	{
		
		/// <summary>
		/// Bundle ID of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
	}
	
	/// <summary>
	/// A test of an iOS application that uses the XCTest framework.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IosXcTest
	{
		
		/// <summary>
		/// Bundle ID of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bundleId")]
		public string BundleId { get; set; }
		
		/// <summary>
		/// Xcode version that the test was run with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xcodeVersion")]
		public string XcodeVersion { get; set; }
	}
	
	/// <summary>
	/// Failed to install the App.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedToInstall
	{
	}
	
	/// <summary>
	/// Additional details for a fatal exception.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FatalException
	{
		
		/// <summary>
		/// A stacktrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
	}
	
	/// <summary>
	/// Graphics statistics for the App. The information is collected from 'adb shell dumpsys graphicsstats'. For more info see: https://developer.android.com/training/testing/performance.html Statistics will only be present for API 23+.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GraphicsStats
	{
		
		/// <summary>
		/// Histogram of frame render times. There should be 154 buckets ranging from [5ms, 6ms) to [4950ms, infinity)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public GraphicsStatsBucket[] Buckets { get; set; }
		
		/// <summary>
		/// Total "high input latency" events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highInputLatencyCount")]
		public string HighInputLatencyCount { get; set; }
		
		/// <summary>
		/// Total frames with slow render time. Should be <= total_frames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jankyFrames")]
		public string JankyFrames { get; set; }
		
		/// <summary>
		/// Total "missed vsync" events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missedVsyncCount")]
		public string MissedVsyncCount { get; set; }
		
		/// <summary>
		/// 50th percentile frame render time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p50Millis")]
		public string P50Millis { get; set; }
		
		/// <summary>
		/// 90th percentile frame render time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p90Millis")]
		public string P90Millis { get; set; }
		
		/// <summary>
		/// 95th percentile frame render time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p95Millis")]
		public string P95Millis { get; set; }
		
		/// <summary>
		/// 99th percentile frame render time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p99Millis")]
		public string P99Millis { get; set; }
		
		/// <summary>
		/// Total "slow bitmap upload" events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slowBitmapUploadCount")]
		public string SlowBitmapUploadCount { get; set; }
		
		/// <summary>
		/// Total "slow draw" events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slowDrawCount")]
		public string SlowDrawCount { get; set; }
		
		/// <summary>
		/// Total "slow UI thread" events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slowUiThreadCount")]
		public string SlowUiThreadCount { get; set; }
		
		/// <summary>
		/// Total frames rendered by package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalFrames")]
		public string TotalFrames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GraphicsStatsBucket
	{
		
		/// <summary>
		/// Number of frames in the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frameCount")]
		public string FrameCount { get; set; }
		
		/// <summary>
		/// Lower bound of render time in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderMillis")]
		public string RenderMillis { get; set; }
	}
	
	/// <summary>
	/// A History represents a sorted list of Executions ordered by the start_timestamp_millis field (descending). It can be used to group all the Executions of a continuous build. Note that the ordering only operates on one-dimension. If a repository has multiple branches, it means that multiple histories will need to be used in order to order Executions per branch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class History
	{
		
		/// <summary>
		/// A short human-readable (plain text) name to display in the UI. Maximum of 100 characters. - In response: present if set during create. - In create request: optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// A unique identifier within a project for this History. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// A name to uniquely identify a history within a project. Maximum of 200 characters. - In response always set - In create request: always set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The platform of the test history. - In response: always set. Returns the platform of the last execution if unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testPlatform")]
		public System.Nullable<HistoryTestPlatform> TestPlatform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HistoryTestPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknownPlatform = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		android = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ios = 2,
	}
	
	/// <summary>
	/// An image, with a link to the main image and a thumbnail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// A reference to a ToolExecution output file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceImage")]
		public ToolOutputReference SourceImage { get; set; }
		
		/// <summary>
		/// The step to which the image is attached. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
		
		/// <summary>
		/// A single thumbnail, with its size and format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public Thumbnail Thumbnail { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A reference to a ToolExecution output file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ToolOutputReference
	{
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public Timestamp CreationTime { get; set; }
		
		/// <summary>
		/// A reference to a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="output")]
		public FileReference Output { get; set; }
		
		/// <summary>
		/// A reference to a test case. Test case references are canonically ordered lexicographically by these three factors: * First, by test_suite_name. * Second, by class_name. * Third, by name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testCase")]
		public TestCaseReference TestCase { get; set; }
	}
	
	/// <summary>
	/// A reference to a test case. Test case references are canonically ordered lexicographically by these three factors: * First, by test_suite_name. * Second, by class_name. * Third, by name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestCaseReference
	{
		
		/// <summary>
		/// The name of the class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="className")]
		public string ClassName { get; set; }
		
		/// <summary>
		/// The name of the test case. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name of the test suite to which this test case belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSuiteName")]
		public string TestSuiteName { get; set; }
	}
	
	/// <summary>
	/// A single thumbnail, with its size and format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Thumbnail
	{
		
		/// <summary>
		/// The thumbnail's content type, i.e. "image/png". Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The thumbnail file itself. That is, the bytes here are precisely the bytes that make up the thumbnail file; they can be served as an image as-is (with the appropriate content type.) Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The height of the thumbnail, in pixels. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightPx")]
		public System.Nullable<System.Int32> HeightPx { get; set; }
		
		/// <summary>
		/// The width of the thumbnail, in pixels. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthPx")]
		public System.Nullable<System.Int32> WidthPx { get; set; }
	}
	
	/// <summary>
	/// Additional details of in-app purchases encountered during the crawl.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InAppPurchasesFound
	{
		
		/// <summary>
		/// The total number of in-app purchases flows explored: how many times the robo tries to buy a SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inAppPurchasesFlowsExplored")]
		public System.Nullable<System.Int32> InAppPurchasesFlowsExplored { get; set; }
		
		/// <summary>
		/// The total number of in-app purchases flows started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inAppPurchasesFlowsStarted")]
		public System.Nullable<System.Int32> InAppPurchasesFlowsStarted { get; set; }
	}
	
	/// <summary>
	/// Step Id and outcome of each individual step that was run as a group with other steps with the same configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndividualOutcome
	{
		
		/// <summary>
		/// Unique int given to each step. Ranges from 0(inclusive) to total number of steps(exclusive). The primary step is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multistepNumber")]
		public System.Nullable<System.Int32> MultistepNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outcomeSummary")]
		public OutcomeSummary OutcomeSummary { get; set; }
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runDuration")]
		public Duration RunDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
	}
	
	/// <summary>
	/// A warning that Robo did not crawl potentially important parts of the app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InsufficientCoverage
	{
	}
	
	/// <summary>
	/// Additional details for an iOS app crash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IosAppCrashed
	{
		
		/// <summary>
		/// A stacktrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
	}
	
	/// <summary>
	/// Failed to find the launcher activity of an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LauncherActivityNotFound
	{
	}
	
	/// <summary>
	/// Response message for EnvironmentService.ListEnvironments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEnvironmentsResponse
	{
		
		/// <summary>
		/// Environments. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public Environment[] Environments { get; set; }
		
		/// <summary>
		/// A Execution id Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// A History id. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// A continuation token to resume the query at the next item. Will only be set if there are more Environments to fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A Project id. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExecutionsResponse
	{
		
		/// <summary>
		/// Executions. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executions")]
		public Execution[] Executions { get; set; }
		
		/// <summary>
		/// A continuation token to resume the query at the next item. Will only be set if there are more Executions to fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for HistoryService.List
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListHistoriesResponse
	{
		
		/// <summary>
		/// Histories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histories")]
		public History[] Histories { get; set; }
		
		/// <summary>
		/// A continuation token to resume the query at the next item. Will only be set if there are more histories to fetch. Tokens are valid for up to one hour from the time of the first list request. For instance, if you make a list request at 1PM and use the token from this first request 10 minutes later, the token from this second response will only be valid for 50 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPerfSampleSeriesResponse
	{
		
		/// <summary>
		/// The resulting PerfSampleSeries sorted by id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perfSampleSeries")]
		public PerfSampleSeries[] PerfSampleSeries { get; set; }
	}
	
	/// <summary>
	/// Resource representing a collection of performance samples (or data points)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerfSampleSeries
	{
		
		/// <summary>
		/// Encapsulates the metadata for basic sample series represented by a line chart
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicPerfSampleSeries")]
		public BasicPerfSampleSeries BasicPerfSampleSeries { get; set; }
		
		/// <summary>
		/// A tool results execution ID. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// A tool results history ID. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// The cloud project @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// A sample series id @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleSeriesId")]
		public string SampleSeriesId { get; set; }
		
		/// <summary>
		/// A tool results step ID. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPerfSamplesResponse
	{
		
		/// <summary>
		/// Optional, returned if result size exceeds the page size specified in the request (or the default page size, 500, if unspecified). It indicates the last sample timestamp to be used as page_token in subsequent request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perfSamples")]
		public PerfSample[] PerfSamples { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListScreenshotClustersResponse
	{
		
		/// <summary>
		/// The set of clusters associated with an execution Always set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusters")]
		public ScreenshotCluster[] Clusters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScreenshotCluster
	{
		
		/// <summary>
		/// A string that describes the activity of every screen in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity")]
		public string Activity { get; set; }
		
		/// <summary>
		/// A unique identifier for the cluster. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyScreen")]
		public Screen KeyScreen { get; set; }
		
		/// <summary>
		/// Full list of screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screens")]
		public Screen[] Screens { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Screen
	{
		
		/// <summary>
		/// File reference of the png file. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileReference")]
		public string FileReference { get; set; }
		
		/// <summary>
		/// Locale of the device that the screenshot was taken on. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Model of the device that the screenshot was taken on. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// OS version of the device that the screenshot was taken on. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Response message for AccessibilityService.ListStepAccessibilityClusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStepAccessibilityClustersResponse
	{
		
		/// <summary>
		/// A sequence of accessibility suggestions, grouped into clusters. Within the sequence, clusters that belong to the same SuggestionCategory should be adjacent. Within each category, clusters should be ordered by their SuggestionPriority (ERRORs first). The categories should be ordered by their highest priority cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusters")]
		public SuggestionClusterProto[] Clusters { get; set; }
		
		/// <summary>
		/// A full resource name of the step. For example, projects/my-project/histories/bh.1234567890abcdef/executions/ 1234567890123456789/steps/bs.1234567890abcdef Always presents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A set of similar suggestions that we suspect are closely related. This proto and most of the nested protos are branched from foxandcrown.prelaunchreport.service.SuggestionClusterProto, replacing PLR's dependencies with FTL's.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuggestionClusterProto
	{
		
		/// <summary>
		/// Category in which these types of suggestions should appear. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<SuggestionClusterProtoCategory> Category { get; set; }
		
		/// <summary>
		/// A sequence of suggestions. All of the suggestions within a cluster must have the same SuggestionPriority and belong to the same SuggestionCategory. Suggestions with the same screenshot URL should be adjacent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestions")]
		public SuggestionProto[] Suggestions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SuggestionClusterProtoCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknownCategory = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contentLabeling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		touchTargetSize = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lowContrast = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		implementation = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuggestionProto
	{
		
		/// <summary>
		/// Reference to a help center article concerning this type of suggestion. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpUrl")]
		public string HelpUrl { get; set; }
		
		/// <summary>
		/// IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longMessage")]
		public SafeHtmlProto LongMessage { get; set; }
		
		/// <summary>
		/// Relative importance of a suggestion. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<SuggestionProtoPriority> Priority { get; set; }
		
		/// <summary>
		/// A somewhat human readable identifier of the source view, if it does not have a resource_name. This is a path within the accessibility hierarchy, an element with resource name; similar to an XPath.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pseudoResourceId")]
		public string PseudoResourceId { get; set; }
		
		/// <summary>
		/// A rectangular region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public RegionProto Region { get; set; }
		
		/// <summary>
		/// Reference to a view element, identified by its resource name, if it has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// ID of the screen for the suggestion. It is used for getting the corresponding screenshot path. For example, screen_id "1" corresponds to "1.png" file in GCS. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenId")]
		public string ScreenId { get; set; }
		
		/// <summary>
		/// Relative importance of a suggestion as compared with other suggestions that have the same priority and category. This is a meaningless value that can be used to order suggestions that are in the same category and have the same priority. The larger values have higher priority (i.e., are more important). Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryPriority")]
		public System.Nullable<System.Double> SecondaryPriority { get; set; }
		
		/// <summary>
		/// IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortMessage")]
		public SafeHtmlProto ShortMessage { get; set; }
		
		/// <summary>
		/// General title for the suggestion, in the user's language, without markup. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SafeHtmlProto
	{
		
		/// <summary>
		/// IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateDoNotAccessOrElseSafeHtmlWrappedValue")]
		public string PrivateDoNotAccessOrElseSafeHtmlWrappedValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SuggestionProtoPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknownPriority = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		info = 3,
	}
	
	/// <summary>
	/// A rectangular region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionProto
	{
		
		/// <summary>
		/// The height, in pixels. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightPx")]
		public System.Nullable<System.Int32> HeightPx { get; set; }
		
		/// <summary>
		/// The left side of the rectangle, in pixels. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leftPx")]
		public System.Nullable<System.Int32> LeftPx { get; set; }
		
		/// <summary>
		/// The top of the rectangle, in pixels. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topPx")]
		public System.Nullable<System.Int32> TopPx { get; set; }
		
		/// <summary>
		/// The width, in pixels. Always set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthPx")]
		public System.Nullable<System.Int32> WidthPx { get; set; }
	}
	
	/// <summary>
	/// A response containing the thumbnails in a step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStepThumbnailsResponse
	{
		
		/// <summary>
		/// A continuation token to resume the query at the next item. If set, indicates that there are more thumbnails to read, by calling list again with this value in the page_token field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of image data. Images are returned in a deterministic order; they are ordered by these factors, in order of importance: * First, by their associated test case. Images without a test case are considered greater than images with one. * Second, by their creation time. Images without a creation time are greater than images with one. * Third, by the order in which they were added to the step (by calls to CreateStep or UpdateStep).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnails")]
		public Image[] Thumbnails { get; set; }
	}
	
	/// <summary>
	/// Response message for StepService.List.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStepsResponse
	{
		
		/// <summary>
		/// A continuation token to resume the query at the next item. If set, indicates that there are more steps to read, by calling list again with this value in the page_token field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public Step[] Steps { get; set; }
	}
	
	/// <summary>
	/// A Step represents a single operation performed as part of Execution. A step can be used to represent the execution of a tool ( for example a test runner execution or an execution of a compiler). Steps can overlap (for instance two steps might have the same start time if some operations are done in parallel). Here is an example, let's consider that we have a continuous build is executing a test runner for each iteration. The workflow would look like: - user creates a Execution with id 1 - user creates a TestExecutionStep with id 100 for Execution 1 - user update TestExecutionStep with id 100 to add a raw xml log + the service parses the xml logs and returns a TestExecutionStep with updated TestResult(s). - user update the status of TestExecutionStep with id 100 to COMPLETE A Step can be updated until its state is set to COMPLETE at which points it becomes immutable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Step
	{
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public Timestamp CompletionTime { get; set; }
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public Timestamp CreationTime { get; set; }
		
		/// <summary>
		/// A description of this tool For example: mvn clean package -D skipTests=true - In response: present if set by create/update request - In create/update request: optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceUsageDuration")]
		public Duration DeviceUsageDuration { get; set; }
		
		/// <summary>
		/// If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = ['attempt', 'device']` then a step must define values for those dimensions, eg. `dimension_value = ['attempt': '1', 'device': 'Nexus 6']` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = ['attempt': '', 'device': 'Nexus 6']` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValue")]
		public StepDimensionValueEntry[] DimensionValue { get; set; }
		
		/// <summary>
		/// Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails. - In response: always set - In create/update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasImages")]
		public System.Nullable<System.Boolean> HasImages { get; set; }
		
		/// <summary>
		/// Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don't accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key's value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public StepLabelsEntry[] Labels { get; set; }
		
		/// <summary>
		/// Details when multiple steps are run with the same configuration as a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiStep")]
		public MultiStep MultiStep { get; set; }
		
		/// <summary>
		/// A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name. - In response: always set - In create request: always set - In update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Interprets a result so that humans and machines can act on it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outcome")]
		public Outcome Outcome { get; set; }
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runDuration")]
		public Duration RunDuration { get; set; }
		
		/// <summary>
		/// The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public MergedResultState State { get; set; }
		
		/// <summary>
		/// A unique identifier within a Execution for this Step. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response: always set - In create/update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
		
		/// <summary>
		/// A step that represents running tests. It accepts ant-junit xml files which will be parsed into structured test results by the service. Xml file paths are updated in order to append more files, however they can't be deleted. Users can also add test results manually by using the test_result field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testExecutionStep")]
		public TestExecutionStep TestExecutionStep { get; set; }
		
		/// <summary>
		/// Generic tool step to be used for binaries we do not explicitly support. For example: running cp to copy artifacts from one location to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolExecutionStep")]
		public ToolExecutionStep ToolExecutionStep { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepDimensionValueEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StepLabelsEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Details when multiple steps are run with the same configuration as a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiStep
	{
		
		/// <summary>
		/// Unique int given to each step. Ranges from 0(inclusive) to total number of steps(exclusive). The primary step is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multistepNumber")]
		public System.Nullable<System.Int32> MultistepNumber { get; set; }
		
		/// <summary>
		/// Stores rollup test status of multiple steps that were run as a group and outcome of each individual step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryStep")]
		public PrimaryStep PrimaryStep { get; set; }
		
		/// <summary>
		/// Step Id of the primary (original) step, which might be this step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryStepId")]
		public string PrimaryStepId { get; set; }
	}
	
	/// <summary>
	/// Stores rollup test status of multiple steps that were run as a group and outcome of each individual step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrimaryStep
	{
		
		/// <summary>
		/// Step Id and outcome of each individual step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualOutcome")]
		public IndividualOutcome[] IndividualOutcome { get; set; }
		
		/// <summary>
		/// Rollup test status of multiple steps that were run with the same configuration as a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rollUp")]
		public OutcomeSummary RollUp { get; set; }
	}
	
	/// <summary>
	/// A step that represents running tests. It accepts ant-junit xml files which will be parsed into structured test results by the service. Xml file paths are updated in order to append more files, however they can't be deleted. Users can also add test results manually by using the test_result field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestExecutionStep
	{
		
		/// <summary>
		/// Issues observed during the test execution. For example, if the mobile app under test crashed during the test, the error message and the stack trace content can be recorded here to assist debugging. - In response: present if set by create or update - In create/update request: optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testIssues")]
		public TestIssue[] TestIssues { get; set; }
		
		/// <summary>
		/// List of test suite overview contents. This could be parsed from xUnit XML log by server, or uploaded directly by user. This references should only be called when test suites are fully parsed or uploaded. The maximum allowed number of test suite overviews per step is 1000. - In response: always set - In create request: optional - In update request: never (use publishXunitXmlFiles custom method instead)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSuiteOverviews")]
		public TestSuiteOverview[] TestSuiteOverviews { get; set; }
		
		/// <summary>
		/// Testing timing break down to know phases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testTiming")]
		public TestTiming TestTiming { get; set; }
		
		/// <summary>
		/// An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolExecution")]
		public ToolExecution ToolExecution { get; set; }
	}
	
	/// <summary>
	/// An issue detected occurring during a test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestIssue
	{
		
		/// <summary>
		/// Category of issue. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<TestIssueCategory> Category { get; set; }
		
		/// <summary>
		/// A brief human-readable message describing the issue. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Severity of issue. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<TestIssueSeverity> Severity { get; set; }
		
		/// <summary>
		/// A stacktrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
		
		/// <summary>
		/// Type of issue. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TestIssueType> Type { get; set; }
		
		/// <summary>
		///  `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++. Foo foo = ...; Any any; any.PackFrom(foo); ... if (any.UnpackTo(&foo)) { ... } Example 2: Pack and unpack a message in Java. Foo foo = ...; Any any = Any.pack(foo); ... if (any.is(Foo.class)) { foo = any.unpack(Foo.class); } Example 3: Pack and unpack a message in Python. foo = Foo(...) any = Any() any.Pack(foo) ... if any.Is(Foo.DESCRIPTOR): any.Unpack(foo) ... Example 4: Pack and unpack a message in Go foo := &pb.Foo{...} any, err := ptypes.MarshalAny(foo) ... foo := &pb.Foo{} if err := ptypes.UnmarshalAny(any, foo); err != nil { ... } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example "foo.bar.com/x/y.z" will yield type name "y.z". # JSON The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example: package google.profile; message Person { string first_name = 1; string last_name = 2; } { "@type": "type.googleapis.com/google.profile.Person", "firstName": , "lastName": } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message google.protobuf.Duration): { "@type": "type.googleapis.com/google.protobuf.Duration", "value": "1.212s" }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public Any Warning { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestIssueCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unspecifiedCategory = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		common = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		robo = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestIssueSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unspecifiedSeverity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		info = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		suggestion = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		severe = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestIssueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unspecifiedType = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fatalException = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nativeCrash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anr = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unusedRoboDirective = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		compatibleWithOrchestrator = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launcherActivityNotFound = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		startActivityNotFound = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		incompleteRoboScriptExecution = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completeRoboScriptExecution = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failedToInstall = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		availableDeepLinks = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nonSdkApiUsageViolation = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nonSdkApiUsageReport = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		encounteredNonAndroidUiWidgetScreen = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		encounteredLoginScreen = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performedGoogleLogin = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iosException = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iosCrash = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performedMonkeyActions = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		usedRoboDirective = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		usedRoboIgnoreDirective = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insufficientCoverage = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inAppPurchases = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		crashDialogError = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uiElementsTooDeep = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blankScreen = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		overlappingUiElements = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unityException = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deviceOutOfMemory = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		logcatCollectionError = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detectedAppSplashScreen = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		assetIssue = 32,
	}
	
	/// <summary>
	/// Testing timing break down to know phases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestTiming
	{
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testProcessDuration")]
		public Duration TestProcessDuration { get; set; }
	}
	
	/// <summary>
	/// An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ToolExecution
	{
		
		/// <summary>
		/// The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commandLineArguments")]
		public string[] CommandLineArguments { get; set; }
		
		/// <summary>
		/// Exit code from a tool execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public ToolExitCode ExitCode { get; set; }
		
		/// <summary>
		/// References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolLogs")]
		public FileReference[] ToolLogs { get; set; }
		
		/// <summary>
		/// References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolOutputs")]
		public ToolOutputReference[] ToolOutputs { get; set; }
	}
	
	/// <summary>
	/// Exit code from a tool execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ToolExitCode
	{
		
		/// <summary>
		/// Tool execution exit code. A value of 0 means that the execution was successful. - In response: always set - In create/update request: always set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	/// <summary>
	/// Generic tool step to be used for binaries we do not explicitly support. For example: running cp to copy artifacts from one location to another.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ToolExecutionStep
	{
		
		/// <summary>
		/// An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolExecution")]
		public ToolExecution ToolExecution { get; set; }
	}
	
	/// <summary>
	/// Response message for StepService.ListTestCases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestCasesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of test cases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testCases")]
		public TestCase[] TestCases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestCase
	{
		
		/// <summary>
		///  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elapsedTime")]
		public Duration ElapsedTime { get; set; }
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public Timestamp EndTime { get; set; }
		
		/// <summary>
		/// Why the test case was skipped. Present only for skipped test case
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippedMessage")]
		public string SkippedMessage { get; set; }
		
		/// <summary>
		/// The stack trace details if the test case failed or encountered an error. The maximum size of the stack traces is 100KiB, beyond which the stack track will be truncated. Zero if the test case passed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTraces")]
		public StackTrace[] StackTraces { get; set; }
		
		/// <summary>
		/// A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public Timestamp StartTime { get; set; }
		
		/// <summary>
		/// The status of the test case. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TestCaseStatus> Status { get; set; }
		
		/// <summary>
		/// A unique identifier within a Step for this Test Case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testCaseId")]
		public string TestCaseId { get; set; }
		
		/// <summary>
		/// A reference to a test case. Test case references are canonically ordered lexicographically by these three factors: * First, by test_suite_name. * Second, by class_name. * Third, by name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testCaseReference")]
		public TestCaseReference TestCaseReference { get; set; }
		
		/// <summary>
		/// References to opaque files of any format output by the tool execution. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toolOutputs")]
		public ToolOutputReference[] ToolOutputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestCaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		skipped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flaky = 4,
	}
	
	/// <summary>
	/// A warning that there were issues in logcat collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogcatCollectionError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemoryInfo
	{
		
		/// <summary>
		/// Maximum memory that can be allocated to the process in KiB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryCapInKibibyte")]
		public string MemoryCapInKibibyte { get; set; }
		
		/// <summary>
		/// Total memory available on the device in KiB
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryTotalInKibibyte")]
		public string MemoryTotalInKibibyte { get; set; }
	}
	
	/// <summary>
	/// Additional details for a native crash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NativeCrash
	{
		
		/// <summary>
		/// A stacktrace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackTrace")]
		public StackTrace StackTrace { get; set; }
	}
	
	/// <summary>
	/// A non-sdk API and examples of it being called along with other metadata See https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonSdkApi
	{
		
		/// <summary>
		/// The signature of the Non-SDK API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiSignature")]
		public string ApiSignature { get; set; }
		
		/// <summary>
		/// Example stack traces of this API being called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exampleStackTraces")]
		public string[] ExampleStackTraces { get; set; }
		
		/// <summary>
		/// Optional debugging insights for non-SDK API violations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insights")]
		public NonSdkApiInsight[] Insights { get; set; }
		
		/// <summary>
		/// The total number of times this API was observed to have been called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invocationCount")]
		public System.Nullable<System.Int32> InvocationCount { get; set; }
		
		/// <summary>
		/// Which list this API appears on
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public System.Nullable<NonSdkApiList> List { get; set; }
	}
	
	/// <summary>
	/// Non-SDK API insights (to address debugging solutions).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonSdkApiInsight
	{
		
		/// <summary>
		/// Optional sample stack traces, for which this insight applies (there should be at least one).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exampleTraceMessages")]
		public string[] ExampleTraceMessages { get; set; }
		
		/// <summary>
		/// A unique ID, to be used for determining the effectiveness of this particular insight in the context of a matcher. (required)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matcherId")]
		public string MatcherId { get; set; }
		
		/// <summary>
		/// This insight indicates that the hidden API usage originates from a Google-provided library. Users need not take any action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingGoogleUpdateInsight")]
		public PendingGoogleUpdateInsight PendingGoogleUpdateInsight { get; set; }
		
		/// <summary>
		/// This insight is a recommendation to upgrade a given library to the specified version, in order to avoid dependencies on non-SDK APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeInsight")]
		public UpgradeInsight UpgradeInsight { get; set; }
	}
	
	/// <summary>
	/// This insight indicates that the hidden API usage originates from a Google-provided library. Users need not take any action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PendingGoogleUpdateInsight
	{
		
		/// <summary>
		/// The name of the Google-provided library with the non-SDK API dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameOfGoogleLibrary")]
		public string NameOfGoogleLibrary { get; set; }
	}
	
	/// <summary>
	/// This insight is a recommendation to upgrade a given library to the specified version, in order to avoid dependencies on non-SDK APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeInsight
	{
		
		/// <summary>
		/// The name of the package to be upgraded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The suggested version to upgrade to. Optional: In case we are not sure which version solves this problem
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeToVersion")]
		public string UpgradeToVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NonSdkApiList
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREY_MAX_O = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREY_MAX_P = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREY_MAX_Q = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREY_MAX_R = 7,
	}
	
	/// <summary>
	/// Additional details for a non-sdk API usage violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonSdkApiUsageViolation
	{
		
		/// <summary>
		/// Signatures of a subset of those hidden API's.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiSignatures")]
		public string[] ApiSignatures { get; set; }
		
		/// <summary>
		/// Total number of unique hidden API's accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueApis")]
		public System.Nullable<System.Int32> UniqueApis { get; set; }
	}
	
	/// <summary>
	/// Contains a summary and examples of non-sdk API usage violations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonSdkApiUsageViolationReport
	{
		
		/// <summary>
		/// Examples of the detected API usages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exampleApis")]
		public NonSdkApi[] ExampleApis { get; set; }
		
		/// <summary>
		/// Minimum API level required for the application to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minSdkVersion")]
		public System.Nullable<System.Int32> MinSdkVersion { get; set; }
		
		/// <summary>
		/// Specifies the API Level on which the application is designed to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSdkVersion")]
		public System.Nullable<System.Int32> TargetSdkVersion { get; set; }
		
		/// <summary>
		/// Total number of unique Non-SDK API's accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueApis")]
		public System.Nullable<System.Int32> UniqueApis { get; set; }
	}
	
	/// <summary>
	/// A warning that Robo encountered a screen that has overlapping clickable elements; this may indicate a potential UI issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverlappingUIElements
	{
		
		/// <summary>
		/// Resource names of the overlapping screen elements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string[] ResourceName { get; set; }
		
		/// <summary>
		/// The screen id of the elements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenId")]
		public string ScreenId { get; set; }
	}
	
	/// <summary>
	/// Encapsulates performance environment info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerfEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpuInfo")]
		public CPUInfo CpuInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoryInfo")]
		public MemoryInfo MemoryInfo { get; set; }
	}
	
	/// <summary>
	/// A summary of perf metrics collected and performance environment info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerfMetricsSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="appStartTime")]
		public AppStartTime AppStartTime { get; set; }
		
		/// <summary>
		/// A tool results execution ID. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Graphics statistics for the App. The information is collected from 'adb shell dumpsys graphicsstats'. For more info see: https://developer.android.com/training/testing/performance.html Statistics will only be present for API 23+.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graphicsStats")]
		public GraphicsStats GraphicsStats { get; set; }
		
		/// <summary>
		/// A tool results history ID. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historyId")]
		public string HistoryId { get; set; }
		
		/// <summary>
		/// Encapsulates performance environment info
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perfEnvironment")]
		public PerfEnvironment PerfEnvironment { get; set; }
		
		/// <summary>
		/// Set of resource collected
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perfMetrics")]
		public BasicPerfSampleSeriesPerfMetricType[] PerfMetrics { get; set; }
		
		/// <summary>
		/// The cloud project @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// A tool results step ID. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepId")]
		public string StepId { get; set; }
	}
	
	/// <summary>
	/// A notification that Robo signed in with Google.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformedGoogleLogin
	{
	}
	
	/// <summary>
	/// A notification that Robo performed some monkey actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PerformedMonkeyActions
	{
		
		/// <summary>
		/// The total number of monkey actions performed during the crawl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalActions")]
		public System.Nullable<System.Int32> TotalActions { get; set; }
	}
	
	/// <summary>
	/// Per-project settings for the Tool Results service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectSettings
	{
		
		/// <summary>
		/// The name of the Google Cloud Storage bucket to which results are written. By default, this is unset. In update request: optional In response: optional
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultBucket")]
		public string DefaultBucket { get; set; }
		
		/// <summary>
		/// The name of the project's settings. Always of the form: projects/{project-id}/settings In update request: never set In response: always set
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request message for StepService.PublishXunitXmlFiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublishXunitXmlFilesRequest
	{
		
		/// <summary>
		/// URI of the Xunit XML files to publish. The maximum size of the file this reference is pointing to is 50MB. Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xunitXmlFiles")]
		public FileReference[] XunitXmlFiles { get; set; }
	}
	
	/// <summary>
	/// Execution stats for a user-provided Robo script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoboScriptExecution
	{
		
		/// <summary>
		/// The number of Robo script actions executed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulActions")]
		public System.Nullable<System.Int32> SuccessfulActions { get; set; }
		
		/// <summary>
		/// The total number of actions in the Robo script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalActions")]
		public System.Nullable<System.Int32> TotalActions { get; set; }
	}
	
	/// <summary>
	/// User provided intent failed to resolve to an activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartActivityNotFound
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// A warning that the screen hierarchy is deeper than the recommended threshold.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UIElementTooDeep
	{
		
		/// <summary>
		/// The depth of the screen element
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depth")]
		public System.Nullable<System.Int32> Depth { get; set; }
		
		/// <summary>
		/// The screen id of the element
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenId")]
		public string ScreenId { get; set; }
		
		/// <summary>
		/// The screen state id of the element
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenStateId")]
		public string ScreenStateId { get; set; }
	}
	
	/// <summary>
	/// Default unspecified warning.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnspecifiedWarning
	{
	}
	
	/// <summary>
	/// Additional details of an unused robodirective.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnusedRoboDirective
	{
		
		/// <summary>
		/// The name of the resource that was unused.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Additional details of a used Robo directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsedRoboDirective
	{
		
		/// <summary>
		/// The name of the resource that was used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Additional details of a used Robo directive with an ignore action. Note: This is a different scenario than unused directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsedRoboIgnoreDirective
	{
		
		/// <summary>
		/// The name of the resource that was ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists Histories for a given Project. The histories are sorted by modification time in descending order. The history_id key will be used to order the history with the same modification time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist
		/// Toolresults_projects_histories_list toolresults/v1beta3/projects/{projectId}/histories
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="filterByName">If set, only return histories with the given name. Optional.</param>
		/// <param name="pageSize">The maximum number of Histories to fetch. Default value: 20. The server will use this default if the field is not set or has a value of 0. Any value greater than 100 will be treated as 100. Optional.</param>
		/// <param name="pageToken">A continuation token to resume the query at the next item. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<ListHistoriesResponse> Toolresults_projects_histories_listAsync(string projectId, string filterByName, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories&filterByName=" + (filterByName==null? "" : System.Uri.EscapeDataString(filterByName))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListHistoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a History. The returned History will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing project does not exist
		/// Toolresults_projects_histories_create toolresults/v1beta3/projects/{projectId}/histories
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="requestId">A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.</param>
		/// <returns>Successful response</returns>
		public async Task<History> Toolresults_projects_histories_createAsync(string projectId, string requestId, History requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<History>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a History. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist
		/// Toolresults_projects_histories_get toolresults/v1beta3/projects/{projectId}/histories/{historyId}
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<History> Toolresults_projects_histories_getAsync(string projectId, string historyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<History>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Executions for a given History. The executions are sorted by creation_time in descending order. The execution_id key will be used to order the executions with the same creation_time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist
		/// Toolresults_projects_histories_executions_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="pageSize">The maximum number of Executions to fetch. Default value: 25. The server will use this default if the field is not set or has a value of 0. Optional.</param>
		/// <param name="pageToken">A continuation token to resume the query at the next item. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<ListExecutionsResponse> Toolresults_projects_histories_executions_listAsync(string projectId, string historyId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Execution. The returned Execution will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist
		/// Toolresults_projects_histories_executions_create toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="requestId">A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Toolresults_projects_histories_executions_createAsync(string projectId, string historyId, string requestId, Execution requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Execution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets an Execution. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Execution does not exist
		/// Toolresults_projects_histories_executions_get toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">An Execution id. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Toolresults_projects_histories_executions_getAsync(string projectId, string historyId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Execution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Execution with the supplied partial entity. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal - NOT_FOUND - if the containing History does not exist
		/// Toolresults_projects_histories_executions_patch toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">Required.</param>
		/// <param name="executionId">Required.</param>
		/// <param name="requestId">A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.</param>
		/// <returns>Successful response</returns>
		public async Task<Execution> Toolresults_projects_histories_executions_patchAsync(string projectId, string historyId, string executionId, string requestId, Execution requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Execution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Screenshot Clusters Returns the list of screenshot clusters corresponding to an execution. Screenshot clusters are created after the execution is finished. Clusters are created from a set of screenshots. Between any two screenshots, a matching score is calculated based off their metadata that determines how similar they are. Screenshots are placed in the cluster that has screens which have the highest matching scores.
		/// Toolresults_projects_histories_executions_clusters_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">An Execution id. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<ListScreenshotClustersResponse> Toolresults_projects_histories_executions_clusters_listAsync(string projectId, string historyId, string executionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/clusters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListScreenshotClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a single screenshot cluster by its ID
		/// Toolresults_projects_histories_executions_clusters_get toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">An Execution id. Required.</param>
		/// <param name="clusterId">A Cluster id Required.</param>
		/// <returns>Successful response</returns>
		public async Task<ScreenshotCluster> Toolresults_projects_histories_executions_clusters_getAsync(string projectId, string historyId, string executionId, string clusterId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/clusters/"+ (clusterId==null? "" : System.Uri.EscapeDataString(clusterId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScreenshotCluster>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Environments for a given Execution. The Environments are sorted by display name. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Execution does not exist
		/// Toolresults_projects_histories_executions_environments_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments
		/// </summary>
		/// <param name="projectId">Required. A Project id.</param>
		/// <param name="historyId">Required. A History id.</param>
		/// <param name="executionId">Required. An Execution id.</param>
		/// <param name="pageSize">The maximum number of Environments to fetch. Default value: 25. The server will use this default if the field is not set or has a value of 0.</param>
		/// <param name="pageToken">A continuation token to resume the query at the next item.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEnvironmentsResponse> Toolresults_projects_histories_executions_environments_listAsync(string projectId, string historyId, string executionId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/environments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEnvironmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an Environment. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Environment does not exist
		/// Toolresults_projects_histories_executions_environments_get toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments/{environmentId}
		/// </summary>
		/// <param name="projectId">Required. A Project id.</param>
		/// <param name="historyId">Required. A History id.</param>
		/// <param name="executionId">Required. An Execution id.</param>
		/// <param name="environmentId">Required. An Environment id.</param>
		/// <returns>Successful response</returns>
		public async Task<Environment> Toolresults_projects_histories_executions_environments_getAsync(string projectId, string historyId, string executionId, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/environments/"+ (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Environment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Steps for a given Execution. The steps are sorted by creation_time in descending order. The step_id key will be used to order the steps with the same creation_time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if an attempt is made to list the children of a nonexistent Step - NOT_FOUND - if the containing Execution does not exist
		/// Toolresults_projects_histories_executions_steps_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">A Execution id. Required.</param>
		/// <param name="pageSize">The maximum number of Steps to fetch. Default value: 25. The server will use this default if the field is not set or has a value of 0. Optional.</param>
		/// <param name="pageToken">A continuation token to resume the query at the next item. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<ListStepsResponse> Toolresults_projects_histories_executions_steps_listAsync(string projectId, string historyId, string executionId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStepsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Step. The returned Step will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist
		/// Toolresults_projects_histories_executions_steps_create toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps
		/// </summary>
		/// <param name="projectId">Required. A Project id.</param>
		/// <param name="historyId">Required. A History id.</param>
		/// <param name="executionId">Required. An Execution id.</param>
		/// <param name="requestId">A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.</param>
		/// <returns>Successful response</returns>
		public async Task<Step> Toolresults_projects_histories_executions_steps_createAsync(string projectId, string historyId, string executionId, string requestId, Step requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Step>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a Step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Step does not exist
		/// Toolresults_projects_histories_executions_steps_get toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">A Execution id. Required.</param>
		/// <param name="stepId">A Step id. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<Step> Toolresults_projects_histories_executions_steps_getAsync(string projectId, string historyId, string executionId, string stepId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Step>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Step with the supplied partial entity. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal (e.g try to upload a duplicate xml file), if the updated step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist
		/// Toolresults_projects_histories_executions_steps_patch toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">A Execution id. Required.</param>
		/// <param name="stepId">A Step id. Required.</param>
		/// <param name="requestId">A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended.</param>
		/// <returns>Successful response</returns>
		public async Task<Step> Toolresults_projects_histories_executions_steps_patchAsync(string projectId, string historyId, string executionId, string stepId, string requestId, Step requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Step>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a PerfMetricsSummary. May return any of the following error code(s): - NOT_FOUND - The specified PerfMetricsSummary does not exist
		/// Toolresults_projects_histories_executions_steps_getPerfMetricsSummary toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary
		/// </summary>
		/// <param name="projectId">The cloud project</param>
		/// <param name="historyId">A tool results history ID.</param>
		/// <param name="executionId">A tool results execution ID.</param>
		/// <param name="stepId">A tool results step ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PerfMetricsSummary> Toolresults_projects_histories_executions_steps_getPerfMetricsSummaryAsync(string projectId, string historyId, string executionId, string stepId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/perfMetricsSummary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PerfMetricsSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a PerfMetricsSummary resource. Returns the existing one if it has already been created. May return any of the following error code(s): - NOT_FOUND - The containing Step does not exist
		/// Toolresults_projects_histories_executions_steps_perfMetricsSummary_create toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary
		/// </summary>
		/// <param name="projectId">The cloud project</param>
		/// <param name="historyId">A tool results history ID.</param>
		/// <param name="executionId">A tool results execution ID.</param>
		/// <param name="stepId">A tool results step ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PerfMetricsSummary> Toolresults_projects_histories_executions_steps_perfMetricsSummary_createAsync(string projectId, string historyId, string executionId, string stepId, PerfMetricsSummary requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/perfMetricsSummary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PerfMetricsSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists PerfSampleSeries for a given Step. The request provides an optional filter which specifies one or more PerfMetricsType to include in the result; if none returns all. The resulting PerfSampleSeries are sorted by ids. May return any of the following canonical error codes: - NOT_FOUND - The containing Step does not exist
		/// Toolresults_projects_histories_executions_steps_perfSampleSeries_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries
		/// </summary>
		/// <param name="projectId">The cloud project</param>
		/// <param name="historyId">A tool results history ID.</param>
		/// <param name="executionId">A tool results execution ID.</param>
		/// <param name="stepId">A tool results step ID.</param>
		/// <param name="filter">Specify one or more PerfMetricType values such as CPU to filter the result</param>
		/// <returns>Successful response</returns>
		public async Task<ListPerfSampleSeriesResponse> Toolresults_projects_histories_executions_steps_perfSampleSeries_listAsync(string projectId, string historyId, string executionId, string stepId, BasicPerfSampleSeriesPerfMetricType[] filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/perfSampleSeries&"+string.Join("&", filter.Select(z => $"filter={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPerfSampleSeriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a PerfSampleSeries. May return any of the following error code(s): - ALREADY_EXISTS - PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist
		/// Toolresults_projects_histories_executions_steps_perfSampleSeries_create toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries
		/// </summary>
		/// <param name="projectId">The cloud project</param>
		/// <param name="historyId">A tool results history ID.</param>
		/// <param name="executionId">A tool results execution ID.</param>
		/// <param name="stepId">A tool results step ID.</param>
		/// <returns>Successful response</returns>
		public async Task<PerfSampleSeries> Toolresults_projects_histories_executions_steps_perfSampleSeries_createAsync(string projectId, string historyId, string executionId, string stepId, PerfSampleSeries requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/perfSampleSeries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PerfSampleSeries>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a PerfSampleSeries. May return any of the following error code(s): - NOT_FOUND - The specified PerfSampleSeries does not exist
		/// Toolresults_projects_histories_executions_steps_perfSampleSeries_get toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}
		/// </summary>
		/// <param name="projectId">The cloud project</param>
		/// <param name="historyId">A tool results history ID.</param>
		/// <param name="executionId">A tool results execution ID.</param>
		/// <param name="stepId">A tool results step ID.</param>
		/// <param name="sampleSeriesId">A sample series id</param>
		/// <returns>Successful response</returns>
		public async Task<PerfSampleSeries> Toolresults_projects_histories_executions_steps_perfSampleSeries_getAsync(string projectId, string historyId, string executionId, string stepId, string sampleSeriesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/perfSampleSeries/"+ (sampleSeriesId==null? "" : System.Uri.EscapeDataString(sampleSeriesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PerfSampleSeries>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Performance Samples of a given Sample Series - The list results are sorted by timestamps ascending - The default page size is 500 samples; and maximum size allowed 5000 - The response token indicates the last returned PerfSample timestamp - When the results size exceeds the page size, submit a subsequent request including the page token to return the rest of the samples up to the page limit May return any of the following canonical error codes: - OUT_OF_RANGE - The specified request page_token is out of valid range - NOT_FOUND - The containing PerfSampleSeries does not exist
		/// Toolresults_projects_histories_executions_steps_perfSampleSeries_samples_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples
		/// </summary>
		/// <param name="projectId">The cloud project</param>
		/// <param name="historyId">A tool results history ID.</param>
		/// <param name="executionId">A tool results execution ID.</param>
		/// <param name="stepId">A tool results step ID.</param>
		/// <param name="sampleSeriesId">A sample series id</param>
		/// <param name="pageSize">The default page size is 500 samples, and the maximum size is 5000. If the page_size is greater than 5000, the effective page size will be 5000</param>
		/// <param name="pageToken">Optional, the next_page_token returned in the previous response</param>
		/// <returns>Successful response</returns>
		public async Task<ListPerfSamplesResponse> Toolresults_projects_histories_executions_steps_perfSampleSeries_samples_listAsync(string projectId, string historyId, string executionId, string stepId, string sampleSeriesId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/perfSampleSeries/"+ (sampleSeriesId==null? "" : System.Uri.EscapeDataString(sampleSeriesId))+"/samples&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPerfSamplesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a batch of PerfSamples - a client can submit multiple batches of Perf Samples through repeated calls to this method in order to split up a large request payload - duplicates and existing timestamp entries will be ignored. - the batch operation may partially succeed - the set of elements successfully inserted is returned in the response (omits items which already existed in the database). May return any of the following canonical error codes: - NOT_FOUND - The containing PerfSampleSeries does not exist
		/// Toolresults_projects_histories_executions_steps_perfSampleSeries_samples_batchCreate toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate
		/// </summary>
		/// <param name="projectId">The cloud project</param>
		/// <param name="historyId">A tool results history ID.</param>
		/// <param name="executionId">A tool results execution ID.</param>
		/// <param name="stepId">A tool results step ID.</param>
		/// <param name="sampleSeriesId">A sample series id</param>
		/// <returns>Successful response</returns>
		public async Task<BatchCreatePerfSamplesResponse> Toolresults_projects_histories_executions_steps_perfSampleSeries_samples_batchCreateAsync(string projectId, string historyId, string executionId, string stepId, string sampleSeriesId, BatchCreatePerfSamplesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/perfSampleSeries/"+ (sampleSeriesId==null? "" : System.Uri.EscapeDataString(sampleSeriesId))+"/samples:batchCreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchCreatePerfSamplesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Test Cases attached to a Step. Experimental test cases API. Still in active development. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Step does not exist
		/// Toolresults_projects_histories_executions_steps_testCases_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">A Execution id Required.</param>
		/// <param name="stepId">A Step id. Note: This step must include a TestExecutionStep. Required.</param>
		/// <param name="pageSize">The maximum number of TestCases to fetch. Default value: 100. The server will use this default if the field is not set or has a value of 0. Optional.</param>
		/// <param name="pageToken">A continuation token to resume the query at the next item. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTestCasesResponse> Toolresults_projects_histories_executions_steps_testCases_listAsync(string projectId, string historyId, string executionId, string stepId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/testCases&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTestCasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details of a Test Case for a Step. Experimental test cases API. Still in active development. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Test Case does not exist
		/// Toolresults_projects_histories_executions_steps_testCases_get toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases/{testCaseId}
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">A Execution id Required.</param>
		/// <param name="stepId">A Step id. Note: This step must include a TestExecutionStep. Required.</param>
		/// <param name="testCaseId">A Test Case id. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<TestCase> Toolresults_projects_histories_executions_steps_testCases_getAsync(string projectId, string historyId, string executionId, string stepId, string testCaseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/testCases/"+ (testCaseId==null? "" : System.Uri.EscapeDataString(testCaseId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists thumbnails of images attached to a step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from the project, or from any of the images - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the step does not exist, or if any of the images do not exist
		/// Toolresults_projects_histories_executions_steps_thumbnails_list toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">An Execution id. Required.</param>
		/// <param name="stepId">A Step id. Required.</param>
		/// <param name="pageSize">The maximum number of thumbnails to fetch. Default value: 50. The server will use this default if the field is not set or has a value of 0. Optional.</param>
		/// <param name="pageToken">A continuation token to resume the query at the next item. Optional.</param>
		/// <returns>Successful response</returns>
		public async Task<ListStepThumbnailsResponse> Toolresults_projects_histories_executions_steps_thumbnails_listAsync(string projectId, string historyId, string executionId, string stepId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+"/thumbnails&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStepThumbnailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Publish xml files to an existing Step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal, e.g. try to upload a duplicate xml file or a file too large. - NOT_FOUND - if the containing Execution does not exist
		/// Toolresults_projects_histories_executions_steps_publishXunitXmlFiles toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <param name="historyId">A History id. Required.</param>
		/// <param name="executionId">A Execution id. Required.</param>
		/// <param name="stepId">A Step id. Note: This step must include a TestExecutionStep. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<Step> Toolresults_projects_histories_executions_steps_publishXunitXmlFilesAsync(string projectId, string historyId, string executionId, string stepId, PublishXunitXmlFilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/histories/"+ (historyId==null? "" : System.Uri.EscapeDataString(historyId))+"/executions/"+ (executionId==null? "" : System.Uri.EscapeDataString(executionId))+"/steps/"+ (stepId==null? "" : System.Uri.EscapeDataString(stepId))+":publishXunitXmlFiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Step>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Tool Results settings for a project. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from project
		/// Toolresults_projects_getSettings toolresults/v1beta3/projects/{projectId}/settings
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<ProjectSettings> Toolresults_projects_getSettingsAsync(string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates resources for settings which have not yet been set. Currently, this creates a single resource: a Google Cloud Storage bucket, to be used as the default bucket for this project. The bucket is created in an FTL-own storage project. Except for in rare cases, calling this method in parallel from multiple clients will only create a single bucket. In order to avoid unnecessary storage charges, the bucket is configured to automatically delete objects older than 90 days. The bucket is created with the following permissions: - Owner access for owners of central storage project (FTL-owned) - Writer access for owners/editors of customer project - Reader access for viewers of customer project The default ACL on objects created in the bucket is: - Owner access for owners of central storage project - Reader access for owners/editors/viewers of customer project See Google Cloud Storage documentation for more details. If there is already a default bucket set and the project can access the bucket, this call does nothing. However, if the project doesn't have the permission to access the bucket or the bucket is deleted, a new bucket will be created. May return any canonical error codes, including the following: - PERMISSION_DENIED - if the user is not authorized to write to project - Any error code raised by Google Cloud Storage
		/// Toolresults_projects_initializeSettings toolresults/v1beta3/projects/{projectId}:initializeSettings
		/// </summary>
		/// <param name="projectId">A Project id. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<ProjectSettings> Toolresults_projects_initializeSettingsAsync(string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+":initializeSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProjectSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists accessibility clusters for a given Step May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if the locale format is incorrect - NOT_FOUND - if the containing Step does not exist
		/// Toolresults_projects_histories_executions_steps_accessibilityClusters toolresults/v1beta3/{name}:accessibilityClusters
		/// </summary>
		/// <param name="name">A full resource name of the step. For example, projects/my-project/histories/bh.1234567890abcdef/executions/ 1234567890123456789/steps/bs.1234567890abcdef Required.</param>
		/// <param name="locale">The accepted format is the canonical Unicode format with hyphen as a delimiter. Language must be lowercase, Language Script - Capitalized, Region - UPPERCASE. See http://www.unicode.org/reports/tr35/#Unicode_locale_identifier for details. Required.</param>
		/// <returns>Successful response</returns>
		public async Task<ListStepAccessibilityClustersResponse> Toolresults_projects_histories_executions_steps_accessibilityClustersAsync(string name, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "toolresults/v1beta3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":accessibilityClusters&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStepAccessibilityClustersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
