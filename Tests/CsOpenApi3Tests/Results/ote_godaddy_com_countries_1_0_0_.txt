//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Country
	{
		
		/// <summary>
		/// The calling code prefix used for phone numbers in this country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callingCode")]
		public string CallingCode { get; set; }
		
		/// <summary>
		/// The ISO country-code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryKey")]
		public string CountryKey { get; set; }
		
		/// <summary>
		/// The localized name of the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// List of states/provinces in this country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="states")]
		public State[] States { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class State
	{
		
		/// <summary>
		/// The localized name of the state, province, or territory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The state code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateKey")]
		public string StateKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountrySummary
	{
		
		/// <summary>
		/// The calling code prefix used for phone numbers in this country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callingCode")]
		public string CallingCode { get; set; }
		
		/// <summary>
		/// The ISO country-code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryKey")]
		public string CountryKey { get; set; }
		
		/// <summary>
		/// The localized name of the country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List of the specific fields, and the errors found with their contents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ErrorField[] Fields { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Stack trace indicating where the error occurred.<br/>
		///NOTE: This attribute <strong>MAY</strong> be included for Development and Test environments.
		///However, it <strong>MUST NOT</strong> be exposed from OTE nor Production systems
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string[] Stack { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorField
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the problem with the contents of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// JSONPath referring to the field within the submitted data containing an error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorLimit
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List of the specific fields, and the errors found with their contents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ErrorField[] Fields { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Number of seconds to wait before attempting a similar request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryAfterSec")]
		public string RetryAfterSec { get; set; }
		
		/// <summary>
		/// Stack trace indicating where the error occurred.<br/>
		///NOTE: This attribute <strong>MAY</strong> be included for Development and Test environments.
		///However, it <strong>MUST NOT</strong> be exposed from OTE nor Production systems
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string[] Stack { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves summary country information for the provided marketId and filters
		/// Authorization is not required
		/// GetCountries v1/countries
		/// </summary>
		/// <param name="marketId">MarketId in which the request is being made, and for which responses should be localized</param>
		/// <param name="regionTypeId">Restrict countries to this region type; required if regionName is supplied</param>
		/// <param name="regionName">Restrict countries to this region name; required if regionTypeId is supplied</param>
		/// <param name="sort">The term to sort the result countries by.</param>
		/// <param name="order">The direction to sort the result countries by.</param>
		/// <returns>Request was successful</returns>
		public async Task<CountrySummary[]> GetCountriesAsync(string marketId, int regionTypeId, string regionName, GetCountriesSort sort, GetCountriesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/countries?marketId=" + (marketId==null? "" : System.Uri.EscapeDataString(marketId))+"&regionTypeId="+regionTypeId+"&regionName=" + (regionName==null? "" : System.Uri.EscapeDataString(regionName))+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountrySummary[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves country and summary state information for provided countryKey
		/// Authorization is not required
		/// GetCountry v1/countries/{countryKey}
		/// </summary>
		/// <param name="countryKey">The country key</param>
		/// <param name="marketId">MarketId in which the request is being made, and for which responses should be localized</param>
		/// <param name="sort">The term to sort the result country states by.</param>
		/// <param name="order">The direction to sort the result country states by.</param>
		/// <returns>Request was successful</returns>
		public async Task<Country[]> GetCountryAsync(string countryKey, string marketId, GetCountriesSort sort, GetCountriesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/countries/"+ (countryKey==null? "" : System.Uri.EscapeDataString(countryKey))+"&marketId=" + (marketId==null? "" : System.Uri.EscapeDataString(marketId))+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Country[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetCountriesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		key = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		label = 1,
	}
	
	public enum GetCountriesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		descending = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
