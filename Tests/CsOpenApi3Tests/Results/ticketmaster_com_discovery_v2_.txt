//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Event's Access Date
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDates
	{
		
		/// <summary>
		/// Boolean flag to indicate whether or not the access end date is approximated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endApproximate")]
		public System.Nullable<System.Boolean> EndApproximate { get; set; }
		
		/// <summary>
		/// Event's end access time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Boolean flag to indicate whether or not the access start date is approximated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startApproximate")]
		public System.Nullable<System.Boolean> StartApproximate { get; set; }
		
		/// <summary>
		/// Event's start access time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
	}
	
	/// <summary>
	/// Additional information for people who experience disabilities
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Accessibility
	{
		
		/// <summary>
		/// Accessibility's information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
	}
	
	/// <summary>
	/// Address
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		/// <summary>
		/// Address first line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line1")]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Address second line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Address third line
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		public string Line3 { get; set; }
	}
	
	/// <summary>
	/// Area
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Area
	{
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Attraction
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attraction
	{
		
		/// <summary>
		/// Additional information of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Attraction's classifications
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifications")]
		public Classification[] Classifications { get; set; }
		
		/// <summary>
		/// Description's of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// List of external links
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalLinks")]
		public System.Collections.Generic.Dictionary<string, ExternalLink[]> ExternalLinks { get; set; }
		
		/// <summary>
		/// Unique id of the entity in the discovery API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// Locale in which the content is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicate if this is a test entity, by default test entities won't appear in discovery API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test")]
		public System.Nullable<System.Boolean> Test { get; set; }
		
		/// <summary>
		/// Type of the entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AttractionType Type { get; set; }
		
		/// <summary>
		/// number of upcoming events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upcomingEvents")]
		public System.Collections.Generic.Dictionary<string, int> UpcomingEvents { get; set; }
		
		/// <summary>
		/// URL of a web site detail page of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Classification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Classification
	{
		
		[System.Runtime.Serialization.DataMember(Name="genre")]
		public Level Genre { get; set; }
		
		/// <summary>
		/// True if this is the entity's primary classification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// Segment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segment")]
		public Segment Segment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subGenre")]
		public Level SubGenre { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public Level SubType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Level Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Level
	{
		
		/// <summary>
		/// The ID of the classification's level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Name of the classification's level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Segment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Segment
	{
		
		/// <summary>
		/// The ID of the classification's level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Name of the classification's level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// ExternalLink
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExternalLink
	{
		
		/// <summary>
		/// An external link id is the unique identifier of a resource on a different domain or api
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An external link url is a url that goes to a different domain or api
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Image
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// Attribution of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public string Attribution { get; set; }
		
		/// <summary>
		/// true if the image is not the event's image but a fallbak image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallback")]
		public System.Nullable<System.Boolean> Fallback { get; set; }
		
		/// <summary>
		/// Height of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Aspect ratio of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ratio")]
		public System.Nullable<ImageRatio> Ratio { get; set; }
		
		/// <summary>
		/// Public URL of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Width of the image
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImageRatio
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16_9")]
		_16_9 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3_2")]
		_3_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4_3")]
		_4_3 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AttractionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="venue")]
		venue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="attraction")]
		attraction = 2,
	}
	
	/// <summary>
	/// All Attraction's extensions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttractionExtensions
	{
	}
	
	/// <summary>
	/// Attribution
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attribution
	{
		
		/// <summary>
		/// LicenceName
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenceName")]
		public string LicenceName { get; set; }
		
		/// <summary>
		/// LicenceUrl
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenceUrl")]
		public string LicenceUrl { get; set; }
		
		/// <summary>
		/// SourceName
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceName")]
		public string SourceName { get; set; }
		
		/// <summary>
		/// SourceUrl
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	/// Attributions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attributions
	{
		
		/// <summary>
		/// Attribution
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public Attribution Description { get; set; }
		
		/// <summary>
		/// Attribution descriptions - multi-lingual fields
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptions")]
		public System.Collections.Generic.Dictionary<string, Attribution> Descriptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chronology
	{
		
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public DateTimeZone Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateTimeZone
	{
		
		[System.Runtime.Serialization.DataMember(Name="fixed")]
		public System.Nullable<System.Boolean> Fixed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// City
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class City
	{
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Country
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Country
	{
		
		/// <summary>
		/// Country code (ISO 3166)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateTimeField
	{
		
		[System.Runtime.Serialization.DataMember(Name="durationField")]
		public DurationField DurationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leapDurationField")]
		public DurationField LeapDurationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lenient")]
		public System.Nullable<System.Boolean> Lenient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumValue")]
		public System.Nullable<System.Int32> MaximumValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumValue")]
		public System.Nullable<System.Int32> MinimumValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangeDurationField")]
		public DurationField RangeDurationField { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supported")]
		public System.Nullable<System.Boolean> Supported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DateTimeFieldType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DurationField
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="precise")]
		public System.Nullable<System.Boolean> Precise { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supported")]
		public System.Nullable<System.Boolean> Supported { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DurationFieldType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unitMillis")]
		public System.Nullable<System.Int64> UnitMillis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DurationFieldType
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateTimeFieldType
	{
		
		[System.Runtime.Serialization.DataMember(Name="durationType")]
		public DurationFieldType DurationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rangeDurationType")]
		public DurationFieldType RangeDurationType { get; set; }
	}
	
	/// <summary>
	/// Event's display settings extension
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisplaySettingExtension
	{
		
		/// <summary>
		/// True the landing is Soft otherwise it's Comingled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softLanding")]
		public System.Nullable<System.Boolean> SoftLanding { get; set; }
	}
	
	/// <summary>
	/// DMA (Designated Market Area)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dma
	{
		
		/// <summary>
		/// DMS's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	/// <summary>
	/// Event's End Dates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EndDates
	{
		
		/// <summary>
		/// Boolean flag to indicate whether or not the end date is approximated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approximate")]
		public System.Nullable<System.Boolean> Approximate { get; set; }
		
		/// <summary>
		/// The event end date time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public System.Nullable<System.DateTimeOffset> DateTime { get; set; }
		
		/// <summary>
		/// The event end date in local date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localDate")]
		public System.Nullable<System.DateOnly> LocalDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localTime")]
		public LocalTime LocalTime { get; set; }
		
		/// <summary>
		/// Boolean flag to indicate whether or not the event end time has no specific time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noSpecificTime")]
		public System.Nullable<System.Boolean> NoSpecificTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="chronology")]
		public Chronology Chronology { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldTypes")]
		public DateTimeFieldType[] FieldTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public DateTimeField[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourOfDay")]
		public System.Nullable<System.Int32> HourOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="millisOfDay")]
		public System.Nullable<System.Int32> MillisOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="millisOfSecond")]
		public System.Nullable<System.Int32> MillisOfSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minuteOfHour")]
		public System.Nullable<System.Int32> MinuteOfHour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondOfMinute")]
		public System.Nullable<System.Int32> SecondOfMinute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public int[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityChanges
	{
		
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public string[] Changes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newlyCreated")]
		public System.Nullable<System.Boolean> NewlyCreated { get; set; }
	}
	
	/// <summary>
	/// Event
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		/// <summary>
		/// Additional information for people who experience disabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibility")]
		public Accessibility Accessibility { get; set; }
		
		/// <summary>
		/// Additional information of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Event's classifications
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classifications")]
		public Classification[] Classifications { get; set; }
		
		/// <summary>
		/// Event's Dates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dates")]
		public EventDates Dates { get; set; }
		
		/// <summary>
		/// Description's of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		/// <summary>
		/// List of external links
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalLinks")]
		public System.Collections.Generic.Dictionary<string, ExternalLink[]> ExternalLinks { get; set; }
		
		/// <summary>
		/// Unique id of the entity in the discovery API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// Any information related to the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		/// <summary>
		/// Locale in which the content is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Related outlets informations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlets")]
		public Outlet[] Outlets { get; set; }
		
		/// <summary>
		/// Place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="place")]
		public Place Place { get; set; }
		
		/// <summary>
		/// Any notes related to the event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pleaseNote")]
		public string PleaseNote { get; set; }
		
		/// <summary>
		/// Price ranges of this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceRanges")]
		public PriceRange[] PriceRanges { get; set; }
		
		/// <summary>
		/// Related products informations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Product[] Products { get; set; }
		
		/// <summary>
		/// Promoter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promoter")]
		public Promoter Promoter { get; set; }
		
		/// <summary>
		/// Event's promoters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promoters")]
		public Promoter[] Promoters { get; set; }
		
		/// <summary>
		/// Event's Sales Dates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sales")]
		public EventSalesDates Sales { get; set; }
		
		/// <summary>
		/// Seatmap
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seatmap")]
		public SeatMap Seatmap { get; set; }
		
		/// <summary>
		/// Indicate if this is a test entity, by default test entities won't appear in discovery API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test")]
		public System.Nullable<System.Boolean> Test { get; set; }
		
		/// <summary>
		/// Type of the entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EventType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		/// <summary>
		/// URL of a web site detail page of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Event's Dates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventDates
	{
		
		/// <summary>
		/// Event's Access Date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public AccessDates Access { get; set; }
		
		/// <summary>
		/// Event's End Dates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public EndDates End { get; set; }
		
		/// <summary>
		/// Flag indicating if date spans of multiple days
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanMultipleDays")]
		public System.Nullable<System.Boolean> SpanMultipleDays { get; set; }
		
		/// <summary>
		/// Event's Start Dates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public StartDates Start { get; set; }
		
		/// <summary>
		/// Event's Status
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public EventStatus Status { get; set; }
		
		/// <summary>
		/// Event's timezone
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	/// <summary>
	/// Event's Start Dates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartDates
	{
		
		/// <summary>
		/// Boolean flag to indicate whether or not the start date is TBA
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTBA")]
		public System.Nullable<System.Boolean> DateTBA { get; set; }
		
		/// <summary>
		/// Boolean flag to indicate whether or not the start date is TBD
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTBD")]
		public System.Nullable<System.Boolean> DateTBD { get; set; }
		
		/// <summary>
		/// The event start datetime
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public System.Nullable<System.DateTimeOffset> DateTime { get; set; }
		
		/// <summary>
		/// The event start date in local date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localDate")]
		public System.Nullable<System.DateOnly> LocalDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localTime")]
		public LocalTime LocalTime { get; set; }
		
		/// <summary>
		/// Boolean flag to indicate whether or not the event start time has no specific time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noSpecificTime")]
		public System.Nullable<System.Boolean> NoSpecificTime { get; set; }
		
		/// <summary>
		/// Boolean flag to indicate whether or not the start time is TBA
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeTBA")]
		public System.Nullable<System.Boolean> TimeTBA { get; set; }
	}
	
	/// <summary>
	/// Event's Status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventStatus
	{
		
		/// <summary>
		/// The event's status code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<EventStatusCode> Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="onsale")]
		onsale = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="offsale")]
		offsale = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="canceled")]
		canceled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="postponed")]
		postponed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="rescheduled")]
		rescheduled = 4,
	}
	
	/// <summary>
	/// Location
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Latitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// A selling point for tickets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Outlet
	{
		
		/// <summary>
		/// Outlet's type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Outlet's url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Place
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Place
	{
		
		/// <summary>
		/// Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// Area
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area")]
		public Area Area { get; set; }
		
		/// <summary>
		/// City
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public City City { get; set; }
		
		/// <summary>
		/// Country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		/// <summary>
		/// Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Postal code / zipcode of the place
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
	}
	
	/// <summary>
	/// State
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class State
	{
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// State code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		public string StateCode { get; set; }
	}
	
	/// <summary>
	/// PriceRange
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PriceRange
	{
		
		/// <summary>
		/// Currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Maximum price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Double> Max { get; set; }
		
		/// <summary>
		/// Minimum price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Double> Min { get; set; }
		
		/// <summary>
		/// Type of price
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PriceRangeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PriceRangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="standard")]
		standard = 0,
	}
	
	/// <summary>
	/// Product
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product
	{
		
		/// <summary>
		/// Product's primary id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Product's type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Product's url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Promoter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Promoter
	{
		
		/// <summary>
		/// Description of the promoter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Id of the promoter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the promoter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Event's Sales Dates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSalesDates
	{
		
		/// <summary>
		/// Presale information on this event
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presales")]
		public Presale[] Presales { get; set; }
		
		/// <summary>
		/// Event's Public Onsales Dates
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public PublicSaleDates Public { get; set; }
	}
	
	/// <summary>
	/// Event's Presale Info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Presale
	{
		
		/// <summary>
		/// Description of the presame
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Presale's end dates. The date and time when the presale will end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Name of the presale
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Presale's start dates. The date and time when the presale will start
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// Presale link URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Event's Public Onsales Dates
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicSaleDates
	{
		
		/// <summary>
		/// Public sale's end dates. The date and time when the public sale will end
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Public sale's start dates. The date and time when the public sale will start
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// True if the public sale's date is to be determined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTBD")]
		public System.Nullable<System.Boolean> StartTBD { get; set; }
	}
	
	/// <summary>
	/// Seatmap
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SeatMap
	{
		
		/// <summary>
		/// Static Seatmap Url
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticUrl")]
		public string StaticUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="venue")]
		venue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="attraction")]
		attraction = 2,
	}
	
	/// <summary>
	/// All Event's extensions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventExtensions
	{
	}
	
	/// <summary>
	/// This class defines an Event with only images view on the Discovery API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventImages
	{
		
		/// <summary>
		/// Unique id of the entity in the discovery API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// Type of the entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EventImagesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventImagesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Extension
	{
	}
	
	/// <summary>
	/// Secondary Genre
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Genre
	{
		
		/// <summary>
		/// The ID of the classification's level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Name of the classification's level
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeocodeExtension
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="county")]
		public string County { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formattedAddress")]
		public string FormattedAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geometry")]
		public Geometry Geometry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public string Route { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetNumber")]
		public string StreetNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Geometry
	{
		
		/// <summary>
		/// Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// Venue's geocode extension
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeolocationVenueExtensions
	{
		
		[System.Runtime.Serialization.DataMember(Name="geocode")]
		public GeocodeExtension Geocode { get; set; }
	}
	
	/// <summary>
	/// Event's Host extension
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HostExtension
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Locale
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayCountry")]
		public string DisplayCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayLanguage")]
		public string DisplayLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayScript")]
		public string DisplayScript { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayVariant")]
		public string DisplayVariant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extensionKeys")]
		public string[] ExtensionKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iso3Country")]
		public string Iso3Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iso3Language")]
		public string Iso3Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unicodeLocaleAttributes")]
		public string[] UnicodeLocaleAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unicodeLocaleKeys")]
		public string[] UnicodeLocaleKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variant")]
		public string Variant { get; set; }
	}
	
	/// <summary>
	/// Market
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Market
	{
		
		/// <summary>
		/// Market's id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Parking
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Parking
	{
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Url to the web page of the parking
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The class defines the public visibility period on the Discovery/Publish API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicVisibility
	{
	}
	
	/// <summary>
	/// Relationship
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Relationship
	{
		
		/// <summary>
		/// The ID of the related entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// References of this relationship in another system. Reference is the exact same entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public System.Collections.Generic.Dictionary<string, string> References { get; set; }
		
		/// <summary>
		/// The source name of the related entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The type of the relationship
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RelationshipType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="duplicate")]
		duplicate = 0,
	}
	
	/// <summary>
	/// Social networks data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Social
	{
		
		/// <summary>
		/// Twitter data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="twitter")]
		public Twitter Twitter { get; set; }
	}
	
	/// <summary>
	/// Twitter data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Twitter
	{
		
		/// <summary>
		/// Twitter handle
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handle")]
		public System.Nullable<TwitterHandle> Handle { get; set; }
		
		/// <summary>
		/// Twitter hashtags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashtags")]
		public string[] Hashtags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TwitterHandle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="@a Twitter handle")]
		@a_Twitter_handle = 0,
	}
	
	/// <summary>
	/// Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
	}
	
	/// <summary>
	/// The Attraction Tool (TAT) extension
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TatExtension
	{
	}
	
	/// <summary>
	/// Attraction's extension (ticketmaster source)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketmasterAttractionExtensions
	{
	}
	
	/// <summary>
	/// Event's extension (ticketmaster source)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketmasterEventExtensions
	{
		
		/// <summary>
		/// Event's display settings extension
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displaySettings")]
		public DisplaySettingExtension DisplaySettings { get; set; }
	}
	
	/// <summary>
	/// Venue's extension (ticketmaster source)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketmasterVenueExtensions
	{
	}
	
	/// <summary>
	/// Venue
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Venue
	{
		
		/// <summary>
		/// Venue accessible seating detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessibleSeatingDetail")]
		public string AccessibleSeatingDetail { get; set; }
		
		/// <summary>
		/// Additional information of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalInfo")]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// Venue box office information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boxOfficeInfo")]
		public VenueBoxOfficeInfo BoxOfficeInfo { get; set; }
		
		/// <summary>
		/// City
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public City City { get; set; }
		
		/// <summary>
		/// Country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		/// <summary>
		/// Default currency of ticket prices for events in this venue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Description's of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		/// <summary>
		/// The list of associated DMAs (Designated Market Areas) of the venue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dma")]
		public Dma[] Dma { get; set; }
		
		/// <summary>
		/// List of external links
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalLinks")]
		public System.Collections.Generic.Dictionary<string, ExternalLink[]> ExternalLinks { get; set; }
		
		/// <summary>
		/// Venue general information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalInfo")]
		public VenueGeneralInfo GeneralInfo { get; set; }
		
		/// <summary>
		/// Unique id of the entity in the discovery API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
		
		/// <summary>
		/// Locale in which the content is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// Markets of the venue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markets")]
		public Market[] Markets { get; set; }
		
		/// <summary>
		/// Name of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Venue parking info
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parkingDetail")]
		public string ParkingDetail { get; set; }
		
		/// <summary>
		/// Postal code / zipcode of the venue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Social networks data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="social")]
		public Social Social { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public State State { get; set; }
		
		/// <summary>
		/// Indicate if this is a test entity, by default test entities won't appear in discovery API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="test")]
		public System.Nullable<System.Boolean> Test { get; set; }
		
		/// <summary>
		/// Timezone of the venue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Type of the entity
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public VenueType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		/// <summary>
		/// number of upcoming events
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upcomingEvents")]
		public System.Collections.Generic.Dictionary<string, int> UpcomingEvents { get; set; }
		
		/// <summary>
		/// URL of a web site detail page of the entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Venue box office information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VenueBoxOfficeInfo
	{
		
		/// <summary>
		/// Venue box office accepted payment details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptedPaymentDetail")]
		public string AcceptedPaymentDetail { get; set; }
		
		/// <summary>
		/// Venue box office opening hours
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openHoursDetail")]
		public string OpenHoursDetail { get; set; }
		
		/// <summary>
		/// Venue box office phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumberDetail")]
		public string PhoneNumberDetail { get; set; }
		
		/// <summary>
		/// Venue box office will call details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="willCallDetail")]
		public string WillCallDetail { get; set; }
	}
	
	/// <summary>
	/// Venue general information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VenueGeneralInfo
	{
		
		/// <summary>
		/// Venue children rule
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childRule")]
		public string ChildRule { get; set; }
		
		/// <summary>
		/// Venue general rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalRule")]
		public string GeneralRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VenueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="venue")]
		venue = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="attraction")]
		attraction = 2,
	}
	
	/// <summary>
	/// All Venue's extensions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VenueExtensions
	{
		
		/// <summary>
		/// Venue's geocode extension
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geolocation")]
		public GeolocationVenueExtensions Geolocation { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Attraction Search
		/// Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
		/// DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheck discovery/v2/attractions
		/// </summary>
		/// <param name="sort">Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'</param>
		/// <param name="classificationName">Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type</param>
		/// <param name="classificationId">Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type</param>
		/// <param name="keyword">Keyword to search on</param>
		/// <param name="id">Filter entities by its id</param>
		/// <param name="source">Filter entities by its source name</param>
		/// <param name="includeTest">True if you want to have entities flag as test in the response. Only, if you only wanted test entities</param>
		/// <param name="page">Page number
		/// Minimum: 0
		// </param>
		/// <param name="size">Page size of the response
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">Yes if you want to display licensed content</param>
		/// <param name="includeSpellcheck">yes, to include spell check suggestions in the response.</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckAsync(string sort, string[] classificationName, string[] classificationId, string keyword, string id, DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource source, DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest includeTest, string page, string size, string locale, DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent includeLicensedContent, DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck includeSpellcheck, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/attractions?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&"+string.Join("&", classificationName.Select(z => $"classificationName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", classificationId.Select(z => $"classificationId={System.Uri.EscapeDataString(z.ToString())}"))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&source=" + source+"&includeTest=" + includeTest+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent+"&includeSpellcheck=" + includeSpellcheck;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Attraction Details
		/// Get details for a specific attraction using the unique identifier for the attraction.
		/// DiscoveryV2Attractions_idGetByLocaleAndIncludeLicensedContent discovery/v2/attractions/{id}
		/// </summary>
		/// <param name="id">ID of the attraction</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2Attractions_idGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2Attractions_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/attractions/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Classification Search
		/// Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
		/// DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheck discovery/v2/classifications
		/// </summary>
		/// <param name="sort">Sorting order of the search result</param>
		/// <param name="keyword">Keyword to search on</param>
		/// <param name="id">Filter entities by its id</param>
		/// <param name="source">Filter entities by its source name</param>
		/// <param name="includeTest">True if you want to have entities flag as test in the response. Only, if you only wanted test entities</param>
		/// <param name="page">Page number
		/// Minimum: 0
		// </param>
		/// <param name="size">Page size of the response
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">Yes if you want to display licensed content</param>
		/// <param name="includeSpellcheck">yes, to include spell check suggestions in the response.</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckAsync(string sort, string keyword, string id, DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource source, DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest includeTest, string page, string size, string locale, DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent includeLicensedContent, DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck includeSpellcheck, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/classifications?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&source=" + source+"&includeTest=" + includeTest+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent+"&includeSpellcheck=" + includeSpellcheck;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Genre Details
		/// Get details for a specific genre using its unique identifier.
		/// DiscoveryV2ClassificationsGenres_idGetByLocaleAndIncludeLicensedContent discovery/v2/classifications/genres/{id}
		/// </summary>
		/// <param name="id">ID of the genre</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2ClassificationsGenres_idGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2ClassificationsGenres_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/classifications/genres/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Segment Details
		/// Get details for a specific segment using its unique identifier.
		/// DiscoveryV2ClassificationsSegments_idGetByLocaleAndIncludeLicensedContent discovery/v2/classifications/segments/{id}
		/// </summary>
		/// <param name="id">ID of the segment</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2ClassificationsSegments_idGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2ClassificationsSegments_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/classifications/segments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Sub-Genre Details
		/// Get details for a specific sub-genre using its unique identifier.
		/// DiscoveryV2ClassificationsSubgenres_idGetByLocaleAndIncludeLicensedContent discovery/v2/classifications/subgenres/{id}
		/// </summary>
		/// <param name="id">ID of the subgenre</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2ClassificationsSubgenres_idGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2ClassificationsSubgenres_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/classifications/subgenres/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Classification Details
		/// Get details for a specific segment, genre, or sub-genre using its unique identifier.
		/// DiscoveryV2Classifications_idGetByLocaleAndIncludeLicensedContent discovery/v2/classifications/{id}
		/// </summary>
		/// <param name="id">ID of the segment, genre, or sub-genre</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2Classifications_idGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2Classifications_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/classifications/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Event Search
		/// Find events and filter your search by location, date, availability, and much more.
		/// DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheck discovery/v2/events
		/// </summary>
		/// <param name="sort">Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'</param>
		/// <param name="startDateTime">Filter events with a start date after this date</param>
		/// <param name="endDateTime">Filter events with a start date before this date</param>
		/// <param name="onsaleStartDateTime">Filter events with onsale start date after this date</param>
		/// <param name="onsaleOnStartDate">Filter events with onsale start date on this date</param>
		/// <param name="onsaleOnAfterStartDate">Filter events with onsale range within this date</param>
		/// <param name="onsaleEndDateTime">Filter events with onsale end date before this date</param>
		/// <param name="city">Filter events by city</param>
		/// <param name="countryCode">Filter events by country code</param>
		/// <param name="stateCode">Filter events by state code</param>
		/// <param name="postalCode">Filter events by postal code / zipcode</param>
		/// <param name="venueId">Filter events by venue id</param>
		/// <param name="attractionId">Filter events by attraction id</param>
		/// <param name="segmentId">Filter events by segment id</param>
		/// <param name="segmentName">Filter events by segment name</param>
		/// <param name="classificationName">Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type</param>
		/// <param name="classificationId">Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type</param>
		/// <param name="marketId">Filter events by market id</param>
		/// <param name="promoterId">Filter events by promoter id</param>
		/// <param name="dmaId">Filter events by dma id</param>
		/// <param name="includeTBA">True, to include events with date to be announce (TBA)</param>
		/// <param name="includeTBD">True, to include event with a date to be defined (TBD)</param>
		/// <param name="clientVisibility">Filter events by clientName</param>
		/// <param name="latlong">Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead</param>
		/// <param name="radius">Radius of the area in which we want to search for events.</param>
		/// <param name="unit">Unit of the radius</param>
		/// <param name="geoPoint">filter events by geoHash</param>
		/// <param name="keyword">Keyword to search on</param>
		/// <param name="id">Filter entities by its id</param>
		/// <param name="source">Filter entities by its source name</param>
		/// <param name="includeTest">True if you want to have entities flag as test in the response. Only, if you only wanted test entities</param>
		/// <param name="page">Page number
		/// Minimum: 0
		// </param>
		/// <param name="size">Page size of the response
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">Yes if you want to display licensed content</param>
		/// <param name="includeSpellcheck">yes, to include spell check suggestions in the response.</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckAsync(
					string sort, 
					string startDateTime, 
					string endDateTime, 
					string onsaleStartDateTime, 
					string onsaleOnStartDate, 
					string onsaleOnAfterStartDate, 
					string onsaleEndDateTime, 
					string city, 
					string countryCode, 
					string stateCode, 
					string postalCode, 
					string venueId, 
					string attractionId, 
					string segmentId, 
					string segmentName, 
					string[] classificationName, 
					string[] classificationId, 
					string marketId, 
					string promoterId, 
					string dmaId, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBA includeTBA, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBD includeTBD, 
					string clientVisibility, 
					string latlong, 
					string radius, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckUnit unit, 
					string geoPoint, 
					string keyword, 
					string id, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource source, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest includeTest, 
					string page, 
					string size, 
					string locale, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent includeLicensedContent, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck includeSpellcheck, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/events?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&startDateTime=" + (startDateTime==null? "" : System.Uri.EscapeDataString(startDateTime))+"&endDateTime=" + (endDateTime==null? "" : System.Uri.EscapeDataString(endDateTime))+"&onsaleStartDateTime=" + (onsaleStartDateTime==null? "" : System.Uri.EscapeDataString(onsaleStartDateTime))+"&onsaleOnStartDate=" + (onsaleOnStartDate==null? "" : System.Uri.EscapeDataString(onsaleOnStartDate))+"&onsaleOnAfterStartDate=" + (onsaleOnAfterStartDate==null? "" : System.Uri.EscapeDataString(onsaleOnAfterStartDate))+"&onsaleEndDateTime=" + (onsaleEndDateTime==null? "" : System.Uri.EscapeDataString(onsaleEndDateTime))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&stateCode=" + (stateCode==null? "" : System.Uri.EscapeDataString(stateCode))+"&postalCode=" + (postalCode==null? "" : System.Uri.EscapeDataString(postalCode))+"&venueId=" + (venueId==null? "" : System.Uri.EscapeDataString(venueId))+"&attractionId=" + (attractionId==null? "" : System.Uri.EscapeDataString(attractionId))+"&segmentId=" + (segmentId==null? "" : System.Uri.EscapeDataString(segmentId))+"&segmentName=" + (segmentName==null? "" : System.Uri.EscapeDataString(segmentName))+"&"+string.Join("&", classificationName.Select(z => $"classificationName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", classificationId.Select(z => $"classificationId={System.Uri.EscapeDataString(z.ToString())}"))+"&marketId=" + (marketId==null? "" : System.Uri.EscapeDataString(marketId))+"&promoterId=" + (promoterId==null? "" : System.Uri.EscapeDataString(promoterId))+"&dmaId=" + (dmaId==null? "" : System.Uri.EscapeDataString(dmaId))+"&includeTBA=" + includeTBA+"&includeTBD=" + includeTBD+"&clientVisibility=" + (clientVisibility==null? "" : System.Uri.EscapeDataString(clientVisibility))+"&latlong=" + (latlong==null? "" : System.Uri.EscapeDataString(latlong))+"&radius=" + (radius==null? "" : System.Uri.EscapeDataString(radius))+"&unit=" + unit+"&geoPoint=" + (geoPoint==null? "" : System.Uri.EscapeDataString(geoPoint))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&source=" + source+"&includeTest=" + includeTest+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent+"&includeSpellcheck=" + includeSpellcheck;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Event Details
		/// Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
		/// DiscoveryV2Events_idGetByLocaleAndIncludeLicensedContent discovery/v2/events/{id}
		/// </summary>
		/// <param name="id">ID of the event</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2Events_idGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2Events_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/events/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Event Images
		/// Get images for a specific event using the unique identifier for the event.
		/// DiscoveryV2Events_idImagesGetByLocaleAndIncludeLicensedContent discovery/v2/events/{id}/images
		/// </summary>
		/// <param name="id">ID of the event</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2Events_idImagesGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2Events_idImagesGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/events/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/images&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Find Suggest
		/// Find search suggestions and filter your suggestions by location, source, etc.
		/// DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheck discovery/v2/suggest
		/// </summary>
		/// <param name="keyword">Keyword to search on</param>
		/// <param name="source">Filter entities by its source name</param>
		/// <param name="latlong">Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead</param>
		/// <param name="radius">Radius of the area in which we want to search for events.</param>
		/// <param name="unit">Unit of the radius</param>
		/// <param name="size">Size of every entity returned in the response
		/// Minimum: 1
		/// Maximum: 5
		// </param>
		/// <param name="includeFuzzy">yes, to include fuzzy matches in the search. This has performance impact.</param>
		/// <param name="clientVisibility">Filter events to clientName</param>
		/// <param name="countryCode">Filter suggestions by country code</param>
		/// <param name="includeTBA">True, to include events with date to be announce (TBA)</param>
		/// <param name="includeTBD">True, to include event with a date to be defined (TBD)</param>
		/// <param name="segmentId">Filter suggestions by segment id</param>
		/// <param name="geoPoint">filter events by geoHash</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">Yes if you want to display licensed content</param>
		/// <param name="includeSpellcheck">yes, to include spell check suggestions in the response.</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckAsync(
					string keyword, 
					DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource source, 
					string latlong, 
					string radius, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckUnit unit, 
					string size, 
					DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeFuzzy includeFuzzy, 
					string clientVisibility, 
					string countryCode, 
					DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBA includeTBA, 
					DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBD includeTBD, 
					string segmentId, 
					string geoPoint, 
					string locale, 
					DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent includeLicensedContent, 
					DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck includeSpellcheck, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/suggest?keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&source=" + source+"&latlong=" + (latlong==null? "" : System.Uri.EscapeDataString(latlong))+"&radius=" + (radius==null? "" : System.Uri.EscapeDataString(radius))+"&unit=" + unit+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size))+"&includeFuzzy=" + includeFuzzy+"&clientVisibility=" + (clientVisibility==null? "" : System.Uri.EscapeDataString(clientVisibility))+"&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&includeTBA=" + includeTBA+"&includeTBD=" + includeTBD+"&segmentId=" + (segmentId==null? "" : System.Uri.EscapeDataString(segmentId))+"&geoPoint=" + (geoPoint==null? "" : System.Uri.EscapeDataString(geoPoint))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent+"&includeSpellcheck=" + includeSpellcheck;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Venue Search
		/// Find venues and filter your search by name, and much more.
		/// DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheck discovery/v2/venues
		/// </summary>
		/// <param name="sort">Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'</param>
		/// <param name="stateCode">Filter venues by state / province code</param>
		/// <param name="countryCode">Filter venues by country code</param>
		/// <param name="latlong">Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead</param>
		/// <param name="radius">Radius of the area in which we want to search for events.</param>
		/// <param name="unit">Unit of the radius</param>
		/// <param name="geoPoint">filter events by geoHash</param>
		/// <param name="keyword">Keyword to search on</param>
		/// <param name="id">Filter entities by its id</param>
		/// <param name="source">Filter entities by its source name</param>
		/// <param name="includeTest">True if you want to have entities flag as test in the response. Only, if you only wanted test entities</param>
		/// <param name="page">Page number
		/// Minimum: 0
		// </param>
		/// <param name="size">Page size of the response
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">Yes if you want to display licensed content</param>
		/// <param name="includeSpellcheck">yes, to include spell check suggestions in the response.</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckAsync(
					string sort, 
					string stateCode, 
					string countryCode, 
					string latlong, 
					string radius, 
					DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckUnit unit, 
					string geoPoint, 
					string keyword, 
					string id, 
					DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource source, 
					DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest includeTest, 
					string page, 
					string size, 
					string locale, 
					DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent includeLicensedContent, 
					DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck includeSpellcheck, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/venues?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&stateCode=" + (stateCode==null? "" : System.Uri.EscapeDataString(stateCode))+"&countryCode=" + (countryCode==null? "" : System.Uri.EscapeDataString(countryCode))+"&latlong=" + (latlong==null? "" : System.Uri.EscapeDataString(latlong))+"&radius=" + (radius==null? "" : System.Uri.EscapeDataString(radius))+"&unit=" + unit+"&geoPoint=" + (geoPoint==null? "" : System.Uri.EscapeDataString(geoPoint))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&source=" + source+"&includeTest=" + includeTest+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&size=" + (size==null? "" : System.Uri.EscapeDataString(size))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent+"&includeSpellcheck=" + includeSpellcheck;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Venue Details
		/// Get details for a specific venue using the unique identifier for the venue.
		/// DiscoveryV2Venues_idGetByLocaleAndIncludeLicensedContent discovery/v2/venues/{id}
		/// </summary>
		/// <param name="id">ID of the venue</param>
		/// <param name="locale">The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') </param>
		/// <param name="includeLicensedContent">True if you want to display licensed content</param>
		/// <returns>successful operation</returns>
		public async Task DiscoveryV2Venues_idGetByLocaleAndIncludeLicensedContentAsync(string id, string locale, DiscoveryV2Venues_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent includeLicensedContent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "discovery/v2/venues/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&includeLicensedContent=" + includeLicensedContent;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticketmaster")]
		ticketmaster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" universe")]
		_universe = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" frontgate")]
		_frontgate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" tmr")]
		_tmr = 3,
	}
	
	public enum DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2AttractionsGetBySortAndClassificationNameAndClassificationIdAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2Attractions_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticketmaster")]
		ticketmaster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" universe")]
		_universe = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" frontgate")]
		_frontgate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" tmr")]
		_tmr = 3,
	}
	
	public enum DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2ClassificationsGetBySortAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2ClassificationsGenres_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2ClassificationsSegments_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2ClassificationsSubgenres_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2Classifications_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBA
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBD
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="miles")]
		miles = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="km")]
		km = 1,
	}
	
	public enum DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticketmaster")]
		ticketmaster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" universe")]
		_universe = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" frontgate")]
		_frontgate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" tmr")]
		_tmr = 3,
	}
	
	public enum DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2EventsGetBySortAndStartDateTimeAndEndDateTimeAndOnsaleStartDateTimeAndOnsaleOnStartDateAndOnsaleOnAfterStartDateAndOnsaleEndDateTimeAndCityAndCountryCodeAndStateCodeAndPostalCodeAndVenueIdAndAttractionIdAndSegmentIdAndSegmentNameAndClassificationNameAndClassificationIdAndMarketIdAndPromoterIdAndDmaIdAndIncludeTBAAndIncludeTBDAndClientVisibilityAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2Events_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2Events_idImagesGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticketmaster")]
		ticketmaster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" universe")]
		_universe = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" frontgate")]
		_frontgate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" tmr")]
		_tmr = 3,
	}
	
	public enum DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeFuzzy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBA
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTBD
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2SuggestGetByKeywordAndSourceAndLatlongAndRadiusAndUnitAndSizeAndIncludeFuzzyAndClientVisibilityAndCountryCodeAndIncludeTBAAndIncludeTBDAndSegmentIdAndGeoPointAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticketmaster")]
		ticketmaster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" universe")]
		_universe = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" frontgate")]
		_frontgate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" tmr")]
		_tmr = 3,
	}
	
	public enum DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeTest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" only")]
		_only = 2,
	}
	
	public enum DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2VenuesGetBySortAndStateCodeAndCountryCodeAndLatlongAndRadiusAndUnitAndGeoPointAndKeywordAndIdAndSourceAndIncludeTestAndPageAndSizeAndLocaleAndIncludeLicensedContentAndIncludeSpellcheckIncludeSpellcheck
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
	
	public enum DiscoveryV2Venues_idGetByLocaleAndIncludeLicensedContentIncludeLicensedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yes")]
		yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=" no")]
		_no = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
