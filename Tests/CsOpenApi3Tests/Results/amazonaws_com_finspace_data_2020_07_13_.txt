//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateUserToPermissionGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	/// <summary>
	/// The response from a CreateChangeset operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateChangesetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	/// <summary>
	/// Response for creating a data view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataViewResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataViewId")]
		public string DataViewId { get; set; }
	}
	
	/// <summary>
	/// Data View Export File Format
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExportFileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARQUET")]
		PARQUET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELIMITED_TEXT")]
		DELIMITED_TEXT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3DestinationFormatOptions
	{
	}
	
	/// <summary>
	/// The response from a CreateDataset operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
	}
	
	/// <summary>
	/// <p>Resource permission for a dataset. When you create a dataset, all the other members of the same user group inherit access to the dataset. You can only create a dataset if your user group has application permission for Create Datasets.</p> <p>The following is a list of valid dataset permissions that you can apply: </p> <ul> <li> <p> <code>ViewDatasetDetails</code> </p> </li> <li> <p> <code>ReadDatasetDetails</code> </p> </li> <li> <p> <code>AddDatasetData</code> </p> </li> <li> <p> <code>CreateDataView</code> </p> </li> <li> <p> <code>EditDatasetMetadata</code> </p> </li> <li> <p> <code>DeleteDataset</code> </p> </li> </ul> <p>For more information on the dataset permissions, see <a href="https://docs.aws.amazon.com/finspace/latest/userguide/managing-user-permissions.html#supported-dataset-permissions">Supported Dataset Permissions</a> in the FinSpace User Guide.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourcePermission
	{
		
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public string Permission { get; set; }
	}
	
	/// <summary>
	/// Definition for a schema on a tabular Dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SchemaDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public ColumnDefinition[] Columns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryKeyColumns")]
		public string[] PrimaryKeyColumns { get; set; }
	}
	
	/// <summary>
	/// The definition of a column in a tabular Dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ColumnDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public ColumnDataType DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnName")]
		public string ColumnName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnDescription")]
		public string ColumnDescription { get; set; }
	}
	
	/// <summary>
	/// Data type of a column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ColumnDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRING")]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHAR")]
		CHAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTEGER")]
		INTEGER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TINYINT")]
		TINYINT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SMALLINT")]
		SMALLINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIGINT")]
		BIGINT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FLOAT")]
		FLOAT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOUBLE")]
		DOUBLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATE")]
		DATE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATETIME")]
		DATETIME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOOLEAN")]
		BOOLEAN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BINARY")]
		BINARY = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePermissionGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreateDataset")]
		CreateDataset = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ManageClusters")]
		ManageClusters = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ManageUsersAndGroups")]
		ManageUsersAndGroups = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ManageAttributeSets")]
		ManageAttributeSets = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ViewAuditData")]
		ViewAuditData = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AccessNotebooks")]
		AccessNotebooks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GetTemporaryCredentials")]
		GetTemporaryCredentials = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// The response from an DeleteDataset operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePermissionGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateUserFromPermissionGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// The response from a describe changeset operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetChangesetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changesetArn")]
		public string ChangesetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public ChangeType ChangeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceParams")]
		public SourceParams SourceParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatParams")]
		public FormatParams FormatParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IngestionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public ChangesetErrorInfo ErrorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeUntilTimestamp")]
		public System.Nullable<System.Int32> ActiveUntilTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeFromTimestamp")]
		public System.Nullable<System.Int32> ActiveFromTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatesChangesetId")]
		public string UpdatesChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedByChangesetId")]
		public string UpdatedByChangesetId { get; set; }
	}
	
	/// <summary>
	/// Indicates how the given change will be applied to the dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPLACE")]
		REPLACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APPEND")]
		APPEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODIFY")]
		MODIFY = 2,
	}
	
	/// <summary>
	/// Source Parameters of a Changeset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceParams
	{
	}
	
	/// <summary>
	/// Format Parameters of a Changeset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FormatParams
	{
	}
	
	/// <summary>
	/// Status of the ingestion process returned from scheduler service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IngestionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOP_REQUESTED")]
		STOP_REQUESTED = 4,
	}
	
	/// <summary>
	/// The structure with error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangesetErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCategory")]
		public ErrorCategory ErrorCategory { get; set; }
	}
	
	/// <summary>
	/// Changeset Error Category
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VALIDATION")]
		VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_QUOTA_EXCEEDED")]
		SERVICE_QUOTA_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS_DENIED")]
		ACCESS_DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESOURCE_NOT_FOUND")]
		RESOURCE_NOT_FOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THROTTLING")]
		THROTTLING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_SERVICE_EXCEPTION")]
		INTERNAL_SERVICE_EXCEPTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USER_RECOVERABLE")]
		USER_RECOVERABLE = 7,
	}
	
	/// <summary>
	/// Response from retrieving a dataview, which includes details on the target database and table name
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataViewResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdate")]
		public System.Nullable<System.Boolean> AutoUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partitionColumns")]
		public string[] PartitionColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asOfTimestamp")]
		public System.Nullable<System.Int32> AsOfTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public DataViewErrorInfo ErrorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int32> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortColumns")]
		public string[] SortColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataViewId")]
		public string DataViewId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataViewArn")]
		public string DataViewArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationTypeParams")]
		public DataViewDestinationTypeParams DestinationTypeParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataViewStatus Status { get; set; }
	}
	
	/// <summary>
	/// The structure with error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataViewErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCategory")]
		public ErrorCategory ErrorCategory { get; set; }
	}
	
	/// <summary>
	/// Structure for the Dataview destination type parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataViewDestinationTypeParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public string DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3DestinationExportFileFormat")]
		public ExportFileFormat S3DestinationExportFileFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3DestinationExportFileFormatOptions")]
		public S3DestinationFormatOptions S3DestinationExportFileFormatOptions { get; set; }
	}
	
	/// <summary>
	/// Status of a DataView
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataViewStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STARTING")]
		STARTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TIMEOUT")]
		TIMEOUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_CLEANUP_FAILED")]
		FAILED_CLEANUP_FAILED = 7,
	}
	
	/// <summary>
	/// Response for the GetDataset operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetArn")]
		public string DatasetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetTitle")]
		public string DatasetTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DatasetKind Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetDescription")]
		public string DatasetDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int32> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaDefinition")]
		public SchemaUnion SchemaDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DatasetStatus Status { get; set; }
	}
	
	/// <summary>
	/// Dataset Kind
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DatasetKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TABULAR")]
		TABULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NON_TABULAR")]
		NON_TABULAR = 1,
	}
	
	/// <summary>
	/// A union of schema types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SchemaUnion
	{
		
		[System.Runtime.Serialization.DataMember(Name="tabularSchemaConfig")]
		public SchemaDefinition TabularSchemaConfig { get; set; }
	}
	
	/// <summary>
	/// Status of the dataset process returned from scheduler service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DatasetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExternalDataViewAccessDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public AwsCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	///  The credentials required to access the external Dataview from the S3 location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsCredentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessKeyId")]
		public string AccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretAccessKey")]
		public string SecretAccessKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionToken")]
		public string SessionToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.Nullable<System.Int32> Expiration { get; set; }
	}
	
	/// <summary>
	/// The location of an external Dataview in an S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Location
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPermissionGroupResponse
	{
		
		/// <summary>
		/// The structure for a permission group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionGroup")]
		public PermissionGroup PermissionGroup { get; set; }
	}
	
	/// <summary>
	/// The structure for a permission group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationPermissions")]
		public ApplicationPermission[] ApplicationPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int32> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipStatus")]
		public PermissionGroupMembershipStatus MembershipStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PermissionGroupMembershipStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION_IN_PROGRESS")]
		ADDITION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADDITION_SUCCESS")]
		ADDITION_SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVAL_IN_PROGRESS")]
		REMOVAL_IN_PROGRESS = 2,
	}
	
	/// <summary>
	/// Response for GetProgrammaticAccessCredentials operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProgrammaticAccessCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Credentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInMinutes")]
		public System.Nullable<System.Int32> DurationInMinutes { get; set; }
	}
	
	/// <summary>
	/// Short term API credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Credentials
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessKeyId")]
		public string AccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretAccessKey")]
		public string SecretAccessKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionToken")]
		public string SessionToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public UserStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccess")]
		public ApiAccess ApiAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccessPrincipalArn")]
		public string ApiAccessPrincipalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEnabledTime")]
		public System.Nullable<System.Int32> LastEnabledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastDisabledTime")]
		public System.Nullable<System.Int32> LastDisabledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int32> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastLoginTime")]
		public System.Nullable<System.Int32> LastLoginTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUPER_USER")]
		SUPER_USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_USER")]
		APP_USER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApiAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkingLocationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Uri")]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Path")]
		public string S3Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
	}
	
	/// <summary>
	/// Response to ListChangesetsResponse. This returns a list of dataset changesets that match the query criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListChangesetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="changesets")]
		public ChangesetSummary[] Changesets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A Changeset is unit of data in a Dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangesetSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changesetArn")]
		public string ChangesetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public ChangeType ChangeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceParams")]
		public SourceParams SourceParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatParams")]
		public FormatParams FormatParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public IngestionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public ChangesetErrorInfo ErrorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeUntilTimestamp")]
		public System.Nullable<System.Int32> ActiveUntilTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeFromTimestamp")]
		public System.Nullable<System.Int32> ActiveFromTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatesChangesetId")]
		public string UpdatesChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedByChangesetId")]
		public string UpdatedByChangesetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataViewsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataViews")]
		public DataViewSummary[] DataViews { get; set; }
	}
	
	/// <summary>
	/// Structure for the summary of a Dataview.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataViewSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataViewId")]
		public string DataViewId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataViewArn")]
		public string DataViewArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asOfTimestamp")]
		public System.Nullable<System.Int32> AsOfTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partitionColumns")]
		public string[] PartitionColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortColumns")]
		public string[] SortColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataViewStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorInfo")]
		public DataViewErrorInfo ErrorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationTypeProperties")]
		public DataViewDestinationTypeParams DestinationTypeProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdate")]
		public System.Nullable<System.Boolean> AutoUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int32> LastModifiedTime { get; set; }
	}
	
	/// <summary>
	/// Response for the ListDatasets operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDatasetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasets")]
		public Dataset[] Datasets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The structure for a Dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dataset
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetArn")]
		public string DatasetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetTitle")]
		public string DatasetTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DatasetKind Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetDescription")]
		public string DatasetDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerInfo")]
		public DatasetOwnerInfo OwnerInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int32> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaDefinition")]
		public SchemaUnion SchemaDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
	}
	
	/// <summary>
	/// A structure for Dataset owner info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatasetOwnerInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPermissionGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroups")]
		public PermissionGroup[] PermissionGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPermissionGroupsByUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroups")]
		public PermissionGroupByUser[] PermissionGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The structure of a permission group associated with a user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionGroupByUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipStatus")]
		public PermissionGroupMembershipStatus MembershipStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The details of the user account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public UserStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccess")]
		public ApiAccess ApiAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccessPrincipalArn")]
		public string ApiAccessPrincipalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.Int32> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEnabledTime")]
		public System.Nullable<System.Int32> LastEnabledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastDisabledTime")]
		public System.Nullable<System.Int32> LastDisabledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int32> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastLoginTime")]
		public System.Nullable<System.Int32> LastLoginTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUsersByPermissionGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserByPermissionGroup[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The structure of a user account associated with a permission group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserByPermissionGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public UserStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccess")]
		public ApiAccess ApiAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccessPrincipalArn")]
		public string ApiAccessPrincipalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipStatus")]
		public PermissionGroupMembershipStatus MembershipStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetUserPasswordResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="temporaryPassword")]
		public string TemporaryPassword { get; set; }
	}
	
	/// <summary>
	/// The response from a update changeset operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChangesetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="changesetId")]
		public string ChangesetId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
	}
	
	/// <summary>
	/// The response from an UpdateDataset operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePermissionGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateUserToPermissionGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// The request for a CreateChangeset operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateChangesetRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public ChangeType ChangeType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceParams")]
		public SourceParams SourceParams { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formatParams")]
		public FormatParams FormatParams { get; set; }
	}
	
	/// <summary>
	/// Request for creating a data view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDataViewRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdate")]
		public System.Nullable<System.Boolean> AutoUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortColumns")]
		public string[] SortColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partitionColumns")]
		public string[] PartitionColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="asOfTimestamp")]
		public System.Nullable<System.Int32> AsOfTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationTypeParams")]
		public DataViewDestinationTypeParams DestinationTypeParams { get; set; }
	}
	
	/// <summary>
	/// <p>Permission group parameters for Dataset permissions.</p> <p>Here is an example of how you could specify the <code>PermissionGroupParams</code>:</p> <p> <code> { "permissionGroupId": "0r6fCRtSTUk4XPfXQe3M0g", "datasetPermissions": [ {"permission": "ViewDatasetDetails"}, {"permission": "AddDatasetData"}, {"permission": "EditDatasetMetadata"}, {"permission": "DeleteDataset"} ] } </code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionGroupParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetPermissions")]
		public ResourcePermission[] DatasetPermissions { get; set; }
	}
	
	/// <summary>
	/// The request for a CreateDataset operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDatasetRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetTitle")]
		public string DatasetTitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DatasetKind Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetDescription")]
		public string DatasetDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerInfo")]
		public DatasetOwnerInfo OwnerInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissionGroupParams")]
		public PermissionGroupParams PermissionGroupParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaDefinition")]
		public SchemaUnion SchemaDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePermissionGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationPermissions")]
		public ApplicationPermission[] ApplicationPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiAccess ApiAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccessPrincipalArn")]
		public string ApiAccessPrincipalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// The request for a DeleteDataset operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDatasetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePermissionGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableUserRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateUserFromPermissionGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableUserRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Request to describe a changeset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetChangesetRequest
	{
	}
	
	/// <summary>
	/// Request for retrieving a data view detail. Grouped / accessible within a dataset by its dataset id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDataViewRequest
	{
	}
	
	/// <summary>
	/// Request for the GetDataset operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDatasetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExternalDataViewAccessDetailsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPermissionGroupRequest
	{
	}
	
	/// <summary>
	/// Request for GetProgrammaticAccessCredentials operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProgrammaticAccessCredentialsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INGESTION")]
		INGESTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAGEMAKER")]
		SAGEMAKER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkingLocationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public LocationType LocationType { get; set; }
	}
	
	/// <summary>
	/// Request to ListChangesetsRequest. It exposes minimal query filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListChangesetsRequest
	{
	}
	
	/// <summary>
	/// Request for a list data views.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDataViewsRequest
	{
	}
	
	/// <summary>
	/// Request for the ListDatasets operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDatasetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPermissionGroupsByUserRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPermissionGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUsersByPermissionGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUsersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetUserPasswordRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Request to update an existing changeset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateChangesetRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceParams")]
		public SourceParams SourceParams { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formatParams")]
		public FormatParams FormatParams { get; set; }
	}
	
	/// <summary>
	/// The request for an UpdateDataset operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDatasetRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetTitle")]
		public string DatasetTitle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DatasetKind Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetDescription")]
		public string DatasetDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaDefinition")]
		public SchemaUnion SchemaDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePermissionGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationPermissions")]
		public ApplicationPermission[] ApplicationPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccess")]
		public ApiAccess ApiAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="apiAccessPrincipalArn")]
		public string ApiAccessPrincipalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds a user account to a permission group to grant permissions for actions a user can perform in FinSpace.
		/// AssociateUserToPermissionGroup permission-group/{permissionGroupId}/users/{userId}
		/// </summary>
		/// <param name="permissionGroupId">The unique identifier for the permission group.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="userId">The unique identifier for the user.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateUserToPermissionGroupResponse> AssociateUserToPermissionGroupAsync(string permissionGroupId, string userId, AssociateUserToPermissionGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group/"+ (permissionGroupId==null? "" : System.Uri.EscapeDataString(permissionGroupId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateUserToPermissionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a user account from a permission group.
		/// DisassociateUserFromPermissionGroup permission-group/{permissionGroupId}/users/{userId}
		/// </summary>
		/// <param name="permissionGroupId">The unique identifier for the permission group.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="userId">The unique identifier for the user.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="clientToken">A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateUserFromPermissionGroupResponse> DisassociateUserFromPermissionGroupAsync(string permissionGroupId, string userId, string clientToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group/"+ (permissionGroupId==null? "" : System.Uri.EscapeDataString(permissionGroupId))+"/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateUserFromPermissionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Changeset in a FinSpace Dataset.
		/// CreateChangeset datasets/{datasetId}/changesetsv2
		/// </summary>
		/// <param name="datasetId">The unique identifier for the FinSpace Dataset where the Changeset will be created. 
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateChangesetResponse> CreateChangesetAsync(string datasetId, CreateChangesetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/changesetsv2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateChangesetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the FinSpace Changesets for a Dataset.
		/// ListChangesets datasets/{datasetId}/changesetsv2
		/// </summary>
		/// <param name="datasetId">The unique identifier for the FinSpace Dataset to which the Changeset belongs.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="maxResults">The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <returns>Success</returns>
		public async Task<ListChangesetsResponse> ListChangesetsAsync(string datasetId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/changesetsv2&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListChangesetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Dataview for a Dataset.
		/// CreateDataView datasets/{datasetId}/dataviewsv2
		/// </summary>
		/// <param name="datasetId">The unique Dataset identifier that is used to create a Dataview.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDataViewResponse> CreateDataViewAsync(string datasetId, CreateDataViewPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/dataviewsv2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDataViewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all available Dataviews for a Dataset.
		/// ListDataViews datasets/{datasetId}/dataviewsv2
		/// </summary>
		/// <param name="datasetId">The unique identifier of the Dataset for which to retrieve Dataviews.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDataViewsResponse> ListDataViewsAsync(string datasetId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/dataviewsv2&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDataViewsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new FinSpace Dataset.
		/// CreateDataset datasetsv2
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDatasetResponse> CreateDatasetAsync(CreateDatasetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasetsv2";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all of the active Datasets that a user has access to.
		/// ListDatasets datasetsv2
		/// </summary>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDatasetsResponse> ListDatasetsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasetsv2?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a group of permissions for various actions that a user can perform in FinSpace.
		/// CreatePermissionGroup permission-group
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePermissionGroupResponse> CreatePermissionGroupAsync(CreatePermissionGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePermissionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new user in FinSpace.
		/// CreateUser user
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserResponse> CreateUserAsync(CreateUserPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a FinSpace Dataset.
		/// DeleteDataset datasetsv2/{datasetId}
		/// </summary>
		/// <param name="clientToken">A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="datasetId">The unique identifier of the Dataset to be deleted.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDatasetResponse> DeleteDatasetAsync(string clientToken, string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasetsv2/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"?clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a Dataset.
		/// GetDataset datasetsv2/{datasetId}
		/// </summary>
		/// <param name="datasetId">The unique identifier for a Dataset.
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDatasetResponse> GetDatasetAsync(string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasetsv2/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a FinSpace Dataset.
		/// UpdateDataset datasetsv2/{datasetId}
		/// </summary>
		/// <param name="datasetId">The unique identifier for the Dataset to update.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDatasetResponse> UpdateDatasetAsync(string datasetId, UpdateDatasetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasetsv2/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a permission group. This action is irreversible.
		/// DeletePermissionGroup permission-group/{permissionGroupId}
		/// </summary>
		/// <param name="permissionGroupId">The unique identifier for the permission group that you want to delete.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="clientToken">A token that ensures idempotency. This token expires in 10 minutes.
		/// Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePermissionGroupResponse> DeletePermissionGroupAsync(string permissionGroupId, string clientToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group/"+ (permissionGroupId==null? "" : System.Uri.EscapeDataString(permissionGroupId))+"&clientToken=" + (clientToken==null? "" : System.Uri.EscapeDataString(clientToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePermissionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of a specific permission group.
		/// GetPermissionGroup permission-group/{permissionGroupId}
		/// </summary>
		/// <param name="permissionGroupId">The unique identifier for the permission group.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetPermissionGroupResponse> GetPermissionGroupAsync(string permissionGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group/"+ (permissionGroupId==null? "" : System.Uri.EscapeDataString(permissionGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPermissionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of a permission group. You cannot modify a <code>permissionGroupID</code>.
		/// UpdatePermissionGroup permission-group/{permissionGroupId}
		/// </summary>
		/// <param name="permissionGroupId">The unique identifier for the permission group to update.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdatePermissionGroupResponse> UpdatePermissionGroupAsync(string permissionGroupId, UpdatePermissionGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group/"+ (permissionGroupId==null? "" : System.Uri.EscapeDataString(permissionGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePermissionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Denies access to the FinSpace web application and API for the specified user.
		/// DisableUser user/{userId}/disable
		/// </summary>
		/// <param name="userId">The unique identifier for the user account that you want to disable.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DisableUserResponse> DisableUserAsync(string userId, DisableUserPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisableUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows the specified user to access the FinSpace web application and API.
		/// EnableUser user/{userId}/enable
		/// </summary>
		/// <param name="userId">The unique identifier for the user account that you want to enable.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<EnableUserResponse> EnableUserAsync(string userId, EnableUserPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnableUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get information about a Changeset.
		/// GetChangeset datasets/{datasetId}/changesetsv2/{changesetId}
		/// </summary>
		/// <param name="datasetId">The unique identifier for the FinSpace Dataset where the Changeset is created.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="changesetId">The unique identifier of the Changeset for which to get data.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetChangesetResponse> GetChangesetAsync(string datasetId, string changesetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/changesetsv2/"+ (changesetId==null? "" : System.Uri.EscapeDataString(changesetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetChangesetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a FinSpace Changeset.
		/// UpdateChangeset datasets/{datasetId}/changesetsv2/{changesetId}
		/// </summary>
		/// <param name="datasetId">The unique identifier for the FinSpace Dataset in which the Changeset is created.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="changesetId">The unique identifier for the Changeset to update.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateChangesetResponse> UpdateChangesetAsync(string datasetId, string changesetId, UpdateChangesetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/changesetsv2/"+ (changesetId==null? "" : System.Uri.EscapeDataString(changesetId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateChangesetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a Dataview.
		/// GetDataView datasets/{datasetId}/dataviewsv2/{dataviewId}
		/// </summary>
		/// <param name="dataviewId">The unique identifier for the Dataview.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="datasetId">The unique identifier for the Dataset used in the Dataview.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDataViewResponse> GetDataViewAsync(string dataviewId, string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/dataviewsv2/"+ (dataviewId==null? "" : System.Uri.EscapeDataString(dataviewId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDataViewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the credentials to access the external Dataview from an S3 location. To call this API:</p> <ul> <li> <p>You must retrieve the programmatic credentials.</p> </li> <li> <p>You must be a member of a FinSpace user group, where the dataset that you want to access has <code>Read Dataset Data</code> permissions.</p> </li> </ul>
		/// GetExternalDataViewAccessDetails datasets/{datasetId}/dataviewsv2/{dataviewId}/external-access-details
		/// </summary>
		/// <param name="dataviewId">The unique identifier for the Dataview that you want to access.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="datasetId">The unique identifier for the Dataset.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetExternalDataViewAccessDetailsResponse> GetExternalDataViewAccessDetailsAsync(string dataviewId, string datasetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetId==null? "" : System.Uri.EscapeDataString(datasetId))+"/dataviewsv2/"+ (dataviewId==null? "" : System.Uri.EscapeDataString(dataviewId))+"/external-access-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetExternalDataViewAccessDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request programmatic credentials to use with FinSpace SDK.
		/// GetProgrammaticAccessCredentials credentials/programmatic#environmentId
		/// </summary>
		/// <param name="durationInMinutes">The time duration in which the credentials remain valid. 
		/// Minimum: 60
		/// Maximum: 720
		// </param>
		/// <param name="environmentId">The FinSpace environment identifier.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetProgrammaticAccessCredentialsResponse> GetProgrammaticAccessCredentialsAsync(int durationInMinutes, string environmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "credentials/programmatic#environmentId?durationInMinutes="+durationInMinutes+"&environmentId=" + (environmentId==null? "" : System.Uri.EscapeDataString(environmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProgrammaticAccessCredentialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for a specific user.
		/// GetUser user/{userId}
		/// </summary>
		/// <param name="userId">The unique identifier of the user to get data for.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetUserResponse> GetUserAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the details of the specified user account. You cannot update the <code>userId</code> for a user.
		/// UpdateUser user/{userId}
		/// </summary>
		/// <param name="userId">The unique identifier for the user account to update.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateUserResponse> UpdateUserAsync(string userId, UpdateUserPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A temporary Amazon S3 location, where you can copy your files from a source location to stage or use as a scratch space in FinSpace notebook.
		/// GetWorkingLocation workingLocationV1
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetWorkingLocationResponse> GetWorkingLocationAsync(GetWorkingLocationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workingLocationV1";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkingLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all available permission groups in FinSpace.
		/// ListPermissionGroups permission-group#maxResults
		/// </summary>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPermissionGroupsResponse> ListPermissionGroupsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group#maxResults?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPermissionGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the permission groups that are associated with a specific user account.
		/// ListPermissionGroupsByUser user/{userId}/permission-groups#maxResults
		/// </summary>
		/// <param name="userId">The unique identifier for the user.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPermissionGroupsByUserResponse> ListPermissionGroupsByUserAsync(string userId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/permission-groups#maxResults&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPermissionGroupsByUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all available user accounts in FinSpace.
		/// ListUsers user#maxResults
		/// </summary>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> ListUsersAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user#maxResults?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists details of all the users in a specific permission group.
		/// ListUsersByPermissionGroup permission-group/{permissionGroupId}/users#maxResults
		/// </summary>
		/// <param name="permissionGroupId">The unique identifier for the permission group.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <param name="nextToken">A token that indicates where a results page should begin.</param>
		/// <param name="maxResults">The maximum number of results per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListUsersByPermissionGroupResponse> ListUsersByPermissionGroupAsync(string permissionGroupId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permission-group/"+ (permissionGroupId==null? "" : System.Uri.EscapeDataString(permissionGroupId))+"/users#maxResults&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUsersByPermissionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the password for a specified user ID and generates a temporary one. Only a superuser can reset password for other users. Resetting the password immediately invalidates the previous password associated with the user.
		/// ResetUserPassword user/{userId}/password
		/// </summary>
		/// <param name="userId">The unique identifier of the user that a temporary password is requested for.
		/// Max length: 26
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<ResetUserPasswordResponse> ResetUserPasswordAsync(string userId, ResetUserPasswordPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResetUserPasswordResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AssociateUserToPermissionGroupPostBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateChangesetPostBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Indicates how the given change will be applied to the dataset.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public ChangeType ChangeType { get; set; }
		
		/// <summary>
		/// Source Parameters of a Changeset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceParams")]
		public System.Collections.Generic.Dictionary<string, string> SourceParams { get; set; }
		
		/// <summary>
		/// Format Parameters of a Changeset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formatParams")]
		public System.Collections.Generic.Dictionary<string, string> FormatParams { get; set; }
	}
	
	public class CreateDataViewPostBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Common Boolean data type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUpdate")]
		public System.Nullable<System.Boolean> AutoUpdate { get; set; }
		
		/// <summary>
		/// DataView Sort Column List
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortColumns")]
		public string[] SortColumns { get; set; }
		
		/// <summary>
		/// DataView Partition Column List
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partitionColumns")]
		public string[] PartitionColumns { get; set; }
		
		/// <summary>
		/// Milliseconds since UTC epoch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asOfTimestamp")]
		public System.Nullable<System.Int32> AsOfTimestamp { get; set; }
		
		/// <summary>
		/// Structure for the Dataview destination type parameters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destinationTypeParams")]
		public CreateDataViewPostBodyDestinationTypeParams DestinationTypeParams { get; set; }
	}
	
	public class CreateDataViewPostBodyDestinationTypeParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="destinationType")]
		public string DestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3DestinationExportFileFormat")]
		public ExportFileFormat S3DestinationExportFileFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3DestinationExportFileFormatOptions")]
		public S3DestinationFormatOptions S3DestinationExportFileFormatOptions { get; set; }
	}
	
	public class CreateDatasetPostBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Title for a given Dataset
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetTitle")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string DatasetTitle { get; set; }
		
		/// <summary>
		/// Dataset Kind
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DatasetKind Kind { get; set; }
		
		/// <summary>
		/// Description of a dataset
		/// Max length: 1000
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DatasetDescription { get; set; }
		
		/// <summary>
		/// A structure for Dataset owner info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerInfo")]
		public CreateDatasetPostBodyOwnerInfo OwnerInfo { get; set; }
		
		/// <summary>
		/// <p>Permission group parameters for Dataset permissions.</p> <p>Here is an example of how you could specify the <code>PermissionGroupParams</code>:</p> <p> <code> { "permissionGroupId": "0r6fCRtSTUk4XPfXQe3M0g", "datasetPermissions": [ {"permission": "ViewDatasetDetails"}, {"permission": "AddDatasetData"}, {"permission": "EditDatasetMetadata"}, {"permission": "DeleteDataset"} ] } </code> </p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissionGroupParams")]
		public CreateDatasetPostBodyPermissionGroupParams PermissionGroupParams { get; set; }
		
		/// <summary>
		/// The unique resource identifier for a Dataset.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^alias\/\S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^alias\/\S+")]
		public string Alias { get; set; }
		
		/// <summary>
		/// A union of schema types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaDefinition")]
		public CreateDatasetPostBodySchemaDefinition SchemaDefinition { get; set; }
	}
	
	public class CreateDatasetPostBodyOwnerInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	public class CreateDatasetPostBodyPermissionGroupParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissionGroupId")]
		public string PermissionGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetPermissions")]
		public ResourcePermission[] DatasetPermissions { get; set; }
	}
	
	public class CreateDatasetPostBodySchemaDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="tabularSchemaConfig")]
		public SchemaDefinition TabularSchemaConfig { get; set; }
	}
	
	public class CreatePermissionGroupPostBody
	{
		
		/// <summary>
		/// The name of the permission group.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string Name { get; set; }
		
		/// <summary>
		/// A brief description for the permission group.
		/// Max length: 4000
		/// Min length: 1
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The option to indicate FinSpace application permissions that are granted to a specific group.</p> <important> <p>When assigning application permissions, be aware that the permission <code>ManageUsersAndGroups</code> allows users to grant themselves or others access to any functionality in their FinSpace environment's application. It should only be granted to trusted users.</p> </important> <ul> <li> <p> <code>CreateDataset</code> – Group members can create new datasets.</p> </li> <li> <p> <code>ManageClusters</code> – Group members can manage Apache Spark clusters from FinSpace notebooks.</p> </li> <li> <p> <code>ManageUsersAndGroups</code> – Group members can manage users and permission groups. This is a privileged permission that allows users to grant themselves or others access to any functionality in the application. It should only be granted to trusted users.</p> </li> <li> <p> <code>ManageAttributeSets</code> – Group members can manage attribute sets.</p> </li> <li> <p> <code>ViewAuditData</code> – Group members can view audit data.</p> </li> <li> <p> <code>AccessNotebooks</code> – Group members will have access to FinSpace notebooks.</p> </li> <li> <p> <code>GetTemporaryCredentials</code> – Group members can get temporary API credentials.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationPermissions")]
		public ApplicationPermission[] ApplicationPermissions { get; set; }
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateUserPostBody
	{
		
		/// <summary>
		/// The email address of the user that you want to register. The email address serves as a uniquer identifier for each user and cannot be changed after it's created.
		/// Required
		/// Max length: 320
		/// Min length: 4
		/// Pattern: [A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(320)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// <p>The option to indicate the type of user. Use one of the following options to specify this parameter:</p> <ul> <li> <p> <code>SUPER_USER</code> – A user with permission to all the functionality and data in FinSpace.</p> </li> <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li> </ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
		
		/// <summary>
		/// The first name of the user that you want to register.
		/// Max length: 50
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The last name of the user that you want to register.
		/// Max length: 50
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string LastName { get; set; }
		
		/// <summary>
		/// <p>The option to indicate whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p> <ul> <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li> <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApiAccess ApiAccess { get; set; }
		
		/// <summary>
		/// The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiAccessPrincipalArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$")]
		public string ApiAccessPrincipalArn { get; set; }
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateDatasetPutBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Title for a given Dataset
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetTitle")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string DatasetTitle { get; set; }
		
		/// <summary>
		/// Dataset Kind
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public DatasetKind Kind { get; set; }
		
		/// <summary>
		/// Description of a dataset
		/// Max length: 1000
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DatasetDescription { get; set; }
		
		/// <summary>
		/// The unique resource identifier for a Dataset.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^alias\/\S+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^alias\/\S+")]
		public string Alias { get; set; }
		
		/// <summary>
		/// A union of schema types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaDefinition")]
		public UpdateDatasetPutBodySchemaDefinition SchemaDefinition { get; set; }
	}
	
	public class UpdateDatasetPutBodySchemaDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="tabularSchemaConfig")]
		public SchemaDefinition TabularSchemaConfig { get; set; }
	}
	
	public class UpdatePermissionGroupPutBody
	{
		
		/// <summary>
		/// The name of the permission group.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string Name { get; set; }
		
		/// <summary>
		/// A brief description for the permission group.
		/// Max length: 4000
		/// Min length: 1
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The permissions that are granted to a specific group for accessing the FinSpace application.</p> <important> <p>When assigning application permissions, be aware that the permission <code>ManageUsersAndGroups</code> allows users to grant themselves or others access to any functionality in their FinSpace environment's application. It should only be granted to trusted users.</p> </important> <ul> <li> <p> <code>CreateDataset</code> – Group members can create new datasets.</p> </li> <li> <p> <code>ManageClusters</code> – Group members can manage Apache Spark clusters from FinSpace notebooks.</p> </li> <li> <p> <code>ManageUsersAndGroups</code> – Group members can manage users and permission groups. This is a privileged permission that allows users to grant themselves or others access to any functionality in the application. It should only be granted to trusted users.</p> </li> <li> <p> <code>ManageAttributeSets</code> – Group members can manage attribute sets.</p> </li> <li> <p> <code>ViewAuditData</code> – Group members can view audit data.</p> </li> <li> <p> <code>AccessNotebooks</code> – Group members will have access to FinSpace notebooks.</p> </li> <li> <p> <code>GetTemporaryCredentials</code> – Group members can get temporary API credentials.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPermissions")]
		public ApplicationPermission[] ApplicationPermissions { get; set; }
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class DisableUserPostBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class EnableUserPostBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class UpdateChangesetPutBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Source Parameters of a Changeset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceParams")]
		public System.Collections.Generic.Dictionary<string, string> SourceParams { get; set; }
		
		/// <summary>
		/// Format Parameters of a Changeset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="formatParams")]
		public System.Collections.Generic.Dictionary<string, string> FormatParams { get; set; }
	}
	
	public class UpdateUserPutBody
	{
		
		/// <summary>
		/// <p>The option to indicate the type of user.</p> <ul> <li> <p> <code>SUPER_USER</code>– A user with permission to all the functionality and data in FinSpace.</p> </li> <li> <p> <code>APP_USER</code> – A user with specific permissions in FinSpace. The users are assigned permissions by adding them to a permission group.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UserType Type { get; set; }
		
		/// <summary>
		/// The first name of the user.
		/// Max length: 50
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The last name of the user.
		/// Max length: 50
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string LastName { get; set; }
		
		/// <summary>
		/// <p>The option to indicate whether the user can use the <code>GetProgrammaticAccessCredentials</code> API to obtain credentials that can then be used to access other FinSpace Data API operations.</p> <ul> <li> <p> <code>ENABLED</code> – The user has permissions to use the APIs.</p> </li> <li> <p> <code>DISABLED</code> – The user does not have permissions to use any APIs.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiAccess")]
		public ApiAccess ApiAccess { get; set; }
		
		/// <summary>
		/// The ARN identifier of an AWS user or role that is allowed to call the <code>GetProgrammaticAccessCredentials</code> API to obtain a credentials token for a specific FinSpace user. This must be an IAM role within your FinSpace account.
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiAccessPrincipalArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$")]
		public string ApiAccessPrincipalArn { get; set; }
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
	
	public class GetWorkingLocationPostBody
	{
		
		/// <summary>
		/// <p>Specify the type of the working location.</p> <ul> <li> <p> <code>SAGEMAKER</code> – Use the Amazon S3 location as a temporary location to store data content when working with FinSpace Notebooks that run on SageMaker studio.</p> </li> <li> <p> <code>INGESTION</code> – Use the Amazon S3 location as a staging location to copy your data content and then use the location with the Changeset creation operation.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public LocationType LocationType { get; set; }
	}
	
	public class ResetUserPasswordPostBody
	{
		
		/// <summary>
		/// Idempotence Token for API operations
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ClientToken { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
