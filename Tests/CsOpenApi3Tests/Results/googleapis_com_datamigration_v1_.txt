//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlloyDbConnectionProfile
	{
		
		/// <summary>
		/// Required. The AlloyDB cluster ID that this connection profile is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterId")]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Settings for creating an AlloyDB cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public AlloyDbSettings Settings { get; set; }
	}
	
	/// <summary>
	/// Settings for creating an AlloyDB cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlloyDbSettings
	{
		
		/// <summary>
		/// Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseVersion")]
		public System.Nullable<AlloyDbSettingsDatabaseVersion> DatabaseVersion { get; set; }
		
		/// <summary>
		/// EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// The username/password for a database user. Used for specifying initial users at cluster creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialUser")]
		public UserPassword InitialUser { get; set; }
		
		/// <summary>
		/// Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Settings for the cluster's primary instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryInstanceSettings")]
		public PrimaryInstanceSettings PrimaryInstanceSettings { get; set; }
		
		/// <summary>
		/// Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: "projects/{project_number}/global/networks/{network_id}". This is required to create a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcNetwork")]
		public string VpcNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AlloyDbSettingsDatabaseVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_14 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_15 = 2,
	}
	
	/// <summary>
	/// EncryptionConfig describes the encryption config of a cluster that is encrypted with a CMEK (customer-managed encryption key).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// The username/password for a database user. Used for specifying initial users at cluster creation time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserPassword
	{
		
		/// <summary>
		/// The initial password for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Output only. Indicates if the initial_user.password field has been set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordSet")]
		public System.Nullable<System.Boolean> PasswordSet { get; set; }
		
		/// <summary>
		/// The database username.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	/// <summary>
	/// Settings for the cluster's primary instance
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrimaryInstanceSettings
	{
		
		/// <summary>
		/// Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseFlags")]
		public System.Collections.Generic.Dictionary<string, string> DatabaseFlags { get; set; }
		
		/// <summary>
		/// Required. The ID of the AlloyDB primary instance. The ID must satisfy the regex expression "[a-z0-9-]+".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// MachineConfig describes the configuration of a machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineConfig")]
		public MachineConfig MachineConfig { get; set; }
		
		/// <summary>
		/// Output only. The private IP address for the Instance. This is the connection endpoint for an end-user application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIp")]
		public string PrivateIp { get; set; }
	}
	
	/// <summary>
	/// MachineConfig describes the configuration of a machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MachineConfig
	{
		
		/// <summary>
		/// The number of CPU's in the VM instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuCount")]
		public System.Nullable<System.Int32> CpuCount { get; set; }
	}
	
	/// <summary>
	/// Request message for 'ApplyConversionWorkspace' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplyConversionWorkspaceRequest
	{
		
		/// <summary>
		/// Optional. Specifies whether the conversion workspace is to be committed automatically after the apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoCommit")]
		public System.Nullable<System.Boolean> AutoCommit { get; set; }
		
		/// <summary>
		/// Optional. Fully qualified (Uri) name of the destination connection profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionProfile")]
		public string ConnectionProfile { get; set; }
		
		/// <summary>
		/// Optional. Only validates the apply process, but doesn't change the destination database. Only works for PostgreSQL destination connection profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dryRun")]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Filter which entities to apply. Leaving this field empty will apply all of the entities. Supports Google AIP 160 based filtering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
	}
	
	/// <summary>
	/// Apply a hash function on the value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplyHash
	{
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuidFromBytes")]
		public Empty UuidFromBytes { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Details regarding an Apply background job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplyJobDetails
	{
		
		/// <summary>
		/// Output only. The connection profile which was used for the apply job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionProfile")]
		public string ConnectionProfile { get; set; }
		
		/// <summary>
		/// Output only. AIP-160 based filter used to specify the entities to apply
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
	}
	
	/// <summary>
	/// Set to a specific value (value is converted to fit the target data type)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignSpecificValue
	{
		
		/// <summary>
		/// Required. Specific value to be assigned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Execution log of a background job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackgroundJobLogEntry
	{
		
		/// <summary>
		/// Details regarding an Apply background job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyJobDetails")]
		public ApplyJobDetails ApplyJobDetails { get; set; }
		
		/// <summary>
		/// Output only. Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionComment")]
		public string CompletionComment { get; set; }
		
		/// <summary>
		/// Output only. Job completion state, i.e. the final state after the job completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionState")]
		public System.Nullable<BackgroundJobLogEntryCompletionState> CompletionState { get; set; }
		
		/// <summary>
		/// Details regarding a Convert background job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertJobDetails")]
		public ConvertJobDetails ConvertJobDetails { get; set; }
		
		/// <summary>
		/// The timestamp when the background job was finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public string FinishTime { get; set; }
		
		/// <summary>
		/// The background job log entry ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Details regarding an Import Rules background job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importRulesJobDetails")]
		public ImportRulesJobDetails ImportRulesJobDetails { get; set; }
		
		/// <summary>
		/// The type of job that was executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public System.Nullable<BackgroundJobLogEntryJobType> JobType { get; set; }
		
		/// <summary>
		/// Output only. Whether the client requested the conversion workspace to be committed after a successful completion of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAutocommit")]
		public System.Nullable<System.Boolean> RequestAutocommit { get; set; }
		
		/// <summary>
		/// Details regarding a Seed background job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seedJobDetails")]
		public SeedJobDetails SeedJobDetails { get; set; }
		
		/// <summary>
		/// The timestamp when the background job was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundJobLogEntryCompletionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_COMPLETION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Details regarding a Convert background job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertJobDetails
	{
		
		/// <summary>
		/// Output only. AIP-160 based filter used to specify the entities to convert
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
	}
	
	/// <summary>
	/// Details regarding an Import Rules background job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportRulesJobDetails
	{
		
		/// <summary>
		/// Output only. The requested file format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileFormat")]
		public System.Nullable<ImportRulesJobDetailsFileFormat> FileFormat { get; set; }
		
		/// <summary>
		/// Output only. File names used for the import rules job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public string[] Files { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImportRulesJobDetailsFileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_RULES_FILE_FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BackgroundJobLogEntryJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND_JOB_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND_JOB_TYPE_SOURCE_SEED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND_JOB_TYPE_CONVERT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND_JOB_TYPE_APPLY_DESTINATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE = 4,
	}
	
	/// <summary>
	/// Details regarding a Seed background job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SeedJobDetails
	{
		
		/// <summary>
		/// Output only. The connection profile which was used for the seed job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionProfile")]
		public string ConnectionProfile { get; set; }
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudSqlConnectionProfile
	{
		
		/// <summary>
		/// Output only. The Cloud SQL database instance's additional (outgoing) public IP. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalPublicIp")]
		public string AdditionalPublicIp { get; set; }
		
		/// <summary>
		/// Output only. The Cloud SQL instance ID that this connection profile is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudSqlId")]
		public string CloudSqlId { get; set; }
		
		/// <summary>
		/// Output only. The Cloud SQL database instance's private IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateIp")]
		public string PrivateIp { get; set; }
		
		/// <summary>
		/// Output only. The Cloud SQL database instance's public IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicIp")]
		public string PublicIp { get; set; }
		
		/// <summary>
		/// Settings for creating a Cloud SQL database instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public CloudSqlSettings Settings { get; set; }
	}
	
	/// <summary>
	/// Settings for creating a Cloud SQL database instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudSqlSettings
	{
		
		/// <summary>
		/// The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationPolicy")]
		public System.Nullable<CloudSqlSettingsActivationPolicy> ActivationPolicy { get; set; }
		
		/// <summary>
		/// [default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoStorageIncrease")]
		public System.Nullable<System.Boolean> AutoStorageIncrease { get; set; }
		
		/// <summary>
		/// Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availabilityType")]
		public System.Nullable<CloudSqlSettingsAvailabilityType> AvailabilityType { get; set; }
		
		/// <summary>
		/// The KMS key name used for the csql instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmekKeyName")]
		public string CmekKeyName { get; set; }
		
		/// <summary>
		/// The Cloud SQL default instance level collation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
		
		/// <summary>
		/// Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCacheConfig")]
		public DataCacheConfig DataCacheConfig { get; set; }
		
		/// <summary>
		/// The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskSizeGb")]
		public string DataDiskSizeGb { get; set; }
		
		/// <summary>
		/// The type of storage: `PD_SSD` (default) or `PD_HDD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataDiskType")]
		public System.Nullable<CloudSqlSettingsDataDiskType> DataDiskType { get; set; }
		
		/// <summary>
		/// The database flags passed to the Cloud SQL instance at startup. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseFlags")]
		public System.Collections.Generic.Dictionary<string, string> DatabaseFlags { get; set; }
		
		/// <summary>
		/// The database engine type and version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseVersion")]
		public System.Nullable<CloudSqlSettingsDatabaseVersion> DatabaseVersion { get; set; }
		
		/// <summary>
		/// Optional. The edition of the given Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public System.Nullable<CloudSqlSettingsEdition> Edition { get; set; }
		
		/// <summary>
		/// IP Management configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipConfig")]
		public SqlIpConfig IpConfig { get; set; }
		
		/// <summary>
		/// Input only. Initial root password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootPassword")]
		public string RootPassword { get; set; }
		
		/// <summary>
		/// Output only. Indicates If this connection profile root password is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootPasswordSet")]
		public System.Nullable<System.Boolean> RootPasswordSet { get; set; }
		
		/// <summary>
		/// Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryZone")]
		public string SecondaryZone { get; set; }
		
		/// <summary>
		/// The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageAutoResizeLimit")]
		public string StorageAutoResizeLimit { get; set; }
		
		/// <summary>
		/// The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public string Tier { get; set; }
		
		/// <summary>
		/// The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg", "count": "3" }`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLabels")]
		public System.Collections.Generic.Dictionary<string, string> UserLabels { get; set; }
		
		/// <summary>
		/// The Google Cloud Platform zone where your Cloud SQL database instance is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloudSqlSettingsActivationPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_ACTIVATION_POLICY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALWAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEVER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloudSqlSettingsAvailabilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_AVAILABILITY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL = 2,
	}
	
	/// <summary>
	/// Data cache is an optional feature available for Cloud SQL for MySQL Enterprise Plus edition only. For more information on data cache, see [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud SQL documentation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataCacheConfig
	{
		
		/// <summary>
		/// Optional. Whether data cache is enabled for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataCacheEnabled")]
		public System.Nullable<System.Boolean> DataCacheEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloudSqlSettingsDataDiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_DATA_DISK_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_SSD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PD_HDD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloudSqlSettingsDatabaseVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_DATABASE_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_5_6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_5_7 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_18 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_26 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_27 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_28 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_30 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_31 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_32 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_33 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_34 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL_8_0_35 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_9_6 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_11 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_10 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_12 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_13 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_14 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRES_15 = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloudSqlSettingsEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE_PLUS = 2,
	}
	
	/// <summary>
	/// IP Management configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlIpConfig
	{
		
		/// <summary>
		/// Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocatedIpRange")]
		public string AllocatedIpRange { get; set; }
		
		/// <summary>
		/// The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedNetworks")]
		public SqlAclEntry[] AuthorizedNetworks { get; set; }
		
		/// <summary>
		/// Whether the instance should be assigned an IPv4 address or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableIpv4")]
		public System.Nullable<System.Boolean> EnableIpv4 { get; set; }
		
		/// <summary>
		/// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateNetwork")]
		public string PrivateNetwork { get; set; }
		
		/// <summary>
		/// Whether SSL connections over IP should be enforced or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireSsl")]
		public System.Nullable<System.Boolean> RequireSsl { get; set; }
	}
	
	/// <summary>
	/// An entry for an Access Control list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlAclEntry
	{
		
		/// <summary>
		/// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example: `2012-11-15T16:19:00.094Z`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// A label to identify this entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Input only. The time-to-leave of this access control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		/// <summary>
		/// The allowlisted value for the access control list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Column is not used as an independent entity, it is retrieved as part of a Table entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColumnEntity
	{
		
		/// <summary>
		/// Is the column of array type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="array")]
		public System.Nullable<System.Boolean> Array { get; set; }
		
		/// <summary>
		/// If the column is array, of which length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayLength")]
		public System.Nullable<System.Int32> ArrayLength { get; set; }
		
		/// <summary>
		/// Is the column auto-generated/identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoGenerated")]
		public System.Nullable<System.Boolean> AutoGenerated { get; set; }
		
		/// <summary>
		/// Charset override - instead of table level charset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charset")]
		public string Charset { get; set; }
		
		/// <summary>
		/// Collation override - instead of table level collation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
		
		/// <summary>
		/// Comment associated with the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// Column data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Default value of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Column fractional second precision - used for timestamp based datatypes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractionalSecondsPrecision")]
		public System.Nullable<System.Int32> FractionalSecondsPrecision { get; set; }
		
		/// <summary>
		/// Column length - e.g. varchar (50).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// Column name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Is the column nullable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullable")]
		public System.Nullable<System.Boolean> Nullable { get; set; }
		
		/// <summary>
		/// Column order in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ordinalPosition")]
		public System.Nullable<System.Int32> OrdinalPosition { get; set; }
		
		/// <summary>
		/// Column precision - when relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
		
		/// <summary>
		/// Column scale - when relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
		
		/// <summary>
		/// Specifies the list of values allowed in the column. Only used for set data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setValues")]
		public string[] SetValues { get; set; }
		
		/// <summary>
		/// Is the column a UDT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udt")]
		public System.Nullable<System.Boolean> Udt { get; set; }
	}
	
	/// <summary>
	/// Request message for 'CommitConversionWorkspace' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommitConversionWorkspaceRequest
	{
		
		/// <summary>
		/// Optional. Optional name of the commit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitName")]
		public string CommitName { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionalColumnSetValue
	{
		
		/// <summary>
		/// Optional. Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// Filter for fixed point number data types such as NUMERIC/NUMBER
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceNumericFilter")]
		public SourceNumericFilter SourceNumericFilter { get; set; }
		
		/// <summary>
		/// Filter for text-based data types like varchar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTextFilter")]
		public SourceTextFilter SourceTextFilter { get; set; }
		
		/// <summary>
		/// Description of data transformation during migration as part of the ConditionalColumnSetValue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueTransformation")]
		public ValueTransformation ValueTransformation { get; set; }
	}
	
	/// <summary>
	/// Filter for fixed point number data types such as NUMERIC/NUMBER
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceNumericFilter
	{
		
		/// <summary>
		/// Required. Enum to set the option defining the datatypes numeric filter has to be applied to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numericFilterOption")]
		public System.Nullable<SourceNumericFilterNumericFilterOption> NumericFilterOption { get; set; }
		
		/// <summary>
		/// Optional. The filter will match columns with precision smaller than or equal to this number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMaxPrecisionFilter")]
		public System.Nullable<System.Int32> SourceMaxPrecisionFilter { get; set; }
		
		/// <summary>
		/// Optional. The filter will match columns with scale smaller than or equal to this number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMaxScaleFilter")]
		public System.Nullable<System.Int32> SourceMaxScaleFilter { get; set; }
		
		/// <summary>
		/// Optional. The filter will match columns with precision greater than or equal to this number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMinPrecisionFilter")]
		public System.Nullable<System.Int32> SourceMinPrecisionFilter { get; set; }
		
		/// <summary>
		/// Optional. The filter will match columns with scale greater than or equal to this number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMinScaleFilter")]
		public System.Nullable<System.Int32> SourceMinScaleFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourceNumericFilterNumericFilterOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_FILTER_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_FILTER_OPTION_ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_FILTER_OPTION_LIMIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMERIC_FILTER_OPTION_LIMITLESS = 3,
	}
	
	/// <summary>
	/// Filter for text-based data types like varchar.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceTextFilter
	{
		
		/// <summary>
		/// Optional. The filter will match columns with length smaller than or equal to this number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMaxLengthFilter")]
		public string SourceMaxLengthFilter { get; set; }
		
		/// <summary>
		/// Optional. The filter will match columns with length greater than or equal to this number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceMinLengthFilter")]
		public string SourceMinLengthFilter { get; set; }
	}
	
	/// <summary>
	/// Description of data transformation during migration as part of the ConditionalColumnSetValue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValueTransformation
	{
		
		/// <summary>
		/// Apply a hash function on the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyHash")]
		public ApplyHash ApplyHash { get; set; }
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignMaxValue")]
		public Empty AssignMaxValue { get; set; }
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignMinValue")]
		public Empty AssignMinValue { get; set; }
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignNull")]
		public Empty AssignNull { get; set; }
		
		/// <summary>
		/// Set to a specific value (value is converted to fit the target data type)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignSpecificValue")]
		public AssignSpecificValue AssignSpecificValue { get; set; }
		
		/// <summary>
		/// Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleComparison")]
		public DoubleComparisonFilter DoubleComparison { get; set; }
		
		/// <summary>
		/// Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intComparison")]
		public IntComparisonFilter IntComparison { get; set; }
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNull")]
		public Empty IsNull { get; set; }
		
		/// <summary>
		/// This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roundScale")]
		public RoundToScale RoundScale { get; set; }
		
		/// <summary>
		/// A list of values to filter by in ConditionalColumnSetValue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueList")]
		public ValueListFilter ValueList { get; set; }
	}
	
	/// <summary>
	/// Filter based on relation between source value and compare value of type double in ConditionalColumnSetValue
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleComparisonFilter
	{
		
		/// <summary>
		/// Required. Double compare value to be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
		
		/// <summary>
		/// Required. Relation between source value and compare value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueComparison")]
		public System.Nullable<DoubleComparisonFilterValueComparison> ValueComparison { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleComparisonFilterValueComparison
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_COMPARISON_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_COMPARISON_IF_VALUE_SMALLER_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_COMPARISON_IF_VALUE_LARGER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN = 4,
	}
	
	/// <summary>
	/// Filter based on relation between source value and compare value of type integer in ConditionalColumnSetValue
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntComparisonFilter
	{
		
		/// <summary>
		/// Required. Integer compare value to be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Required. Relation between source value and compare value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueComparison")]
		public DoubleComparisonFilterValueComparison ValueComparison { get; set; }
	}
	
	/// <summary>
	/// This allows the data to change scale, for example if the source is 2 digits after the decimal point, specify round to scale value = 2. If for example the value needs to be converted to an integer, use round to scale value = 0.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoundToScale
	{
		
		/// <summary>
		/// Required. Scale value to be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
	}
	
	/// <summary>
	/// A list of values to filter by in ConditionalColumnSetValue
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValueListFilter
	{
		
		/// <summary>
		/// Required. Whether to ignore case when filtering by values. Defaults to false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreCase")]
		public System.Nullable<System.Boolean> IgnoreCase { get; set; }
		
		/// <summary>
		/// Required. Indicates whether the filter matches rows with values that are present in the list or those with values not present in it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuePresentList")]
		public System.Nullable<ValueListFilterValuePresentList> ValuePresentList { get; set; }
		
		/// <summary>
		/// Required. The list to be used to filter by
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValueListFilterValuePresentList
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_PRESENT_IN_LIST_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_PRESENT_IN_LIST_IF_VALUE_LIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_PRESENT_IN_LIST_IF_VALUE_NOT_LIST = 2,
	}
	
	/// <summary>
	/// A connection profile definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectionProfile
	{
		
		/// <summary>
		/// Specifies required connection parameters, and the parameters required to create an AlloyDB destination cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alloydb")]
		public AlloyDbConnectionProfile Alloydb { get; set; }
		
		/// <summary>
		/// Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudsql")]
		public CloudSqlConnectionProfile Cloudsql { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The connection profile display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Specifies connection parameters required specifically for MySQL databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mysql")]
		public MySqlConnectionProfile Mysql { get; set; }
		
		/// <summary>
		/// The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies connection parameters required specifically for Oracle databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oracle")]
		public OracleConnectionProfile Oracle { get; set; }
		
		/// <summary>
		/// Specifies connection parameters required specifically for PostgreSQL databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postgresql")]
		public PostgreSqlConnectionProfile Postgresql { get; set; }
		
		/// <summary>
		/// The database provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public System.Nullable<ConnectionProfileProvider> Provider { get; set; }
		
		/// <summary>
		/// The current connection profile state (e.g. DRAFT, READY, or FAILED).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ConnectionProfileState> State { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the resource was last updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Specifies connection parameters required specifically for MySQL databases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MySqlConnectionProfile
	{
		
		/// <summary>
		/// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudSqlId")]
		public string CloudSqlId { get; set; }
		
		/// <summary>
		/// Required. The IP or hostname of the source MySQL database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Output only. Indicates If this connection profile password is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordSet")]
		public System.Nullable<System.Boolean> PasswordSet { get; set; }
		
		/// <summary>
		/// Required. The network port of the source MySQL database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// SSL configuration information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssl")]
		public SslConfig Ssl { get; set; }
		
		/// <summary>
		/// Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// SSL configuration information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslConfig
	{
		
		/// <summary>
		/// Required. Input only. The x509 PEM-encoded certificate of the CA that signed the source database server's certificate. The replica will use this certificate to verify it's connecting to the right host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caCertificate")]
		public string CaCertificate { get; set; }
		
		/// <summary>
		/// Input only. The x509 PEM-encoded certificate that will be used by the replica to authenticate against the source database server.If this field is used then the 'client_key' field is mandatory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientCertificate")]
		public string ClientCertificate { get; set; }
		
		/// <summary>
		/// Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' field is mandatory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientKey")]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// Output only. The ssl config type according to 'client_key', 'client_certificate' and 'ca_certificate'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SslConfigType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_CLIENT = 2,
	}
	
	/// <summary>
	/// Specifies connection parameters required specifically for Oracle databases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OracleConnectionProfile
	{
		
		/// <summary>
		/// Required. Database service for the Oracle connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseService")]
		public string DatabaseService { get; set; }
		
		/// <summary>
		/// Forward SSH Tunnel connectivity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardSshConnectivity")]
		public ForwardSshTunnelConnectivity ForwardSshConnectivity { get; set; }
		
		/// <summary>
		/// Required. The IP or hostname of the source Oracle database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether a new password is included in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordSet")]
		public System.Nullable<System.Boolean> PasswordSet { get; set; }
		
		/// <summary>
		/// Required. The network port of the source Oracle database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Private Connectivity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateConnectivity")]
		public PrivateConnectivity PrivateConnectivity { get; set; }
		
		/// <summary>
		/// SSL configuration information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssl")]
		public SslConfig Ssl { get; set; }
		
		/// <summary>
		/// Static IP address connectivity configured on service project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticServiceIpConnectivity")]
		public StaticServiceIpConnectivity StaticServiceIpConnectivity { get; set; }
		
		/// <summary>
		/// Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Forward SSH Tunnel connectivity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ForwardSshTunnelConnectivity
	{
		
		/// <summary>
		/// Required. Hostname for the SSH tunnel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		/// <summary>
		/// Input only. SSH password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Port for the SSH tunnel, default value is 22.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Input only. SSH private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// Required. Username for the SSH tunnel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Private Connectivity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateConnectivity
	{
		
		/// <summary>
		/// Required. The resource name (URI) of the private connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateConnection")]
		public string PrivateConnection { get; set; }
	}
	
	/// <summary>
	/// Static IP address connectivity configured on service project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StaticServiceIpConnectivity
	{
	}
	
	/// <summary>
	/// Specifies connection parameters required specifically for PostgreSQL databases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostgreSqlConnectionProfile
	{
		
		/// <summary>
		/// Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alloydbClusterId")]
		public string AlloydbClusterId { get; set; }
		
		/// <summary>
		/// If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudSqlId")]
		public string CloudSqlId { get; set; }
		
		/// <summary>
		/// Required. The IP or hostname of the source PostgreSQL database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Output only. If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkArchitecture")]
		public System.Nullable<PostgreSqlConnectionProfileNetworkArchitecture> NetworkArchitecture { get; set; }
		
		/// <summary>
		/// Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Output only. Indicates If this connection profile password is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordSet")]
		public System.Nullable<System.Boolean> PasswordSet { get; set; }
		
		/// <summary>
		/// Required. The network port of the source PostgreSQL database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateServiceConnectConnectivity")]
		public PrivateServiceConnectConnectivity PrivateServiceConnectConnectivity { get; set; }
		
		/// <summary>
		/// SSL configuration information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssl")]
		public SslConfig Ssl { get; set; }
		
		/// <summary>
		/// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticIpConnectivity")]
		public StaticIpConnectivity StaticIpConnectivity { get; set; }
		
		/// <summary>
		/// Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PostgreSqlConnectionProfileNetworkArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_ARCHITECTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER = 2,
	}
	
	/// <summary>
	/// [Private Service Connect connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateServiceConnectConnectivity
	{
		
		/// <summary>
		/// Required. A service attachment that exposes a database, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAttachment")]
		public string ServiceAttachment { get; set; }
	}
	
	/// <summary>
	/// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StaticIpConnectivity
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConnectionProfileProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_PROVIDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUDSQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOYDB = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConnectionProfileState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 7,
	}
	
	/// <summary>
	/// Constraint is not used as an independent entity, it is retrieved as part of another entity such as Table or View.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConstraintEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The name of the table constraint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reference columns which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full names of referenced columns by the foreign key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceColumns")]
		public string[] ReferenceColumns { get; set; }
		
		/// <summary>
		/// Reference table which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full name of the referenced table by the foreign key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceTable")]
		public string ReferenceTable { get; set; }
		
		/// <summary>
		/// Table columns used as part of the Constraint, for example primary key constraint should list the columns which constitutes the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableColumns")]
		public string[] TableColumns { get; set; }
		
		/// <summary>
		/// Table which is associated with the constraint. In case the constraint is defined on a table, this field is left empty as this information is stored in parent_name. However, if constraint is defined on a view, this field stores the table name on which the view is defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		/// <summary>
		/// Type of constraint, for example unique, primary key, foreign key (currently only primary key is supported).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The main conversion workspace resource entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionWorkspace
	{
		
		/// <summary>
		/// Output only. The timestamp when the workspace resource was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The type and version of a source or destination database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public DatabaseEngineInfo Destination { get; set; }
		
		/// <summary>
		/// Optional. The display name for the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="globalSettings")]
		public System.Collections.Generic.Dictionary<string, string> GlobalSettings { get; set; }
		
		/// <summary>
		/// Output only. Whether the workspace has uncommitted changes (changes which were made after the workspace was committed).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasUncommittedChanges")]
		public System.Nullable<System.Boolean> HasUncommittedChanges { get; set; }
		
		/// <summary>
		/// Output only. The latest commit ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCommitId")]
		public string LatestCommitId { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the workspace was committed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCommitTime")]
		public string LatestCommitTime { get; set; }
		
		/// <summary>
		/// Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type and version of a source or destination database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public DatabaseEngineInfo Source { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the workspace resource was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The type and version of a source or destination database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseEngineInfo
	{
		
		/// <summary>
		/// Required. Engine type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public System.Nullable<DatabaseEngineInfoEngine> Engine { get; set; }
		
		/// <summary>
		/// Required. Engine version, for example "12.c.1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatabaseEngineInfoEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENGINE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRESQL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE = 3,
	}
	
	/// <summary>
	/// A conversion workspace's version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionWorkspaceInfo
	{
		
		/// <summary>
		/// The commit ID of the conversion workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		/// <summary>
		/// The resource name (URI) of the conversion workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request message for 'ConvertConversionWorkspace' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertConversionWorkspaceRequest
	{
		
		/// <summary>
		/// Optional. Specifies whether the conversion workspace is to be committed automatically after the conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoCommit")]
		public System.Nullable<System.Boolean> AutoCommit { get; set; }
		
		/// <summary>
		/// Optional. Automatically convert the full entity path for each entity specified by the filter. For example, if the filter specifies a table, that table schema (and database if there is one) will also be converted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertFullPath")]
		public System.Nullable<System.Boolean> ConvertFullPath { get; set; }
		
		/// <summary>
		/// Optional. Filter the entities to convert. Leaving this field empty will convert all of the entities. Supports Google AIP-160 style filtering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConvertRowIdToColumn
	{
		
		/// <summary>
		/// Required. Only work on tables without primary key defined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onlyIfNoPrimaryKey")]
		public System.Nullable<System.Boolean> OnlyIfNoPrimaryKey { get; set; }
	}
	
	/// <summary>
	/// The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseEntity
	{
		
		/// <summary>
		/// DatabaseInstance acts as a parent entity to other database entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public DatabaseInstanceEntity Database { get; set; }
		
		/// <summary>
		/// Function's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseFunction")]
		public FunctionEntity DatabaseFunction { get; set; }
		
		/// <summary>
		/// Package's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databasePackage")]
		public PackageEntity DatabasePackage { get; set; }
		
		/// <summary>
		/// Details about the entity DDL script. Multiple DDL scripts are provided for child entities such as a table entity will have one DDL for the table with additional DDLs for each index, constraint and such.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityDdl")]
		public EntityDdl[] EntityDdl { get; set; }
		
		/// <summary>
		/// The type of the database entity (table, view, index, ...).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public EntityDdlEntityType EntityType { get; set; }
		
		/// <summary>
		/// Details about the various issues found for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public EntityIssue[] Issues { get; set; }
		
		/// <summary>
		/// Details about entity mappings. For source tree entities, this holds the draft entities which were generated by the mapping rules. For draft tree entities, this holds the source entities which were converted to form the draft entity. Destination entities will have no mapping details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public EntityMapping[] Mappings { get; set; }
		
		/// <summary>
		/// MaterializedView's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materializedView")]
		public MaterializedViewEntity MaterializedView { get; set; }
		
		/// <summary>
		/// The full name of the parent entity (e.g. schema name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentEntity")]
		public string ParentEntity { get; set; }
		
		/// <summary>
		/// Schema typically has no parent entity, but can have a parent entity DatabaseInstance (for database engines which support it). For some database engines, the terms schema and user can be used interchangeably when they refer to a namespace or a collection of other database entities. Can store additional information which is schema specific.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public SchemaEntity Schema { get; set; }
		
		/// <summary>
		/// Sequence's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public SequenceEntity Sequence { get; set; }
		
		/// <summary>
		/// The short name (e.g. table name) of the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
		
		/// <summary>
		/// Stored procedure's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storedProcedure")]
		public StoredProcedureEntity StoredProcedure { get; set; }
		
		/// <summary>
		/// Synonym's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synonym")]
		public SynonymEntity Synonym { get; set; }
		
		/// <summary>
		/// Table's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public TableEntity Table { get; set; }
		
		/// <summary>
		/// The type of tree the entity belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tree")]
		public System.Nullable<DatabaseEntityTree> Tree { get; set; }
		
		/// <summary>
		/// UDT's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udt")]
		public UDTEntity Udt { get; set; }
		
		/// <summary>
		/// View's parent is a schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public ViewEntity View { get; set; }
	}
	
	/// <summary>
	/// DatabaseInstance acts as a parent entity to other database entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseInstanceEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
	}
	
	/// <summary>
	/// Function's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FunctionEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The SQL code which creates the function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlCode")]
		public string SqlCode { get; set; }
	}
	
	/// <summary>
	/// Package's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The SQL code which creates the package body. If the package specification has cursors or subprograms, then the package body is mandatory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageBody")]
		public string PackageBody { get; set; }
		
		/// <summary>
		/// The SQL code which creates the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageSqlCode")]
		public string PackageSqlCode { get; set; }
	}
	
	/// <summary>
	/// A single DDL statement for a specific entity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityDdl
	{
		
		/// <summary>
		/// The actual ddl code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ddl")]
		public string Ddl { get; set; }
		
		/// <summary>
		/// Type of DDL (Create, Alter).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ddlType")]
		public string DdlType { get; set; }
		
		/// <summary>
		/// The name of the database entity the ddl refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public string Entity { get; set; }
		
		/// <summary>
		/// The entity type (if the DDL is for a sub entity).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public System.Nullable<EntityDdlEntityType> EntityType { get; set; }
		
		/// <summary>
		/// EntityIssues found for this ddl.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueId")]
		public string[] IssueId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityDdlEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_SCHEMA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_TABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_COLUMN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_CONSTRAINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_INDEX = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_TRIGGER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_VIEW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_SEQUENCE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_STORED_PROCEDURE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_FUNCTION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_SYNONYM = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_DATABASE_PACKAGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_UDT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_TYPE_DATABASE = 15,
	}
	
	/// <summary>
	/// Issue related to the entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityIssue
	{
		
		/// <summary>
		/// Error/Warning code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The ddl which caused the issue, if relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ddl")]
		public string Ddl { get; set; }
		
		/// <summary>
		/// The entity type (if the DDL is for a sub entity).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public EntityDdlEntityType EntityType { get; set; }
		
		/// <summary>
		/// Unique Issue ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Issue detailed message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Issue position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public Position Position { get; set; }
		
		/// <summary>
		/// Severity of the issue
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<EntityIssueSeverity> Severity { get; set; }
		
		/// <summary>
		/// The type of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EntityIssueType> Type { get; set; }
	}
	
	/// <summary>
	/// Issue position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Position
	{
		
		/// <summary>
		/// Issue column number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public System.Nullable<System.Int32> Column { get; set; }
		
		/// <summary>
		/// Issue length
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Issue line number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public System.Nullable<System.Int32> Line { get; set; }
		
		/// <summary>
		/// Issue offset
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityIssueSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_SEVERITY_INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_SEVERITY_WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_SEVERITY_ERROR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityIssueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_TYPE_DDL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_TYPE_APPLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUE_TYPE_CONVERT = 3,
	}
	
	/// <summary>
	/// Details of the mappings of a database entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityMapping
	{
		
		/// <summary>
		/// Target entity full name. The draft entity can also include a column, index or constraint using the same naming notation schema.table.column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draftEntity")]
		public string DraftEntity { get; set; }
		
		/// <summary>
		/// Type of draft entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="draftType")]
		public EntityDdlEntityType DraftType { get; set; }
		
		/// <summary>
		/// Entity mapping log entries. Multiple rules can be effective and contribute changes to a converted entity, such as a rule can handle the entity name, another rule can handle an entity type. In addition, rules which did not change the entity are also logged along with the reason preventing them to do so.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingLog")]
		public EntityMappingLogEntry[] MappingLog { get; set; }
		
		/// <summary>
		/// Source entity full name. The source entity can also be a column, index or constraint using the same naming notation schema.table.column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceEntity")]
		public string SourceEntity { get; set; }
		
		/// <summary>
		/// Type of source entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public EntityDdlEntityType SourceType { get; set; }
	}
	
	/// <summary>
	/// A single record of a rule which was used for a mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityMappingLogEntry
	{
		
		/// <summary>
		/// Comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingComment")]
		public string MappingComment { get; set; }
		
		/// <summary>
		/// Which rule caused this log entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleId")]
		public string RuleId { get; set; }
		
		/// <summary>
		/// Rule revision ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleRevisionId")]
		public string RuleRevisionId { get; set; }
	}
	
	/// <summary>
	/// MaterializedView's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaterializedViewEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The SQL code which creates the view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlCode")]
		public string SqlCode { get; set; }
	}
	
	/// <summary>
	/// Schema typically has no parent entity, but can have a parent entity DatabaseInstance (for database engines which support it). For some database engines, the terms schema and user can be used interchangeably when they refer to a namespace or a collection of other database entities. Can store additional information which is schema specific.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
	}
	
	/// <summary>
	/// Sequence's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SequenceEntity
	{
		
		/// <summary>
		/// Indicates number of entries to cache / precreate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cache")]
		public string Cache { get; set; }
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// Indicates whether the sequence value should cycle through.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cycle")]
		public System.Nullable<System.Boolean> Cycle { get; set; }
		
		/// <summary>
		/// Increment value for the sequence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="increment")]
		public string Increment { get; set; }
		
		/// <summary>
		/// Maximum number for the sequence represented as bytes to accommodate large. numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public string MaxValue { get; set; }
		
		/// <summary>
		/// Minimum number for the sequence represented as bytes to accommodate large. numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public string MinValue { get; set; }
		
		/// <summary>
		/// Start number for the sequence represented as bytes to accommodate large. numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startValue")]
		public string StartValue { get; set; }
	}
	
	/// <summary>
	/// Stored procedure's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StoredProcedureEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The SQL code which creates the stored procedure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlCode")]
		public string SqlCode { get; set; }
	}
	
	/// <summary>
	/// Synonym's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SynonymEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The name of the entity for which the synonym is being created (the source).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceEntity")]
		public string SourceEntity { get; set; }
		
		/// <summary>
		/// The type of the entity for which the synonym is being created (usually a table or a sequence).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public EntityDdlEntityType SourceType { get; set; }
	}
	
	/// <summary>
	/// Table's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableEntity
	{
		
		/// <summary>
		/// Table columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public ColumnEntity[] Columns { get; set; }
		
		/// <summary>
		/// Comment associated with the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Table constraints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public ConstraintEntity[] Constraints { get; set; }
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// Table indices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indices")]
		public IndexEntity[] Indices { get; set; }
		
		/// <summary>
		/// Table triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public TriggerEntity[] Triggers { get; set; }
	}
	
	/// <summary>
	/// Index is not used as an independent entity, it is retrieved as part of a Table entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IndexEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The name of the index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Table columns used as part of the Index, for example B-TREE index should list the columns which constitutes the index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableColumns")]
		public string[] TableColumns { get; set; }
		
		/// <summary>
		/// Type of index, for example B-TREE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Boolean value indicating whether the index is unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique")]
		public System.Nullable<System.Boolean> Unique { get; set; }
	}
	
	/// <summary>
	/// Trigger is not used as an independent entity, it is retrieved as part of a Table entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggerEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The name of the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The SQL code which creates the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlCode")]
		public string SqlCode { get; set; }
		
		/// <summary>
		/// Indicates when the trigger fires, for example BEFORE STATEMENT, AFTER EACH ROW.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public string TriggerType { get; set; }
		
		/// <summary>
		/// The DML, DDL, or database events that fire the trigger, for example INSERT, UPDATE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggeringEvents")]
		public string[] TriggeringEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatabaseEntityTree
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION = 3,
	}
	
	/// <summary>
	/// UDT's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UDTEntity
	{
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The SQL code which creates the udt body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udtBody")]
		public string UdtBody { get; set; }
		
		/// <summary>
		/// The SQL code which creates the udt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udtSqlCode")]
		public string UdtSqlCode { get; set; }
	}
	
	/// <summary>
	/// View's parent is a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViewEntity
	{
		
		/// <summary>
		/// View constraints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="constraints")]
		public ConstraintEntity[] Constraints { get; set; }
		
		/// <summary>
		/// Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// The SQL code which creates the view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlCode")]
		public string SqlCode { get; set; }
	}
	
	/// <summary>
	/// A message defining the database engine and provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseType
	{
		
		/// <summary>
		/// The database engine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="engine")]
		public DatabaseEngineInfoEngine Engine { get; set; }
		
		/// <summary>
		/// The database provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ConnectionProfileProvider Provider { get; set; }
	}
	
	/// <summary>
	/// Request message for 'DemoteDestination' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DemoteDestinationRequest
	{
	}
	
	/// <summary>
	/// Response message for 'DescribeConversionWorkspaceRevisions' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeConversionWorkspaceRevisionsResponse
	{
		
		/// <summary>
		/// The list of conversion workspace revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisions")]
		public ConversionWorkspace[] Revisions { get; set; }
	}
	
	/// <summary>
	/// Response message for 'DescribeDatabaseEntities' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatabaseEntitiesResponse
	{
		
		/// <summary>
		/// The list of database entities for the conversion workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseEntities")]
		public DatabaseEntity[] DatabaseEntities { get; set; }
		
		/// <summary>
		/// A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Dump flag definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DumpFlag
	{
		
		/// <summary>
		/// The name of the flag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Dump flags definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DumpFlags
	{
		
		/// <summary>
		/// The flags for the initial dump.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dumpFlags")]
		public DumpFlag[] DumpFlags1 { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityMove
	{
		
		/// <summary>
		/// Required. The new schema
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSchema")]
		public string NewSchema { get; set; }
	}
	
	/// <summary>
	/// Response message for a 'FetchStaticIps' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchStaticIpsResponse
	{
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of static IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticIps")]
		public string[] StaticIps { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterTableColumns
	{
		
		/// <summary>
		/// Optional. List of columns to be excluded for a particular table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeColumns")]
		public string[] ExcludeColumns { get; set; }
		
		/// <summary>
		/// Optional. List of columns to be included for a particular table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeColumns")]
		public string[] IncludeColumns { get; set; }
	}
	
	/// <summary>
	/// Request message for 'GenerateSshScript' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateSshScriptRequest
	{
		
		/// <summary>
		/// Required. Bastion VM Instance name to use or to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public string Vm { get; set; }
		
		/// <summary>
		/// VM creation configuration message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmCreationConfig")]
		public VmCreationConfig VmCreationConfig { get; set; }
		
		/// <summary>
		/// The port that will be open on the bastion host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmPort")]
		public System.Nullable<System.Int32> VmPort { get; set; }
		
		/// <summary>
		/// VM selection configuration message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSelectionConfig")]
		public VmSelectionConfig VmSelectionConfig { get; set; }
	}
	
	/// <summary>
	/// VM creation configuration message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VmCreationConfig
	{
		
		/// <summary>
		/// The subnet name the vm needs to be created in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
		
		/// <summary>
		/// Required. VM instance machine type to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmMachineType")]
		public string VmMachineType { get; set; }
		
		/// <summary>
		/// The Google Cloud Platform zone to create the VM in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmZone")]
		public string VmZone { get; set; }
	}
	
	/// <summary>
	/// VM selection configuration message
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VmSelectionConfig
	{
		
		/// <summary>
		/// Required. The Google Cloud Platform zone the VM is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmZone")]
		public string VmZone { get; set; }
	}
	
	/// <summary>
	/// Request message for 'GenerateTcpProxyScript' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateTcpProxyScriptRequest
	{
		
		/// <summary>
		/// Required. The type of the Compute instance that will host the proxy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmMachineType")]
		public string VmMachineType { get; set; }
		
		/// <summary>
		/// Required. The name of the Compute instance that will host the proxy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmName")]
		public string VmName { get; set; }
		
		/// <summary>
		/// Required. The name of the subnet the Compute instance will use for private connectivity. Must be supplied in the form of projects/{project}/regions/{region}/subnetworks/{subnetwork}. Note: the region for the subnet must match the Compute instance region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmSubnet")]
		public string VmSubnet { get; set; }
		
		/// <summary>
		/// Optional. The Google Cloud Platform zone to create the VM in. The fully qualified name of the zone must be specified, including the region name, for example "us-central1-b". If not specified, uses the "-b" zone of the destination Connection Profile's region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmZone")]
		public string VmZone { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleCloudClouddmsV1OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedCancellation")]
		public System.Nullable<System.Boolean> RequestedCancellation { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Request message for 'ImportMappingRules' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportMappingRulesRequest
	{
		
		/// <summary>
		/// Required. Should the conversion workspace be committed automatically after the import operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoCommit")]
		public System.Nullable<System.Boolean> AutoCommit { get; set; }
		
		/// <summary>
		/// Required. One or more rules files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulesFiles")]
		public RulesFile[] RulesFiles { get; set; }
		
		/// <summary>
		/// Required. The format of the rules content file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulesFormat")]
		public ImportRulesJobDetailsFileFormat RulesFormat { get; set; }
	}
	
	/// <summary>
	/// Details of a single rules file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RulesFile
	{
		
		/// <summary>
		/// Required. The text content of the rules that needs to be converted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulesContent")]
		public string RulesContent { get; set; }
		
		/// <summary>
		/// Required. The filename of the rules that needs to be converted. The filename is used mainly so that future logs of the import rules job contain it, and can therefore be searched by it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulesSourceFilename")]
		public string RulesSourceFilename { get; set; }
	}
	
	/// <summary>
	/// Response message for 'ListConnectionProfiles' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConnectionProfilesResponse
	{
		
		/// <summary>
		/// The response list of connection profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionProfiles")]
		public ConnectionProfile[] ConnectionProfiles { get; set; }
		
		/// <summary>
		/// A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Response message for 'ListConversionWorkspaces' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConversionWorkspacesResponse
	{
		
		/// <summary>
		/// The list of conversion workspace objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionWorkspaces")]
		public ConversionWorkspace[] ConversionWorkspaces { get; set; }
		
		/// <summary>
		/// A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response message for 'ListMappingRulesRequest' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMappingRulesResponse
	{
		
		/// <summary>
		/// The list of conversion workspace mapping rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingRules")]
		public MappingRule[] MappingRules { get; set; }
		
		/// <summary>
		/// A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Definition of a transformation that is to be applied to a group of entities in the source schema. Several such transformations can be applied to an entity sequentially to define the corresponding entity in the target schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MappingRule
	{
		
		/// <summary>
		/// Options to configure rule type ConditionalColumnSetValue. The rule is used to transform the data which is being replicated/migrated. The rule filter field can refer to one or more entities. The rule scope can be one of: Column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditionalColumnSetValue")]
		public ConditionalColumnSetValue ConditionalColumnSetValue { get; set; }
		
		/// <summary>
		/// Options to configure rule type ConvertROWIDToColumn. The rule is used to add column rowid to destination tables based on an Oracle rowid function/property. The rule filter field can refer to one or more entities. The rule scope can be one of: Table. This rule requires additional filter to be specified beyond the basic rule filter field, which is whether or not to work on tables which already have a primary key defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertRowidColumn")]
		public ConvertRowIdToColumn ConvertRowidColumn { get; set; }
		
		/// <summary>
		/// Optional. A human readable name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Options to configure rule type EntityMove. The rule is used to move an entity to a new schema. The rule filter field can refer to one or more entities. The rule scope can be one of: Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityMove")]
		public EntityMove EntityMove { get; set; }
		
		/// <summary>
		/// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public MappingRuleFilter Filter { get; set; }
		
		/// <summary>
		/// Options to configure rule type FilterTableColumns. The rule is used to filter the list of columns to include or exclude from a table. The rule filter field can refer to one entity. The rule scope can be: Table Only one of the two lists can be specified for the rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterTableColumns")]
		public FilterTableColumns FilterTableColumns { get; set; }
		
		/// <summary>
		/// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiColumnDataTypeChange")]
		public MultiColumnDatatypeChange MultiColumnDataTypeChange { get; set; }
		
		/// <summary>
		/// Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="multiEntityRename")]
		public MultiEntityRename MultiEntityRename { get; set; }
		
		/// <summary>
		/// Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The timestamp that the revision was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionCreateTime")]
		public string RevisionCreateTime { get; set; }
		
		/// <summary>
		/// Output only. The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Required. The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleOrder")]
		public string RuleOrder { get; set; }
		
		/// <summary>
		/// Required. The rule scope
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleScope")]
		public EntityDdlEntityType RuleScope { get; set; }
		
		/// <summary>
		/// Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setTablePrimaryKey")]
		public SetTablePrimaryKey SetTablePrimaryKey { get; set; }
		
		/// <summary>
		/// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleColumnChange")]
		public SingleColumnChange SingleColumnChange { get; set; }
		
		/// <summary>
		/// Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleEntityRename")]
		public SingleEntityRename SingleEntityRename { get; set; }
		
		/// <summary>
		/// Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singlePackageChange")]
		public SinglePackageChange SinglePackageChange { get; set; }
		
		/// <summary>
		/// Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSqlChange")]
		public SourceSqlChange SourceSqlChange { get; set; }
		
		/// <summary>
		/// Optional. The mapping rule state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MappingRuleState> State { get; set; }
	}
	
	/// <summary>
	/// A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MappingRuleFilter
	{
		
		/// <summary>
		/// Optional. The rule should be applied to specific entities defined by their fully qualified names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public string[] Entities { get; set; }
		
		/// <summary>
		/// Optional. The rule should be applied to entities whose non-qualified name contains the given string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityNameContains")]
		public string EntityNameContains { get; set; }
		
		/// <summary>
		/// Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityNamePrefix")]
		public string EntityNamePrefix { get; set; }
		
		/// <summary>
		/// Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityNameSuffix")]
		public string EntityNameSuffix { get; set; }
		
		/// <summary>
		/// Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentEntity")]
		public string ParentEntity { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data type and associated properties of multiple columns at once. The rule filter field can refer to one or more entities. The rule scope can be one of:Column. This rule requires additional filters to be specified beyond the basic rule filter field, which is the source data type, but the rule supports additional filtering capabilities such as the minimum and maximum field length. All additional filters which are specified are required to be met in order for the rule to be applied (logical AND between the fields).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiColumnDatatypeChange
	{
		
		/// <summary>
		/// Optional. Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// Required. New data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newDataType")]
		public string NewDataType { get; set; }
		
		/// <summary>
		/// Optional. Column fractional seconds precision - used only for timestamp based datatypes - if not specified and relevant uses the source column fractional seconds precision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideFractionalSecondsPrecision")]
		public System.Nullable<System.Int32> OverrideFractionalSecondsPrecision { get; set; }
		
		/// <summary>
		/// Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source column length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideLength")]
		public string OverrideLength { get; set; }
		
		/// <summary>
		/// Optional. Column precision - when relevant - if not specified and relevant uses the source column precision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridePrecision")]
		public System.Nullable<System.Int32> OverridePrecision { get; set; }
		
		/// <summary>
		/// Optional. Column scale - when relevant - if not specified and relevant uses the source column scale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideScale")]
		public System.Nullable<System.Int32> OverrideScale { get; set; }
		
		/// <summary>
		/// Required. Filter on source data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceDataTypeFilter")]
		public string SourceDataTypeFilter { get; set; }
		
		/// <summary>
		/// Filter for fixed point number data types such as NUMERIC/NUMBER
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceNumericFilter")]
		public SourceNumericFilter SourceNumericFilter { get; set; }
		
		/// <summary>
		/// Filter for text-based data types like varchar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTextFilter")]
		public SourceTextFilter SourceTextFilter { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiEntityRename
	{
		
		/// <summary>
		/// Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newNamePattern")]
		public string NewNamePattern { get; set; }
		
		/// <summary>
		/// Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceNameTransformation")]
		public System.Nullable<MultiEntityRenameSourceNameTransformation> SourceNameTransformation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MultiEntityRenameSourceNameTransformation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_NAME_TRANSFORMATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_NAME_TRANSFORMATION_LOWER_CASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_NAME_TRANSFORMATION_UPPER_CASE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE = 4,
	}
	
	/// <summary>
	/// Options to configure rule type SetTablePrimaryKey. The rule is used to specify the columns and name to configure/alter the primary key of a table. The rule filter field can refer to one entity. The rule scope can be one of: Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetTablePrimaryKey
	{
		
		/// <summary>
		/// Optional. Name for the primary key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKey")]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// Required. List of column names for the primary key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryKeyColumns")]
		public string[] PrimaryKeyColumns { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type SingleColumnChange. The rule is used to change the properties of a column. The rule filter field can refer to one entity. The rule scope can be one of: Column. When using this rule, if a field is not specified than the destination column's configuration will be the same as the one in the source column..
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SingleColumnChange
	{
		
		/// <summary>
		/// Optional. Is the column of array type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="array")]
		public System.Nullable<System.Boolean> Array { get; set; }
		
		/// <summary>
		/// Optional. The length of the array, only relevant if the column type is an array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrayLength")]
		public System.Nullable<System.Int32> ArrayLength { get; set; }
		
		/// <summary>
		/// Optional. Is the column auto-generated/identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoGenerated")]
		public System.Nullable<System.Boolean> AutoGenerated { get; set; }
		
		/// <summary>
		/// Optional. Charset override - instead of table level charset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charset")]
		public string Charset { get; set; }
		
		/// <summary>
		/// Optional. Collation override - instead of table level collation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collation")]
		public string Collation { get; set; }
		
		/// <summary>
		/// Optional. Comment associated with the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Optional. Custom engine specific features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFeatures")]
		public System.Collections.Generic.Dictionary<string, object> CustomFeatures { get; set; }
		
		/// <summary>
		/// Optional. Column data type name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataType")]
		public string DataType { get; set; }
		
		/// <summary>
		/// Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) - when relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fractionalSecondsPrecision")]
		public System.Nullable<System.Int32> FractionalSecondsPrecision { get; set; }
		
		/// <summary>
		/// Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// Optional. Is the column nullable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullable")]
		public System.Nullable<System.Boolean> Nullable { get; set; }
		
		/// <summary>
		/// Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
		
		/// <summary>
		/// Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
		
		/// <summary>
		/// Optional. Specifies the list of values allowed in the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setValues")]
		public string[] SetValues { get; set; }
		
		/// <summary>
		/// Optional. Is the column a UDT (User-defined Type).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udt")]
		public System.Nullable<System.Boolean> Udt { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type SingleEntityRename. The rule is used to rename an entity. The rule filter field can refer to only one entity. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT, Synonym
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SingleEntityRename
	{
		
		/// <summary>
		/// Required. The new name of the destination entity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newName")]
		public string NewName { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type SinglePackageChange. The rule is used to alter the sql code for a package entities. The rule filter field can refer to one entity. The rule scope can be: Package
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SinglePackageChange
	{
		
		/// <summary>
		/// Optional. Sql code for package body
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageBody")]
		public string PackageBody { get; set; }
		
		/// <summary>
		/// Optional. Sql code for package description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageDescription")]
		public string PackageDescription { get; set; }
	}
	
	/// <summary>
	/// Options to configure rule type SourceSqlChange. The rule is used to alter the sql code for database entities. The rule filter field can refer to one entity. The rule scope can be: StoredProcedure, Function, Trigger, View
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceSqlChange
	{
		
		/// <summary>
		/// Required. Sql code for source (stored procedure, function, trigger or view)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sqlCode")]
		public string SqlCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MappingRuleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Response message for 'ListMigrationJobs' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMigrationJobsResponse
	{
		
		/// <summary>
		/// The list of migration jobs objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationJobs")]
		public MigrationJob[] MigrationJobs { get; set; }
		
		/// <summary>
		/// A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// Represents a Database Migration Service migration job object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrationJob
	{
		
		/// <summary>
		/// The CMEK (customer-managed encryption key) fully qualified key name used for the migration job. This field supports all migration jobs types except for: * Mysql to Mysql (use the cmek field in the cloudsql connection profile instead). * PostrgeSQL to PostgreSQL (use the cmek field in the cloudsql connection profile instead). * PostgreSQL to AlloyDB (use the kms_key_name field in the alloydb connection profile instead). Each Cloud CMEK key has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmekKeyName")]
		public string CmekKeyName { get; set; }
		
		/// <summary>
		/// A conversion workspace's version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionWorkspace")]
		public ConversionWorkspaceInfo ConversionWorkspace { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Required. The resource name (URI) of the destination connection profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		/// <summary>
		/// A message defining the database engine and provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationDatabase")]
		public DatabaseType DestinationDatabase { get; set; }
		
		/// <summary>
		/// The migration job display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Dump flags definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dumpFlags")]
		public DumpFlags DumpFlags { get; set; }
		
		/// <summary>
		/// The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]). This field and the "dump_flags" field are mutually exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dumpPath")]
		public string DumpPath { get; set; }
		
		/// <summary>
		/// Output only. The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Output only. If the migration job is completed, the time when it was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// This field can be used to select the entities to migrate as part of the migration job. It uses AIP-160 notation to select a subset of the entities configured on the associated conversion-workspace. This field should not be set on migration-jobs that are not associated with a conversion workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Performance configuration definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceConfig")]
		public PerformanceConfig PerformanceConfig { get; set; }
		
		/// <summary>
		/// Output only. The current migration job phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public System.Nullable<MigrationJobPhase> Phase { get; set; }
		
		/// <summary>
		/// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reverseSshConnectivity")]
		public ReverseSshConnectivity ReverseSshConnectivity { get; set; }
		
		/// <summary>
		/// Required. The resource name (URI) of the source connection profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// A message defining the database engine and provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceDatabase")]
		public DatabaseType SourceDatabase { get; set; }
		
		/// <summary>
		/// The current migration job state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MigrationJobState> State { get; set; }
		
		/// <summary>
		/// The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticIpConnectivity")]
		public StaticIpConnectivity StaticIpConnectivity { get; set; }
		
		/// <summary>
		/// Required. The migration job type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MigrationJobType> Type { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcPeeringConnectivity")]
		public VpcPeeringConnectivity VpcPeeringConnectivity { get; set; }
	}
	
	/// <summary>
	/// Performance configuration definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerformanceConfig
	{
		
		/// <summary>
		/// Initial dump parallelism level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dumpParallelLevel")]
		public System.Nullable<PerformanceConfigDumpParallelLevel> DumpParallelLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PerformanceConfigDumpParallelLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUMP_PARALLEL_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationJobPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHASE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_DUMP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CDC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROMOTE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING_FOR_SOURCE_WRITES_TO_STOP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING_THE_DUMP = 5,
	}
	
	/// <summary>
	/// The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReverseSshConnectivity
	{
		
		/// <summary>
		/// The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public string Vm { get; set; }
		
		/// <summary>
		/// Required. The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmIp")]
		public string VmIp { get; set; }
		
		/// <summary>
		/// Required. The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmPort")]
		public System.Nullable<System.Int32> VmPort { get; set; }
		
		/// <summary>
		/// The name of the VPC to peer with the Cloud SQL private network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public string Vpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTARTING = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESUMING = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 2,
	}
	
	/// <summary>
	/// The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VpcPeeringConnectivity
	{
		
		/// <summary>
		/// The name of the VPC network to peer with the Cloud SQL private network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public string Vpc { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// Response message for 'ListPrivateConnections' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPrivateConnectionsResponse
	{
		
		/// <summary>
		/// A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of private connections.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateConnections")]
		public PrivateConnection[] PrivateConnections { get; set; }
		
		/// <summary>
		/// Locations that could not be reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unreachable")]
		public string[] Unreachable { get; set; }
	}
	
	/// <summary>
	/// The PrivateConnection resource is used to establish private connectivity with the customer's network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateConnection
	{
		
		/// <summary>
		/// Output only. The create time of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The private connection display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// The resource labels for private connections to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The state of the private connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<PrivateConnectionState> State { get; set; }
		
		/// <summary>
		/// Output only. The last update time of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// The VPC peering configuration is used to create VPC peering with the consumer's VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcPeeringConfig")]
		public VpcPeeringConfig VpcPeeringConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PrivateConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_DELETE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	/// <summary>
	/// The VPC peering configuration is used to create VPC peering with the consumer's VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VpcPeeringConfig
	{
		
		/// <summary>
		/// Required. A free subnet for peering. (CIDR of /29)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnet")]
		public string Subnet { get; set; }
		
		/// <summary>
		/// Required. Fully qualified name of the VPC that Database Migration Service will peer to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcName")]
		public string VpcName { get; set; }
	}
	
	/// <summary>
	/// Error message of a verification Migration job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MigrationJobVerificationError
	{
		
		/// <summary>
		/// Output only. An instance of ErrorCode specifying the error that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<MigrationJobVerificationErrorErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// Output only. A specific detailed error message, if supplied by the engine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetailMessage")]
		public string ErrorDetailMessage { get; set; }
		
		/// <summary>
		/// Output only. A formatted message with further details about the error and a CTA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MigrationJobVerificationErrorErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_CONNECTION_PROFILE_CONFIG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERSION_INCOMPATIBILITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_PROFILE_TYPES_INCOMPATIBILITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PGLOGICAL_INSTALLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PGLOGICAL_NODE_ALREADY_EXISTS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_WAL_LEVEL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SHARED_PRELOAD_LIBRARY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_MAX_REPLICATION_SLOTS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_MAX_WAL_SENDERS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_MAX_WORKER_PROCESSES = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_EXTENSIONS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_MIGRATION_TYPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_RDS_LOGICAL_REPLICATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_GTID_MODE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_TABLE_DEFINITION = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_DEFINER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANT_RESTART_RUNNING_MIGRATION = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_ALREADY_SETUP = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLES_WITH_LIMITED_SUPPORT = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_DATABASE_LOCALE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_DATABASE_FDW_CONFIG = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_RDBMS = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_SIZE_EXCEEDS_THRESHOLD = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXISTING_CONFLICTING_DATABASES = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXISTING_DATA = 28,
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request message for 'PromoteMigrationJob' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PromoteMigrationJobRequest
	{
	}
	
	/// <summary>
	/// Request message for 'RestartMigrationJob' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestartMigrationJobRequest
	{
		
		/// <summary>
		/// Optional. Restart the migration job without running prior configuration verification. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipValidation")]
		public System.Nullable<System.Boolean> SkipValidation { get; set; }
	}
	
	/// <summary>
	/// Request message for 'ResumeMigrationJob' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResumeMigrationJobRequest
	{
	}
	
	/// <summary>
	/// Request message for 'RollbackConversionWorkspace' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RollbackConversionWorkspaceRequest
	{
	}
	
	/// <summary>
	/// Response message for 'SearchBackgroundJobs' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchBackgroundJobsResponse
	{
		
		/// <summary>
		/// The list of conversion workspace mapping rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public BackgroundJobLogEntry[] Jobs { get; set; }
	}
	
	/// <summary>
	/// Request message for 'SeedConversionWorkspace' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SeedConversionWorkspaceRequest
	{
		
		/// <summary>
		/// Should the conversion workspace be committed automatically after the seed operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoCommit")]
		public System.Nullable<System.Boolean> AutoCommit { get; set; }
		
		/// <summary>
		/// Optional. Fully qualified (Uri) name of the destination connection profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationConnectionProfile")]
		public string DestinationConnectionProfile { get; set; }
		
		/// <summary>
		/// Optional. Fully qualified (Uri) name of the source connection profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceConnectionProfile")]
		public string SourceConnectionProfile { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Response message for 'GenerateSshScript' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SshScript
	{
		
		/// <summary>
		/// The ssh configuration script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	/// <summary>
	/// Request message for 'StartMigrationJob' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartMigrationJobRequest
	{
		
		/// <summary>
		/// Optional. Start the migration job without running prior configuration verification. Defaults to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipValidation")]
		public System.Nullable<System.Boolean> SkipValidation { get; set; }
	}
	
	/// <summary>
	/// Request message for 'StopMigrationJob' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopMigrationJobRequest
	{
	}
	
	/// <summary>
	/// Response message for 'GenerateTcpProxyScript' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TcpProxyScript
	{
		
		/// <summary>
		/// The TCP Proxy configuration script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Request message for 'VerifyMigrationJob' request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyMigrationJobRequest
	{
		
		/// <summary>
		/// Represents a Database Migration Service migration job object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="migrationJob")]
		public MigrationJob MigrationJob { get; set; }
		
		/// <summary>
		/// Optional. Field mask is used to specify the changed fields to be verified. It will not update the migration job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of committed revisions of a specific conversion workspace.
		/// Datamigration_projects_locations_conversionWorkspaces_describeConversionWorkspaceRevisions v1/{conversionWorkspace}:describeConversionWorkspaceRevisions
		/// </summary>
		/// <param name="conversionWorkspace">Required. Name of the conversion workspace resource whose revisions are listed. Must be in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <param name="commitId">Optional. Optional filter to request a specific commit ID.</param>
		/// <returns>Successful response</returns>
		public async Task<DescribeConversionWorkspaceRevisionsResponse> Datamigration_projects_locations_conversionWorkspaces_describeConversionWorkspaceRevisionsAsync(string conversionWorkspace, string commitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (conversionWorkspace==null? "" : System.Uri.EscapeDataString(conversionWorkspace))+":describeConversionWorkspaceRevisions&commitId=" + (commitId==null? "" : System.Uri.EscapeDataString(commitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeConversionWorkspaceRevisionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the database entities tree for a specific conversion workspace and a specific tree type. Database entities are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are simple data objects describing the structure of the client database.
		/// Datamigration_projects_locations_conversionWorkspaces_describeDatabaseEntities v1/{conversionWorkspace}:describeDatabaseEntities
		/// </summary>
		/// <param name="conversionWorkspace">Required. Name of the conversion workspace resource whose database entities are described. Must be in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <param name="commitId">Optional. Request a specific commit ID. If not specified, the entities from the latest commit are returned.</param>
		/// <param name="filter">Optional. Filter the returned entities based on AIP-160 standard.</param>
		/// <param name="pageSize">Optional. The maximum number of entities to return. The service may return fewer entities than the value specifies.</param>
		/// <param name="pageToken">Optional. The nextPageToken value received in the previous call to conversionWorkspace.describeDatabaseEntities, used in the subsequent request to retrieve the next page of results. On first call this should be left blank. When paginating, all other parameters provided to conversionWorkspace.describeDatabaseEntities must match the call that provided the page token.</param>
		/// <param name="tree">Required. The tree to fetch.</param>
		/// <param name="uncommitted">Optional. Whether to retrieve the latest committed version of the entities or the latest version. This field is ignored if a specific commit_id is specified.</param>
		/// <param name="view">Optional. Results view based on AIP-157</param>
		/// <returns>Successful response</returns>
		public async Task<DescribeDatabaseEntitiesResponse> Datamigration_projects_locations_conversionWorkspaces_describeDatabaseEntitiesAsync(string conversionWorkspace, string commitId, string filter, int pageSize, string pageToken, Datamigration_projects_locations_conversionWorkspaces_describeDatabaseEntitiesTree tree, bool uncommitted, Datamigration_projects_locations_conversionWorkspaces_describeDatabaseEntitiesView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (conversionWorkspace==null? "" : System.Uri.EscapeDataString(conversionWorkspace))+":describeDatabaseEntities&commitId=" + (commitId==null? "" : System.Uri.EscapeDataString(commitId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&tree=" + tree+"&uncommitted="+uncommitted+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeDatabaseEntitiesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches/lists the background jobs for a specific conversion workspace. The background jobs are not resources like conversion workspaces or mapping rules, and they can't be created, updated or deleted. Instead, they are a way to expose the data plane jobs log.
		/// Datamigration_projects_locations_conversionWorkspaces_searchBackgroundJobs v1/{conversionWorkspace}:searchBackgroundJobs
		/// </summary>
		/// <param name="conversionWorkspace">Required. Name of the conversion workspace resource whose jobs are listed, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <param name="completedUntilTime">Optional. If provided, only returns jobs that completed until (not including) the given timestamp.</param>
		/// <param name="maxSize">Optional. The maximum number of jobs to return. The service may return fewer than this value. If unspecified, at most 100 jobs are returned. The maximum value is 100; values above 100 are coerced to 100.</param>
		/// <param name="returnMostRecentPerJobType">Optional. Whether or not to return just the most recent job per job type,</param>
		/// <returns>Successful response</returns>
		public async Task<SearchBackgroundJobsResponse> Datamigration_projects_locations_conversionWorkspaces_searchBackgroundJobsAsync(string conversionWorkspace, string completedUntilTime, int maxSize, bool returnMostRecentPerJobType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (conversionWorkspace==null? "" : System.Uri.EscapeDataString(conversionWorkspace))+":searchBackgroundJobs&completedUntilTime=" + (completedUntilTime==null? "" : System.Uri.EscapeDataString(completedUntilTime))+"&maxSize="+maxSize+"&returnMostRecentPerJobType="+returnMostRecentPerJobType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchBackgroundJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a SSH configuration script to configure the reverse SSH connectivity.
		/// Datamigration_projects_locations_migrationJobs_generateSshScript v1/{migrationJob}:generateSshScript
		/// </summary>
		/// <param name="migrationJob">Name of the migration job resource to generate the SSH script.</param>
		/// <returns>Successful response</returns>
		public async Task<SshScript> Datamigration_projects_locations_migrationJobs_generateSshScriptAsync(string migrationJob, GenerateSshScriptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (migrationJob==null? "" : System.Uri.EscapeDataString(migrationJob))+":generateSshScript";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SshScript>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a TCP Proxy configuration script to configure a cloud-hosted VM running a TCP Proxy.
		/// Datamigration_projects_locations_migrationJobs_generateTcpProxyScript v1/{migrationJob}:generateTcpProxyScript
		/// </summary>
		/// <param name="migrationJob">Name of the migration job resource to generate the TCP Proxy script.</param>
		/// <returns>Successful response</returns>
		public async Task<TcpProxyScript> Datamigration_projects_locations_migrationJobs_generateTcpProxyScriptAsync(string migrationJob, GenerateTcpProxyScriptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (migrationJob==null? "" : System.Uri.EscapeDataString(migrationJob))+":generateTcpProxyScript";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TcpProxyScript>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a single Database Migration Service private connection.
		/// Datamigration_projects_locations_privateConnections_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the private connection to delete.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_privateConnections_deleteAsync(string name, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details of a single private connection.
		/// Datamigration_projects_locations_privateConnections_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the private connection to get.</param>
		/// <returns>Successful response</returns>
		public async Task<PrivateConnection> Datamigration_projects_locations_privateConnections_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateConnection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the parameters of a single migration job.
		/// Datamigration_projects_locations_migrationJobs_patch v1/{name}
		/// </summary>
		/// <param name="name">The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.</param>
		/// <param name="requestId">A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <param name="updateMask">Required. Field mask is used to specify the fields to be overwritten by the update in the conversion workspace resource.</param>
		/// <param name="validateOnly">Optional. Only validate the connection profile, but don't update any resources. The default is false. Only supported for Oracle connection profiles.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_patchAsync(string name, string requestId, string updateMask, bool validateOnly, MigrationJob requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Datamigration_projects_locations_list v1/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Datamigration_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Datamigration_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Datamigration_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies draft tree onto a specific destination database.
		/// Datamigration_projects_locations_conversionWorkspaces_apply v1/{name}:apply
		/// </summary>
		/// <param name="name">Required. The name of the conversion workspace resource for which to apply the draft tree. Must be in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_conversionWorkspaces_applyAsync(string name, ApplyConversionWorkspaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":apply";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Datamigration_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Datamigration_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Marks all the data in the conversion workspace as committed.
		/// Datamigration_projects_locations_conversionWorkspaces_commit v1/{name}:commit
		/// </summary>
		/// <param name="name">Required. Name of the conversion workspace resource to commit.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_conversionWorkspaces_commitAsync(string name, CommitConversionWorkspaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":commit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a draft tree schema for the destination database.
		/// Datamigration_projects_locations_conversionWorkspaces_convert v1/{name}:convert
		/// </summary>
		/// <param name="name">Name of the conversion workspace resource to convert in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_conversionWorkspaces_convertAsync(string name, ConvertConversionWorkspaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":convert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Demotes the destination database to become a read replica of the source. This is applicable for the following migrations: 1. MySQL to Cloud SQL (for MySQL) 2. PostgreSQL to Cloud SQL (for PostgreSQL) 3. PostgreSQL to AlloyDB.
		/// Datamigration_projects_locations_migrationJobs_demoteDestination v1/{name}:demoteDestination
		/// </summary>
		/// <param name="name">Name of the migration job resource to demote its destination.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_demoteDestinationAsync(string name, DemoteDestinationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":demoteDestination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches a set of static IP addresses that need to be allowlisted by the customer when using the static-IP connectivity method.
		/// Datamigration_projects_locations_fetchStaticIps v1/{name}:fetchStaticIps
		/// </summary>
		/// <param name="name">Required. The resource name for the location for which static IPs should be returned. Must be in the format `projects/*/locations/*`.</param>
		/// <param name="pageSize">Maximum number of IPs to return.</param>
		/// <param name="pageToken">A page token, received from a previous `FetchStaticIps` call.</param>
		/// <returns>Successful response</returns>
		public async Task<FetchStaticIpsResponse> Datamigration_projects_locations_fetchStaticIpsAsync(string name, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":fetchStaticIps&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FetchStaticIpsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Promote a migration job, stopping replication to the destination and promoting the destination to be a standalone database.
		/// Datamigration_projects_locations_migrationJobs_promote v1/{name}:promote
		/// </summary>
		/// <param name="name">Name of the migration job resource to promote.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_promoteAsync(string name, PromoteMigrationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":promote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch.
		/// Datamigration_projects_locations_migrationJobs_restart v1/{name}:restart
		/// </summary>
		/// <param name="name">Name of the migration job resource to restart.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_restartAsync(string name, RestartMigrationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":restart";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resume a migration job that is currently stopped and is resumable (was stopped during CDC phase).
		/// Datamigration_projects_locations_migrationJobs_resume v1/{name}:resume
		/// </summary>
		/// <param name="name">Name of the migration job resource to resume.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_resumeAsync(string name, ResumeMigrationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rolls back a conversion workspace to the last committed snapshot.
		/// Datamigration_projects_locations_conversionWorkspaces_rollback v1/{name}:rollback
		/// </summary>
		/// <param name="name">Required. Name of the conversion workspace resource to roll back to.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_conversionWorkspaces_rollbackAsync(string name, RollbackConversionWorkspaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":rollback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports a snapshot of the source database into the conversion workspace.
		/// Datamigration_projects_locations_conversionWorkspaces_seed v1/{name}:seed
		/// </summary>
		/// <param name="name">Name of the conversion workspace resource to seed with new database structure, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_conversionWorkspaces_seedAsync(string name, SeedConversionWorkspaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":seed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start an already created migration job.
		/// Datamigration_projects_locations_migrationJobs_start v1/{name}:start
		/// </summary>
		/// <param name="name">Name of the migration job resource to start.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_startAsync(string name, StartMigrationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a running migration job.
		/// Datamigration_projects_locations_migrationJobs_stop v1/{name}:stop
		/// </summary>
		/// <param name="name">Name of the migration job resource to stop.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_stopAsync(string name, StopMigrationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met.
		/// Datamigration_projects_locations_migrationJobs_verify v1/{name}:verify
		/// </summary>
		/// <param name="name">Name of the migration job resource to verify.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_verifyAsync(string name, VerifyMigrationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":verify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all connection profiles in a given project and location.
		/// Datamigration_projects_locations_connectionProfiles_list v1/{parent}/connectionProfiles
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of connection profiles.</param>
		/// <param name="filter">A filter expression that filters connection profiles listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <. For example, list connection profiles created this year by specifying **createTime %gt; 2020-01-01T00:00:00.000000000Z**. You can also filter nested fields. For example, you could specify **mySql.username = %lt;my_username%gt;** to list all connection profiles configured to connect with a specific username.</param>
		/// <param name="orderBy">A comma-separated list of fields to order results according to.</param>
		/// <param name="pageSize">The maximum number of connection profiles to return. The service may return fewer than this value. If unspecified, at most 50 connection profiles will be returned. The maximum value is 1000; values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListConnectionProfiles` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListConnectionProfiles` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConnectionProfilesResponse> Datamigration_projects_locations_connectionProfiles_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/connectionProfiles&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConnectionProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new connection profile in a given project and location.
		/// Datamigration_projects_locations_connectionProfiles_create v1/{parent}/connectionProfiles
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of connection profiles.</param>
		/// <param name="connectionProfileId">Required. The connection profile identifier.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <param name="skipValidation">Optional. Create the connection profile without validating it. The default is false. Only supported for Oracle connection profiles.</param>
		/// <param name="validateOnly">Optional. Only validate the connection profile, but don't create any resources. The default is false. Only supported for Oracle connection profiles.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_connectionProfiles_createAsync(string parent, string connectionProfileId, string requestId, bool skipValidation, bool validateOnly, ConnectionProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/connectionProfiles&connectionProfileId=" + (connectionProfileId==null? "" : System.Uri.EscapeDataString(connectionProfileId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&skipValidation="+skipValidation+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists conversion workspaces in a given project and location.
		/// Datamigration_projects_locations_conversionWorkspaces_list v1/{parent}/conversionWorkspaces
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of conversion workspaces.</param>
		/// <param name="filter">A filter expression that filters conversion workspaces listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <. For example, list conversion workspaces created this year by specifying **createTime %gt; 2020-01-01T00:00:00.000000000Z.** You can also filter nested fields. For example, you could specify **source.version = "12.c.1"** to select all conversion workspaces with source database version equal to 12.c.1.</param>
		/// <param name="pageSize">The maximum number of conversion workspaces to return. The service may return fewer than this value. If unspecified, at most 50 sets are returned.</param>
		/// <param name="pageToken">The nextPageToken value received in the previous call to conversionWorkspaces.list, used in the subsequent request to retrieve the next page of results. On first call this should be left blank. When paginating, all other parameters provided to conversionWorkspaces.list must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConversionWorkspacesResponse> Datamigration_projects_locations_conversionWorkspaces_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/conversionWorkspaces&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConversionWorkspacesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new conversion workspace in a given project and location.
		/// Datamigration_projects_locations_conversionWorkspaces_create v1/{parent}/conversionWorkspaces
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of conversion workspaces.</param>
		/// <param name="conversionWorkspaceId">Required. The ID of the conversion workspace to create.</param>
		/// <param name="requestId">A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_conversionWorkspaces_createAsync(string parent, string conversionWorkspaceId, string requestId, ConversionWorkspace requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/conversionWorkspaces&conversionWorkspaceId=" + (conversionWorkspaceId==null? "" : System.Uri.EscapeDataString(conversionWorkspaceId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the mapping rules for a specific conversion workspace.
		/// Datamigration_projects_locations_conversionWorkspaces_mappingRules_list v1/{parent}/mappingRules
		/// </summary>
		/// <param name="parent">Required. Name of the conversion workspace resource whose mapping rules are listed in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <param name="pageSize">The maximum number of rules to return. The service may return fewer than this value.</param>
		/// <param name="pageToken">The nextPageToken value received in the previous call to mappingRules.list, used in the subsequent request to retrieve the next page of results. On first call this should be left blank. When paginating, all other parameters provided to mappingRules.list must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMappingRulesResponse> Datamigration_projects_locations_conversionWorkspaces_mappingRules_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/mappingRules&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMappingRulesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new mapping rule for a given conversion workspace.
		/// Datamigration_projects_locations_conversionWorkspaces_mappingRules_create v1/{parent}/mappingRules
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of mapping rules.</param>
		/// <param name="mappingRuleId">Required. The ID of the rule to create.</param>
		/// <param name="requestId">A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<MappingRule> Datamigration_projects_locations_conversionWorkspaces_mappingRules_createAsync(string parent, string mappingRuleId, string requestId, MappingRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/mappingRules&mappingRuleId=" + (mappingRuleId==null? "" : System.Uri.EscapeDataString(mappingRuleId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MappingRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports the mapping rules for a given conversion workspace. Supports various formats of external rules files.
		/// Datamigration_projects_locations_conversionWorkspaces_mappingRules_import v1/{parent}/mappingRules:import
		/// </summary>
		/// <param name="parent">Required. Name of the conversion workspace resource to import the rules to in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_conversionWorkspaces_mappingRules_importAsync(string parent, ImportMappingRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/mappingRules:import";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists migration jobs in a given project and location.
		/// Datamigration_projects_locations_migrationJobs_list v1/{parent}/migrationJobs
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of migrationJobs.</param>
		/// <param name="filter">A filter expression that filters migration jobs listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <. For example, list migration jobs created this year by specifying **createTime %gt; 2020-01-01T00:00:00.000000000Z.** You can also filter nested fields. For example, you could specify **reverseSshConnectivity.vmIp = "1.2.3.4"** to select all migration jobs connecting through the specific SSH tunnel bastion.</param>
		/// <param name="orderBy">Sort the results based on the migration job name. Valid values are: "name", "name asc", and "name desc".</param>
		/// <param name="pageSize">The maximum number of migration jobs to return. The service may return fewer than this value. If unspecified, at most 50 migration jobs will be returned. The maximum value is 1000; values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">The nextPageToken value received in the previous call to migrationJobs.list, used in the subsequent request to retrieve the next page of results. On first call this should be left blank. When paginating, all other parameters provided to migrationJobs.list must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMigrationJobsResponse> Datamigration_projects_locations_migrationJobs_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/migrationJobs&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListMigrationJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new migration job in a given project and location.
		/// Datamigration_projects_locations_migrationJobs_create v1/{parent}/migrationJobs
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of migration jobs.</param>
		/// <param name="migrationJobId">Required. The ID of the instance to create.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_migrationJobs_createAsync(string parent, string migrationJobId, string requestId, MigrationJob requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/migrationJobs&migrationJobId=" + (migrationJobId==null? "" : System.Uri.EscapeDataString(migrationJobId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of private connections in a given project and location.
		/// Datamigration_projects_locations_privateConnections_list v1/{parent}/privateConnections
		/// </summary>
		/// <param name="parent">Required. The parent that owns the collection of private connections.</param>
		/// <param name="filter">A filter expression that filters private connections listed in the response. The expression must specify the field name, a comparison operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The comparison operator must be either =, !=, >, or <. For example, list private connections created this year by specifying **createTime %gt; 2021-01-01T00:00:00.000000000Z**.</param>
		/// <param name="orderBy">Order by fields for the result.</param>
		/// <param name="pageSize">Maximum number of private connections to return. If unspecified, at most 50 private connections that are returned. The maximum value is 1000; values above 1000 are coerced to 1000.</param>
		/// <param name="pageToken">Page token received from a previous `ListPrivateConnections` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListPrivateConnections` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPrivateConnectionsResponse> Datamigration_projects_locations_privateConnections_listAsync(string parent, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/privateConnections&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPrivateConnectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new private connection in a given project and location.
		/// Datamigration_projects_locations_privateConnections_create v1/{parent}/privateConnections
		/// </summary>
		/// <param name="parent">Required. The parent that owns the collection of PrivateConnections.</param>
		/// <param name="privateConnectionId">Required. The private connection identifier.</param>
		/// <param name="requestId">Optional. A unique ID used to identify the request. If the server receives two requests with the same ID, then the second request is ignored. It is recommended to always set this value to a UUID. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The maximum length is 40 characters.</param>
		/// <param name="skipValidation">Optional. If set to true, will skip validations.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Datamigration_projects_locations_privateConnections_createAsync(string parent, string privateConnectionId, string requestId, bool skipValidation, PrivateConnection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/privateConnections&privateConnectionId=" + (privateConnectionId==null? "" : System.Uri.EscapeDataString(privateConnectionId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&skipValidation="+skipValidation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Datamigration_projects_locations_privateConnections_getIamPolicy v1/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <param name="options_requestedPolicyVersion">Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Datamigration_projects_locations_privateConnections_getIamPolicyAsync(string resource, int options_requestedPolicyVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy&options.requestedPolicyVersion="+options_requestedPolicyVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Datamigration_projects_locations_privateConnections_setIamPolicy v1/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Datamigration_projects_locations_privateConnections_setIamPolicyAsync(string resource, SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Datamigration_projects_locations_privateConnections_testIamPermissions v1/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Datamigration_projects_locations_privateConnections_testIamPermissionsAsync(string resource, TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Datamigration_projects_locations_conversionWorkspaces_describeDatabaseEntitiesTree
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DB_TREE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_TREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT_TREE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESTINATION_TREE = 3,
	}
	
	public enum Datamigration_projects_locations_conversionWorkspaces_describeDatabaseEntitiesView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_VIEW_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_VIEW_BASIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_VIEW_FULL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENTITY_VIEW_ROOT_SUMMARY = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
