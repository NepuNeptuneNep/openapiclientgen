//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request message to claim a device on behalf of a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClaimDeviceRequest
	{
		
		/// <summary>
		/// Optional. The ID of the configuration applied to the device section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationId")]
		public string ConfigurationId { get; set; }
		
		/// <summary>
		/// The ID of the customer for whom the device is being claimed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		/// <summary>
		/// Metadata entries that can be attached to a `Device`. To learn more, read [Device metadata](https://developers.google.com/zero-touch/guides/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public DeviceMetadata DeviceMetadata { get; set; }
		
		/// <summary>
		/// The Google Workspace customer ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleWorkspaceCustomerId")]
		public string GoogleWorkspaceCustomerId { get; set; }
		
		/// <summary>
		/// Optional. Must and can only be set for Chrome OS devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preProvisioningToken")]
		public string PreProvisioningToken { get; set; }
		
		/// <summary>
		/// Required. The section type of the device's provisioning record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public System.Nullable<ClaimDeviceRequestSectionType> SectionType { get; set; }
		
		/// <summary>
		/// Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simlockProfileId")]
		public string SimlockProfileId { get; set; }
	}
	
	/// <summary>
	/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceIdentifier
	{
		
		/// <summary>
		/// An identifier provided by OEMs, carried through the production and sales process. Only applicable to Chrome OS devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chromeOsAttestedDeviceId")]
		public string ChromeOsAttestedDeviceId { get; set; }
		
		/// <summary>
		/// The type of the device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public System.Nullable<DeviceIdentifierDeviceType> DeviceType { get; set; }
		
		/// <summary>
		/// The device’s IMEI number. Validated on input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imei")]
		public string Imei { get; set; }
		
		/// <summary>
		/// The device manufacturer’s name. Matches the device's built-in value returned from `android.os.Build.MANUFACTURER`. Allowed values are listed in [Android manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// The device’s MEID number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meid")]
		public string Meid { get; set; }
		
		/// <summary>
		/// The device model's name. Allowed values are listed in [Android models](/zero-touch/resources/manufacturer-names#model-names) and [Chrome OS models](https://support.google.com/chrome/a/answer/10130175#identify_compatible).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// The manufacturer's serial number for the device. This value might not be unique across different device models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serialNumber")]
		public string SerialNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceIdentifierDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_ANDROID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_CHROME_OS = 2,
	}
	
	/// <summary>
	/// Metadata entries that can be attached to a `Device`. To learn more, read [Device metadata](https://developers.google.com/zero-touch/guides/metadata).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceMetadata
	{
		
		/// <summary>
		/// Metadata entries recorded as key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public System.Collections.Generic.Dictionary<string, string> Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ClaimDeviceRequestSectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_TYPE_SIM_LOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_TYPE_ZERO_TOUCH = 2,
	}
	
	/// <summary>
	/// Response message containing device id of the claim.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClaimDeviceResponse
	{
		
		/// <summary>
		/// The device ID of the claimed device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The resource name of the device in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
	}
	
	/// <summary>
	/// Request to claim devices asynchronously in batch. Claiming a device adds the device to zero-touch enrollment and shows the device in the customer's view of the portal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClaimDevicesRequest
	{
		
		/// <summary>
		/// Required. A list of device claims.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public PartnerClaim[] Claims { get; set; }
	}
	
	/// <summary>
	/// Identifies one claim request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartnerClaim
	{
		
		/// <summary>
		/// Optional. The ID of the configuration applied to the device section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationId")]
		public string ConfigurationId { get; set; }
		
		/// <summary>
		/// The ID of the customer for whom the device is being claimed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		/// <summary>
		/// Metadata entries that can be attached to a `Device`. To learn more, read [Device metadata](https://developers.google.com/zero-touch/guides/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public DeviceMetadata DeviceMetadata { get; set; }
		
		/// <summary>
		/// The Google Workspace customer ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleWorkspaceCustomerId")]
		public string GoogleWorkspaceCustomerId { get; set; }
		
		/// <summary>
		/// Optional. Must and can only be set for Chrome OS devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preProvisioningToken")]
		public string PreProvisioningToken { get; set; }
		
		/// <summary>
		/// Required. The section type of the device's provisioning record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public ClaimDeviceRequestSectionType SectionType { get; set; }
		
		/// <summary>
		/// Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simlockProfileId")]
		public string SimlockProfileId { get; set; }
	}
	
	/// <summary>
	/// A reseller, vendor, or customer in the zero-touch reseller and customer APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Company
	{
		
		/// <summary>
		/// Optional. Email address of customer's users in the admin role. Each email address must be associated with a Google Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminEmails")]
		public string[] AdminEmails { get; set; }
		
		/// <summary>
		/// Output only. The ID of the company. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		/// <summary>
		/// Required. The name of the company. For example _XYZ Corp_. Displayed to the company's employees in the zero-touch enrollment portal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// A Google Workspace customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleWorkspaceAccount")]
		public GoogleWorkspaceAccount GoogleWorkspaceAccount { get; set; }
		
		/// <summary>
		/// Input only. The preferred locale of the customer represented as a BCP47 language code. This field is validated on input and requests containing unsupported language codes will be rejected. Supported language codes: Arabic (ar) Chinese (Hong Kong) (zh-HK) Chinese (Simplified) (zh-CN) Chinese (Traditional) (zh-TW) Czech (cs) Danish (da) Dutch (nl) English (UK) (en-GB) English (US) (en-US) Filipino (fil) Finnish (fi) French (fr) German (de) Hebrew (iw) Hindi (hi) Hungarian (hu) Indonesian (id) Italian (it) Japanese (ja) Korean (ko) Norwegian (Bokmal) (no) Polish (pl) Portuguese (Brazil) (pt-BR) Portuguese (Portugal) (pt-PT) Russian (ru) Spanish (es) Spanish (Latin America) (es-419) Swedish (sv) Thai (th) Turkish (tr) Ukrainian (uk) Vietnamese (vi)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Output only. The API resource name of the company. The resource name is one of the following formats: * `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]` Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Input only. Email address of customer's users in the owner role. At least one `owner_email` is required. Owners share the same access as admins but can also add, delete, and edit your organization's portal users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerEmails")]
		public string[] OwnerEmails { get; set; }
		
		/// <summary>
		/// Input only. If set to true, welcome email will not be sent to the customer. It is recommended to skip the welcome email if devices will be claimed with additional DEVICE_PROTECTION service, as the customer will receive separate emails at device claim time. This field is ignored if this is not a Zero-touch customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipWelcomeEmail")]
		public System.Nullable<System.Boolean> SkipWelcomeEmail { get; set; }
		
		/// <summary>
		/// Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsStatus")]
		public System.Nullable<CompanyTermsStatus> TermsStatus { get; set; }
	}
	
	/// <summary>
	/// A Google Workspace customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleWorkspaceAccount
	{
		
		/// <summary>
		/// Required. The customer ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// Output only. The pre-provisioning tokens previously used to claim devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preProvisioningTokens")]
		public string[] PreProvisioningTokens { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompanyTermsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMS_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMS_STATUS_NOT_ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMS_STATUS_ACCEPTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMS_STATUS_STALE = 3,
	}
	
	/// <summary>
	/// A configuration collects the provisioning options for Android devices. Each configuration combines the following: * The EMM device policy controller (DPC) installed on the devices. * EMM policies enforced on the devices. * Metadata displayed on the device to help users during setup. Customers can add as many configurations as they need. However, zero-touch enrollment works best when a customer sets a default configuration that's applied to any new devices the organization purchases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Configuration
	{
		
		/// <summary>
		/// Required. The name of the organization. Zero-touch enrollment shows this organization name to device users during device provisioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Output only. The ID of the configuration. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationId")]
		public string ConfigurationId { get; set; }
		
		/// <summary>
		/// Required. A short name that describes the configuration's purpose. For example, _Sales team_ or _Temporary employees_. The zero-touch enrollment portal displays this name to IT admins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurationName")]
		public string ConfigurationName { get; set; }
		
		/// <summary>
		/// Required. The email address that device users can contact to get help. Zero-touch enrollment shows this email address to device users before device provisioning. The value is validated on input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// Required. The telephone number that device users can call, using another device, to get help. Zero-touch enrollment shows this number to device users before device provisioning. Accepts numerals, spaces, the plus sign, hyphens, and parentheses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPhone")]
		public string ContactPhone { get; set; }
		
		/// <summary>
		/// A message, containing one or two sentences, to help device users get help or give them more details about what’s happening to their device. Zero-touch enrollment shows this message before the device is provisioned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMessage")]
		public string CustomMessage { get; set; }
		
		/// <summary>
		/// The JSON-formatted EMM provisioning extras that are passed to the DPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dpcExtras")]
		public string DpcExtras { get; set; }
		
		/// <summary>
		/// Required. The resource name of the selected DPC (device policy controller) in the format `customers/[CUSTOMER_ID]/dpcs/*`. To list the supported DPCs, call `customers.dpcs.list`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dpcResourcePath")]
		public string DpcResourcePath { get; set; }
		
		/// <summary>
		/// Optional. The timeout before forcing factory reset the device if the device doesn't go through provisioning in the setup wizard, usually due to lack of network connectivity during setup wizard. Ranges from 0-6 hours, with 2 hours being the default if unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forcedResetTime")]
		public string ForcedResetTime { get; set; }
		
		/// <summary>
		/// Required. Whether this is the default configuration that zero-touch enrollment applies to any new devices the organization purchases in the future. Only one customer configuration can be the default. Setting this value to `true`, changes the previous default configuration's `isDefault` value to `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Output only. The API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request message to create a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCustomerRequest
	{
		
		/// <summary>
		/// A reseller, vendor, or customer in the zero-touch reseller and customer APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Company Customer { get; set; }
	}
	
	/// <summary>
	/// Request message for customer to assign a configuration to device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerApplyConfigurationRequest
	{
		
		/// <summary>
		/// Required. The configuration applied to the device in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		/// <summary>
		/// A `DeviceReference` is an API abstraction that lets you supply a _device_ argument to a method using one of the following identifier types: * A numeric API resource ID. * Real-world hardware IDs, such as IMEI number, belonging to the manufactured device. Methods that operate on devices take a `DeviceReference` as a parameter type because it's more flexible for the caller. To learn more about device identifiers, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public DeviceReference Device { get; set; }
	}
	
	/// <summary>
	/// A `DeviceReference` is an API abstraction that lets you supply a _device_ argument to a method using one of the following identifier types: * A numeric API resource ID. * Real-world hardware IDs, such as IMEI number, belonging to the manufactured device. Methods that operate on devices take a `DeviceReference` as a parameter type because it's more flexible for the caller. To learn more about device identifiers, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceReference
	{
		
		/// <summary>
		/// The ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
	}
	
	/// <summary>
	/// Response message of customer's listing configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerListConfigurationsResponse
	{
		
		/// <summary>
		/// The configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public Configuration[] Configurations { get; set; }
	}
	
	/// <summary>
	/// Response message for listing my customers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerListCustomersResponse
	{
		
		/// <summary>
		/// The customer accounts the calling user is a member of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public Company[] Customers { get; set; }
		
		/// <summary>
		/// A token used to access the next page of results. Omitted if no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message of customer's liting devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerListDevicesResponse
	{
		
		/// <summary>
		/// The customer's devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public Device[] Devices { get; set; }
		
		/// <summary>
		/// A token used to access the next page of results. Omitted if no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// An Android or Chrome OS device registered for zero-touch enrollment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Device
	{
		
		/// <summary>
		/// Output only. The provisioning claims for a device. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. Call `partners.devices.unclaim` or `partners.devices.unclaimAsync` to remove the device from zero-touch enrollment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public DeviceClaim[] Claims { get; set; }
		
		/// <summary>
		/// Not available to resellers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public string Configuration { get; set; }
		
		/// <summary>
		/// Output only. The ID of the device. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		/// <summary>
		/// Metadata entries that can be attached to a `Device`. To learn more, read [Device metadata](https://developers.google.com/zero-touch/guides/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public DeviceMetadata DeviceMetadata { get; set; }
		
		/// <summary>
		/// Output only. The API resource name in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`. Assigned by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A record of a device claimed by a reseller for a customer. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. To learn more, read [Claim devices for customers](/zero-touch/guides/how-it-works#claim).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceClaim
	{
		
		/// <summary>
		/// The Additional service registered for the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalService")]
		public System.Nullable<DeviceClaimAdditionalService> AdditionalService { get; set; }
		
		/// <summary>
		/// The ID of the Google Workspace account that owns the Chrome OS device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleWorkspaceCustomerId")]
		public string GoogleWorkspaceCustomerId { get; set; }
		
		/// <summary>
		/// The ID of the Customer that purchased the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerCompanyId")]
		public string OwnerCompanyId { get; set; }
		
		/// <summary>
		/// The ID of the reseller that claimed the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resellerId")]
		public string ResellerId { get; set; }
		
		/// <summary>
		/// Output only. The type of claim made on the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public ClaimDeviceRequestSectionType SectionType { get; set; }
		
		/// <summary>
		/// The timestamp when the device will exit ‘vacation mode’. This value is present iff the device is in 'vacation mode'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vacationModeExpireTime")]
		public string VacationModeExpireTime { get; set; }
		
		/// <summary>
		/// The timestamp when the device was put into ‘vacation mode’. This value is present iff the device is in 'vacation mode'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vacationModeStartTime")]
		public string VacationModeStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceClaimAdditionalService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_SERVICE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PROTECTION = 1,
	}
	
	/// <summary>
	/// Response message of customer's listing DPCs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerListDpcsResponse
	{
		
		/// <summary>
		/// The list of DPCs available to the customer that support zero-touch enrollment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dpcs")]
		public Dpc[] Dpcs { get; set; }
	}
	
	/// <summary>
	/// An EMM's DPC ([device policy controller](http://developer.android.com/work/dpc/build-dpc.html)). Zero-touch enrollment installs a DPC (listed in the `Configuration`) on a device to maintain the customer's mobile policies. All the DPCs listed by the API support zero-touch enrollment and are available in Google Play.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dpc
	{
		
		/// <summary>
		/// Output only. The title of the DPC app in Google Play. For example, _Google Apps Device Policy_. Useful in an application's user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dpcName")]
		public string DpcName { get; set; }
		
		/// <summary>
		/// Output only. The API resource name in the format `customers/[CUSTOMER_ID]/dpcs/[DPC_ID]`. Assigned by the server. To maintain a reference to a DPC across customer accounts, persist and match the last path component (`DPC_ID`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The DPC's Android application ID that looks like a Java package name. Zero-touch enrollment installs the DPC app onto a device using this identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
	}
	
	/// <summary>
	/// Request message for customer to remove the configuration from device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerRemoveConfigurationRequest
	{
		
		/// <summary>
		/// A `DeviceReference` is an API abstraction that lets you supply a _device_ argument to a method using one of the following identifier types: * A numeric API resource ID. * Real-world hardware IDs, such as IMEI number, belonging to the manufactured device. Methods that operate on devices take a `DeviceReference` as a parameter type because it's more flexible for the caller. To learn more about device identifiers, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public DeviceReference Device { get; set; }
	}
	
	/// <summary>
	/// Request message for customer to unclaim a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerUnclaimDeviceRequest
	{
		
		/// <summary>
		/// A `DeviceReference` is an API abstraction that lets you supply a _device_ argument to a method using one of the following identifier types: * A numeric API resource ID. * Real-world hardware IDs, such as IMEI number, belonging to the manufactured device. Methods that operate on devices take a `DeviceReference` as a parameter type because it's more flexible for the caller. To learn more about device identifiers, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public DeviceReference Device { get; set; }
	}
	
	/// <summary>
	/// Tracks the status of a long-running operation to asynchronously update a batch of reseller metadata attached to devices. To learn more, read [Long‑running batch operations](/zero-touch/guides/how-it-works#operations).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevicesLongRunningOperationMetadata
	{
		
		/// <summary>
		/// The number of metadata updates in the operation. This might be different from the number of updates in the request if the API can't parse some of the updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devicesCount")]
		public System.Nullable<System.Int32> DevicesCount { get; set; }
		
		/// <summary>
		/// The processing status of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processingStatus")]
		public System.Nullable<DevicesLongRunningOperationMetadataProcessingStatus> ProcessingStatus { get; set; }
		
		/// <summary>
		/// The processing progress of the operation. Measured as a number from 0 to 100. A value of 10O doesn't always mean the operation completed—check for the inclusion of a `done` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Int32> Progress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DevicesLongRunningOperationMetadataProcessingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_PROCESS_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_PROCESS_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_PROCESS_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_PROCESS_PROCESSED = 3,
	}
	
	/// <summary>
	/// Tracks the status of a long-running operation to claim, unclaim, or attach metadata to devices. To learn more, read [Long‑running batch operations](/zero-touch/guides/how-it-works#operations).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevicesLongRunningOperationResponse
	{
		
		/// <summary>
		/// The processing status for each device in the operation. One `PerDeviceStatus` per device. The list order matches the items in the original request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perDeviceStatus")]
		public OperationPerDevice[] PerDeviceStatus { get; set; }
		
		/// <summary>
		/// A summary of how many items in the operation the server processed successfully. Updated as the operation progresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successCount")]
		public System.Nullable<System.Int32> SuccessCount { get; set; }
	}
	
	/// <summary>
	/// A task for each device in the operation. Corresponds to each device change in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationPerDevice
	{
		
		/// <summary>
		/// Identifies one claim request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="claim")]
		public PartnerClaim Claim { get; set; }
		
		/// <summary>
		/// Captures the processing status for each device in the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public PerDeviceStatusInBatch Result { get; set; }
		
		/// <summary>
		/// Identifies one unclaim request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unclaim")]
		public PartnerUnclaim Unclaim { get; set; }
		
		/// <summary>
		/// Identifies metadata updates to one device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMetadata")]
		public UpdateMetadataArguments UpdateMetadata { get; set; }
	}
	
	/// <summary>
	/// Captures the processing status for each device in the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerDeviceStatusInBatch
	{
		
		/// <summary>
		/// If processing succeeds, the device ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// If processing fails, the error type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorIdentifier")]
		public string ErrorIdentifier { get; set; }
		
		/// <summary>
		/// If processing fails, a developer message explaining what went wrong.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The result status of the device after processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PerDeviceStatusInBatchStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PerDeviceStatusInBatchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_UNKNOWN_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_OTHER_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_PERMISSION_DENIED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_INVALID_DEVICE_IDENTIFIER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_INVALID_SECTION_TYPE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_SECTION_NOT_YOURS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_INVALID_TOKEN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_REVOKED_TOKEN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DEVICE_STATUS_DEVICE_LIMIT_EXCEEDED = 10,
	}
	
	/// <summary>
	/// Identifies one unclaim request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartnerUnclaim
	{
		
		/// <summary>
		/// Required. Device ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		/// <summary>
		/// Required. The section type of the device's provisioning record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public ClaimDeviceRequestSectionType SectionType { get; set; }
		
		/// <summary>
		/// Optional. The duration of the vacation unlock starting from when the request is processed. (1 day is treated as 24 hours)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vacationModeDays")]
		public System.Nullable<System.Int32> VacationModeDays { get; set; }
		
		/// <summary>
		/// Optional. The expiration time of the vacation unlock.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vacationModeExpireTime")]
		public string VacationModeExpireTime { get; set; }
	}
	
	/// <summary>
	/// Identifies metadata updates to one device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMetadataArguments
	{
		
		/// <summary>
		/// Required. Device ID of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		/// <summary>
		/// Metadata entries that can be attached to a `Device`. To learn more, read [Device metadata](https://developers.google.com/zero-touch/guides/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public DeviceMetadata DeviceMetadata { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Request to find devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindDevicesByDeviceIdentifierRequest
	{
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		/// <summary>
		/// Required. The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// A token specifying which result page to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
	}
	
	/// <summary>
	/// Response containing found devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindDevicesByDeviceIdentifierResponse
	{
		
		/// <summary>
		/// Found devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public Device[] Devices { get; set; }
		
		/// <summary>
		/// A token used to access the next page of results. Omitted if no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total count of items in the list irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Request to find devices by customers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindDevicesByOwnerRequest
	{
		
		/// <summary>
		/// The list of customer IDs to search for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string[] CustomerId { get; set; }
		
		/// <summary>
		/// The list of IDs of Google Workspace accounts to search for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleWorkspaceCustomerId")]
		public string[] GoogleWorkspaceCustomerId { get; set; }
		
		/// <summary>
		/// Required. The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public string Limit { get; set; }
		
		/// <summary>
		/// A token specifying which result page to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Required. The section type of the device's provisioning record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public ClaimDeviceRequestSectionType SectionType { get; set; }
	}
	
	/// <summary>
	/// Response containing found devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindDevicesByOwnerResponse
	{
		
		/// <summary>
		/// The customer's devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public Device[] Devices { get; set; }
		
		/// <summary>
		/// A token used to access the next page of results. Omitted if no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total count of items in the list irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Request to get a device's SIM lock status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceSimLockStateRequest
	{
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
	}
	
	/// <summary>
	/// Response containing a device's SimLock state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDeviceSimLockStateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="simLockState")]
		public System.Nullable<GetDeviceSimLockStateResponseSimLockState> SimLockState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GetDeviceSimLockStateResponseSimLockState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIM_LOCK_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNLOCKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCKED_TO_PARTNER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCKED_TO_OTHER_PARTNER = 3,
	}
	
	/// <summary>
	/// Response message of all customers related to this partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomersResponse
	{
		
		/// <summary>
		/// List of customers related to this reseller partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public Company[] Customers { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Omitted if no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total count of items in the list irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message to list customers of the vendor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVendorCustomersResponse
	{
		
		/// <summary>
		/// List of customers of the vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public Company[] Customers { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Omitted if no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total count of items in the list irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// Response message to list vendors of the partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVendorsResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Omitted if no further results are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The total count of items in the list irrespective of pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
		
		/// <summary>
		/// List of vendors of the reseller partner. Fields `name`, `companyId` and `companyName` are populated to the Company object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public Company[] Vendors { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// This field will contain a `DevicesLongRunningOperationMetadata` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// This field will contain a `DevicesLongRunningOperationResponse` object if the operation is created by `claimAsync`, `unclaimAsync`, or `updateMetadataAsync`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Request message to unclaim a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnclaimDeviceRequest
	{
		
		/// <summary>
		/// Required. The device ID returned by `ClaimDevice`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIdentifier")]
		public DeviceIdentifier DeviceIdentifier { get; set; }
		
		/// <summary>
		/// Required. The section type of the device's provisioning record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public ClaimDeviceRequestSectionType SectionType { get; set; }
		
		/// <summary>
		/// The duration of the vacation unlock starting from when the request is processed. (1 day is treated as 24 hours)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vacationModeDays")]
		public System.Nullable<System.Int32> VacationModeDays { get; set; }
		
		/// <summary>
		/// The expiration time of the vacation unlock.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vacationModeExpireTime")]
		public string VacationModeExpireTime { get; set; }
	}
	
	/// <summary>
	/// Request to unclaim devices asynchronously in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnclaimDevicesRequest
	{
		
		/// <summary>
		/// Required. The list of devices to unclaim.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unclaims")]
		public PartnerUnclaim[] Unclaims { get; set; }
	}
	
	/// <summary>
	/// Request to update device metadata in batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeviceMetadataInBatchRequest
	{
		
		/// <summary>
		/// Required. The list of metadata updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updates")]
		public UpdateMetadataArguments[] Updates { get; set; }
	}
	
	/// <summary>
	/// Request to set metadata for a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeviceMetadataRequest
	{
		
		/// <summary>
		/// Metadata entries that can be attached to a `Device`. To learn more, read [Device metadata](https://developers.google.com/zero-touch/guides/metadata).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public DeviceMetadata DeviceMetadata { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the user's customer accounts.
		/// Androiddeviceprovisioning_customers_list v1/customers
		/// </summary>
		/// <param name="pageSize">The maximum number of customers to show in a page of results. A number between 1 and 100 (inclusive).</param>
		/// <param name="pageToken">A token specifying which result page to return. This field has custom validations in ListCustomersRequestValidator</param>
		/// <returns>Successful response</returns>
		public async Task<CustomerListCustomersResponse> Androiddeviceprovisioning_customers_listAsync(int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customers?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomerListCustomersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates reseller metadata associated with the device. Android devices only.
		/// Androiddeviceprovisioning_partners_devices_metadata v1/partners/{metadataOwnerId}/devices/{deviceId}/metadata
		/// </summary>
		/// <param name="metadataOwnerId">Required. The owner of the newly set metadata. Set this to the partner ID.</param>
		/// <param name="deviceId">Required. The ID of the device.</param>
		/// <returns>Successful response</returns>
		public async Task<DeviceMetadata> Androiddeviceprovisioning_partners_devices_metadataAsync(string metadataOwnerId, string deviceId, UpdateDeviceMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (metadataOwnerId==null? "" : System.Uri.EscapeDataString(metadataOwnerId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"/metadata";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeviceMetadata>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the customers that are enrolled to the reseller identified by the `partnerId` argument. This list includes customers that the reseller created and customers that enrolled themselves using the portal.
		/// Androiddeviceprovisioning_partners_customers_list v1/partners/{partnerId}/customers
		/// </summary>
		/// <param name="partnerId">Required. The ID of the reseller partner.</param>
		/// <param name="pageSize">The maximum number of results to be returned. If not specified or 0, all the records are returned.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomersResponse> Androiddeviceprovisioning_partners_customers_listAsync(string partnerId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/customers&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListCustomersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Claims a device for a customer and adds it to zero-touch enrollment. If the device is already claimed by another customer, the call returns an error.
		/// Androiddeviceprovisioning_partners_devices_claim v1/partners/{partnerId}/devices:claim
		/// </summary>
		/// <param name="partnerId">Required. The ID of the reseller partner.</param>
		/// <returns>Successful response</returns>
		public async Task<ClaimDeviceResponse> Androiddeviceprovisioning_partners_devices_claimAsync(string partnerId, ClaimDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:claim";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ClaimDeviceResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Claims a batch of devices for a customer asynchronously. Adds the devices to zero-touch enrollment. To learn more, read [Long‑running batch operations](/zero-touch/guides/how-it-works#operations).
		/// Androiddeviceprovisioning_partners_devices_claim v1/partners/{partnerId}/devices:claimAsync
		/// </summary>
		/// <param name="partnerId">Required. The ID of the reseller partner.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Androiddeviceprovisioning_partners_devices_claimAsync(string partnerId, ClaimDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:claimAsync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Finds devices by hardware identifiers, such as IMEI.
		/// Androiddeviceprovisioning_partners_devices_findByIdentifier v1/partners/{partnerId}/devices:findByIdentifier
		/// </summary>
		/// <param name="partnerId">Required. The ID of the reseller partner.</param>
		/// <returns>Successful response</returns>
		public async Task<FindDevicesByDeviceIdentifierResponse> Androiddeviceprovisioning_partners_devices_findByIdentifierAsync(string partnerId, FindDevicesByDeviceIdentifierRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:findByIdentifier";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FindDevicesByDeviceIdentifierResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Finds devices claimed for customers. The results only contain devices registered to the reseller that's identified by the `partnerId` argument. The customer's devices purchased from other resellers don't appear in the results.
		/// Androiddeviceprovisioning_partners_devices_findByOwner v1/partners/{partnerId}/devices:findByOwner
		/// </summary>
		/// <param name="partnerId">Required. The ID of the reseller partner.</param>
		/// <returns>Successful response</returns>
		public async Task<FindDevicesByOwnerResponse> Androiddeviceprovisioning_partners_devices_findByOwnerAsync(string partnerId, FindDevicesByOwnerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:findByOwner";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FindDevicesByOwnerResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a device's SIM lock state.
		/// Androiddeviceprovisioning_partners_devices_getSimLockState v1/partners/{partnerId}/devices:getSimLockState
		/// </summary>
		/// <param name="partnerId">Required. The ID of the partner.</param>
		/// <returns>Successful response</returns>
		public async Task<GetDeviceSimLockStateResponse> Androiddeviceprovisioning_partners_devices_getSimLockStateAsync(string partnerId, GetDeviceSimLockStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:getSimLockState";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDeviceSimLockStateResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unclaims a device from a customer and removes it from zero-touch enrollment.
		/// Androiddeviceprovisioning_partners_devices_unclaim v1/partners/{partnerId}/devices:unclaim
		/// </summary>
		/// <param name="partnerId">Required. The ID of the reseller partner.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Androiddeviceprovisioning_partners_devices_unclaimAsync(string partnerId, UnclaimDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:unclaim";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unclaims a batch of devices for a customer asynchronously. Removes the devices from zero-touch enrollment. To learn more, read [Long‑running batch operations](/zero-touch/guides/how-it-works#operations).
		/// Androiddeviceprovisioning_partners_devices_unclaim v1/partners/{partnerId}/devices:unclaimAsync
		/// </summary>
		/// <param name="partnerId">Required. The reseller partner ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Androiddeviceprovisioning_partners_devices_unclaimAsync(string partnerId, UnclaimDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:unclaimAsync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the reseller metadata attached to a batch of devices. This method updates devices asynchronously and returns an `Operation` that can be used to track progress. Read [Long‑running batch operations](/zero-touch/guides/how-it-works#operations). Android Devices only.
		/// Androiddeviceprovisioning_partners_devices_updateMetadata v1/partners/{partnerId}/devices:updateMetadataAsync
		/// </summary>
		/// <param name="partnerId">Required. The reseller partner ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Androiddeviceprovisioning_partners_devices_updateMetadataAsync(string partnerId, UpdateDeviceMetadataInBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/devices:updateMetadataAsync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an unused configuration. The API call fails if the customer has devices with the configuration applied.
		/// Androiddeviceprovisioning_customers_configurations_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The configuration to delete. An API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. If the configuration is applied to any devices, the API call fails.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Androiddeviceprovisioning_customers_configurations_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets a device.
		/// Androiddeviceprovisioning_partners_devices_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The device API resource name in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Device> Androiddeviceprovisioning_partners_devices_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Device>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a configuration's field values.
		/// Androiddeviceprovisioning_customers_configurations_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. The API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by the server.</param>
		/// <param name="updateMask">Required. The field mask applied to the target `Configuration` before updating the fields. To learn more about using field masks, read [FieldMask](/protocol-buffers/docs/reference/google.protobuf#fieldmask) in the Protocol Buffers documentation.</param>
		/// <returns>Successful response</returns>
		public async Task<Configuration> Androiddeviceprovisioning_customers_configurations_patchAsync(string name, string updateMask, Configuration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Configuration>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists a customer's configurations.
		/// Androiddeviceprovisioning_customers_configurations_list v1/{parent}/configurations
		/// </summary>
		/// <param name="parent">Required. The customer that manages the listed configurations. An API resource name in the format `customers/[CUSTOMER_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomerListConfigurationsResponse> Androiddeviceprovisioning_customers_configurations_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/configurations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomerListConfigurationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new configuration. Once created, a customer can apply the configuration to devices.
		/// Androiddeviceprovisioning_customers_configurations_create v1/{parent}/configurations
		/// </summary>
		/// <param name="parent">Required. The customer that manages the configuration. An API resource name in the format `customers/[CUSTOMER_ID]`. This field has custom validation in CreateConfigurationRequestValidator</param>
		/// <returns>Successful response</returns>
		public async Task<Configuration> Androiddeviceprovisioning_customers_configurations_createAsync(string parent, Configuration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/configurations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Configuration>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the customers of the vendor.
		/// Androiddeviceprovisioning_partners_vendors_customers_list v1/{parent}/customers
		/// </summary>
		/// <param name="parent">Required. The resource name in the format `partners/[PARTNER_ID]/vendors/[VENDOR_ID]`.</param>
		/// <param name="pageSize">The maximum number of results to be returned.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVendorCustomersResponse> Androiddeviceprovisioning_partners_vendors_customers_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customers&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListVendorCustomersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a customer for zero-touch enrollment. After the method returns successfully, admin and owner roles can manage devices and EMM configs by calling API methods or using their zero-touch enrollment portal. The customer receives an email that welcomes them to zero-touch enrollment and explains how to sign into the portal.
		/// Androiddeviceprovisioning_partners_customers_create v1/{parent}/customers
		/// </summary>
		/// <param name="parent">Required. The parent resource ID in the format `partners/[PARTNER_ID]` that identifies the reseller.</param>
		/// <returns>Successful response</returns>
		public async Task<Company> Androiddeviceprovisioning_partners_customers_createAsync(string parent, CreateCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/customers";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Company>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists a customer's devices.
		/// Androiddeviceprovisioning_customers_devices_list v1/{parent}/devices
		/// </summary>
		/// <param name="parent">Required. The customer managing the devices. An API resource name in the format `customers/[CUSTOMER_ID]`.</param>
		/// <param name="pageSize">The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.</param>
		/// <param name="pageToken">A token specifying which result page to return.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomerListDevicesResponse> Androiddeviceprovisioning_customers_devices_listAsync(string parent, string pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices&pageSize=" + (pageSize==null? "" : System.Uri.EscapeDataString(pageSize))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomerListDevicesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Applies a Configuration to the device to register the device for zero-touch enrollment. After applying a configuration to a device, the device automatically provisions itself on first boot, or next factory reset.
		/// Androiddeviceprovisioning_customers_devices_applyConfiguration v1/{parent}/devices:applyConfiguration
		/// </summary>
		/// <param name="parent">Required. The customer managing the device. An API resource name in the format `customers/[CUSTOMER_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Androiddeviceprovisioning_customers_devices_applyConfigurationAsync(string parent, CustomerApplyConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices:applyConfiguration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Removes a configuration from device.
		/// Androiddeviceprovisioning_customers_devices_removeConfiguration v1/{parent}/devices:removeConfiguration
		/// </summary>
		/// <param name="parent">Required. The customer managing the device in the format `customers/[CUSTOMER_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Androiddeviceprovisioning_customers_devices_removeConfigurationAsync(string parent, CustomerRemoveConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices:removeConfiguration";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unclaims a device from a customer and removes it from zero-touch enrollment. After removing a device, a customer must contact their reseller to register the device into zero-touch enrollment again.
		/// Androiddeviceprovisioning_customers_devices_unclaim v1/{parent}/devices:unclaim
		/// </summary>
		/// <param name="parent">Required. The customer managing the device. An API resource name in the format `customers/[CUSTOMER_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Androiddeviceprovisioning_customers_devices_unclaimAsync(string parent, CustomerUnclaimDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/devices:unclaim";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the DPCs (device policy controllers) that support zero-touch enrollment.
		/// Androiddeviceprovisioning_customers_dpcs_list v1/{parent}/dpcs
		/// </summary>
		/// <param name="parent">Required. The customer that can use the DPCs in configurations. An API resource name in the format `customers/[CUSTOMER_ID]`.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomerListDpcsResponse> Androiddeviceprovisioning_customers_dpcs_listAsync(string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/dpcs";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CustomerListDpcsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists the vendors of the partner.
		/// Androiddeviceprovisioning_partners_vendors_list v1/{parent}/vendors
		/// </summary>
		/// <param name="parent">Required. The resource name in the format `partners/[PARTNER_ID]`.</param>
		/// <param name="pageSize">The maximum number of results to be returned.</param>
		/// <param name="pageToken">A token identifying a page of results returned by the server.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVendorsResponse> Androiddeviceprovisioning_partners_vendors_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vendors&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListVendorsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
