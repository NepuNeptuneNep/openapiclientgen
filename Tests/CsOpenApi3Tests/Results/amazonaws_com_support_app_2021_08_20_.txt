//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSlackChannelConfigurationResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAccountAliasResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSlackChannelConfigurationResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSlackWorkspaceConfigurationResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountAliasResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountAlias")]
		public string AccountAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSlackChannelConfigurationsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slackChannelConfigurations")]
		public SlackChannelConfiguration[] SlackChannelConfigurations { get; set; }
	}
	
	/// <summary>
	/// The configuration for a Slack channel that you added for your Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackChannelConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelRoleArn")]
		public string ChannelRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnAddCorrespondenceToCase")]
		public System.Nullable<System.Boolean> NotifyOnAddCorrespondenceToCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnCaseSeverity")]
		public NotificationSeverityLevel NotifyOnCaseSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnCreateOrReopenCase")]
		public System.Nullable<System.Boolean> NotifyOnCreateOrReopenCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnResolveCase")]
		public System.Nullable<System.Boolean> NotifyOnResolveCase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotificationSeverityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSlackWorkspaceConfigurationsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slackWorkspaceConfigurations")]
		public SlackWorkspaceConfiguration[] SlackWorkspaceConfigurations { get; set; }
	}
	
	/// <summary>
	/// The configuration for a Slack workspace that you added to an Amazon Web Services account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackWorkspaceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowOrganizationMemberAccount")]
		public System.Nullable<System.Boolean> AllowOrganizationMemberAccount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamName")]
		public string TeamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAccountAliasResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterSlackWorkspaceForOrganizationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public AccountType AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamName")]
		public string TeamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		management = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		member = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSlackChannelConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelRoleArn")]
		public string ChannelRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnAddCorrespondenceToCase")]
		public System.Nullable<System.Boolean> NotifyOnAddCorrespondenceToCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnCaseSeverity")]
		public NotificationSeverityLevel NotifyOnCaseSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnCreateOrReopenCase")]
		public System.Nullable<System.Boolean> NotifyOnCreateOrReopenCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnResolveCase")]
		public System.Nullable<System.Boolean> NotifyOnResolveCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSlackChannelConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelRoleArn")]
		public string ChannelRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnAddCorrespondenceToCase")]
		public System.Nullable<System.Boolean> NotifyOnAddCorrespondenceToCase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notifyOnCaseSeverity")]
		public NotificationSeverityLevel NotifyOnCaseSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnCreateOrReopenCase")]
		public System.Nullable<System.Boolean> NotifyOnCreateOrReopenCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnResolveCase")]
		public System.Nullable<System.Boolean> NotifyOnResolveCase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAccountAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSlackChannelConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSlackWorkspaceConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountAliasRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSlackChannelConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSlackWorkspaceConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutAccountAliasRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountAlias")]
		public string AccountAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterSlackWorkspaceForOrganizationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSlackChannelConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelRoleArn")]
		public string ChannelRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnAddCorrespondenceToCase")]
		public System.Nullable<System.Boolean> NotifyOnAddCorrespondenceToCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnCaseSeverity")]
		public NotificationSeverityLevel NotifyOnCaseSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnCreateOrReopenCase")]
		public System.Nullable<System.Boolean> NotifyOnCreateOrReopenCase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifyOnResolveCase")]
		public System.Nullable<System.Boolean> NotifyOnResolveCase { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a Slack channel configuration for your Amazon Web Services account.</p> <note> <ul> <li> <p>You can add up to 5 Slack workspaces for your account.</p> </li> <li> <p>You can add up to 20 Slack channels for your account.</p> </li> </ul> </note> <p>A Slack channel can have up to 100 Amazon Web Services accounts. This means that only 100 accounts can add the same Slack channel to the Amazon Web Services Support App. We recommend that you only add the accounts that you need to manage support cases for your organization. This can reduce the notifications about case updates that you receive in the Slack channel.</p> <note> <p>We recommend that you choose a private Slack channel so that only members in that channel have read and write access to your support cases. Anyone in your Slack channel can create, update, or resolve support cases for your account. Users require an invitation to join private channels. </p> </note>
		/// CreateSlackChannelConfiguration control/create-slack-channel-configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSlackChannelConfigurationResult> CreateSlackChannelConfigurationAsync(CreateSlackChannelConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/create-slack-channel-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSlackChannelConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an alias for an Amazon Web Services account ID. The alias appears in the Amazon Web Services Support App page of the Amazon Web Services Support Center. The alias also appears in Slack messages from the Amazon Web Services Support App.
		/// DeleteAccountAlias control/delete-account-alias
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAccountAliasResult> DeleteAccountAliasAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/delete-account-alias";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAccountAliasResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Slack channel configuration from your Amazon Web Services account. This operation doesn't delete your Slack channel.
		/// DeleteSlackChannelConfiguration control/delete-slack-channel-configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSlackChannelConfigurationResult> DeleteSlackChannelConfigurationAsync(DeleteSlackChannelConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/delete-slack-channel-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSlackChannelConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Slack workspace configuration from your Amazon Web Services account. This operation doesn't delete your Slack workspace.
		/// DeleteSlackWorkspaceConfiguration control/delete-slack-workspace-configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSlackWorkspaceConfigurationResult> DeleteSlackWorkspaceConfigurationAsync(DeleteSlackWorkspaceConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/delete-slack-workspace-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSlackWorkspaceConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the alias from an Amazon Web Services account ID. The alias appears in the Amazon Web Services Support App page of the Amazon Web Services Support Center. The alias also appears in Slack messages from the Amazon Web Services Support App.
		/// GetAccountAlias control/get-account-alias
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAccountAliasResult> GetAccountAliasAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/get-account-alias";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAccountAliasResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Slack channel configurations for an Amazon Web Services account.
		/// ListSlackChannelConfigurations control/list-slack-channel-configurations
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSlackChannelConfigurationsResult> ListSlackChannelConfigurationsAsync(string nextToken, ListSlackChannelConfigurationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/list-slack-channel-configurations?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSlackChannelConfigurationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Slack workspace configurations for an Amazon Web Services account.
		/// ListSlackWorkspaceConfigurations control/list-slack-workspace-configurations
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSlackWorkspaceConfigurationsResult> ListSlackWorkspaceConfigurationsAsync(string nextToken, ListSlackWorkspaceConfigurationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/list-slack-workspace-configurations?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSlackWorkspaceConfigurationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an individual alias for each Amazon Web Services account ID. The alias appears in the Amazon Web Services Support App page of the Amazon Web Services Support Center. The alias also appears in Slack messages from the Amazon Web Services Support App.
		/// PutAccountAlias control/put-account-alias
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAccountAliasResult> PutAccountAliasAsync(PutAccountAliasPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/put-account-alias";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutAccountAliasResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a Slack workspace for your Amazon Web Services account. To call this API, your account must be part of an organization in Organizations.</p> <p>If you're the <i>management account</i> and you want to register Slack workspaces for your organization, you must complete the following tasks:</p> <ol> <li> <p>Sign in to the <a href="https://console.aws.amazon.com/support/app">Amazon Web Services Support Center</a> and authorize the Slack workspaces where you want your organization to have access to. See <a href="https://docs.aws.amazon.com/awssupport/latest/user/authorize-slack-workspace.html">Authorize a Slack workspace</a> in the <i>Amazon Web Services Support User Guide</i>.</p> </li> <li> <p>Call the <code>RegisterSlackWorkspaceForOrganization</code> API to authorize each Slack workspace for the organization.</p> </li> </ol> <p>After the management account authorizes the Slack workspace, member accounts can call this API to authorize the same Slack workspace for their individual accounts. Member accounts don't need to authorize the Slack workspace manually through the <a href="https://console.aws.amazon.com/support/app">Amazon Web Services Support Center</a>.</p> <p>To use the Amazon Web Services Support App, each account must then complete the following tasks:</p> <ul> <li> <p>Create an Identity and Access Management (IAM) role with the required permission. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a>.</p> </li> <li> <p>Configure a Slack channel to use the Amazon Web Services Support App for support cases for that account. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/add-your-slack-channel.html">Configuring a Slack channel</a>.</p> </li> </ul>
		/// RegisterSlackWorkspaceForOrganization control/register-slack-workspace-for-organization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterSlackWorkspaceForOrganizationResult> RegisterSlackWorkspaceForOrganizationAsync(RegisterSlackWorkspaceForOrganizationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/register-slack-workspace-for-organization";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterSlackWorkspaceForOrganizationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration for a Slack channel, such as case update notifications.
		/// UpdateSlackChannelConfiguration control/update-slack-channel-configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSlackChannelConfigurationResult> UpdateSlackChannelConfigurationAsync(UpdateSlackChannelConfigurationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "control/update-slack-channel-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSlackChannelConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateSlackChannelConfigurationPostBody
	{
		
		/// <summary>
		/// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The name of the Slack channel that you configure for the Amazon Web Services Support App.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.
		/// Required
		/// Max length: 2048
		/// Min length: 31
		/// Pattern: ^arn:aws:iam::[0-9]{12}:role/(.+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(31)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:iam::[0-9]{12}:role/(.+)$")]
		public string ChannelRoleArn { get; set; }
		
		/// <summary>
		/// Whether you want to get notified when a support case has a new correspondence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyOnAddCorrespondenceToCase")]
		public System.Nullable<System.Boolean> NotifyOnAddCorrespondenceToCase { get; set; }
		
		/// <summary>
		/// <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, you must specify <code>true</code> for at least one of the following parameters:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, the following parameters must be null or <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, they default to <code>false</code>.</p> </note>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notifyOnCaseSeverity")]
		public NotificationSeverityLevel NotifyOnCaseSeverity { get; set; }
		
		/// <summary>
		/// Whether you want to get notified when a support case is created or reopened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyOnCreateOrReopenCase")]
		public System.Nullable<System.Boolean> NotifyOnCreateOrReopenCase { get; set; }
		
		/// <summary>
		/// Whether you want to get notified when a support case is resolved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyOnResolveCase")]
		public System.Nullable<System.Boolean> NotifyOnResolveCase { get; set; }
		
		/// <summary>
		/// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string TeamId { get; set; }
	}
	
	public class DeleteSlackChannelConfigurationPostBody
	{
		
		/// <summary>
		/// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string TeamId { get; set; }
	}
	
	public class DeleteSlackWorkspaceConfigurationPostBody
	{
		
		/// <summary>
		/// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string TeamId { get; set; }
	}
	
	public class ListSlackChannelConfigurationsPostBody
	{
		
		/// <summary>
		/// If the results of a search are large, the API only returns a portion of the results and includes a <code>nextToken</code> pagination token in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When the API returns the last set of results, the response doesn't include a pagination token value.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string NextToken { get; set; }
	}
	
	public class ListSlackWorkspaceConfigurationsPostBody
	{
		
		/// <summary>
		/// If the results of a search are large, the API only returns a portion of the results and includes a <code>nextToken</code> pagination token in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When the API returns the last set of results, the response doesn't include a pagination token value.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string NextToken { get; set; }
	}
	
	public class PutAccountAliasPostBody
	{
		
		/// <summary>
		/// An alias or short name for an Amazon Web Services account.
		/// Required
		/// Max length: 30
		/// Min length: 1
		/// Pattern: ^[\w\- ]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountAlias")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\w\- ]+$")]
		public string AccountAlias { get; set; }
	}
	
	public class RegisterSlackWorkspaceForOrganizationPostBody
	{
		
		/// <summary>
		/// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>. Specify the Slack workspace that you want to use for your organization.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string TeamId { get; set; }
	}
	
	public class UpdateSlackChannelConfigurationPostBody
	{
		
		/// <summary>
		/// The channel ID in Slack. This ID identifies a channel within a Slack workspace.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// The Slack channel name that you want to update.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^.+$")]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.
		/// Max length: 2048
		/// Min length: 31
		/// Pattern: ^arn:aws:iam::[0-9]{12}:role/(.+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(31)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws:iam::[0-9]{12}:role/(.+)$")]
		public string ChannelRoleArn { get; set; }
		
		/// <summary>
		/// Whether you want to get notified when a support case has a new correspondence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyOnAddCorrespondenceToCase")]
		public System.Nullable<System.Boolean> NotifyOnAddCorrespondenceToCase { get; set; }
		
		/// <summary>
		/// <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyOnCaseSeverity")]
		public NotificationSeverityLevel NotifyOnCaseSeverity { get; set; }
		
		/// <summary>
		/// Whether you want to get notified when a support case is created or reopened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyOnCreateOrReopenCase")]
		public System.Nullable<System.Boolean> NotifyOnCreateOrReopenCase { get; set; }
		
		/// <summary>
		/// Whether you want to get notified when a support case is resolved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyOnResolveCase")]
		public System.Nullable<System.Boolean> NotifyOnResolveCase { get; set; }
		
		/// <summary>
		/// The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\S+$")]
		public string TeamId { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
