//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The associated fields returned, given a unique abuse ticket id
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbuseTicket
	{
		
		/// <summary>
		/// Is this abuse ticket closed?
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public bool Closed { get; set; } = false;
		
		/// <summary>
		/// The date the abuse ticket was closed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="closedAt")]
		public string ClosedAt { get; set; }
		
		/// <summary>
		/// The date the abuse ticket was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// The domain or IP the suspected abuse was reported against
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainIp")]
		public string DomainIp { get; set; }
		
		/// <summary>
		/// The shopper id of the person who reported the suspected abuse
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reporter")]
		public string Reporter { get; set; }
		
		/// <summary>
		/// The single URL or IP the suspected abuse was reported against
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The company the suspected abuse is targeting
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Abuse ticket ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ticketId")]
		public string TicketId { get; set; }
		
		/// <summary>
		/// The type of abuse being reported
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AbuseTicketType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AbuseTicketType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="A_RECORD")]
		A_RECORD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CHILD_ABUSE")]
		CHILD_ABUSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTENT")]
		CONTENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRAUD_WIRE")]
		FRAUD_WIRE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IP_BLOCK")]
		IP_BLOCK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MALWARE")]
		MALWARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NETWORK_ABUSE")]
		NETWORK_ABUSE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PHISHING")]
		PHISHING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SPAM")]
		SPAM = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbuseTicketCreate
	{
		
		/// <summary>
		/// Additional information that may assist the abuse investigator. ie: server logs or email headers/body for SPAM
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		/// <summary>
		/// Reporter URL if housing additional information that may assist the abuse investigator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infoUrl")]
		public string InfoUrl { get; set; }
		
		/// <summary>
		/// Do you believe this is intentional abuse by the domain holder?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intentional")]
		public System.Nullable<System.Boolean> Intentional { get; set; }
		
		/// <summary>
		/// The Proxy information required to view the abuse being reported. ie: Specific IP used, or country of IP viewing from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxy")]
		public string Proxy { get; set; }
		
		/// <summary>
		/// The URL or IP where live abuse content is located at. ie: https://www.example.com/bad_stuff/bad.php
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The brand/company the abuse is targeting. ie: brand name/bank name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// The type of abuse being reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AbuseTicketType Type { get; set; }
	}
	
	/// <summary>
	/// The primary key of a newly created abuse ticket
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbuseTicketId
	{
		
		/// <summary>
		/// Abuse ticket ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="u_number")]
		public string U_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AbuseTicketList
	{
		
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// A list of abuse ticket ids originated by this reporter.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ticketIds")]
		public string[] TicketIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List of the specific fields, and the errors found with their contents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ErrorField[] Fields { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Stack trace indicating where the error occurred.<br/>
		///NOTE: This attribute <strong>MAY</strong> be included for Development and Test environments.
		///However, it <strong>MUST NOT</strong> be exposed from OTE nor Production systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public string[] Stack { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorField
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the problem with the contents of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// 1) JSONPath referring to the field within the data containing an error<br/>or<br/>2) JSONPath referring to an object containing an error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// JSONPath referring to the field on the object referenced by `path` containing an error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathRelated")]
		public string PathRelated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pagination
	{
		
		/// <summary>
		/// Optional link to first list of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		/// <summary>
		/// Optional link to last list of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		/// <summary>
		/// Optional link to next list of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// Optional link to previous list of results
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// Number of records available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all abuse tickets ids that match user provided filters
		/// GetTickets v1/abuse/tickets
		/// </summary>
		/// <param name="type">The type of abuse.</param>
		/// <param name="closed">Is this abuse ticket closed?</param>
		/// <param name="sourceDomainOrIp">The domain name or ip address the abuse originated from</param>
		/// <param name="target">The brand/company the abuse is targeting. ie: brand name/bank name</param>
		/// <param name="createdStart">The earliest abuse ticket creation date to pull abuse tickets for</param>
		/// <param name="createdEnd">The latest abuse ticket creation date to pull abuse tickets for</param>
		/// <param name="limit">Number of abuse ticket numbers to return.</param>
		/// <param name="offset">The earliest result set record number to pull abuse tickets for</param>
		/// <returns>Success</returns>
		public async Task GetTicketsAsync(AbuseTicketType type, bool closed, string sourceDomainOrIp, string target, string createdStart, string createdEnd, string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/abuse/tickets?type=" + type+"&closed="+closed+"&sourceDomainOrIp=" + (sourceDomainOrIp==null? "" : System.Uri.EscapeDataString(sourceDomainOrIp))+"&target=" + (target==null? "" : System.Uri.EscapeDataString(target))+"&createdStart=" + (createdStart==null? "" : System.Uri.EscapeDataString(createdStart))+"&createdEnd=" + (createdEnd==null? "" : System.Uri.EscapeDataString(createdEnd))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new abuse ticket
		/// CreateTicket v1/abuse/tickets
		/// </summary>
		/// <param name="requestBody">The endpoint which allows the Reporter to create a new abuse ticket</param>
		/// <returns>No response was specified</returns>
		public async Task CreateTicketAsync(AbuseTicketCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/abuse/tickets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return the abuse ticket data for a given ticket id
		/// GetTicketInfo v1/abuse/tickets/{ticketId}
		/// </summary>
		/// <param name="ticketId">A unique abuse ticket identifier</param>
		/// <returns>Success</returns>
		public async Task GetTicketInfoAsync(string ticketId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/abuse/tickets/"+ (ticketId==null? "" : System.Uri.EscapeDataString(ticketId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
