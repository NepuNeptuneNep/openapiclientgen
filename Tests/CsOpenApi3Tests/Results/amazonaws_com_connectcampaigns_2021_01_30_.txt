//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The response for Create Campaign API
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCampaignResponse
	{
		
		/// <summary>
		/// The resource name of an Amazon Connect campaign.
		/// Max length: 500
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Identifier representing a Campaign
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// Tag map with key and value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Tag map with key and value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	/// <summary>
	/// Predictive Dialer config
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PredictiveDialerConfig
	{
		
		/// <summary>
		/// The bandwidth allocation of a queue resource.
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAllocation")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public double BandwidthAllocation { get; set; }
	}
	
	/// <summary>
	/// Progressive Dialer config
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProgressiveDialerConfig
	{
		
		/// <summary>
		/// The bandwidth allocation of a queue resource.
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bandwidthAllocation")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public double BandwidthAllocation { get; set; }
	}
	
	/// <summary>
	/// Answering Machine Detection config
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnswerMachineDetectionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableAnswerMachineDetection")]
		public bool EnableAnswerMachineDetection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidStateException
	{
	}
	
	/// <summary>
	/// DescribeCampaignResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCampaignResponse
	{
		
		/// <summary>
		/// An Amazon Connect campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaign")]
		public Campaign Campaign { get; set; }
	}
	
	/// <summary>
	/// An Amazon Connect campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Campaign
	{
		
		/// <summary>
		/// The resource name of an Amazon Connect campaign.
		/// Required
		/// Max length: 500
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Amazon Connect Instance Id
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectInstanceId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ConnectInstanceId { get; set; }
		
		/// <summary>
		/// The possible types of dialer config parameters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialerConfig")]
		public DialerConfig DialerConfig { get; set; }
		
		/// <summary>
		/// Identifier representing a Campaign
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of an Amazon Connect Campaign name.
		/// Required
		/// Max length: 127
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		public string Name { get; set; }
		
		/// <summary>
		/// The configuration used for outbound calls.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outboundCallConfig")]
		public OutboundCallConfig OutboundCallConfig { get; set; }
		
		/// <summary>
		/// Tag map with key and value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// The possible types of dialer config parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DialerConfig
	{
		
		/// <summary>
		/// Predictive Dialer config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictiveDialerConfig")]
		public PredictiveDialerConfig PredictiveDialerConfig { get; set; }
		
		/// <summary>
		/// Progressive Dialer config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressiveDialerConfig")]
		public ProgressiveDialerConfig ProgressiveDialerConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration used for outbound calls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutboundCallConfig
	{
		
		/// <summary>
		/// Answering Machine Detection config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerMachineDetectionConfig")]
		public AnswerMachineDetectionConfig AnswerMachineDetectionConfig { get; set; }
		
		/// <summary>
		/// The identifier of the contact flow for the outbound call.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectContactFlowId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string ConnectContactFlowId { get; set; }
		
		/// <summary>
		/// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectQueueId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string ConnectQueueId { get; set; }
		
		/// <summary>
		/// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectSourcePhoneNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ConnectSourcePhoneNumber { get; set; }
	}
	
	/// <summary>
	/// GetCampaignStateResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCampaignStateResponse
	{
		
		/// <summary>
		/// State of a campaign
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GetCampaignStateResponseState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GetCampaignStateResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Initialized")]
		Initialized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Running")]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Paused")]
		Paused = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Stopped")]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 4,
	}
	
	/// <summary>
	/// GetCampaignStateBatchResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCampaignStateBatchResponse
	{
		
		/// <summary>
		/// List of failed requests of campaign state
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public FailedCampaignStateResponse[] FailedRequests { get; set; }
		
		/// <summary>
		/// List of successful response of campaign state
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public SuccessfulCampaignStateResponse[] SuccessfulRequests { get; set; }
	}
	
	/// <summary>
	/// Failed response of campaign state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedCampaignStateResponse
	{
		
		/// <summary>
		/// Identifier representing a Campaign
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// A predefined code indicating the error that caused the failure in getting state of campaigns
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public System.Nullable<FailedCampaignStateResponseFailureCode> FailureCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FailedCampaignStateResponseFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResourceNotFound")]
		ResourceNotFound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UnknownError")]
		UnknownError = 1,
	}
	
	/// <summary>
	/// Successful response of campaign state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuccessfulCampaignStateResponse
	{
		
		/// <summary>
		/// Identifier representing a Campaign
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// State of a campaign
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public GetCampaignStateResponseState State { get; set; }
	}
	
	/// <summary>
	/// GetConnectInstanceConfigResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectInstanceConfigResponse
	{
		
		/// <summary>
		/// Instance config object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectInstanceConfig")]
		public InstanceConfig ConnectInstanceConfig { get; set; }
	}
	
	/// <summary>
	/// Instance config object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceConfig
	{
		
		/// <summary>
		/// Amazon Connect Instance Id
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectInstanceId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ConnectInstanceId { get; set; }
		
		/// <summary>
		/// Encryption config for Connect Instance. Note that sensitive data will always be encrypted. If disabled, service will perform encryption with its own key. If enabled, a KMS key id needs to be provided and KMS charges will apply. KMS is only type supported
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// Service linked role arn
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceLinkedRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ServiceLinkedRoleArn { get; set; }
	}
	
	/// <summary>
	/// Encryption config for Connect Instance. Note that sensitive data will always be encrypted. If disabled, service will perform encryption with its own key. If enabled, a KMS key id needs to be provided and KMS charges will apply. KMS is only type supported
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// Boolean to indicate if custom encryption has been enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Server-side encryption type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionType")]
		public System.Nullable<EncryptionConfigEncryptionType> EncryptionType { get; set; }
		
		/// <summary>
		/// KMS key id/arn for encryption config.
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string KeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EncryptionConfigEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMS")]
		KMS = 0,
	}
	
	/// <summary>
	/// GetInstanceOnboardingJobStatusResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceOnboardingJobStatusResponse
	{
		
		/// <summary>
		/// Instance onboarding job status object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectInstanceOnboardingJobStatus")]
		public InstanceOnboardingJobStatus ConnectInstanceOnboardingJobStatus { get; set; }
	}
	
	/// <summary>
	/// Instance onboarding job status object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceOnboardingJobStatus
	{
		
		/// <summary>
		/// Amazon Connect Instance Id
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectInstanceId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ConnectInstanceId { get; set; }
		
		/// <summary>
		/// Enumeration of the possible failure codes for instance onboarding job
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public System.Nullable<InstanceOnboardingJobStatusFailureCode> FailureCode { get; set; }
		
		/// <summary>
		/// Enumeration of the possible states for instance onboarding job
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InstanceOnboardingJobStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceOnboardingJobStatusFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT_BRIDGE_ACCESS_DENIED")]
		EVENT_BRIDGE_ACCESS_DENIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT_BRIDGE_MANAGED_RULE_LIMIT_EXCEEDED")]
		EVENT_BRIDGE_MANAGED_RULE_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IAM_ACCESS_DENIED")]
		IAM_ACCESS_DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMS_ACCESS_DENIED")]
		KMS_ACCESS_DENIED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMS_KEY_NOT_FOUND")]
		KMS_KEY_NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_FAILURE")]
		INTERNAL_FAILURE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceOnboardingJobStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	/// <summary>
	/// ListCampaignsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCampaignsResponse
	{
		
		/// <summary>
		/// A list of Amazon Connect campaigns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignSummaryList")]
		public CampaignSummary[] CampaignSummaryList { get; set; }
		
		/// <summary>
		/// The token for the next set of results.
		/// Max length: 1000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An Amazon Connect campaign summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CampaignSummary
	{
		
		/// <summary>
		/// The resource name of an Amazon Connect campaign.
		/// Required
		/// Max length: 500
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Amazon Connect Instance Id
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectInstanceId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ConnectInstanceId { get; set; }
		
		/// <summary>
		/// Identifier representing a Campaign
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of an Amazon Connect Campaign name.
		/// Required
		/// Max length: 127
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Connect instance identifier filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceIdFilter
	{
		
		/// <summary>
		/// Operators for Connect instance identifier filter
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public InstanceIdFilterOperator Operator { get; set; }
		
		/// <summary>
		/// Amazon Connect Instance Id
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceIdFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Eq")]
		Eq = 0,
	}
	
	/// <summary>
	/// ListTagsForResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Tag map with key and value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCampaignStateException
	{
	}
	
	/// <summary>
	/// PutDialRequestBatchResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutDialRequestBatchResponse
	{
		
		/// <summary>
		/// A list of failed requests.
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public FailedRequest[] FailedRequests { get; set; }
		
		/// <summary>
		/// A list of successful requests identified by the unique client token.
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successfulRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public SuccessfulRequest[] SuccessfulRequests { get; set; }
	}
	
	/// <summary>
	/// A failed request identified by the unique client token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedRequest
	{
		
		/// <summary>
		/// Client provided parameter used for idempotency. Its value must be unique for each request.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// A predefined code indicating the error that caused the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureCode")]
		public System.Nullable<FailedRequestFailureCode> FailureCode { get; set; }
		
		/// <summary>
		/// Identifier representing a Dial request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FailedRequestFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidInput")]
		InvalidInput = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestThrottled")]
		RequestThrottled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UnknownError")]
		UnknownError = 2,
	}
	
	/// <summary>
	/// A successful request identified by the unique client token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SuccessfulRequest
	{
		
		/// <summary>
		/// Client provided parameter used for idempotency. Its value must be unique for each request.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Identifier representing a Dial request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// A dial request for a campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DialRequest
	{
		
		/// <summary>
		/// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// Client provided parameter used for idempotency. Its value must be unique for each request.
		/// Required
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Timestamp with no UTC offset or timezone
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.DateTimeOffset ExpirationTime { get; set; }
		
		/// <summary>
		/// The phone number of the customer, in E.164 format.
		/// Required
		/// Max length: 20
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attributes
	{
	}
	
	/// <summary>
	/// The response for StartInstanceOnboardingJob API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInstanceOnboardingJobResponse
	{
		
		/// <summary>
		/// Instance onboarding job status object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectInstanceOnboardingJobStatus")]
		public InstanceOnboardingJobStatus ConnectInstanceOnboardingJobStatus { get; set; }
	}
	
	/// <summary>
	/// Server-side encryption type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMS")]
		KMS = 0,
	}
	
	/// <summary>
	/// Filter model by type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CampaignFilters
	{
		
		/// <summary>
		/// Connect instance identifier filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceIdFilter")]
		public InstanceIdFilter InstanceIdFilter { get; set; }
	}
	
	/// <summary>
	/// State of a campaign
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CampaignState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Initialized")]
		Initialized = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Running")]
		Running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Paused")]
		Paused = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Stopped")]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Failed")]
		Failed = 4,
	}
	
	/// <summary>
	/// The request for Create Campaign API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCampaignRequest
	{
		
		/// <summary>
		/// Amazon Connect Instance Id
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectInstanceId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ConnectInstanceId { get; set; }
		
		/// <summary>
		/// The possible types of dialer config parameters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialerConfig")]
		public DialerConfig DialerConfig { get; set; }
		
		/// <summary>
		/// The name of an Amazon Connect Campaign name.
		/// Required
		/// Max length: 127
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		public string Name { get; set; }
		
		/// <summary>
		/// The configuration used for outbound calls.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outboundCallConfig")]
		public OutboundCallConfig OutboundCallConfig { get; set; }
		
		/// <summary>
		/// Tag map with key and value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// DeleteCampaignRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCampaignRequest
	{
	}
	
	/// <summary>
	/// DeleteCampaignRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConnectInstanceConfigRequest
	{
	}
	
	/// <summary>
	/// The request for DeleteInstanceOnboardingJob API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceOnboardingJobRequest
	{
	}
	
	/// <summary>
	/// DescribeCampaignRequests
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCampaignRequest
	{
	}
	
	/// <summary>
	/// A predefined code indicating the error that caused the failure in getting state of campaigns
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GetCampaignStateBatchFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ResourceNotFound")]
		ResourceNotFound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UnknownError")]
		UnknownError = 1,
	}
	
	/// <summary>
	/// A predefined code indicating the error that caused the failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidInput")]
		InvalidInput = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RequestThrottled")]
		RequestThrottled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UnknownError")]
		UnknownError = 2,
	}
	
	/// <summary>
	/// GetCampaignStateBatchRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCampaignStateBatchRequest
	{
		
		/// <summary>
		/// List of CampaignId
		/// Required
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="campaignIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string[] CampaignIds { get; set; }
	}
	
	/// <summary>
	/// GetCampaignStateRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCampaignStateRequest
	{
	}
	
	/// <summary>
	/// GetConnectInstanceConfigRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectInstanceConfigRequest
	{
	}
	
	/// <summary>
	/// GetInstanceOnboardingJobStatusRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceOnboardingJobStatusRequest
	{
	}
	
	/// <summary>
	/// Enumeration of the possible failure codes for instance onboarding job
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceOnboardingJobFailureCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT_BRIDGE_ACCESS_DENIED")]
		EVENT_BRIDGE_ACCESS_DENIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EVENT_BRIDGE_MANAGED_RULE_LIMIT_EXCEEDED")]
		EVENT_BRIDGE_MANAGED_RULE_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IAM_ACCESS_DENIED")]
		IAM_ACCESS_DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMS_ACCESS_DENIED")]
		KMS_ACCESS_DENIED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KMS_KEY_NOT_FOUND")]
		KMS_KEY_NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_FAILURE")]
		INTERNAL_FAILURE = 5,
	}
	
	/// <summary>
	/// Enumeration of the possible states for instance onboarding job
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InstanceOnboardingJobStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	/// <summary>
	/// ListCampaignsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCampaignsRequest
	{
		
		/// <summary>
		/// Filter model by type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public CampaignFilters Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token for the next set of results.
		/// Max length: 1000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// ListTagsForResource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	/// PauseCampaignRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PauseCampaignRequest
	{
	}
	
	/// <summary>
	/// PutDialRequestBatchRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutDialRequestBatchRequest
	{
		
		/// <summary>
		/// A list of dial requests.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public DialRequest[] DialRequests { get; set; }
	}
	
	/// <summary>
	/// ResumeCampaignRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResumeCampaignRequest
	{
	}
	
	/// <summary>
	/// StartCampaignRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartCampaignRequest
	{
	}
	
	/// <summary>
	/// The request for StartInstanceOnboardingJob API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartInstanceOnboardingJobRequest
	{
		
		/// <summary>
		/// Encryption config for Connect Instance. Note that sensitive data will always be encrypted. If disabled, service will perform encryption with its own key. If enabled, a KMS key id needs to be provided and KMS charges will apply. KMS is only type supported
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
	}
	
	/// <summary>
	/// StopCampaignRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopCampaignRequest
	{
	}
	
	/// <summary>
	/// TagResourceRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Tag map with key and value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// UntagResourceRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	/// UpdateCampaignDialerConfigRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCampaignDialerConfigRequest
	{
		
		/// <summary>
		/// The possible types of dialer config parameters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialerConfig")]
		public DialerConfig DialerConfig { get; set; }
	}
	
	/// <summary>
	/// UpdateCampaignNameRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCampaignNameRequest
	{
		
		/// <summary>
		/// The name of an Amazon Connect Campaign name.
		/// Required
		/// Max length: 127
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// UpdateCampaignOutboundCallConfigRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCampaignOutboundCallConfigRequest
	{
		
		/// <summary>
		/// Answering Machine Detection config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerMachineDetectionConfig")]
		public AnswerMachineDetectionConfig AnswerMachineDetectionConfig { get; set; }
		
		/// <summary>
		/// The identifier of the contact flow for the outbound call.
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectContactFlowId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string ConnectContactFlowId { get; set; }
		
		/// <summary>
		/// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectSourcePhoneNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ConnectSourcePhoneNumber { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a campaign for the specified Amazon Connect account. This API is idempotent.
		/// CreateCampaign campaigns
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCampaignResponse> CreateCampaignAsync(CreateCampaignPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCampaignResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a campaign from the specified Amazon Connect account.
		/// DeleteCampaign campaigns/{id}
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteCampaignAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specific campaign.
		/// DescribeCampaign campaigns/{id}
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeCampaignResponse> DescribeCampaignAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCampaignResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a connect instance config from the specified AWS account.
		/// DeleteConnectInstanceConfig connect-instance/{connectInstanceId}/config
		/// </summary>
		/// <param name="connectInstanceId">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteConnectInstanceConfigAsync(string connectInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-instance/"+ (connectInstanceId==null? "" : System.Uri.EscapeDataString(connectInstanceId))+"/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specific Connect instance config.
		/// GetConnectInstanceConfig connect-instance/{connectInstanceId}/config
		/// </summary>
		/// <param name="connectInstanceId">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetConnectInstanceConfigResponse> GetConnectInstanceConfigAsync(string connectInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-instance/"+ (connectInstanceId==null? "" : System.Uri.EscapeDataString(connectInstanceId))+"/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectInstanceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the Connect Campaigns onboarding job for the specified Amazon Connect instance.
		/// DeleteInstanceOnboardingJob connect-instance/{connectInstanceId}/onboarding
		/// </summary>
		/// <param name="connectInstanceId">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteInstanceOnboardingJobAsync(string connectInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-instance/"+ (connectInstanceId==null? "" : System.Uri.EscapeDataString(connectInstanceId))+"/onboarding";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specific instance onboarding job status.
		/// GetInstanceOnboardingJobStatus connect-instance/{connectInstanceId}/onboarding
		/// </summary>
		/// <param name="connectInstanceId">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetInstanceOnboardingJobStatusResponse> GetInstanceOnboardingJobStatusAsync(string connectInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-instance/"+ (connectInstanceId==null? "" : System.Uri.EscapeDataString(connectInstanceId))+"/onboarding";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceOnboardingJobStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Onboard the specific Amazon Connect instance to Connect Campaigns.
		/// StartInstanceOnboardingJob connect-instance/{connectInstanceId}/onboarding
		/// </summary>
		/// <param name="connectInstanceId">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<StartInstanceOnboardingJobResponse> StartInstanceOnboardingJobAsync(string connectInstanceId, StartInstanceOnboardingJobPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-instance/"+ (connectInstanceId==null? "" : System.Uri.EscapeDataString(connectInstanceId))+"/onboarding";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartInstanceOnboardingJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get state of a campaign for the specified Amazon Connect account.
		/// GetCampaignState campaigns/{id}/state
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCampaignStateResponse> GetCampaignStateAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCampaignStateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get state of campaigns for the specified Amazon Connect account.
		/// GetCampaignStateBatch campaigns-state
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCampaignStateBatchResponse> GetCampaignStateBatchAsync(GetCampaignStateBatchPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns-state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCampaignStateBatchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides summary information about the campaigns under the specified Amazon Connect account.
		/// ListCampaigns campaigns-summary
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCampaignsResponse> ListCampaignsAsync(string maxResults, string nextToken, ListCampaignsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns-summary?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCampaignsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List tags for a resource.
		/// ListTagsForResource tags/{arn}
		/// </summary>
		/// <param name="arn">Max length: 500
		/// Min length: 20
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tag a resource.
		/// TagResource tags/{arn}
		/// </summary>
		/// <param name="arn">Max length: 500
		/// Min length: 20
		// </param>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(string arn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Pauses a campaign for the specified Amazon Connect account.
		/// PauseCampaign campaigns/{id}/pause
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task PauseCampaignAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/pause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates dials requests for the specified campaign Amazon Connect account. This API is idempotent.
		/// PutDialRequestBatch campaigns/{id}/dial-requests
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<PutDialRequestBatchResponse> PutDialRequestBatchAsync(string id, PutDialRequestBatchPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/dial-requests";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutDialRequestBatchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a campaign for the specified Amazon Connect account.
		/// ResumeCampaign campaigns/{id}/resume
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task ResumeCampaignAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a campaign for the specified Amazon Connect account.
		/// StartCampaign campaigns/{id}/start
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task StartCampaignAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a campaign for the specified Amazon Connect account.
		/// StopCampaign campaigns/{id}/stop
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task StopCampaignAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Untag a resource.
		/// UntagResource tags/{arn}#tagKeys
		/// </summary>
		/// <param name="arn">Max length: 500
		/// Min length: 20
		// </param>
		/// <param name="tagKeys">Minimum items: 0
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(string arn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (arn==null? "" : System.Uri.EscapeDataString(arn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the dialer config of a campaign. This API is idempotent.
		/// UpdateCampaignDialerConfig campaigns/{id}/dialer-config
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateCampaignDialerConfigAsync(string id, UpdateCampaignDialerConfigPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/dialer-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the name of a campaign. This API is idempotent.
		/// UpdateCampaignName campaigns/{id}/name
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateCampaignNameAsync(string id, UpdateCampaignNamePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/name";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the outbound call config of a campaign. This API is idempotent.
		/// UpdateCampaignOutboundCallConfig campaigns/{id}/outbound-call-config
		/// </summary>
		/// <param name="id">Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateCampaignOutboundCallConfigAsync(string id, UpdateCampaignOutboundCallConfigPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "campaigns/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/outbound-call-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateCampaignPutBody
	{
		
		/// <summary>
		/// Amazon Connect Instance Id
		/// Required
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectInstanceId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ConnectInstanceId { get; set; }
		
		/// <summary>
		/// The possible types of dialer config parameters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialerConfig")]
		public CreateCampaignPutBodyDialerConfig DialerConfig { get; set; }
		
		/// <summary>
		/// The name of an Amazon Connect Campaign name.
		/// Required
		/// Max length: 127
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		public string Name { get; set; }
		
		/// <summary>
		/// The configuration used for outbound calls.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outboundCallConfig")]
		public CreateCampaignPutBodyOutboundCallConfig OutboundCallConfig { get; set; }
		
		/// <summary>
		/// Tag map with key and value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateCampaignPutBodyDialerConfig
	{
		
		/// <summary>
		/// Predictive Dialer config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictiveDialerConfig")]
		public PredictiveDialerConfig PredictiveDialerConfig { get; set; }
		
		/// <summary>
		/// Progressive Dialer config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressiveDialerConfig")]
		public ProgressiveDialerConfig ProgressiveDialerConfig { get; set; }
	}
	
	public class CreateCampaignPutBodyOutboundCallConfig
	{
		
		/// <summary>
		/// Answering Machine Detection config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerMachineDetectionConfig")]
		public AnswerMachineDetectionConfig AnswerMachineDetectionConfig { get; set; }
		
		/// <summary>
		/// The identifier of the contact flow for the outbound call.
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectContactFlowId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string ConnectContactFlowId { get; set; }
		
		/// <summary>
		/// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectQueueId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string ConnectQueueId { get; set; }
		
		/// <summary>
		/// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectSourcePhoneNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ConnectSourcePhoneNumber { get; set; }
	}
	
	public class StartInstanceOnboardingJobPutBody
	{
		
		/// <summary>
		/// Encryption config for Connect Instance. Note that sensitive data will always be encrypted. If disabled, service will perform encryption with its own key. If enabled, a KMS key id needs to be provided and KMS charges will apply. KMS is only type supported
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public StartInstanceOnboardingJobPutBodyEncryptionConfig EncryptionConfig { get; set; }
	}
	
	public class StartInstanceOnboardingJobPutBodyEncryptionConfig
	{
		
		/// <summary>
		/// Boolean to indicate if custom encryption has been enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Server-side encryption type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionType")]
		public EncryptionConfigEncryptionType EncryptionType { get; set; }
		
		/// <summary>
		/// KMS key id/arn for encryption config.
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string KeyArn { get; set; }
	}
	
	public class GetCampaignStateBatchPostBody
	{
		
		/// <summary>
		/// List of CampaignId
		/// Required
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="campaignIds")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string[] CampaignIds { get; set; }
	}
	
	public class ListCampaignsPostBody
	{
		
		/// <summary>
		/// Filter model by type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ListCampaignsPostBodyFilters Filters { get; set; }
		
		/// <summary>
		/// The maximum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token for the next set of results.
		/// Max length: 1000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string NextToken { get; set; }
	}
	
	public class ListCampaignsPostBodyFilters
	{
		
		/// <summary>
		/// Connect instance identifier filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceIdFilter")]
		public InstanceIdFilter InstanceIdFilter { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// Tag map with key and value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class PutDialRequestBatchPutBody
	{
		
		/// <summary>
		/// A list of dial requests.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialRequests")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public DialRequest[] DialRequests { get; set; }
	}
	
	public class UpdateCampaignDialerConfigPostBody
	{
		
		/// <summary>
		/// The possible types of dialer config parameters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dialerConfig")]
		public UpdateCampaignDialerConfigPostBodyDialerConfig DialerConfig { get; set; }
	}
	
	public class UpdateCampaignDialerConfigPostBodyDialerConfig
	{
		
		/// <summary>
		/// Predictive Dialer config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictiveDialerConfig")]
		public PredictiveDialerConfig PredictiveDialerConfig { get; set; }
		
		/// <summary>
		/// Progressive Dialer config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressiveDialerConfig")]
		public ProgressiveDialerConfig ProgressiveDialerConfig { get; set; }
	}
	
	public class UpdateCampaignNamePostBody
	{
		
		/// <summary>
		/// The name of an Amazon Connect Campaign name.
		/// Required
		/// Max length: 127
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(127)]
		public string Name { get; set; }
	}
	
	public class UpdateCampaignOutboundCallConfigPostBody
	{
		
		/// <summary>
		/// Answering Machine Detection config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="answerMachineDetectionConfig")]
		public UpdateCampaignOutboundCallConfigPostBodyAnswerMachineDetectionConfig AnswerMachineDetectionConfig { get; set; }
		
		/// <summary>
		/// The identifier of the contact flow for the outbound call.
		/// Max length: 500
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectContactFlowId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string ConnectContactFlowId { get; set; }
		
		/// <summary>
		/// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectSourcePhoneNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ConnectSourcePhoneNumber { get; set; }
	}
	
	public class UpdateCampaignOutboundCallConfigPostBodyAnswerMachineDetectionConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="enableAnswerMachineDetection")]
		public System.Nullable<System.Boolean> EnableAnswerMachineDetection { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
