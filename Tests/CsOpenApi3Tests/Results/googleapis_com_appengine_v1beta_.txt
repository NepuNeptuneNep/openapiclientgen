//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiConfigHandler
	{
		
		/// <summary>
		/// Action to take when users access resources that require authentication. Defaults to redirect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authFailAction")]
		public System.Nullable<ApiConfigHandlerAuthFailAction> AuthFailAction { get; set; }
		
		/// <summary>
		/// Level of login required to access this resource. Defaults to optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public System.Nullable<ApiConfigHandlerLogin> Login { get; set; }
		
		/// <summary>
		/// Path to the script from the application root directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// Security (HTTPS) enforcement for this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityLevel")]
		public System.Nullable<ApiConfigHandlerSecurityLevel> SecurityLevel { get; set; }
		
		/// <summary>
		/// URL to serve the endpoint at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiConfigHandlerAuthFailAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_FAIL_ACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_FAIL_ACTION_REDIRECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_FAIL_ACTION_UNAUTHORIZED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiConfigHandlerLogin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGIN_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGIN_OPTIONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGIN_ADMIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGIN_REQUIRED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApiConfigHandlerSecurityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURE_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURE_NEVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURE_OPTIONAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURE_ALWAYS = 4,
	}
	
	/// <summary>
	/// Uses Google Cloud Endpoints to handle requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiEndpointHandler
	{
		
		/// <summary>
		/// Path to the script from the application root directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptPath")]
		public string ScriptPath { get; set; }
	}
	
	/// <summary>
	/// An Application resource contains the top-level configuration of an App Engine application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Application
	{
		
		/// <summary>
		/// Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authDomain")]
		public string AuthDomain { get; set; }
		
		/// <summary>
		/// Output only. Google Cloud Storage bucket that can be used for storing files associated with this application. This bucket is associated with the application and can be used by the gcloud deployment commands.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codeBucket")]
		public string CodeBucket { get; set; }
		
		/// <summary>
		/// The type of the Cloud Firestore or Cloud Datastore database associated with this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseType")]
		public System.Nullable<ApplicationDatabaseType> DatabaseType { get; set; }
		
		/// <summary>
		/// Output only. Google Cloud Storage bucket that can be used by this application to store content.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultBucket")]
		public string DefaultBucket { get; set; }
		
		/// <summary>
		/// Cookie expiration policy for this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCookieExpiration")]
		public string DefaultCookieExpiration { get; set; }
		
		/// <summary>
		/// Output only. Hostname used to reach this application, as resolved by App Engine.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultHostname")]
		public string DefaultHostname { get; set; }
		
		/// <summary>
		/// HTTP path dispatch rules for requests to the application that do not explicitly target a service or version. Rules are order-dependent. Up to 20 dispatch rules can be supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dispatchRules")]
		public UrlDispatchRule[] DispatchRules { get; set; }
		
		/// <summary>
		/// The feature specific settings to be used in the application. These define behaviors that are user configurable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureSettings")]
		public FeatureSettings FeatureSettings { get; set; }
		
		/// <summary>
		/// Output only. The Google Container Registry domain used for storing managed build docker images for this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcrDomain")]
		public string GcrDomain { get; set; }
		
		/// <summary>
		/// Additional Google Generated Customer Metadata, this field won't be provided by default and can be requested by setting the IncludeExtraData field in GetApplicationRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedCustomerMetadata")]
		public System.Collections.Generic.Dictionary<string, object> GeneratedCustomerMetadata { get; set; }
		
		/// <summary>
		/// Identity-Aware Proxy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iap")]
		public IdentityAwareProxy Iap { get; set; }
		
		/// <summary>
		/// Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location from which this application runs. Application instances run out of the data centers in the specified location, which is also where all of the application's end user content is stored.Defaults to us-central.View the list of supported locations (https://cloud.google.com/appengine/docs/locations).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Output only. Full path to the Application resource in the API. Example: apps/myapp.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The service account associated with the application. This is the app-level default identity. If no identity provided during create version, Admin API will fallback to this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Serving status of this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servingStatus")]
		public System.Nullable<ApplicationServingStatus> ServingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationDatabaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_DATASTORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_FIRESTORE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_DATASTORE_COMPATIBILITY = 3,
	}
	
	/// <summary>
	/// Rules to match an HTTP request and dispatch that request to a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlDispatchRule
	{
		
		/// <summary>
		/// Domain name to match against. The wildcard "*" is supported if specified before a period: "*.".Defaults to matching all domains: "*".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Pathname within the host. Must start with a "/". A single "*" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// The feature specific settings to be used in the application. These define behaviors that are user configurable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeatureSettings
	{
		
		/// <summary>
		/// Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="splitHealthChecks")]
		public System.Nullable<System.Boolean> SplitHealthChecks { get; set; }
		
		/// <summary>
		/// If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useContainerOptimizedOs")]
		public System.Nullable<System.Boolean> UseContainerOptimizedOs { get; set; }
	}
	
	/// <summary>
	/// Identity-Aware Proxy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdentityAwareProxy
	{
		
		/// <summary>
		/// Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// OAuth2 client ID to use for the authentication flow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth2ClientId")]
		public string Oauth2ClientId { get; set; }
		
		/// <summary>
		/// OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth2ClientSecret")]
		public string Oauth2ClientSecret { get; set; }
		
		/// <summary>
		/// Output only. Hex-encoded SHA-256 hash of the client secret.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauth2ClientSecretSha256")]
		public string Oauth2ClientSecretSha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApplicationServingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_DISABLED = 3,
	}
	
	/// <summary>
	/// An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizedCertificate
	{
		
		/// <summary>
		/// An SSL certificate obtained from a certificate authority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateRawData")]
		public CertificateRawData CertificateRawData { get; set; }
		
		/// <summary>
		/// The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainMappingsCount")]
		public System.Nullable<System.Int32> DomainMappingsCount { get; set; }
		
		/// <summary>
		/// Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainNames")]
		public string[] DomainNames { get; set; }
		
		/// <summary>
		/// The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A certificate managed by App Engine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedCertificate")]
		public ManagedCertificate ManagedCertificate { get; set; }
		
		/// <summary>
		/// Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleDomainMappings")]
		public string[] VisibleDomainMappings { get; set; }
	}
	
	/// <summary>
	/// An SSL certificate obtained from a certificate authority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CertificateRawData
	{
		
		/// <summary>
		/// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicCertificate")]
		public string PublicCertificate { get; set; }
	}
	
	/// <summary>
	/// A certificate managed by App Engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedCertificate
	{
		
		/// <summary>
		/// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRenewalTime")]
		public string LastRenewalTime { get; set; }
		
		/// <summary>
		/// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ManagedCertificateStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ManagedCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGEMENT_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_RETRYING_NOT_VISIBLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_PERMANENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_RETRYING_CAA_FORBIDDEN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_RETRYING_CAA_CHECKING = 6,
	}
	
	/// <summary>
	/// A domain that a user has been authorized to administer. To authorize use of a domain, verify ownership via Search Console (https://search.google.com/search-console/welcome).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizedDomain
	{
		
		/// <summary>
		/// Fully qualified domain name of the domain authorized for use. Example: example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Full path to the AuthorizedDomain resource in the API. Example: apps/myapp/authorizedDomains/example.com.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Automatic scaling is based on request rate, response latencies, and other application metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutomaticScaling
	{
		
		/// <summary>
		/// The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coolDownPeriod")]
		public string CoolDownPeriod { get; set; }
		
		/// <summary>
		/// Target scaling by CPU usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuUtilization")]
		public CpuUtilization CpuUtilization { get; set; }
		
		/// <summary>
		/// Target scaling by user-provided metrics. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customMetrics")]
		public CustomMetric[] CustomMetrics { get; set; }
		
		/// <summary>
		/// Target scaling by disk usage. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskUtilization")]
		public DiskUtilization DiskUtilization { get; set; }
		
		/// <summary>
		/// Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxConcurrentRequests")]
		public System.Nullable<System.Int32> MaxConcurrentRequests { get; set; }
		
		/// <summary>
		/// Maximum number of idle instances that should be maintained for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxIdleInstances")]
		public System.Nullable<System.Int32> MaxIdleInstances { get; set; }
		
		/// <summary>
		/// Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPendingLatency")]
		public string MaxPendingLatency { get; set; }
		
		/// <summary>
		/// Maximum number of instances that should be started to handle requests for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxTotalInstances")]
		public System.Nullable<System.Int32> MaxTotalInstances { get; set; }
		
		/// <summary>
		/// Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minIdleInstances")]
		public System.Nullable<System.Int32> MinIdleInstances { get; set; }
		
		/// <summary>
		/// Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minPendingLatency")]
		public string MinPendingLatency { get; set; }
		
		/// <summary>
		/// Minimum number of running instances that should be maintained for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minTotalInstances")]
		public System.Nullable<System.Int32> MinTotalInstances { get; set; }
		
		/// <summary>
		/// Target scaling by network usage. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUtilization")]
		public NetworkUtilization NetworkUtilization { get; set; }
		
		/// <summary>
		/// Target scaling by request utilization. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestUtilization")]
		public RequestUtilization RequestUtilization { get; set; }
		
		/// <summary>
		/// Scheduler settings for standard environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardSchedulerSettings")]
		public StandardSchedulerSettings StandardSchedulerSettings { get; set; }
	}
	
	/// <summary>
	/// Target scaling by CPU usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CpuUtilization
	{
		
		/// <summary>
		/// Period of time over which CPU utilization is calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationWindowLength")]
		public string AggregationWindowLength { get; set; }
		
		/// <summary>
		/// Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetUtilization")]
		public System.Nullable<System.Double> TargetUtilization { get; set; }
	}
	
	/// <summary>
	/// Allows autoscaling based on Stackdriver metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomMetric
	{
		
		/// <summary>
		/// Allows filtering on the metric's fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// The name of the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricName")]
		public string MetricName { get; set; }
		
		/// <summary>
		/// May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleInstanceAssignment")]
		public System.Nullable<System.Double> SingleInstanceAssignment { get; set; }
		
		/// <summary>
		/// The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public string TargetType { get; set; }
		
		/// <summary>
		/// The target value for the metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetUtilization")]
		public System.Nullable<System.Double> TargetUtilization { get; set; }
	}
	
	/// <summary>
	/// Target scaling by disk usage. Only applicable in the App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiskUtilization
	{
		
		/// <summary>
		/// Target bytes read per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetReadBytesPerSecond")]
		public System.Nullable<System.Int32> TargetReadBytesPerSecond { get; set; }
		
		/// <summary>
		/// Target ops read per seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetReadOpsPerSecond")]
		public System.Nullable<System.Int32> TargetReadOpsPerSecond { get; set; }
		
		/// <summary>
		/// Target bytes written per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetWriteBytesPerSecond")]
		public System.Nullable<System.Int32> TargetWriteBytesPerSecond { get; set; }
		
		/// <summary>
		/// Target ops written per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetWriteOpsPerSecond")]
		public System.Nullable<System.Int32> TargetWriteOpsPerSecond { get; set; }
	}
	
	/// <summary>
	/// Target scaling by network usage. Only applicable in the App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkUtilization
	{
		
		/// <summary>
		/// Target bytes received per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetReceivedBytesPerSecond")]
		public System.Nullable<System.Int32> TargetReceivedBytesPerSecond { get; set; }
		
		/// <summary>
		/// Target packets received per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetReceivedPacketsPerSecond")]
		public System.Nullable<System.Int32> TargetReceivedPacketsPerSecond { get; set; }
		
		/// <summary>
		/// Target bytes sent per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSentBytesPerSecond")]
		public System.Nullable<System.Int32> TargetSentBytesPerSecond { get; set; }
		
		/// <summary>
		/// Target packets sent per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSentPacketsPerSecond")]
		public System.Nullable<System.Int32> TargetSentPacketsPerSecond { get; set; }
	}
	
	/// <summary>
	/// Target scaling by request utilization. Only applicable in the App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestUtilization
	{
		
		/// <summary>
		/// Target number of concurrent requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetConcurrentRequests")]
		public System.Nullable<System.Int32> TargetConcurrentRequests { get; set; }
		
		/// <summary>
		/// Target requests per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetRequestCountPerSecond")]
		public System.Nullable<System.Int32> TargetRequestCountPerSecond { get; set; }
	}
	
	/// <summary>
	/// Scheduler settings for standard environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandardSchedulerSettings
	{
		
		/// <summary>
		/// Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxInstances")]
		public System.Nullable<System.Int32> MaxInstances { get; set; }
		
		/// <summary>
		/// Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minInstances")]
		public System.Nullable<System.Int32> MinInstances { get; set; }
		
		/// <summary>
		/// Target CPU utilization ratio to maintain when scaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetCpuUtilization")]
		public System.Nullable<System.Double> TargetCpuUtilization { get; set; }
		
		/// <summary>
		/// Target throughput utilization ratio to maintain when scaling
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetThroughputUtilization")]
		public System.Nullable<System.Double> TargetThroughputUtilization { get; set; }
	}
	
	/// <summary>
	/// A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicScaling
	{
		
		/// <summary>
		/// Duration of time after the last request that an instance must wait before the instance is shut down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idleTimeout")]
		public string IdleTimeout { get; set; }
		
		/// <summary>
		/// Maximum number of instances to create for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxInstances")]
		public System.Nullable<System.Int32> MaxInstances { get; set; }
	}
	
	/// <summary>
	/// Request message for Firewall.BatchUpdateIngressRules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateIngressRulesRequest
	{
		
		/// <summary>
		/// A list of FirewallRules to replace the existing set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressRules")]
		public FirewallRule[] IngressRules { get; set; }
	}
	
	/// <summary>
	/// A single firewall rule that is evaluated against incoming traffic and provides an action to take on matched requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirewallRule
	{
		
		/// <summary>
		/// The action to take on matched requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<FirewallRuleAction> Action { get; set; }
		
		/// <summary>
		/// An optional string description of this rule. This field has a maximum length of 400 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A positive integer between 1, Int32.MaxValue-1 that defines the order of rule evaluation. Rules with the lowest priority are evaluated first.A default rule at priority Int32.MaxValue matches all IPv4 and IPv6 traffic when no previous rule matches. Only the action of this rule can be modified by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// IP address or range, defined using CIDR notation, of requests that this rule applies to. You can use the wildcard character "*" to match all IPs equivalent to "0/0" and "::/0" together. Examples: 192.168.1.1 or 192.168.0.0/16 or 2001:db8::/32 or 2001:0db8:0000:0042:0000:8a2e:0370:7334. Truncation will be silently performed on addresses which are not properly truncated. For example, 1.2.3.4/24 is accepted as the same address as 1.2.3.0/24. Similarly, for IPv6, 2001:db8::1/32 is accepted as the same address as 2001:db8::/32.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceRange")]
		public string SourceRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirewallRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_ACTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 2,
	}
	
	/// <summary>
	/// Response message for Firewall.UpdateAllIngressRules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateIngressRulesResponse
	{
		
		/// <summary>
		/// The full list of ingress FirewallRules for this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressRules")]
		public FirewallRule[] IngressRules { get; set; }
	}
	
	/// <summary>
	/// Google Cloud Build information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildInfo
	{
		
		/// <summary>
		/// The Google Cloud Build id. Example: "f966068f-08b2-42c8-bdfe-74137dff2bf9"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildId")]
		public string CloudBuildId { get; set; }
	}
	
	/// <summary>
	/// Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudBuildOptions
	{
		
		/// <summary>
		/// Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appYamlPath")]
		public string AppYamlPath { get; set; }
		
		/// <summary>
		/// The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildTimeout")]
		public string CloudBuildTimeout { get; set; }
	}
	
	/// <summary>
	/// Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerInfo
	{
		
		/// <summary>
		/// URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
	}
	
	/// <summary>
	/// ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerState
	{
		
		/// <summary>
		/// Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentReasons")]
		public Reasons CurrentReasons { get; set; }
		
		/// <summary>
		/// Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousReasons")]
		public Reasons PreviousReasons { get; set; }
		
		/// <summary>
		/// The current state of the container. This state is the culmination of all of the opinions from external systems that CCFE knows about of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ContainerStateState> State { get; set; }
	}
	
	/// <summary>
	/// Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reasons
	{
		
		[System.Runtime.Serialization.DataMember(Name="abuse")]
		public System.Nullable<ReasonsAbuse> Abuse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public System.Nullable<ReasonsBilling> Billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataGovernance")]
		public System.Nullable<ReasonsDataGovernance> DataGovernance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagement")]
		public System.Nullable<ReasonsServiceManagement> ServiceManagement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReasonsAbuse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABUSE_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABUSE_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REINSTATE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReasonsBilling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROBATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReasonsDataGovernance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_GOVERNANCE_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_GOVERNANCE_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIDE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHIDE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURGE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReasonsServiceManagement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_MANAGEMENT_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_MANAGEMENT_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARE_DEACTIVATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORT_DEACTIVATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMIT_DEACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContainerStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_STATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation during a google.appengine.v1.CreateVersionRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateVersionMetadataV1
	{
		
		/// <summary>
		/// The Cloud Build ID if one was created as part of the version create. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildId")]
		public string CloudBuildId { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation during a google.appengine.v1alpha.CreateVersionRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateVersionMetadataV1Alpha
	{
		
		/// <summary>
		/// The Cloud Build ID if one was created as part of the version create. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildId")]
		public string CloudBuildId { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation during a google.appengine.v1beta.CreateVersionRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateVersionMetadataV1Beta
	{
		
		/// <summary>
		/// The Cloud Build ID if one was created as part of the version create. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildId")]
		public string CloudBuildId { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Request message for Instances.DebugInstance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DebugInstanceRequest
	{
		
		/// <summary>
		/// Public SSH key to add to the instance. Examples: [USERNAME]:ssh-rsa [KEY_VALUE] [USERNAME] [USERNAME]:ssh-rsa [KEY_VALUE] google-ssh {"userName":"[USERNAME]","expireOn":"[EXPIRE_TIME]"}For more information, see Adding and Removing SSH Keys (https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sshKey")]
		public string SshKey { get; set; }
	}
	
	/// <summary>
	/// Code and application artifacts used to deploy a version to App Engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deployment
	{
		
		/// <summary>
		/// Google Cloud Build information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public BuildInfo Build { get; set; }
		
		/// <summary>
		/// Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildOptions")]
		public CloudBuildOptions CloudBuildOptions { get; set; }
		
		/// <summary>
		/// Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public ContainerInfo Container { get; set; }
		
		/// <summary>
		/// Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public System.Collections.Generic.Dictionary<string, FileInfo> Files { get; set; }
		
		/// <summary>
		/// The zip file information for a zip deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public ZipInfo Zip { get; set; }
	}
	
	/// <summary>
	/// Single source file that is part of the version to be deployed. Each source file that is deployed must be specified separately.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileInfo
	{
		
		/// <summary>
		/// The MIME type of the file.Defaults to the value from Google Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The SHA1 hash of the file, in hex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Sum")]
		public string Sha1Sum { get; set; }
		
		/// <summary>
		/// URL source to use to fetch this file. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	/// The zip file information for a zip deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ZipInfo
	{
		
		/// <summary>
		/// An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesCount")]
		public System.Nullable<System.Int32> FilesCount { get; set; }
		
		/// <summary>
		/// URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	/// A domain serving an App Engine application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainMapping
	{
		
		/// <summary>
		/// Relative name of the domain serving the application. Example: example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceRecords")]
		public ResourceRecord[] ResourceRecords { get; set; }
		
		/// <summary>
		/// SSL configuration for a DomainMapping resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslSettings")]
		public SslSettings SslSettings { get; set; }
	}
	
	/// <summary>
	/// A DNS resource record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceRecord
	{
		
		/// <summary>
		/// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrdata")]
		public string Rrdata { get; set; }
		
		/// <summary>
		/// Resource record type. Example: AAAA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ResourceRecordType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResourceRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAAA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNAME = 2,
	}
	
	/// <summary>
	/// SSL configuration for a DomainMapping resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SslSettings
	{
		
		/// <summary>
		/// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify SslManagementType.MANUAL on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// ID of the managed AuthorizedCertificate resource currently being provisioned, if applicable. Until the new managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the provisioning process completes, the certificate_id field will reflect the new managed certificate and this field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the certificate_id field with an UpdateDomainMappingRequest.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingManagedCertificateId")]
		public string PendingManagedCertificateId { get; set; }
		
		/// <summary>
		/// SSL management type for this domain. If AUTOMATIC, a managed certificate is automatically provisioned. If MANUAL, certificate_id must be manually specified in order to configure SSL for this domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslManagementType")]
		public System.Nullable<SslSettingsSslManagementType> SslManagementType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SslSettingsSslManagementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointsApiService
	{
		
		/// <summary>
		/// Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configId")]
		public string ConfigId { get; set; }
		
		/// <summary>
		/// Enable or disable trace sampling. By default, this is set to false for enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableTraceSampling")]
		public System.Nullable<System.Boolean> DisableTraceSampling { get; set; }
		
		/// <summary>
		/// Endpoints service name which is the name of the "service" resource in the Service Management API. For example "myapi.endpoints.myproject.cloud.goog"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rolloutStrategy")]
		public System.Nullable<EndpointsApiServiceRolloutStrategy> RolloutStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndpointsApiServiceRolloutStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_ROLLOUT_STRATEGY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGED = 2,
	}
	
	/// <summary>
	/// The entrypoint for the application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entrypoint
	{
		
		/// <summary>
		/// The format should be a shell command that can be fed to bash -c.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shell")]
		public string Shell { get; set; }
	}
	
	/// <summary>
	/// Custom static error page to be served when an error occurs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorHandler
	{
		
		/// <summary>
		/// Error condition this handler applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<ErrorHandlerErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// MIME type of file. Defaults to text/html.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Static file content to be served for this error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticFile")]
		public string StaticFile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorHandlerErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_OVER_QUOTA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_DOS_API_DENIAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_TIMEOUT = 4,
	}
	
	/// <summary>
	/// Runtime settings for the App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlexibleRuntimeSettings
	{
		
		/// <summary>
		/// The operating system of the application runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystem")]
		public string OperatingSystem { get; set; }
		
		/// <summary>
		/// The runtime version of an App Engine flexible application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeVersion")]
		public string RuntimeVersion { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.cloud.location.Location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppengineV1betaLocationMetadata
	{
		
		/// <summary>
		/// App Engine flexible environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flexibleEnvironmentAvailable")]
		public System.Nullable<System.Boolean> FlexibleEnvironmentAvailable { get; set; }
		
		/// <summary>
		/// Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchApiAvailable")]
		public System.Nullable<System.Boolean> SearchApiAvailable { get; set; }
		
		/// <summary>
		/// App Engine standard environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardEnvironmentAvailable")]
		public System.Nullable<System.Boolean> StandardEnvironmentAvailable { get; set; }
	}
	
	/// <summary>
	/// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HealthCheck
	{
		
		/// <summary>
		/// Interval between health checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkInterval")]
		public string CheckInterval { get; set; }
		
		/// <summary>
		/// Whether to explicitly disable health checks for this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableHealthCheck")]
		public System.Nullable<System.Boolean> DisableHealthCheck { get; set; }
		
		/// <summary>
		/// Number of consecutive successful health checks required before receiving traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthyThreshold")]
		public System.Nullable<System.UInt32> HealthyThreshold { get; set; }
		
		/// <summary>
		/// Host header to send when performing an HTTP health check. Example: "myapp.appspot.com"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Number of consecutive failed health checks required before an instance is restarted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restartThreshold")]
		public System.Nullable<System.UInt32> RestartThreshold { get; set; }
		
		/// <summary>
		/// Time before the health check is considered failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Number of consecutive failed health checks required before removing traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unhealthyThreshold")]
		public System.Nullable<System.UInt32> UnhealthyThreshold { get; set; }
	}
	
	/// <summary>
	/// An Instance resource is the computing unit that App Engine uses to automatically scale an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Instance
	{
		
		/// <summary>
		/// Output only. App Engine release this instance is running on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appEngineRelease")]
		public string AppEngineRelease { get; set; }
		
		/// <summary>
		/// Output only. Availability of the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public System.Nullable<InstanceAvailability> Availability { get; set; }
		
		/// <summary>
		/// Output only. Average latency (ms) over the last minute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averageLatency")]
		public System.Nullable<System.Int32> AverageLatency { get; set; }
		
		/// <summary>
		/// Output only. Number of errors since this instance was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public System.Nullable<System.Int32> Errors { get; set; }
		
		/// <summary>
		/// Output only. Relative name of the instance within the version. Example: instance-1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Total memory in use (bytes).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryUsage")]
		public string MemoryUsage { get; set; }
		
		/// <summary>
		/// Output only. Full path to the Instance resource in the API. Example: apps/myapp/services/default/versions/v1/instances/instance-1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Average queries per second (QPS) over the last minute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qps")]
		public System.Nullable<System.Single> Qps { get; set; }
		
		/// <summary>
		/// Output only. Number of requests since this instance was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public System.Nullable<System.Int32> Requests { get; set; }
		
		/// <summary>
		/// Output only. Time that this instance was started.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. Whether this instance is in debug mode. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmDebugEnabled")]
		public System.Nullable<System.Boolean> VmDebugEnabled { get; set; }
		
		/// <summary>
		/// Output only. Virtual machine ID of this instance. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmId")]
		public string VmId { get; set; }
		
		/// <summary>
		/// Output only. The IP address of this instance. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmIp")]
		public string VmIp { get; set; }
		
		/// <summary>
		/// Output only. The liveness health check of this instance. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmLiveness")]
		public System.Nullable<InstanceVmLiveness> VmLiveness { get; set; }
		
		/// <summary>
		/// Output only. Name of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmName")]
		public string VmName { get; set; }
		
		/// <summary>
		/// Output only. Status of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmStatus")]
		public string VmStatus { get; set; }
		
		/// <summary>
		/// Output only. Zone where the virtual machine is located. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vmZoneName")]
		public string VmZoneName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESIDENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InstanceVmLiveness
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVENESS_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAINING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 5,
	}
	
	/// <summary>
	/// Third-party Python runtime library that is required by the application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Library
	{
		
		/// <summary>
		/// Name of the library. Example: "django".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Version of the library to select, or "latest".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Response message for AuthorizedCertificates.ListAuthorizedCertificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAuthorizedCertificatesResponse
	{
		
		/// <summary>
		/// The SSL certificates the user is authorized to administer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public AuthorizedCertificate[] Certificates { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for AuthorizedDomains.ListAuthorizedDomains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAuthorizedDomainsResponse
	{
		
		/// <summary>
		/// The authorized domains belonging to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public AuthorizedDomain[] Domains { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for DomainMappings.ListDomainMappings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainMappingsResponse
	{
		
		/// <summary>
		/// The domain mappings for the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainMappings")]
		public DomainMapping[] DomainMappings { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for Firewall.ListIngressRules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListIngressRulesResponse
	{
		
		/// <summary>
		/// The ingress FirewallRules for this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressRules")]
		public FirewallRule[] IngressRules { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for Instances.ListInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInstancesResponse
	{
		
		/// <summary>
		/// The instances belonging to the requested version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public Instance[] Instances { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: "us-east1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response message for Applications.ListRuntimes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListRuntimesResponse
	{
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The runtimes available to the requested application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimes")]
		public Runtime[] Runtimes { get; set; }
	}
	
	/// <summary>
	/// Runtime versions for App Engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Runtime
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decommissionedDate")]
		public Date DecommissionedDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecationDate")]
		public Date DeprecationDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: A full date, with non-zero year, month, and day values. A month and day, with a zero year (for example, an anniversary). A year on its own, with a zero month and a zero day. A year and month, with a zero day (for example, a credit card expiration date).Related types: google.type.TimeOfDay google.type.DateTime google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfSupportDate")]
		public Date EndOfSupportDate { get; set; }
		
		/// <summary>
		/// The environment of the runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<RuntimeEnvironment> Environment { get; set; }
		
		/// <summary>
		/// The name of the runtime, e.g., 'go113', 'nodejs12', etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The stage of life this runtime is in, e.g., BETA, GA, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public System.Nullable<RuntimeStage> Stage { get; set; }
		
		/// <summary>
		/// Warning messages, e.g., a deprecation warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuntimeEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEXIBLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuntimeStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNTIME_STAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALPHA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECOMMISSIONED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END_OF_SUPPORT = 7,
	}
	
	/// <summary>
	/// Response message for Services.ListServices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListServicesResponse
	{
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The services belonging to the requested application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Service[] Services { get; set; }
	}
	
	/// <summary>
	/// A Service resource is a logical component of an application that can share state and communicate in a secure fashion with other services. For example, an application that handles customer requests might include separate services to handle tasks such as backend data analysis or API requests from mobile devices. Each service has a collection of versions that define a specific set of code used to implement the functionality of that service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Service
	{
		
		/// <summary>
		/// Additional Google Generated Customer Metadata, this field won't be provided by default and can be requested by setting the IncludeExtraData field in GetServiceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedCustomerMetadata")]
		public System.Collections.Generic.Dictionary<string, object> GeneratedCustomerMetadata { get; set; }
		
		/// <summary>
		/// Relative name of the service within the application. Example: default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A set of labels to apply to this service. Labels are key/value pairs that describe the service and all resources that belong to it (e.g., versions). The labels can be used to search and group resources, and are propagated to the usage and billing reports, enabling fine-grain analysis of costs. An example of using labels is to tag resources belonging to different environments (e.g., "env=prod", "env=qa"). Label keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, dashes, and international characters. Label keys must start with a lowercase letter or an international character. Each service can have at most 32 labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Full path to the Service resource in the API. Example: apps/myapp/services/default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A NetworkSettings resource is a container for ingress settings for a version or service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkSettings")]
		public NetworkSettings NetworkSettings { get; set; }
		
		/// <summary>
		/// Traffic routing configuration for versions within a single service. Traffic splits define how traffic directed to the service is assigned to versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="split")]
		public TrafficSplit Split { get; set; }
	}
	
	/// <summary>
	/// A NetworkSettings resource is a container for ingress settings for a version or service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkSettings
	{
		
		/// <summary>
		/// The ingress settings for version or service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ingressTrafficAllowed")]
		public System.Nullable<NetworkSettingsIngressTrafficAllowed> IngressTrafficAllowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkSettingsIngressTrafficAllowed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGRESS_TRAFFIC_ALLOWED_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGRESS_TRAFFIC_ALLOWED_ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGRESS_TRAFFIC_ALLOWED_INTERNAL_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGRESS_TRAFFIC_ALLOWED_INTERNAL_AND_LB = 3,
	}
	
	/// <summary>
	/// Traffic routing configuration for versions within a single service. Traffic splits define how traffic directed to the service is assigned to versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrafficSplit
	{
		
		/// <summary>
		/// Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocations")]
		public System.Collections.Generic.Dictionary<string, double> Allocations { get; set; }
		
		/// <summary>
		/// Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardBy")]
		public System.Nullable<TrafficSplitShardBy> ShardBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrafficSplitShardBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COOKIE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANDOM = 3,
	}
	
	/// <summary>
	/// Response message for Versions.ListVersions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVersionsResponse
	{
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The versions belonging to the requested service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public Version[] Versions { get; set; }
	}
	
	/// <summary>
	/// A Version resource is a specific set of source code and configuration files that are deployed into a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Version
	{
		
		/// <summary>
		/// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiConfig")]
		public ApiConfigHandler ApiConfig { get; set; }
		
		/// <summary>
		/// Allows App Engine second generation runtimes to access the legacy bundled services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appEngineApis")]
		public System.Nullable<System.Boolean> AppEngineApis { get; set; }
		
		/// <summary>
		/// Automatic scaling is based on request rate, response latencies, and other application metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automaticScaling")]
		public AutomaticScaling AutomaticScaling { get; set; }
		
		/// <summary>
		/// A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicScaling")]
		public BasicScaling BasicScaling { get; set; }
		
		/// <summary>
		/// Metadata settings that are supplied to this version to enable beta runtime features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="betaSettings")]
		public System.Collections.Generic.Dictionary<string, string> BetaSettings { get; set; }
		
		/// <summary>
		/// Environment variables available to the build environment.Only returned in GET requests if view=FULL is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildEnvVariables")]
		public System.Collections.Generic.Dictionary<string, string> BuildEnvVariables { get; set; }
		
		/// <summary>
		/// Time that this version was created.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Email address of the user who created this version.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		/// <summary>
		/// Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding StaticFilesHandler (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StaticFilesHandler) does not specify its own expiration time.Only returned in GET requests if view=FULL is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultExpiration")]
		public string DefaultExpiration { get; set; }
		
		/// <summary>
		/// Code and application artifacts used to deploy a version to App Engine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public Deployment Deployment { get; set; }
		
		/// <summary>
		/// Total size in bytes of all the files that are included in this version and currently hosted on the App Engine disk.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskUsageBytes")]
		public string DiskUsageBytes { get; set; }
		
		/// <summary>
		/// Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a "service" resource in the Service Management API (https://cloud.google.com/service-management/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointsApiService")]
		public EndpointsApiService EndpointsApiService { get; set; }
		
		/// <summary>
		/// The entrypoint for the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public Entrypoint Entrypoint { get; set; }
		
		/// <summary>
		/// App Engine execution environment for this version.Defaults to standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string Env { get; set; }
		
		/// <summary>
		/// Environment variables available to the application.Only returned in GET requests if view=FULL is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvVariables { get; set; }
		
		/// <summary>
		/// Custom static error pages. Limited to 10KB per page.Only returned in GET requests if view=FULL is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorHandlers")]
		public ErrorHandler[] ErrorHandlers { get; set; }
		
		/// <summary>
		/// Runtime settings for the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flexibleRuntimeSettings")]
		public FlexibleRuntimeSettings FlexibleRuntimeSettings { get; set; }
		
		/// <summary>
		/// Additional Google Generated Customer Metadata, this field won't be provided by default and can be requested by setting the IncludeExtraData field in GetVersionRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generatedCustomerMetadata")]
		public System.Collections.Generic.Dictionary<string, object> GeneratedCustomerMetadata { get; set; }
		
		/// <summary>
		/// An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the request and other request handlers are not attempted.Only returned in GET requests if view=FULL is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="handlers")]
		public UrlMap[] Handlers { get; set; }
		
		/// <summary>
		/// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public HealthCheck HealthCheck { get; set; }
		
		/// <summary>
		/// Relative name of the version within the service. Example: v1. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names: "default", "latest", and any name with the prefix "ah-".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Before an application can receive email or XMPP messages, the application must be configured to enable the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundServices")]
		public string[] InboundServices { get; set; }
		
		/// <summary>
		/// Instance class that is used to run this version. Valid values are: AutomaticScaling: F1, F2, F4, F4_1G ManualScaling or BasicScaling: B1, B2, B4, B8, B4_1GDefaults to F1 for AutomaticScaling and B1 for ManualScaling or BasicScaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceClass")]
		public string InstanceClass { get; set; }
		
		/// <summary>
		/// Configuration for third-party Python runtime libraries that are required by the application.Only returned in GET requests if view=FULL is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="libraries")]
		public Library[] Libraries { get; set; }
		
		/// <summary>
		/// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="livenessCheck")]
		public LivenessCheck LivenessCheck { get; set; }
		
		/// <summary>
		/// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualScaling")]
		public ManualScaling ManualScaling { get; set; }
		
		/// <summary>
		/// Full path to the Version resource in the API. Example: apps/myapp/services/default/versions/v1.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Extra network settings. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
		
		/// <summary>
		/// Files that match this pattern will not be built into this version. Only applicable for Go runtimes.Only returned in GET requests if view=FULL is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nobuildFilesRegex")]
		public string NobuildFilesRegex { get; set; }
		
		/// <summary>
		/// Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readinessCheck")]
		public ReadinessCheck ReadinessCheck { get; set; }
		
		/// <summary>
		/// Machine resources for a version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Resources Resources { get; set; }
		
		/// <summary>
		/// Desired runtime. Example: python27.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtime")]
		public string Runtime { get; set; }
		
		/// <summary>
		/// The version of the API in the given runtime environment. Please see the app.yaml reference for valid values at https://cloud.google.com/appengine/docs/standard//config/appref
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeApiVersion")]
		public string RuntimeApiVersion { get; set; }
		
		/// <summary>
		/// The channel of the runtime to use. Only available for some runtimes. Defaults to the default channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeChannel")]
		public string RuntimeChannel { get; set; }
		
		/// <summary>
		/// The path or name of the app's main executable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeMainExecutablePath")]
		public string RuntimeMainExecutablePath { get; set; }
		
		/// <summary>
		/// The identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default if this field is neither provided in app.yaml file nor through CLI flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Current serving status of this version. Only the versions with a SERVING status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an invalid value. Defaults to SERVING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servingStatus")]
		public System.Nullable<VersionServingStatus> ServingStatus { get; set; }
		
		/// <summary>
		/// Whether multiple requests can be dispatched to this version at once.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threadsafe")]
		public System.Nullable<System.Boolean> Threadsafe { get; set; }
		
		/// <summary>
		/// Serving URL for this version. Example: "https://myversion-dot-myservice-dot-myapp.appspot.com"@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionUrl")]
		public string VersionUrl { get; set; }
		
		/// <summary>
		/// Whether to deploy this version in a container on a virtual machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public System.Nullable<System.Boolean> Vm { get; set; }
		
		/// <summary>
		/// VPC access connector specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpcAccessConnector")]
		public VpcAccessConnector VpcAccessConnector { get; set; }
		
		/// <summary>
		/// The Google Compute Engine zones that are supported by this version in the App Engine flexible environment. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zones")]
		public string[] Zones { get; set; }
	}
	
	/// <summary>
	/// URL pattern and description of how the URL should be handled. App Engine can handle URLs by executing application code or by serving static files uploaded with the version, such as images, CSS, or JavaScript.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlMap
	{
		
		/// <summary>
		/// Uses Google Cloud Endpoints to handle requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiEndpoint")]
		public ApiEndpointHandler ApiEndpoint { get; set; }
		
		/// <summary>
		/// Action to take when users access resources that require authentication. Defaults to redirect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authFailAction")]
		public ApiConfigHandlerAuthFailAction AuthFailAction { get; set; }
		
		/// <summary>
		/// Level of login required to access this resource. Not supported for Node.js in the App Engine standard environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public ApiConfigHandlerLogin Login { get; set; }
		
		/// <summary>
		/// 30x code to use when performing redirects for the secure field. Defaults to 302.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectHttpResponseCode")]
		public System.Nullable<UrlMapRedirectHttpResponseCode> RedirectHttpResponseCode { get; set; }
		
		/// <summary>
		/// Executes a script to handle the request that matches the URL pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public ScriptHandler Script { get; set; }
		
		/// <summary>
		/// Security (HTTPS) enforcement for this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityLevel")]
		public ApiConfigHandlerSecurityLevel SecurityLevel { get; set; }
		
		/// <summary>
		/// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticFiles")]
		public StaticFilesHandler StaticFiles { get; set; }
		
		/// <summary>
		/// URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings. All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlRegex")]
		public string UrlRegex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UrlMapRedirectHttpResponseCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_HTTP_RESPONSE_CODE_301 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_HTTP_RESPONSE_CODE_302 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_HTTP_RESPONSE_CODE_303 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT_HTTP_RESPONSE_CODE_307 = 4,
	}
	
	/// <summary>
	/// Executes a script to handle the request that matches the URL pattern.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptHandler
	{
		
		/// <summary>
		/// Path to the script from the application root directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptPath")]
		public string ScriptPath { get; set; }
	}
	
	/// <summary>
	/// Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StaticFilesHandler
	{
		
		/// <summary>
		/// Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationReadable")]
		public System.Nullable<System.Boolean> ApplicationReadable { get; set; }
		
		/// <summary>
		/// Time a static file served by this handler should be cached by web proxies and browsers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// HTTP headers to use for all responses from these URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpHeaders")]
		public System.Collections.Generic.Dictionary<string, string> HttpHeaders { get; set; }
		
		/// <summary>
		/// MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Whether this handler should match the request if the file referenced by the handler does not exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireMatchingFile")]
		public System.Nullable<System.Boolean> RequireMatchingFile { get; set; }
		
		/// <summary>
		/// Regular expression that matches the file paths for all files that should be referenced by this handler.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadPathRegex")]
		public string UploadPathRegex { get; set; }
	}
	
	/// <summary>
	/// Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LivenessCheck
	{
		
		/// <summary>
		/// Interval between health checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkInterval")]
		public string CheckInterval { get; set; }
		
		/// <summary>
		/// Number of consecutive failed checks required before considering the VM unhealthy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureThreshold")]
		public System.Nullable<System.UInt32> FailureThreshold { get; set; }
		
		/// <summary>
		/// Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The initial delay before starting to execute the checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialDelay")]
		public string InitialDelay { get; set; }
		
		/// <summary>
		/// The request path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Number of consecutive successful checks required before considering the VM healthy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successThreshold")]
		public System.Nullable<System.UInt32> SuccessThreshold { get; set; }
		
		/// <summary>
		/// Time before the check is considered failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManualScaling
	{
		
		/// <summary>
		/// Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public System.Nullable<System.Int32> Instances { get; set; }
	}
	
	/// <summary>
	/// Extra network settings. Only applicable in the App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Network
	{
		
		/// <summary>
		/// List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardedPorts")]
		public string[] ForwardedPorts { get; set; }
		
		/// <summary>
		/// The IP mode for instances. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceIpMode")]
		public System.Nullable<NetworkInstanceIpMode> InstanceIpMode { get; set; }
		
		/// <summary>
		/// Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceTag")]
		public string InstanceTag { get; set; }
		
		/// <summary>
		/// Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Enable session affinity. Only applicable in the App Engine flexible environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionAffinity")]
		public System.Nullable<System.Boolean> SessionAffinity { get; set; }
		
		/// <summary>
		/// Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetworkName")]
		public string SubnetworkName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkInstanceIpMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_IP_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 2,
	}
	
	/// <summary>
	/// Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReadinessCheck
	{
		
		/// <summary>
		/// A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appStartTimeout")]
		public string AppStartTimeout { get; set; }
		
		/// <summary>
		/// Interval between health checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkInterval")]
		public string CheckInterval { get; set; }
		
		/// <summary>
		/// Number of consecutive failed checks required before removing traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureThreshold")]
		public System.Nullable<System.UInt32> FailureThreshold { get; set; }
		
		/// <summary>
		/// Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// The request path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Number of consecutive successful checks required before receiving traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="successThreshold")]
		public System.Nullable<System.UInt32> SuccessThreshold { get; set; }
		
		/// <summary>
		/// Time before the check is considered failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Machine resources for a version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resources
	{
		
		/// <summary>
		/// Number of CPU cores needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Double> Cpu { get; set; }
		
		/// <summary>
		/// Disk size (GB) needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskGb")]
		public System.Nullable<System.Double> DiskGb { get; set; }
		
		/// <summary>
		/// The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyReference")]
		public string KmsKeyReference { get; set; }
		
		/// <summary>
		/// Memory (GB) needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryGb")]
		public System.Nullable<System.Double> MemoryGb { get; set; }
		
		/// <summary>
		/// User specified volumes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Volumes mounted within the app container. Only applicable in the App Engine flexible environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		/// <summary>
		/// Unique name for the volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Volume size in gigabytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Double> SizeGb { get; set; }
		
		/// <summary>
		/// Underlying volume type, e.g. 'tmpfs'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeType")]
		public string VolumeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VersionServingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVING_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 2,
	}
	
	/// <summary>
	/// VPC access connector specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VpcAccessConnector
	{
		
		/// <summary>
		/// The egress setting for the connector, controlling what traffic is diverted through it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="egressSetting")]
		public System.Nullable<VpcAccessConnectorEgressSetting> EgressSetting { get; set; }
		
		/// <summary>
		/// Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VpcAccessConnectorEgressSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EGRESS_SETTING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_TRAFFIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE_IP_RANGES = 2,
	}
	
	/// <summary>
	/// Metadata for the given google.cloud.location.Location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationMetadata
	{
		
		/// <summary>
		/// App Engine flexible environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flexibleEnvironmentAvailable")]
		public System.Nullable<System.Boolean> FlexibleEnvironmentAvailable { get; set; }
		
		/// <summary>
		/// Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchApiAvailable")]
		public System.Nullable<System.Boolean> SearchApiAvailable { get; set; }
		
		/// <summary>
		/// App Engine standard environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardEnvironmentAvailable")]
		public System.Nullable<System.Boolean> StandardEnvironmentAvailable { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadataV1
	{
		
		/// <summary>
		/// Metadata for the given google.longrunning.Operation during a google.appengine.v1.CreateVersionRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersionMetadata")]
		public CreateVersionMetadataV1 CreateVersionMetadata { get; set; }
		
		/// <summary>
		/// Time that this operation completed.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Ephemeral message that may change every time the operation is polled. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralMessage")]
		public string EphemeralMessage { get; set; }
		
		/// <summary>
		/// Time that this operation was created.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// User who requested this operation.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Durable messages that persist on every operation poll. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadataV1Alpha
	{
		
		/// <summary>
		/// Metadata for the given google.longrunning.Operation during a google.appengine.v1alpha.CreateVersionRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersionMetadata")]
		public CreateVersionMetadataV1Alpha CreateVersionMetadata { get; set; }
		
		/// <summary>
		/// Time that this operation completed.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Ephemeral message that may change every time the operation is polled. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralMessage")]
		public string EphemeralMessage { get; set; }
		
		/// <summary>
		/// Time that this operation was created.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// API method that initiated this operation. Example: google.appengine.v1alpha.Versions.CreateVersion.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// User who requested this operation.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Durable messages that persist on every operation poll. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadataV1Beta
	{
		
		/// <summary>
		/// Metadata for the given google.longrunning.Operation during a google.appengine.v1beta.CreateVersionRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersionMetadata")]
		public CreateVersionMetadataV1Beta CreateVersionMetadata { get; set; }
		
		/// <summary>
		/// Time that this operation completed.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Ephemeral message that may change every time the operation is polled. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralMessage")]
		public string EphemeralMessage { get; set; }
		
		/// <summary>
		/// Time that this operation was created.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// User who requested this operation.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Durable messages that persist on every operation poll. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	/// <summary>
	/// The request sent to CLHs during project events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectEvent
	{
		
		/// <summary>
		/// The unique ID for this project event. CLHs can use this value to dedup repeated calls. required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public System.Nullable<ProjectEventPhase> Phase { get; set; }
		
		/// <summary>
		/// ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectMetadata")]
		public ProjectsMetadata ProjectMetadata { get; set; }
		
		/// <summary>
		/// ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ContainerState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProjectEventPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEFORE_RESOURCE_HANDLING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFTER_RESOURCE_HANDLING = 2,
	}
	
	/// <summary>
	/// ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectsMetadata
	{
		
		/// <summary>
		/// The consumer project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerProjectId")]
		public string ConsumerProjectId { get; set; }
		
		/// <summary>
		/// The consumer project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerProjectNumber")]
		public string ConsumerProjectNumber { get; set; }
		
		/// <summary>
		/// The CCFE state of the consumer project. It is the same state that is communicated to the CLH during project events. Notice that this field is not set in the DB, it is only set in this proto when communicated to CLH in the side channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerProjectState")]
		public ContainerStateState ConsumerProjectState { get; set; }
		
		/// <summary>
		/// The service account authorized to operate on the consumer project. Note: CCFE only propagates P4SA with default tag to CLH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p4ServiceAccount")]
		public string P4ServiceAccount { get; set; }
		
		/// <summary>
		/// The producer project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerProjectId")]
		public string ProducerProjectId { get; set; }
		
		/// <summary>
		/// The producer project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerProjectNumber")]
		public string ProducerProjectNumber { get; set; }
		
		/// <summary>
		/// The tenant project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectId")]
		public string TenantProjectId { get; set; }
		
		/// <summary>
		/// The tenant project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectNumber")]
		public string TenantProjectNumber { get; set; }
	}
	
	/// <summary>
	/// Request message for 'Applications.RepairApplication'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepairApplicationRequest
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/standard/python/console/).
		/// Appengine_apps_create v1beta/apps
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_createAsync(Application requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an application.
		/// Appengine_apps_get v1beta/apps/{appsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the Application resource to get. Example: apps/myapp.</param>
		/// <param name="includeExtraData">Optional. Options to include extra data</param>
		/// <returns>Successful response</returns>
		public async Task<Application> Appengine_apps_getAsync(string appsId, Appengine_apps_getIncludeExtraData includeExtraData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"&includeExtraData=" + includeExtraData;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Application>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application. default_cookie_expiration - Cookie expiration policy for the application. iap - Identity-Aware Proxy properties for the application.
		/// Appengine_apps_patch v1beta/apps/{appsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the Application resource to update. Example: apps/myapp.</param>
		/// <param name="updateMask">Required. Standard field mask for the set of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_patchAsync(string appsId, string updateMask, Application requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all SSL certificates the user is authorized to administer.
		/// Appengine_apps_authorizedCertificates_list v1beta/apps/{appsId}/authorizedCertificates
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <param name="view">Controls the set of fields returned in the LIST response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAuthorizedCertificatesResponse> Appengine_apps_authorizedCertificates_listAsync(string appsId, int pageSize, string pageToken, Appengine_apps_authorizedCertificates_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAuthorizedCertificatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads the specified SSL certificate.
		/// Appengine_apps_authorizedCertificates_create v1beta/apps/{appsId}/authorizedCertificates
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <returns>Successful response</returns>
		public async Task<AuthorizedCertificate> Appengine_apps_authorizedCertificates_createAsync(string appsId, AuthorizedCertificate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthorizedCertificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified SSL certificate.
		/// Appengine_apps_authorizedCertificates_delete v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to delete. Example: apps/myapp/authorizedCertificates/12345.</param>
		/// <param name="authorizedCertificatesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Appengine_apps_authorizedCertificates_deleteAsync(string appsId, string authorizedCertificatesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates/"+ (authorizedCertificatesId==null? "" : System.Uri.EscapeDataString(authorizedCertificatesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified SSL certificate.
		/// Appengine_apps_authorizedCertificates_get v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/authorizedCertificates/12345.</param>
		/// <param name="authorizedCertificatesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="view">Controls the set of fields returned in the GET response.</param>
		/// <returns>Successful response</returns>
		public async Task<AuthorizedCertificate> Appengine_apps_authorizedCertificates_getAsync(string appsId, string authorizedCertificatesId, Appengine_apps_authorizedCertificates_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates/"+ (authorizedCertificatesId==null? "" : System.Uri.EscapeDataString(authorizedCertificatesId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthorizedCertificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.
		/// Appengine_apps_authorizedCertificates_patch v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to update. Example: apps/myapp/authorizedCertificates/12345.</param>
		/// <param name="authorizedCertificatesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="updateMask">Standard field mask for the set of fields to be updated. Updates are only supported on the certificate_raw_data and display_name fields.</param>
		/// <returns>Successful response</returns>
		public async Task<AuthorizedCertificate> Appengine_apps_authorizedCertificates_patchAsync(string appsId, string authorizedCertificatesId, string updateMask, AuthorizedCertificate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates/"+ (authorizedCertificatesId==null? "" : System.Uri.EscapeDataString(authorizedCertificatesId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthorizedCertificate>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all domains the user is authorized to administer.
		/// Appengine_apps_authorizedDomains_list v1beta/apps/{appsId}/authorizedDomains
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAuthorizedDomainsResponse> Appengine_apps_authorizedDomains_listAsync(string appsId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedDomains&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAuthorizedDomainsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the domain mappings on an application.
		/// Appengine_apps_domainMappings_list v1beta/apps/{appsId}/domainMappings
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDomainMappingsResponse> Appengine_apps_domainMappings_listAsync(string appsId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDomainMappingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
		/// Appengine_apps_domainMappings_create v1beta/apps/{appsId}/domainMappings
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="overrideStrategy">Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_domainMappings_createAsync(string appsId, Appengine_apps_domainMappings_createOverrideStrategy overrideStrategy, DomainMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings&overrideStrategy=" + overrideStrategy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.
		/// Appengine_apps_domainMappings_delete v1beta/apps/{appsId}/domainMappings/{domainMappingsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to delete. Example: apps/myapp/domainMappings/example.com.</param>
		/// <param name="domainMappingsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_domainMappings_deleteAsync(string appsId, string domainMappingsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings/"+ (domainMappingsId==null? "" : System.Uri.EscapeDataString(domainMappingsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified domain mapping.
		/// Appengine_apps_domainMappings_get v1beta/apps/{appsId}/domainMappings/{domainMappingsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/domainMappings/example.com.</param>
		/// <param name="domainMappingsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<DomainMapping> Appengine_apps_domainMappings_getAsync(string appsId, string domainMappingsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings/"+ (domainMappingsId==null? "" : System.Uri.EscapeDataString(domainMappingsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DomainMapping>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.
		/// Appengine_apps_domainMappings_patch v1beta/apps/{appsId}/domainMappings/{domainMappingsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to update. Example: apps/myapp/domainMappings/example.com.</param>
		/// <param name="domainMappingsId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="updateMask">Required. Standard field mask for the set of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_domainMappings_patchAsync(string appsId, string domainMappingsId, string updateMask, DomainMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings/"+ (domainMappingsId==null? "" : System.Uri.EscapeDataString(domainMappingsId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the firewall rules of an application.
		/// Appengine_apps_firewall_ingressRules_list v1beta/apps/{appsId}/firewall/ingressRules
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the Firewall collection to retrieve. Example: apps/myapp/firewall/ingressRules.</param>
		/// <param name="matchingAddress">A valid IP Address. If set, only rules matching this address will be returned. The first returned rule will be the rule that fires on requests from this IP.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListIngressRulesResponse> Appengine_apps_firewall_ingressRules_listAsync(string appsId, string matchingAddress, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/firewall/ingressRules&matchingAddress=" + (matchingAddress==null? "" : System.Uri.EscapeDataString(matchingAddress))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListIngressRulesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a firewall rule for the application.
		/// Appengine_apps_firewall_ingressRules_create v1beta/apps/{appsId}/firewall/ingressRules
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Firewall collection in which to create a new rule. Example: apps/myapp/firewall/ingressRules.</param>
		/// <returns>Successful response</returns>
		public async Task<FirewallRule> Appengine_apps_firewall_ingressRules_createAsync(string appsId, FirewallRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/firewall/ingressRules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified firewall rule.
		/// Appengine_apps_firewall_ingressRules_delete v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the Firewall resource to delete. Example: apps/myapp/firewall/ingressRules/100.</param>
		/// <param name="ingressRulesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Appengine_apps_firewall_ingressRules_deleteAsync(string appsId, string ingressRulesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/firewall/ingressRules/"+ (ingressRulesId==null? "" : System.Uri.EscapeDataString(ingressRulesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified firewall rule.
		/// Appengine_apps_firewall_ingressRules_get v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the Firewall resource to retrieve. Example: apps/myapp/firewall/ingressRules/100.</param>
		/// <param name="ingressRulesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<FirewallRule> Appengine_apps_firewall_ingressRules_getAsync(string appsId, string ingressRulesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/firewall/ingressRules/"+ (ingressRulesId==null? "" : System.Uri.EscapeDataString(ingressRulesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified firewall rule.
		/// Appengine_apps_firewall_ingressRules_patch v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the Firewall resource to update. Example: apps/myapp/firewall/ingressRules/100.</param>
		/// <param name="ingressRulesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="updateMask">Standard field mask for the set of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<FirewallRule> Appengine_apps_firewall_ingressRules_patchAsync(string appsId, string ingressRulesId, string updateMask, FirewallRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/firewall/ingressRules/"+ (ingressRulesId==null? "" : System.Uri.EscapeDataString(ingressRulesId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the entire firewall ruleset in one bulk operation. This overrides and replaces the rules of an existing firewall with the new rules.If the final rule does not match traffic with the '*' wildcard IP range, then an "allow all" rule is explicitly added to the end of the list.
		/// Appengine_apps_firewall_ingressRules_batchUpdate v1beta/apps/{appsId}/firewall/ingressRules:batchUpdate
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the Firewall collection to set. Example: apps/myapp/firewall/ingressRules.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateIngressRulesResponse> Appengine_apps_firewall_ingressRules_batchUpdateAsync(string appsId, BatchUpdateIngressRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/firewall/ingressRules:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateIngressRulesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Appengine_apps_locations_list v1beta/apps/{appsId}/locations
		/// </summary>
		/// <param name="appsId">Part of `name`. The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like "displayName=tokyo", and is documented in more detail in AIP-160 (https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the next_page_token field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Appengine_apps_locations_listAsync(string appsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a location.
		/// Appengine_apps_locations_get v1beta/apps/{appsId}/locations/{locationsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Resource name for the location.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Location> Appengine_apps_locations_getAsync(string appsId, string locationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Location>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
		/// Appengine_apps_operations_list v1beta/apps/{appsId}/operations
		/// </summary>
		/// <param name="appsId">Part of `name`. The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Appengine_apps_operations_listAsync(string appsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Appengine_apps_operations_get v1beta/apps/{appsId}/operations/{operationsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. The name of the operation resource.</param>
		/// <param name="operationsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_operations_getAsync(string appsId, string operationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/operations/"+ (operationsId==null? "" : System.Uri.EscapeDataString(operationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the services in the application.
		/// Appengine_apps_services_list v1beta/apps/{appsId}/services
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListServicesResponse> Appengine_apps_services_listAsync(string appsId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListServicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified service and all enclosed versions.
		/// Appengine_apps_services_delete v1beta/apps/{appsId}/services/{servicesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_services_deleteAsync(string appsId, string servicesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the current configuration of the specified service.
		/// Appengine_apps_services_get v1beta/apps/{appsId}/services/{servicesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="includeExtraData">Optional. Options to include extra data</param>
		/// <returns>Successful response</returns>
		public async Task<Service> Appengine_apps_services_getAsync(string appsId, string servicesId, Appengine_apps_getIncludeExtraData includeExtraData, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"&includeExtraData=" + includeExtraData;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Service>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of the specified service.
		/// Appengine_apps_services_patch v1beta/apps/{appsId}/services/{servicesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to update. Example: apps/myapp/services/default.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="migrateTraffic">Set to true to gradually shift traffic to one or more versions that you specify. By default, traffic is shifted immediately. For gradual traffic migration, the target versions must be located within instances that are configured for both warmup requests (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#InboundServiceType) and automatic scaling (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#AutomaticScaling). You must specify the shardBy (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services#ShardBy) field in the Service resource. Gradual traffic migration is not supported in the App Engine flexible environment. For examples, see Migrating and Splitting Traffic (https://cloud.google.com/appengine/docs/admin-api/migrating-splitting-traffic).</param>
		/// <param name="updateMask">Required. Standard field mask for the set of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_services_patchAsync(string appsId, string servicesId, bool migrateTraffic, string updateMask, Service requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"&migrateTraffic="+migrateTraffic+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of a service.
		/// Appengine_apps_services_versions_list v1beta/apps/{appsId}/services/{servicesId}/versions
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Service resource. Example: apps/myapp/services/default.</param>
		/// <param name="servicesId">Part of `parent`. See documentation of `appsId`.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <param name="view">Controls the set of fields returned in the List response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVersionsResponse> Appengine_apps_services_versions_listAsync(string appsId, string servicesId, int pageSize, string pageToken, Appengine_apps_services_versions_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deploys code and resource files to a new version.
		/// Appengine_apps_services_versions_create v1beta/apps/{appsId}/services/{servicesId}/versions
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent resource to create this version under. Example: apps/myapp/services/default.</param>
		/// <param name="servicesId">Part of `parent`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_services_versions_createAsync(string appsId, string servicesId, Version requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing Version resource.
		/// Appengine_apps_services_versions_delete v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_services_versions_deleteAsync(string appsId, string servicesId, string versionsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions/"+ (versionsId==null? "" : System.Uri.EscapeDataString(versionsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.
		/// Appengine_apps_services_versions_get v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="includeExtraData">Optional. Options to include extra data</param>
		/// <param name="view">Controls the set of fields returned in the Get response.</param>
		/// <returns>Successful response</returns>
		public async Task<Version> Appengine_apps_services_versions_getAsync(string appsId, string servicesId, string versionsId, Appengine_apps_getIncludeExtraData includeExtraData, Appengine_apps_services_versions_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions/"+ (versionsId==null? "" : System.Uri.EscapeDataString(versionsId))+"&includeExtraData=" + includeExtraData+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Version>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_cpu_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_throughput_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#manualscaling)Flexible environment serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment: automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling)manual scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#manualscaling)
		/// Appengine_apps_services_versions_patch v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to update. Example: apps/myapp/services/default/versions/1.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="updateMask">Standard field mask for the set of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_services_versions_patchAsync(string appsId, string servicesId, string versionsId, string updateMask, Version requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions/"+ (versionsId==null? "" : System.Uri.EscapeDataString(versionsId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).
		/// Appengine_apps_services_versions_instances_list v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Version resource. Example: apps/myapp/services/default/versions/v1.</param>
		/// <param name="servicesId">Part of `parent`. See documentation of `appsId`.</param>
		/// <param name="versionsId">Part of `parent`. See documentation of `appsId`.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInstancesResponse> Appengine_apps_services_versions_instances_listAsync(string appsId, string servicesId, string versionsId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions/"+ (versionsId==null? "" : System.Uri.EscapeDataString(versionsId))+"/instances&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInstancesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see "How Instances are Managed" (standard environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.
		/// Appengine_apps_services_versions_instances_delete v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="instancesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_services_versions_instances_deleteAsync(string appsId, string servicesId, string versionsId, string instancesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions/"+ (versionsId==null? "" : System.Uri.EscapeDataString(versionsId))+"/instances/"+ (instancesId==null? "" : System.Uri.EscapeDataString(instancesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets instance information.
		/// Appengine_apps_services_versions_instances_get v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="instancesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Instance> Appengine_apps_services_versions_instances_getAsync(string appsId, string servicesId, string versionsId, string instancesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions/"+ (versionsId==null? "" : System.Uri.EscapeDataString(versionsId))+"/instances/"+ (instancesId==null? "" : System.Uri.EscapeDataString(instancesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Instance>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in "debug mode", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.
		/// Appengine_apps_services_versions_instances_debug v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1/instances/instance-1.</param>
		/// <param name="servicesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="versionsId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="instancesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_services_versions_instances_debugAsync(string appsId, string servicesId, string versionsId, string instancesId, DebugInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/services/"+ (servicesId==null? "" : System.Uri.EscapeDataString(servicesId))+"/versions/"+ (versionsId==null? "" : System.Uri.EscapeDataString(versionsId))+"/instances/"+ (instancesId==null? "" : System.Uri.EscapeDataString(instancesId))+":debug";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the available runtimes for the application.
		/// Appengine_apps_listRuntimes v1beta/apps/{appsId}:listRuntimes
		/// </summary>
		/// <param name="appsId">Part of `parent`. Required. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="environment">Optional. The environment of the Application.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRuntimesResponse> Appengine_apps_listRuntimesAsync(string appsId, RuntimeEnvironment environment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+":listRuntimes&environment=" + environment;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListRuntimesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an error message about a missing feature, for example, Error retrieving the App Engine service account. If you have deleted your App Engine service account, this will not be able to recreate it. Instead, you should attempt to use the IAM undelete API if possible at https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B"name"%3A"projects%2F-%2FserviceAccounts%2Funique_id"%2C"resource"%3A%7B%7D%7D . If the deletion was recent, the numeric ID can be found in the Cloud Console Activity Log.
		/// Appengine_apps_repair v1beta/apps/{appsId}:repair
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the application to repair. Example: apps/myapp</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_repairAsync(string appsId, RepairApplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+":repair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Appengine_projects_locations_list v1beta/projects/{projectsId}/locations
		/// </summary>
		/// <param name="projectsId">Part of `name`. The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like "displayName=tokyo", and is documented in more detail in AIP-160 (https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the next_page_token field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Appengine_projects_locations_listAsync(string projectsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a location.
		/// Appengine_projects_locations_get v1beta/projects/{projectsId}/locations/{locationsId}
		/// </summary>
		/// <param name="projectsId">Part of `name`. Resource name for the location.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Location> Appengine_projects_locations_getAsync(string projectsId, string locationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Location>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
		/// Appengine_projects_locations_operations_list v1beta/projects/{projectsId}/locations/{locationsId}/operations
		/// </summary>
		/// <param name="projectsId">Part of `name`. The name of the operation's parent resource.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Appengine_projects_locations_operations_listAsync(string projectsId, string locationsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Appengine_projects_locations_operations_get v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}
		/// </summary>
		/// <param name="projectsId">Part of `name`. The name of the operation resource.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <param name="operationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_projects_locations_operations_getAsync(string projectsId, string locationsId, string operationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId))+"/operations/"+ (operationsId==null? "" : System.Uri.EscapeDataString(operationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Appengine_apps_getIncludeExtraData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_EXTRA_DATA_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_EXTRA_DATA_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_GOOGLE_GENERATED_METADATA = 2,
	}
	
	public enum Appengine_apps_authorizedCertificates_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_CERTIFICATE = 1,
	}
	
	public enum Appengine_apps_domainMappings_createOverrideStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_DOMAIN_OVERRIDE_STRATEGY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRICT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERRIDE = 2,
	}
	
	public enum Appengine_apps_services_versions_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
