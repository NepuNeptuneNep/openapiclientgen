//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// AMP inspection result of the live page or the current information from Google's index, depending on whether you requested a live inspection or not.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmpInspectionResult
	{
		
		/// <summary>
		/// Index status of the AMP URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ampIndexStatusVerdict")]
		public System.Nullable<AmpInspectionResultAmpIndexStatusVerdict> AmpIndexStatusVerdict { get; set; }
		
		/// <summary>
		/// URL of the AMP that was inspected. If the submitted URL is a desktop page that refers to an AMP version, the AMP version will be inspected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ampUrl")]
		public string AmpUrl { get; set; }
		
		/// <summary>
		/// Whether or not the page blocks indexing through a noindex rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexingState")]
		public System.Nullable<AmpInspectionResultIndexingState> IndexingState { get; set; }
		
		/// <summary>
		/// A list of zero or more AMP issues found for the inspected URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public AmpIssue[] Issues { get; set; }
		
		/// <summary>
		/// Last time this AMP version was crawled by Google. Absent if the URL was never crawled successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCrawlTime")]
		public string LastCrawlTime { get; set; }
		
		/// <summary>
		/// Whether or not Google could fetch the AMP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageFetchState")]
		public System.Nullable<AmpInspectionResultPageFetchState> PageFetchState { get; set; }
		
		/// <summary>
		/// Whether or not the page is blocked to Google by a robots.txt rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="robotsTxtState")]
		public System.Nullable<AmpInspectionResultRobotsTxtState> RobotsTxtState { get; set; }
		
		/// <summary>
		/// The status of the most severe error on the page. If a page has both warnings and errors, the page status is error. Error status means the page cannot be shown in Search results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verdict")]
		public AmpInspectionResultAmpIndexStatusVerdict Verdict { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmpInspectionResultAmpIndexStatusVerdict
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VERDICT_UNSPECIFIED")]
		VERDICT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASS")]
		PASS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTIAL")]
		PARTIAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAIL")]
		FAIL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEUTRAL")]
		NEUTRAL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmpInspectionResultIndexingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMP_INDEXING_STATE_UNSPECIFIED")]
		AMP_INDEXING_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AMP_INDEXING_ALLOWED")]
		AMP_INDEXING_ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED_DUE_TO_NOINDEX")]
		BLOCKED_DUE_TO_NOINDEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER")]
		BLOCKED_DUE_TO_EXPIRED_UNAVAILABLE_AFTER = 3,
	}
	
	/// <summary>
	/// AMP issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmpIssue
	{
		
		/// <summary>
		/// Brief description of this issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueMessage")]
		public string IssueMessage { get; set; }
		
		/// <summary>
		/// Severity of this issue: WARNING or ERROR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<AmpIssueSeverity> Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmpIssueSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEVERITY_UNSPECIFIED")]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARNING")]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmpInspectionResultPageFetchState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAGE_FETCH_STATE_UNSPECIFIED")]
		PAGE_FETCH_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESSFUL")]
		SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOFT_404")]
		SOFT_404 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED_ROBOTS_TXT")]
		BLOCKED_ROBOTS_TXT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_FOUND")]
		NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS_DENIED")]
		ACCESS_DENIED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVER_ERROR")]
		SERVER_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REDIRECT_ERROR")]
		REDIRECT_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS_FORBIDDEN")]
		ACCESS_FORBIDDEN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED_4XX")]
		BLOCKED_4XX = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_CRAWL_ERROR")]
		INTERNAL_CRAWL_ERROR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_URL")]
		INVALID_URL = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmpInspectionResultRobotsTxtState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROBOTS_TXT_STATE_UNSPECIFIED")]
		ROBOTS_TXT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALLOWED")]
		ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISALLOWED")]
		DISALLOWED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiDataRow
	{
		
		[System.Runtime.Serialization.DataMember(Name="clicks")]
		public System.Nullable<System.Double> Clicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ctr")]
		public System.Nullable<System.Double> Ctr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impressions")]
		public System.Nullable<System.Double> Impressions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public string[] Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Double> Position { get; set; }
	}
	
	/// <summary>
	/// A filter test to be applied to each row in the data set, where a match can return the row. Filters are string comparisons, and values and dimension names are not case-sensitive. Individual filters are either AND'ed or OR'ed within their parent filter group, according to the group's group type. You do not need to group by a specified dimension to filter against it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiDimensionFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public System.Nullable<ApiDimensionFilterDimension> Dimension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<ApiDimensionFilterOperator> Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApiDimensionFilterDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUERY")]
		QUERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAGE")]
		PAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COUNTRY")]
		COUNTRY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE")]
		DEVICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEARCH_APPEARANCE")]
		SEARCH_APPEARANCE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApiDimensionFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUALS")]
		EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUALS")]
		NOT_EQUALS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_CONTAINS")]
		NOT_CONTAINS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDING_REGEX")]
		INCLUDING_REGEX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDING_REGEX")]
		EXCLUDING_REGEX = 5,
	}
	
	/// <summary>
	/// A set of dimension value filters to test against each row. Only rows that pass all filter groups will be returned. All results within a filter group are either AND'ed or OR'ed together, depending on the group type selected. All filter groups are AND'ed together.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiDimensionFilterGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ApiDimensionFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<ApiDimensionFilterGroupGroupType> GroupType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApiDimensionFilterGroupGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AND")]
		AND = 0,
	}
	
	/// <summary>
	/// Blocked resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlockedResource
	{
		
		/// <summary>
		/// URL of the blocked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Rich Results items grouped by type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetectedItems
	{
		
		/// <summary>
		/// List of Rich Results items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item[] Items { get; set; }
		
		/// <summary>
		/// Rich Results type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richResultType")]
		public string RichResultType { get; set; }
	}
	
	/// <summary>
	/// A specific rich result found on the page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Item
	{
		
		/// <summary>
		/// A list of zero or more rich result issues found for this instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public RichResultsIssue[] Issues { get; set; }
		
		/// <summary>
		/// The user-provided name of this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Severity and status of a single issue affecting a single rich result instance on a page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RichResultsIssue
	{
		
		/// <summary>
		/// Rich Results issue type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueMessage")]
		public string IssueMessage { get; set; }
		
		/// <summary>
		/// Severity of this issue: WARNING, or ERROR. Items with an issue of status ERROR cannot appear with rich result features in Google Search results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AmpIssueSeverity Severity { get; set; }
	}
	
	/// <summary>
	/// Describe image data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image
	{
		
		/// <summary>
		/// Image data in format determined by the mime type. Currently, the format will always be "image/png", but this might change in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The mime-type of the image data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// Results of index status inspection for either the live page or the version in Google's index, depending on whether you requested a live inspection or not. For more information, see the [Index coverage report documentation](https://support.google.com/webmasters/answer/7440203).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndexStatusInspectionResult
	{
		
		/// <summary>
		/// Could Google find and index the page. More details about page indexing appear in 'indexing_state'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverageState")]
		public string CoverageState { get; set; }
		
		/// <summary>
		/// Primary crawler that was used by Google to crawl your site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crawledAs")]
		public System.Nullable<IndexStatusInspectionResultCrawledAs> CrawledAs { get; set; }
		
		/// <summary>
		/// The URL of the page that Google selected as canonical. If the page was not indexed, this field is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleCanonical")]
		public string GoogleCanonical { get; set; }
		
		/// <summary>
		/// Whether or not the page blocks indexing through a noindex rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexingState")]
		public System.Nullable<IndexStatusInspectionResultIndexingState> IndexingState { get; set; }
		
		/// <summary>
		/// Last time this URL was crawled by Google using the [primary crawler](https://support.google.com/webmasters/answer/7440203#primary_crawler). Absent if the URL was never crawled successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCrawlTime")]
		public string LastCrawlTime { get; set; }
		
		/// <summary>
		/// Whether or not Google could retrieve the page from your server. Equivalent to ["page fetch"](https://support.google.com/webmasters/answer/9012289#index_coverage) in the URL inspection report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageFetchState")]
		public AmpInspectionResultPageFetchState PageFetchState { get; set; }
		
		/// <summary>
		/// URLs that link to the inspected URL, directly and indirectly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referringUrls")]
		public string[] ReferringUrls { get; set; }
		
		/// <summary>
		/// Whether or not the page is blocked to Google by a robots.txt rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="robotsTxtState")]
		public AmpInspectionResultRobotsTxtState RobotsTxtState { get; set; }
		
		/// <summary>
		/// Any sitemaps that this URL was listed in, as known by Google. Not guaranteed to be an exhaustive list, especially if Google did not discover this URL through a sitemap. Absent if no sitemaps were found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sitemap")]
		public string[] Sitemap { get; set; }
		
		/// <summary>
		/// The URL that your page or site [declares as canonical](https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls?#define-canonical). If you did not declare a canonical URL, this field is absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCanonical")]
		public string UserCanonical { get; set; }
		
		/// <summary>
		/// High level verdict about whether the URL *is* indexed (indexed status), or *can be* indexed (live inspection).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verdict")]
		public AmpInspectionResultAmpIndexStatusVerdict Verdict { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IndexStatusInspectionResultCrawledAs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CRAWLING_USER_AGENT_UNSPECIFIED")]
		CRAWLING_USER_AGENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESKTOP")]
		DESKTOP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE")]
		MOBILE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IndexStatusInspectionResultIndexingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INDEXING_STATE_UNSPECIFIED")]
		INDEXING_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INDEXING_ALLOWED")]
		INDEXING_ALLOWED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED_BY_META_TAG")]
		BLOCKED_BY_META_TAG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED_BY_HTTP_HEADER")]
		BLOCKED_BY_HTTP_HEADER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLOCKED_BY_ROBOTS_TXT")]
		BLOCKED_BY_ROBOTS_TXT = 4,
	}
	
	/// <summary>
	/// Index inspection request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InspectUrlIndexRequest
	{
		
		/// <summary>
		/// Required. URL to inspect. Must be under the property specified in "site_url".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inspectionUrl")]
		public string InspectionUrl { get; set; }
		
		/// <summary>
		/// Optional. An [IETF BCP-47](https://en.wikipedia.org/wiki/IETF_language_tag) language code representing the requested language for translated issue messages, e.g. "en-US", "or "de-CH". Default value is "en-US".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Required. The URL of the property as defined in Search Console. **Examples:** `http://www.example.com/` for a URL-prefix property, or `sc-domain:example.com` for a Domain property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteUrl")]
		public string SiteUrl { get; set; }
	}
	
	/// <summary>
	/// Index-Status inspection response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InspectUrlIndexResponse
	{
		
		/// <summary>
		/// URL inspection result, including all inspection results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inspectionResult")]
		public UrlInspectionResult InspectionResult { get; set; }
	}
	
	/// <summary>
	/// URL inspection result, including all inspection results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UrlInspectionResult
	{
		
		/// <summary>
		/// AMP inspection result of the live page or the current information from Google's index, depending on whether you requested a live inspection or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ampResult")]
		public AmpInspectionResult AmpResult { get; set; }
		
		/// <summary>
		/// Results of index status inspection for either the live page or the version in Google's index, depending on whether you requested a live inspection or not. For more information, see the [Index coverage report documentation](https://support.google.com/webmasters/answer/7440203).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexStatusResult")]
		public IndexStatusInspectionResult IndexStatusResult { get; set; }
		
		/// <summary>
		/// Link to Search Console URL inspection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inspectionResultLink")]
		public string InspectionResultLink { get; set; }
		
		/// <summary>
		/// Mobile-usability inspection results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileUsabilityResult")]
		public MobileUsabilityInspectionResult MobileUsabilityResult { get; set; }
		
		/// <summary>
		/// Rich-Results inspection result, including any rich results found at this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richResultsResult")]
		public RichResultsInspectionResult RichResultsResult { get; set; }
	}
	
	/// <summary>
	/// Mobile-usability inspection results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileUsabilityInspectionResult
	{
		
		/// <summary>
		/// A list of zero or more mobile-usability issues detected for this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public MobileUsabilityIssue[] Issues { get; set; }
		
		/// <summary>
		/// High-level mobile-usability inspection result for this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verdict")]
		public AmpInspectionResultAmpIndexStatusVerdict Verdict { get; set; }
	}
	
	/// <summary>
	/// Mobile-usability issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileUsabilityIssue
	{
		
		/// <summary>
		/// Mobile-usability issue type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueType")]
		public System.Nullable<MobileUsabilityIssueIssueType> IssueType { get; set; }
		
		/// <summary>
		/// Additional information regarding the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Not returned; reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AmpIssueSeverity Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MobileUsabilityIssueIssueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED")]
		MOBILE_USABILITY_ISSUE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USES_INCOMPATIBLE_PLUGINS")]
		USES_INCOMPATIBLE_PLUGINS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURE_VIEWPORT")]
		CONFIGURE_VIEWPORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_WIDTH_VIEWPORT")]
		FIXED_WIDTH_VIEWPORT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SIZE_CONTENT_TO_VIEWPORT")]
		SIZE_CONTENT_TO_VIEWPORT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_LEGIBLE_FONT_SIZES")]
		USE_LEGIBLE_FONT_SIZES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAP_TARGETS_TOO_CLOSE")]
		TAP_TARGETS_TOO_CLOSE = 6,
	}
	
	/// <summary>
	/// Rich-Results inspection result, including any rich results found at this URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RichResultsInspectionResult
	{
		
		/// <summary>
		/// A list of zero or more rich results detected on this page. Rich results that cannot even be parsed due to syntactic issues will not be listed here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedItems")]
		public DetectedItems[] DetectedItems { get; set; }
		
		/// <summary>
		/// High-level rich results inspection result for this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verdict")]
		public AmpInspectionResultAmpIndexStatusVerdict Verdict { get; set; }
	}
	
	/// <summary>
	/// Mobile-friendly issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileFriendlyIssue
	{
		
		/// <summary>
		/// Rule violated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public System.Nullable<MobileFriendlyIssueRule> Rule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MobileFriendlyIssueRule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE_FRIENDLY_RULE_UNSPECIFIED")]
		MOBILE_FRIENDLY_RULE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USES_INCOMPATIBLE_PLUGINS")]
		USES_INCOMPATIBLE_PLUGINS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURE_VIEWPORT")]
		CONFIGURE_VIEWPORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FIXED_WIDTH_VIEWPORT")]
		FIXED_WIDTH_VIEWPORT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SIZE_CONTENT_TO_VIEWPORT")]
		SIZE_CONTENT_TO_VIEWPORT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USE_LEGIBLE_FONT_SIZES")]
		USE_LEGIBLE_FONT_SIZES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAP_TARGETS_TOO_CLOSE")]
		TAP_TARGETS_TOO_CLOSE = 6,
	}
	
	/// <summary>
	/// Information about a resource with issue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceIssue
	{
		
		/// <summary>
		/// Blocked resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockedResource")]
		public BlockedResource BlockedResource { get; set; }
	}
	
	/// <summary>
	/// Mobile-friendly test request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RunMobileFriendlyTestRequest
	{
		
		/// <summary>
		/// Whether or not screenshot is requested. Default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestScreenshot")]
		public System.Nullable<System.Boolean> RequestScreenshot { get; set; }
		
		/// <summary>
		/// URL for inspection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Mobile-friendly test response, including mobile-friendly issues and resource issues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RunMobileFriendlyTestResponse
	{
		
		/// <summary>
		/// Test verdict, whether the page is mobile friendly or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileFriendliness")]
		public System.Nullable<RunMobileFriendlyTestResponseMobileFriendliness> MobileFriendliness { get; set; }
		
		/// <summary>
		/// List of mobile-usability issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileFriendlyIssues")]
		public MobileFriendlyIssue[] MobileFriendlyIssues { get; set; }
		
		/// <summary>
		/// Information about embedded resources issues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceIssues")]
		public ResourceIssue[] ResourceIssues { get; set; }
		
		/// <summary>
		/// Describe image data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshot")]
		public Image Screenshot { get; set; }
		
		/// <summary>
		/// Final state of the test, including error details if necessary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testStatus")]
		public TestStatus TestStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RunMobileFriendlyTestResponseMobileFriendliness
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED")]
		MOBILE_FRIENDLY_TEST_RESULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE_FRIENDLY")]
		MOBILE_FRIENDLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_MOBILE_FRIENDLY")]
		NOT_MOBILE_FRIENDLY = 2,
	}
	
	/// <summary>
	/// Final state of the test, including error details if necessary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestStatus
	{
		
		/// <summary>
		/// Error details if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Status of the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TestStatusStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TestStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TEST_STATUS_UNSPECIFIED")]
		TEST_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_ERROR")]
		INTERNAL_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAGE_UNREACHABLE")]
		PAGE_UNREACHABLE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAnalyticsQueryRequest
	{
		
		/// <summary>
		/// [Optional; Default is \"auto\"] How data is aggregated. If aggregated by property, all data for the same property is aggregated; if aggregated by page, all data is aggregated by canonical URI. If you filter or group by page, choose AUTO; otherwise you can aggregate either by property or by page, depending on how you want your data calculated; see the help documentation to learn how data is calculated differently by site versus by page. **Note:** If you group or filter by page, you cannot aggregate by property. If you specify any value other than AUTO, the aggregation type in the result will match the requested type, or if you request an invalid type, you will get an error. The API will never change your aggregation type if the requested type is invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public System.Nullable<SearchAnalyticsQueryRequestAggregationType> AggregationType { get; set; }
		
		/// <summary>
		/// The data state to be fetched, can be full or all, the latter including full and partial data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataState")]
		public System.Nullable<SearchAnalyticsQueryRequestDataState> DataState { get; set; }
		
		/// <summary>
		/// [Optional] Zero or more filters to apply to the dimension grouping values; for example, 'query contains \"buy\"' to see only data where the query string contains the substring \"buy\" (not case-sensitive). You can filter by a dimension without grouping by it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilterGroups")]
		public ApiDimensionFilterGroup[] DimensionFilterGroups { get; set; }
		
		/// <summary>
		/// [Optional] Zero or more dimensions to group results by. Dimensions are the group-by values in the Search Analytics page. Dimensions are combined to create a unique row key for each row. Results are grouped in the order that you supply these dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string[] Dimensions { get; set; }
		
		/// <summary>
		/// [Required] End date of the requested date range, in YYYY-MM-DD format, in PST (UTC - 8:00). Must be greater than or equal to the start date. This value is included in the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// [Optional; Default is 1000] The maximum number of rows to return. Must be a number from 1 to 25,000 (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowLimit")]
		public System.Nullable<System.Int32> RowLimit { get; set; }
		
		/// <summary>
		/// [Optional; Default is \"web\"] The search type to filter for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchType")]
		public System.Nullable<SearchAnalyticsQueryRequestSearchType> SearchType { get; set; }
		
		/// <summary>
		///  [Required] Start date of the requested date range, in YYYY-MM-DD format, in PST time (UTC - 8:00). Must be less than or equal to the end date. This value is included in the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// [Optional; Default is 0] Zero-based index of the first row in the response. Must be a non-negative number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startRow")]
		public System.Nullable<System.Int32> StartRow { get; set; }
		
		/// <summary>
		/// Optional. [Optional; Default is \"web\"] Type of report: search type, or either Discover or Gnews.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SearchAnalyticsQueryRequestSearchType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchAnalyticsQueryRequestAggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AUTO")]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BY_PROPERTY")]
		BY_PROPERTY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BY_PAGE")]
		BY_PAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BY_NEWS_SHOWCASE_PANEL")]
		BY_NEWS_SHOWCASE_PANEL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchAnalyticsQueryRequestDataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_STATE_UNSPECIFIED")]
		DATA_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FINAL")]
		FINAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SearchAnalyticsQueryRequestSearchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB")]
		WEB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMAGE")]
		IMAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO")]
		VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEWS")]
		NEWS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCOVER")]
		DISCOVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GOOGLE_NEWS")]
		GOOGLE_NEWS = 5,
	}
	
	/// <summary>
	/// A list of rows, one per result, grouped by key. Metrics in each row are aggregated for all data grouped by that key either by page or property, as specified by the aggregation type parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAnalyticsQueryResponse
	{
		
		/// <summary>
		/// How the results were aggregated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseAggregationType")]
		public SearchAnalyticsQueryRequestAggregationType ResponseAggregationType { get; set; }
		
		/// <summary>
		/// A list of rows grouped by the key values in the order given in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public ApiDataRow[] Rows { get; set; }
	}
	
	/// <summary>
	/// List of sitemaps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SitemapsListResponse
	{
		
		/// <summary>
		/// Contains detailed information about a specific URL submitted as a [sitemap](https://support.google.com/webmasters/answer/156184).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sitemap")]
		public WmxSitemap[] Sitemap { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a specific URL submitted as a [sitemap](https://support.google.com/webmasters/answer/156184).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WmxSitemap
	{
		
		/// <summary>
		/// The various content types in the sitemap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public WmxSitemapContent[] Contents { get; set; }
		
		/// <summary>
		/// Number of errors in the sitemap. These are issues with the sitemap itself that need to be fixed before it can be processed correctly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string Errors { get; set; }
		
		/// <summary>
		/// If true, the sitemap has not been processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPending")]
		public System.Nullable<System.Boolean> IsPending { get; set; }
		
		/// <summary>
		/// If true, the sitemap is a collection of sitemaps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSitemapsIndex")]
		public System.Nullable<System.Boolean> IsSitemapsIndex { get; set; }
		
		/// <summary>
		/// Date & time in which this sitemap was last downloaded. Date format is in RFC 3339 format (yyyy-mm-dd).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastDownloaded")]
		public string LastDownloaded { get; set; }
		
		/// <summary>
		/// Date & time in which this sitemap was submitted. Date format is in RFC 3339 format (yyyy-mm-dd).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSubmitted")]
		public string LastSubmitted { get; set; }
		
		/// <summary>
		/// The url of the sitemap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The type of the sitemap. For example: `rssFeed`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<WmxSitemapType> Type { get; set; }
		
		/// <summary>
		/// Number of warnings for the sitemap. These are generally non-critical issues with URLs in the sitemaps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string Warnings { get; set; }
	}
	
	/// <summary>
	/// Information about the various content types in the sitemap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WmxSitemapContent
	{
		
		/// <summary>
		/// *Deprecated; do not use.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexed")]
		public string Indexed { get; set; }
		
		/// <summary>
		/// The number of URLs in the sitemap (of the content type).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitted")]
		public string Submitted { get; set; }
		
		/// <summary>
		/// The specific type of content in this sitemap. For example: `web`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<WmxSitemapContentType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WmxSitemapContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB")]
		WEB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMAGE")]
		IMAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIDEO")]
		VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEWS")]
		NEWS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE")]
		MOBILE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANDROID_APP")]
		ANDROID_APP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATTERN")]
		PATTERN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IOS_APP")]
		IOS_APP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_FEED_ELEMENT")]
		DATA_FEED_ELEMENT = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WmxSitemapType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_SITEMAP")]
		NOT_SITEMAP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="URL_LIST")]
		URL_LIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITEMAP")]
		SITEMAP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RSS_FEED")]
		RSS_FEED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATOM_FEED")]
		ATOM_FEED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATTERN_SITEMAP")]
		PATTERN_SITEMAP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OCEANFRONT")]
		OCEANFRONT = 6,
	}
	
	/// <summary>
	/// List of sites with access level information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SitesListResponse
	{
		
		/// <summary>
		/// Contains permission level information about a Search Console site. For more information, see [Permissions in Search Console](https://support.google.com/webmasters/answer/2451999).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteEntry")]
		public WmxSite[] SiteEntry { get; set; }
	}
	
	/// <summary>
	/// Contains permission level information about a Search Console site. For more information, see [Permissions in Search Console](https://support.google.com/webmasters/answer/2451999).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WmxSite
	{
		
		/// <summary>
		/// The user's permission level for the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionLevel")]
		public System.Nullable<WmxSitePermissionLevel> PermissionLevel { get; set; }
		
		/// <summary>
		/// The URL of the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteUrl")]
		public string SiteUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WmxSitePermissionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITE_PERMISSION_LEVEL_UNSPECIFIED")]
		SITE_PERMISSION_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITE_OWNER")]
		SITE_OWNER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITE_FULL_USER")]
		SITE_FULL_USER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITE_RESTRICTED_USER")]
		SITE_RESTRICTED_USER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITE_UNVERIFIED_USER")]
		SITE_UNVERIFIED_USER = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Index inspection.
		/// Searchconsole_urlInspection_index_inspect v1/urlInspection/index:inspect
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<InspectUrlIndexResponse> Searchconsole_urlInspection_index_inspectAsync(InspectUrlIndexRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/urlInspection/index:inspect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InspectUrlIndexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Runs Mobile-Friendly Test for a given URL.
		/// Searchconsole_urlTestingTools_mobileFriendlyTest_run v1/urlTestingTools/mobileFriendlyTest:run
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<RunMobileFriendlyTestResponse> Searchconsole_urlTestingTools_mobileFriendlyTest_runAsync(RunMobileFriendlyTestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/urlTestingTools/mobileFriendlyTest:run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RunMobileFriendlyTestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the user's Search Console sites.
		/// Webmasters_sites_list webmasters/v3/sites
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SitesListResponse> Webmasters_sites_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SitesListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a site from the set of the user's Search Console sites.
		/// Webmasters_sites_delete webmasters/v3/sites/{siteUrl}
		/// </summary>
		/// <param name="siteUrl">The URI of the property as defined in Search Console. **Examples:** `http://www.example.com/` or `sc-domain:example.com`.</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sites_deleteAsync(string siteUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about specific site.
		/// Webmasters_sites_get webmasters/v3/sites/{siteUrl}
		/// </summary>
		/// <param name="siteUrl">The URI of the property as defined in Search Console. **Examples:** `http://www.example.com/` or `sc-domain:example.com`.</param>
		/// <returns>Successful response</returns>
		public async Task<WmxSite> Webmasters_sites_getAsync(string siteUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WmxSite>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a site to the set of the user's sites in Search Console.
		/// Webmasters_sites_add webmasters/v3/sites/{siteUrl}
		/// </summary>
		/// <param name="siteUrl">The URL of the site to add.</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sites_addAsync(string siteUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query your data with filters and parameters that you define. Returns zero or more rows grouped by the row keys that you define. You must define a date range of one or more days. When date is one of the group by values, any days without data are omitted from the result list. If you need to know which days have data, issue a broad date range query grouped by date for any metric, and see which day rows are returned.
		/// Webmasters_searchanalytics_query webmasters/v3/sites/{siteUrl}/searchAnalytics/query
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: `http://www.example.com/`.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchAnalyticsQueryResponse> Webmasters_searchanalytics_queryAsync(string siteUrl, SearchAnalyticsQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/searchAnalytics/query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchAnalyticsQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the [sitemaps-entries](/webmaster-tools/v3/sitemaps) submitted for this site, or included in the sitemap index file (if `sitemapIndex` is specified in the request).
		/// Webmasters_sitemaps_list webmasters/v3/sites/{siteUrl}/sitemaps
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: `http://www.example.com/`.</param>
		/// <param name="sitemapIndex"> A URL of a site's sitemap index. For example: `http://www.example.com/sitemapindex.xml`.</param>
		/// <returns>Successful response</returns>
		public async Task<SitemapsListResponse> Webmasters_sitemaps_listAsync(string siteUrl, string sitemapIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps&sitemapIndex=" + (sitemapIndex==null? "" : System.Uri.EscapeDataString(sitemapIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SitemapsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a sitemap from the Sitemaps report. Does not stop Google from crawling this sitemap or the URLs that were previously crawled in the deleted sitemap.
		/// Webmasters_sitemaps_delete webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: `http://www.example.com/`.</param>
		/// <param name="feedpath">The URL of the actual sitemap. For example: `http://www.example.com/sitemap.xml`.</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sitemaps_deleteAsync(string siteUrl, string feedpath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps/"+ (feedpath==null? "" : System.Uri.EscapeDataString(feedpath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a specific sitemap.
		/// Webmasters_sitemaps_get webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: `http://www.example.com/`.</param>
		/// <param name="feedpath">The URL of the actual sitemap. For example: `http://www.example.com/sitemap.xml`.</param>
		/// <returns>Successful response</returns>
		public async Task<WmxSitemap> Webmasters_sitemaps_getAsync(string siteUrl, string feedpath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps/"+ (feedpath==null? "" : System.Uri.EscapeDataString(feedpath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WmxSitemap>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submits a sitemap for a site.
		/// Webmasters_sitemaps_submit webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: `http://www.example.com/`.</param>
		/// <param name="feedpath">The URL of the actual sitemap. For example: `http://www.example.com/sitemap.xml`.</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sitemaps_submitAsync(string siteUrl, string feedpath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webmasters/v3/sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps/"+ (feedpath==null? "" : System.Uri.EscapeDataString(feedpath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
