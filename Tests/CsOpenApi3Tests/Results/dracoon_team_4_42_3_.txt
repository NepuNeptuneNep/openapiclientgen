//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Active Directory information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveDirectory
	{
		
		/// <summary>
		/// Unique name for an Active Directory configuration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Is available for all customers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isGlobalAvailable")]
		public bool IsGlobalAvailable { get; set; }
	}
	
	/// <summary>
	/// List of Active Directories
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveDirectoryAuthInfo
	{
		
		/// <summary>
		/// List of available Active Directories
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ActiveDirectory[] Items { get; set; }
	}
	
	/// <summary>
	/// Active Directory configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveDirectoryConfig
	{
		
		/// <summary>
		/// If `userImport` is set to `true`,
		///
		///the user must be member of this Active Directory group to receive a newly created DRACOON account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="adExportGroup")]
		public string AdExportGroup { get; set; }
		
		/// <summary>
		/// Unique name for an Active Directory configuration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.10.0
		///
		///DEPRECATED, will be ignored
		///
		///Determines whether a room is created for each user that is created by automatic import (like a home folder).
		///
		///Room's name will equal the user's login name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createHomeFolder")]
		public System.Nullable<System.Boolean> CreateHomeFolder { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.10.0
		///
		///DEPRECATED, will be ignored
		///
		///ID of the room in which the individual rooms for users will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeFolderParent")]
		public System.Nullable<System.Int64> HomeFolderParent { get; set; }
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Search scope of Active Directory; only users below this node can log on.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ldapUsersDomain")]
		public string LdapUsersDomain { get; set; }
		
		/// <summary>
		/// User group that is assigned to users who are created by automatic import.
		///
		///Reset with `0`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdsImportGroup")]
		public System.Nullable<System.Int64> SdsImportGroup { get; set; }
		
		/// <summary>
		/// Distinguished Name (DN) of Active Directory administrative account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverAdminName")]
		public string ServerAdminName { get; set; }
		
		/// <summary>
		/// IPv4 or IPv6 address or host name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// Port
		/// Required
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverPort")]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int ServerPort { get; set; }
		
		/// <summary>
		/// SSL finger print of Active Directory server.
		///
		///Mandatory for LDAPS connections.
		///
		///Format: `Algorithm/Fingerprint`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslFingerPrint")]
		public string SslFingerPrint { get; set; }
		
		/// <summary>
		/// Determines whether LDAPS should be used instead of plain LDAP.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useLdaps")]
		public bool UseLdaps { get; set; }
		
		/// <summary>
		/// Name of Active Directory attribute that is used as login name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userFilter")]
		public string UserFilter { get; set; }
		
		/// <summary>
		/// Determines if a DRACOON account is automatically created for a new user
		///
		///who successfully logs on with his / her AD / IDP account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userImport")]
		public bool UserImport { get; set; }
	}
	
	/// <summary>
	/// List of Active Directory configurations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveDirectoryConfigList
	{
		
		/// <summary>
		/// List of Active Directory configurations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ActiveDirectoryConfig[] Items { get; set; }
	}
	
	/// <summary>
	/// Algorithm information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlgorithmVersionInfo
	{
		
		/// <summary>
		/// Algorithm description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Algorithm status
		///
		///Derived from preference value and threshold
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlgorithmVersionInfoStatus Status { get; set; }
		
		/// <summary>
		/// Algorithm version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AlgorithmVersionInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOURAGED = 1,
	}
	
	/// <summary>
	/// Information of all available algorithms
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlgorithmVersionInfoList
	{
		
		/// <summary>
		/// List of file key algorithms
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileKeyAlgorithms")]
		public AlgorithmVersionInfo[] FileKeyAlgorithms { get; set; }
		
		/// <summary>
		/// List of key pair algorithms
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyPairAlgorithms")]
		public AlgorithmVersionInfo[] KeyPairAlgorithms { get; set; }
	}
	
	/// <summary>
	/// Ranged list of attributes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributesResponse
	{
		
		/// <summary>
		/// List of key-value pairs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyValueEntry[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Key-value pair
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyValueEntry
	{
		
		/// <summary>
		/// Entry key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Entry value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Range information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Range
	{
		
		/// <summary>
		/// Range limit. Maximum 500.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public long Limit { get; set; }
		
		/// <summary>
		/// Range offset
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public long Offset { get; set; }
		
		/// <summary>
		/// Total items available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public long Total { get; set; }
	}
	
	/// <summary>
	/// Audit node info
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditNodeInfo
	{
		
		/// <summary>
		/// Number of direct children
		///
		///(no recursion; for rooms only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countChildren")]
		public System.Nullable<System.Int64> CountChildren { get; set; }
		
		/// <summary>
		/// Node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public long NodeId { get; set; }
		
		/// <summary>
		/// Encryption state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIsEncrypted")]
		public System.Nullable<System.Boolean> NodeIsEncrypted { get; set; }
		
		/// <summary>
		/// Node name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeName")]
		public string NodeName { get; set; }
		
		/// <summary>
		/// Parent room ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeParentId")]
		public System.Nullable<System.Int64> NodeParentId { get; set; }
		
		/// <summary>
		/// Parent node path
		///
		///`/` if node is a root node (room)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeParentPath")]
		public string NodeParentPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditNodeInfoResponse
	{
		
		/// <summary>
		/// List of audit node info items
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AuditNodeInfo[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Audit node report
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditNodeResponse
	{
		
		/// <summary>
		/// List of assigned users with permissions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="auditUserPermissionList")]
		public AuditUserPermission[] AuditUserPermissionList { get; set; }
		
		/// <summary>
		/// Number of direct children
		///
		///(no recursion; for rooms only)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeCntChildren")]
		public int NodeCntChildren { get; set; }
		
		/// <summary>
		/// Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCreatedAt")]
		public System.Nullable<System.DateTimeOffset> NodeCreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCreatedBy")]
		public UserInfo NodeCreatedBy { get; set; }
		
		/// <summary>
		/// Is activities log active (for rooms only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeHasActivitiesLog")]
		public System.Nullable<System.Boolean> NodeHasActivitiesLog { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.10.0
		///
		///Is recycle bin active (for rooms only)
		///
		///Recycle bin is always on (disabling is not possible).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeHasRecycleBin")]
		public System.Nullable<System.Boolean> NodeHasRecycleBin { get; set; }
		
		/// <summary>
		/// Node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public long NodeId { get; set; }
		
		/// <summary>
		/// Encryption state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIsEncrypted")]
		public System.Nullable<System.Boolean> NodeIsEncrypted { get; set; }
		
		/// <summary>
		/// Node name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeName")]
		public string NodeName { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeParentId")]
		public System.Nullable<System.Int64> NodeParentId { get; set; }
		
		/// <summary>
		/// Parent node path
		///
		///`/` if node is a root node (room)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeParentPath")]
		public string NodeParentPath { get; set; }
		
		/// <summary>
		/// Quota in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeQuota")]
		public System.Nullable<System.Int64> NodeQuota { get; set; }
		
		/// <summary>
		/// Retention period for deleted nodes in days
		/// Minimum: 0
		/// Maximum: 9999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeRecycleBinRetentionPeriod")]
		[System.ComponentModel.DataAnnotations.Range(0, 9999)]
		public System.Nullable<System.Int32> NodeRecycleBinRetentionPeriod { get; set; }
		
		/// <summary>
		/// Node size in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeSize")]
		public System.Nullable<System.Int64> NodeSize { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeUpdatedAt")]
		public System.Nullable<System.DateTimeOffset> NodeUpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeUpdatedBy")]
		public UserInfo NodeUpdatedBy { get; set; }
	}
	
	/// <summary>
	/// Audit user permissions report
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditUserPermission
	{
		
		/// <summary>
		/// Node permissions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public NodePermissions Permissions { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userFirstName")]
		public string UserFirstName { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userLastName")]
		public string UserLastName { get; set; }
		
		/// <summary>
		/// User login name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userLogin")]
		public string UserLogin { get; set; }
	}
	
	/// <summary>
	/// Node permissions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodePermissions
	{
		
		/// <summary>
		/// User / Group may update metadata of nodes: rename files and folders, change classification, etc.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="change")]
		public bool Change { get; set; }
		
		/// <summary>
		/// User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="create")]
		public bool Create { get; set; }
		
		/// <summary>
		/// User / Group may overwrite and remove files / folders, move files from this room.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public bool Delete { get; set; }
		
		/// <summary>
		/// User / Group may permanently remove files / folders from the recycle bin.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleteRecycleBin")]
		public bool DeleteRecycleBin { get; set; }
		
		/// <summary>
		/// User / Group may grant all of the above permissions to other users and groups independently,
		///
		///may update room metadata and create / update / delete subordinary rooms, has all permissions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="manage")]
		public bool Manage { get; set; }
		
		/// <summary>
		/// User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="manageDownloadShare")]
		public bool ManageDownloadShare { get; set; }
		
		/// <summary>
		/// User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="manageUploadShare")]
		public bool ManageUploadShare { get; set; }
		
		/// <summary>
		/// User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="read")]
		public bool Read { get; set; }
		
		/// <summary>
		/// User / Group may look up files / folders in the recycle bin.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="readRecycleBin")]
		public bool ReadRecycleBin { get; set; }
		
		/// <summary>
		/// User / Group may restore files / folders from recycle bin - room permissions required.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="restoreRecycleBin")]
		public bool RestoreRecycleBin { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserInfo
	{
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Avatar UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avatarUuid")]
		public string AvatarUuid { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Display name
		///
		///use other fields from `UserInfo` instead to combine a display name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///User first name (mandatory if `userType` is `internal`)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///User last name (mandatory if `userType` is `internal`)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username (only returned for `internal` users)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///User type:
		///
		///* `internal` - ordinary DRACOON user
		///
		///* `external` - external user without DRACOON account
		///
		///* `system` - system user (non human &#128125;)
		///
		///* `deleted` - deleted DRACOON user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public UserInfoUserType UserType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserInfoUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal")]
		_internal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		external = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	/// <summary>
	/// Authentication settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthConfig
	{
		
		/// <summary>
		/// List of authentication methods
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public AuthMethod[] AuthMethods { get; set; }
	}
	
	/// <summary>
	/// Authentication method
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthMethod
	{
		
		/// <summary>
		/// Is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Authentication methods:
		///
		///* `basic`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Priority (smaller values have higher priority)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public int Priority { get; set; }
	}
	
	/// <summary>
	/// Auth token restrictions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthTokenRestrictions
	{
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Restricted OAuth access token validity (in seconds)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTokenValidity")]
		public System.Nullable<System.Int32> AccessTokenValidity { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Restricted OAuth refresh token validity (in seconds)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshTokenValidity")]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Defines if OAuth token restrictions are enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictionEnabled")]
		public System.Nullable<System.Boolean> RestrictionEnabled { get; set; }
	}
	
	/// <summary>
	/// User avatar information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Avatar
	{
		
		/// <summary>
		/// Avatar URI
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avatarUri")]
		public string AvatarUri { get; set; }
		
		/// <summary>
		/// Avatar UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avatarUuid")]
		public string AvatarUuid { get; set; }
		
		/// <summary>
		/// Determines whether user updated his / her avatar with own image
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isCustomAvatar")]
		public bool IsCustomAvatar { get; set; }
	}
	
	/// <summary>
	/// List of user IDs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChangeGroupMembersRequest
	{
		
		/// <summary>
		/// List of user IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public int[] Ids { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a node comment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChangeNodeCommentRequest
	{
		
		/// <summary>
		/// Comment text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Request model for updating user's password
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChangeUserPasswordRequest
	{
		
		/// <summary>
		/// New password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// Old password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oldPassword")]
		public string OldPassword { get; set; }
	}
	
	/// <summary>
	/// Password character rules
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CharacterRules
	{
		
		/// <summary>
		/// Characters which a password must contain:
		///
		///* `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)
		///
		///* `uppercase` - at least one uppercase character
		///
		///* `lowercase` - at least one lowercase character
		///
		///* `numeric` - at least one numeric character
		///
		///* `special` - at least one special character (letters and digits excluded)
		///
		///* `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)
		///
		///* `none` - none of the above
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mustContainCharacters")]
		public string[] MustContainCharacters { get; set; }
		
		/// <summary>
		/// Number of characteristics to enforce
		///
		///e.g. from `["uppercase", "lowercase", "numeric", "special"]`
		///
		///all 4 character sets can be enforced; but also only 2 of them
		/// Required
		/// Minimum: 0
		/// Maximum: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfCharacteristicsToEnforce")]
		[System.ComponentModel.DataAnnotations.Range(0, 4)]
		public int NumberOfCharacteristicsToEnforce { get; set; }
	}
	
	/// <summary>
	/// Chunk upload response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChunkUploadResponse
	{
		
		/// <summary>
		/// Hash value of transferred chunk
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// Chunk size
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public long Size { get; set; }
	}
	
	/// <summary>
	/// Set of classification policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClassificationPoliciesConfig
	{
		
		/// <summary>
		/// Shares classification policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareClassificationPolicies")]
		public ShareClassificationPolicies ShareClassificationPolicies { get; set; }
	}
	
	/// <summary>
	/// Shares classification policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShareClassificationPolicies
	{
		
		/// <summary>
		/// &#128640; Since v4.30.0
		///
		///Minimum classification that causes download shares to require a password. `0` means no password will be enforced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationRequiresSharePassword")]
		public System.Nullable<ShareClassificationPoliciesClassificationRequiresSharePassword> ClassificationRequiresSharePassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ShareClassificationPoliciesClassificationRequiresSharePassword
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	/// <summary>
	/// Node comment information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Comment
	{
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// Comment ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Determines whether comment was edited or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isChanged")]
		public bool IsChanged { get; set; }
		
		/// <summary>
		/// Determines whether comment was deleted or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public bool IsDeleted { get; set; }
		
		/// <summary>
		/// Comment text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Modification date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	/// <summary>
	/// List of node comments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommentList
	{
		
		/// <summary>
		/// List of node comments
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Request model for completing a S3 file upload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteS3FileUploadRequest
	{
		
		/// <summary>
		/// File key information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileKey")]
		public FileKey FileKey { get; set; }
		
		/// <summary>
		/// New file name to store with
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Preserve Download Share Links and point them to the new node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepShareLinks")]
		public System.Nullable<System.Boolean> KeepShareLinks { get; set; }
		
		/// <summary>
		/// List of S3 file upload parts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public S3FileUploadPart[] Parts { get; set; }
		
		/// <summary>
		/// Node conflict resolution strategy:
		///
		///* `autorename`
		///
		///* `overwrite`
		///
		///* `fail`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public System.Nullable<CompleteS3FileUploadRequestResolutionStrategy> ResolutionStrategy { get; set; }
	}
	
	/// <summary>
	/// File key information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileKey
	{
		
		/// <summary>
		/// Initial vector
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iv")]
		public string Iv { get; set; }
		
		/// <summary>
		/// Encryption key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Authentication tag
		///
		///(needed with authenticated encryption)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// Version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// S3 file upload part information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3FileUploadPart
	{
		
		/// <summary>
		/// Corresponding part ETag
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partEtag")]
		public string PartEtag { get; set; }
		
		/// <summary>
		/// Corresponding part number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public int PartNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompleteS3FileUploadRequestResolutionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autorename = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		overwrite = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fail = 2,
	}
	
	/// <summary>
	/// Request model for completing a S3 file upload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteS3ShareUploadRequest
	{
		
		/// <summary>
		/// List of S3 file upload parts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parts")]
		public S3FileUploadPart[] Parts { get; set; }
		
		/// <summary>
		/// List of user file keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFileKeyList")]
		public UserFileKey[] UserFileKeyList { get; set; }
	}
	
	/// <summary>
	/// User file key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserFileKey
	{
		
		/// <summary>
		/// File key information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileKey")]
		public FileKey FileKey { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
	}
	
	/// <summary>
	/// The body must be empty if public upload token is used.
	///
	///The `resolutionStrategy` in that case will be always `autorename`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteUploadRequest
	{
		
		/// <summary>
		/// File key information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileKey")]
		public FileKey FileKey { get; set; }
		
		/// <summary>
		/// New file name to store with
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Preserve Download Share Links and point them to the new node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepShareLinks")]
		public System.Nullable<System.Boolean> KeepShareLinks { get; set; }
		
		/// <summary>
		/// Node conflict resolution strategy:
		///
		///* `autorename`
		///
		///* `overwrite`
		///
		///* `fail`
		/// </summary>
		[System.ComponentModel.DefaultValue(CompleteS3FileUploadRequestResolutionStrategy.autorename)]
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public CompleteS3FileUploadRequestResolutionStrategy ResolutionStrategy { get; set; } = CompleteS3FileUploadRequestResolutionStrategy.autorename;
		
		/// <summary>
		/// Mandatory for encrypted shares
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFileKeyList")]
		public UserFileKeyList UserFileKeyList { get; set; }
	}
	
	/// <summary>
	/// Mandatory for encrypted shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserFileKeyList
	{
		
		/// <summary>
		/// List of user file keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserFileKey[] Items { get; set; }
	}
	
	/// <summary>
	/// List of key-value pairs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigOptionList
	{
		
		/// <summary>
		/// List of key-value pairs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyValueEntry[] Items { get; set; }
	}
	
	/// <summary>
	/// Request model for configuring a room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigRoomRequest
	{
		
		/// <summary>
		/// List of group ids
		///
		///A room requires at least one admin (user or group)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminGroupIds")]
		public int[] AdminGroupIds { get; set; }
		
		/// <summary>
		/// List of user ids
		///
		///A room requires at least one admin (user or group)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminIds")]
		public int[] AdminIds { get; set; }
		
		/// <summary>
		/// Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		///
		///
		///
		///Provided (or default) classification is taken from room
		///
		///when file gets uploaded without any classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<ConfigRoomRequestClassification> Classification { get; set; }
		
		/// <summary>
		/// Is activities log active (for rooms only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasActivitiesLog")]
		public System.Nullable<System.Boolean> HasActivitiesLog { get; set; }
		
		/// <summary>
		/// Inherit permissions from parent room
		///
		///(default: `false` if `parentId` is `0`; otherwise: `true`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritPermissions")]
		public System.Nullable<System.Boolean> InheritPermissions { get; set; }
		
		/// <summary>
		/// Behaviour when new users are added to the group:
		///
		///* `autoallow`
		///
		///* `pending`
		///
		///
		///
		///Only relevant if `adminGroupIds` has items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newGroupMemberAcceptance")]
		public System.Nullable<ConfigRoomRequestNewGroupMemberAcceptance> NewGroupMemberAcceptance { get; set; }
		
		/// <summary>
		/// Retention period for deleted nodes in days
		/// Minimum: 0
		/// Maximum: 9999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recycleBinRetentionPeriod")]
		[System.ComponentModel.DataAnnotations.Range(0, 9999)]
		public System.Nullable<System.Int32> RecycleBinRetentionPeriod { get; set; }
		
		/// <summary>
		/// Take over existing permissions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="takeOverPermissions")]
		public System.Nullable<System.Boolean> TakeOverPermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConfigRoomRequestClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConfigRoomRequestNewGroupMemberAcceptance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoallow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
	}
	
	/// <summary>
	/// Copied node information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyNode
	{
		
		/// <summary>
		/// Source node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// New node name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	/// <summary>
	/// Request model for copying nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyNodesRequest
	{
		
		/// <summary>
		/// List of nodes to be copied
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CopyNode[] Items { get; set; }
		
		/// <summary>
		/// Preserve Download Share Links and point them to the new node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepShareLinks")]
		public System.Nullable<System.Boolean> KeepShareLinks { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.5.0
		///
		///Node IDs
		///
		///Please use `items` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIds")]
		public int[] NodeIds { get; set; }
		
		/// <summary>
		/// Node conflict resolution strategy:
		///
		///* `autorename`
		///
		///* `overwrite`
		///
		///* `fail`
		/// </summary>
		[System.ComponentModel.DefaultValue(CompleteS3FileUploadRequestResolutionStrategy.autorename)]
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public CompleteS3FileUploadRequestResolutionStrategy ResolutionStrategy { get; set; } = CompleteS3FileUploadRequestResolutionStrategy.autorename;
	}
	
	/// <summary>
	/// Request model for creating an Active Directory configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateActiveDirectoryConfigRequest
	{
		
		/// <summary>
		/// If `userImport` is set to `true`,
		///
		///the user must be member of this Active Directory group to receive a newly created DRACOON account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adExportGroup")]
		public string AdExportGroup { get; set; }
		
		/// <summary>
		/// Unique name for an Active Directory configuration
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// DEPRECATED, will be ignored
		///
		///Determines whether a room is created for each user that is created by automatic import (like a home folder).
		///
		///Room's name will equal the user's login name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createHomeFolder")]
		public System.Nullable<System.Boolean> CreateHomeFolder { get; set; }
		
		/// <summary>
		/// DEPRECATED, will be ignored
		///
		///ID of the room in which the individual rooms for users will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeFolderParent")]
		public System.Nullable<System.Int64> HomeFolderParent { get; set; }
		
		/// <summary>
		/// Search scope of Active Directory; only users below this node can log on.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ldapUsersDomain")]
		public string LdapUsersDomain { get; set; }
		
		/// <summary>
		/// User group that is assigned to users who are created by automatic import.
		///
		///Reset with `0`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdsImportGroup")]
		public System.Nullable<System.Int64> SdsImportGroup { get; set; }
		
		/// <summary>
		/// Distinguished Name (DN) of Active Directory administrative account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverAdminName")]
		public string ServerAdminName { get; set; }
		
		/// <summary>
		/// Password of Active Directory administrative account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverAdminPassword")]
		public string ServerAdminPassword { get; set; }
		
		/// <summary>
		/// IPv4 or IPv6 address or host name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// Port
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverPort")]
		public int ServerPort { get; set; }
		
		/// <summary>
		/// SSL finger print of Active Directory server.
		///
		///Mandatory for LDAPS connections.
		///
		///Format: `Algorithm/Fingerprint`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslFingerPrint")]
		public string SslFingerPrint { get; set; }
		
		/// <summary>
		/// Determines whether LDAPS should be used instead of plain LDAP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useLdaps")]
		public System.Nullable<System.Boolean> UseLdaps { get; set; }
		
		/// <summary>
		/// Name of Active Directory attribute that is used as login name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userFilter")]
		public string UserFilter { get; set; }
		
		/// <summary>
		/// Determines if a DRACOON account is automatically created for a new user
		///
		///who successfully logs on with his / her AD / IDP account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImport")]
		public System.Nullable<System.Boolean> UserImport { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a Download Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDownloadShareRequest
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Language tag for messages to creator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorLanguage")]
		public string CreatorLanguage { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// File key information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileKey")]
		public FileKey FileKey { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Internal notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalNotes")]
		public string InternalNotes { get; set; }
		
		/// <summary>
		/// Key pair container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyPair")]
		public UserKeyPairContainer KeyPair { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Notification email content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailBody")]
		public string MailBody { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient email addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailRecipients")]
		public string MailRecipients { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Notification email subject
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailSubject")]
		public string MailSubject { get; set; }
		
		/// <summary>
		/// Max allowed downloads
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDownloads")]
		public System.Nullable<System.Int32> MaxDownloads { get; set; }
		
		/// <summary>
		/// Alias name
		///
		///(default: name of the shared node)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Source node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public long NodeId { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Notify creator on every download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyCreator")]
		public System.Nullable<System.Boolean> NotifyCreator { get; set; }
		
		/// <summary>
		/// Access password, not allowed for encrypted shares
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Language tag for messages to receiver
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Notify recipients via email
		///
		///Please use `POST /shares/downloads/{share_id}/email` API instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendMail")]
		public System.Nullable<System.Boolean> SendMail { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Send share password via SMS
		///
		///Please use `textMessageRecipients` attribute instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendSms")]
		public System.Nullable<System.Boolean> SendSms { get; set; }
		
		/// <summary>
		/// Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient MSISDNs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsRecipients")]
		public string SmsRecipients { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///List of recipient FQTNs
		///
		///E.123 / E.164 Format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textMessageRecipients")]
		public string[] TextMessageRecipients { get; set; }
	}
	
	/// <summary>
	/// Expiration information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectExpiration
	{
		
		/// <summary>
		/// enabled / disabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableExpiration")]
		public bool EnableExpiration { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
	}
	
	/// <summary>
	/// Key pair container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserKeyPairContainer
	{
		
		/// <summary>
		/// Private key container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateKeyContainer")]
		public PrivateKeyContainer PrivateKeyContainer { get; set; }
		
		/// <summary>
		/// Public key container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicKeyContainer")]
		public PublicKeyContainer PublicKeyContainer { get; set; }
	}
	
	/// <summary>
	/// Private key container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateKeyContainer
	{
		
		/// <summary>
		/// &#128640; Since v4.24.0
		///
		///Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.24.0
		///
		///Created by user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<System.Int64> CreatedBy { get; set; }
		
		/// <summary>
		/// Private key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// Version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Public key container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicKeyContainer
	{
		
		/// <summary>
		/// &#128640; Since v4.24.0
		///
		///Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.24.0
		///
		///Created by user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public System.Nullable<System.Int64> CreatedBy { get; set; }
		
		/// <summary>
		/// Public key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		/// <summary>
		/// Version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Request model for creating an upload channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFileUploadRequest
	{
		
		/// <summary>
		/// Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		///
		///
		///
		///(default: classification from parent room)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<CreateFileUploadRequestClassification> Classification { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.15.0
		///
		///Upload direct to S3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directS3Upload")]
		public System.Nullable<System.Boolean> DirectS3Upload { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// File name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public long ParentId { get; set; }
		
		/// <summary>
		/// File size in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateFileUploadRequestClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	/// <summary>
	/// Upload channel information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFileUploadResponse
	{
		
		/// <summary>
		/// Upload token
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Upload (channel) ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		/// <summary>
		/// (public) Upload URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadUrl")]
		public string UploadUrl { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a folder
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFolderRequest
	{
		
		/// <summary>
		/// &#128640; Since v4.30.0
		///
		///Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		///
		///
		///
		///Provided (or default) classification is taken from room
		///
		///when file gets uploaded without any classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<CreateFolderRequestClassification> Classification { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public long ParentId { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateFolderRequestClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	/// <summary>
	/// Request model for creating a group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGroupRequest
	{
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// Group name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a key pair
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateKeyPairRequest
	{
		
		/// <summary>
		/// Private key container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPrivateKey")]
		public PrivateKeyContainer PreviousPrivateKey { get; set; }
		
		/// <summary>
		/// Private key container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateKeyContainer")]
		public PrivateKeyContainer PrivateKeyContainer { get; set; }
		
		/// <summary>
		/// Public key container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicKeyContainer")]
		public PublicKeyContainer PublicKeyContainer { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a node comment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNodeCommentRequest
	{
		
		/// <summary>
		/// Comment text
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Request model for creating an OAuth client
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateOAuthClientRequest
	{
		
		/// <summary>
		/// Validity of the access token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTokenValidity")]
		public System.Nullable<System.Int32> AccessTokenValidity { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Validity of the approval interval in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalValidity")]
		public System.Nullable<System.Int32> ApprovalValidity { get; set; }
		
		/// <summary>
		/// ID of the OAuth client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Name, which is shown at the client configuration and authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientName")]
		public string ClientName { get; set; }
		
		/// <summary>
		/// Secret, which client uses at authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Determines whether client is a confidential or public client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientType")]
		public System.Nullable<CreateOAuthClientRequestClientType> ClientType { get; set; }
		
		/// <summary>
		/// Authorized grant types
		///
		///* `authorization_code`
		///
		///* `implicit`
		///
		///* `password`
		///
		///* `client_credentials`
		///
		///* `refresh_token`
		///
		///
		///
		///cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grantTypes")]
		public string[] GrantTypes { get; set; }
		
		/// <summary>
		/// URIs, to which a user is redirected after authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirectUris")]
		public string[] RedirectUris { get; set; }
		
		/// <summary>
		/// Validity of the refresh token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshTokenValidity")]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateOAuthClientRequestClientType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confidential = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
	}
	
	/// <summary>
	/// Request model for creating an OpenID Connect IDP configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateOpenIdIdpConfigRequest
	{
		
		/// <summary>
		/// URL of the authorization endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorizationEndPointUrl")]
		public string AuthorizationEndPointUrl { get; set; }
		
		/// <summary>
		/// ID of the OpenID client
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Secret, which client uses at authentication.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Name of the claim which is used for the user mapping fallback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackMappingClaim")]
		public string FallbackMappingClaim { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Flow, which is used at authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public System.Nullable<CreateOpenIdIdpConfigRequestFlow> Flow { get; set; }
		
		/// <summary>
		/// Issuer identifier of the IDP
		///
		///The value is a case sensitive URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// URL of the JWKS endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jwksEndPointUrl")]
		public string JwksEndPointUrl { get; set; }
		
		/// <summary>
		/// Name of the claim which is used for the user mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mappingClaim")]
		public string MappingClaim { get; set; }
		
		/// <summary>
		/// Name of the IDP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// PKCE code challenge method.
		///
		///cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
		/// </summary>
		[System.ComponentModel.DefaultValue("plain")]
		[System.Runtime.Serialization.DataMember(Name="pkceChallengeMethod")]
		public string PkceChallengeMethod { get; set; } = "plain";
		
		/// <summary>
		/// Determines whether PKCE is enabled.
		///
		///cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkceEnabled")]
		public System.Nullable<System.Boolean> PkceEnabled { get; set; }
		
		/// <summary>
		/// URIs, to which a user is redirected after authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="redirectUris")]
		public string[] RedirectUris { get; set; }
		
		/// <summary>
		/// List of requested scopes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// URL of the token endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenEndPointUrl")]
		public string TokenEndPointUrl { get; set; }
		
		/// <summary>
		/// Determines if a DRACOON account is automatically created for a new user
		///
		///who successfully logs on with his / her AD / IDP account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImportEnabled")]
		public System.Nullable<System.Boolean> UserImportEnabled { get; set; }
		
		/// <summary>
		/// User group that is assigned to users who are created by automatic import.
		///
		///Reset with `0`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImportGroup")]
		public System.Nullable<System.Int64> UserImportGroup { get; set; }
		
		/// <summary>
		/// URL of the user info endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userInfoEndPointUrl")]
		public string UserInfoEndPointUrl { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.23.0
		///
		///Source, which is used to get user information at the import or update of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInfoSource")]
		public System.Nullable<CreateOpenIdIdpConfigRequestUserInfoSource> UserInfoSource { get; set; }
		
		/// <summary>
		/// URL of the user management UI.
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userManagementUrl")]
		public string UserManagementUrl { get; set; }
		
		/// <summary>
		/// Determines if the DRACOON account is updated with data from AD / IDP.
		///
		///For OpenID Connect, the scopes `email` and `profile` are needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userUpdateEnabled")]
		public System.Nullable<System.Boolean> UserUpdateEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateOpenIdIdpConfigRequestFlow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authorization_code = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hybrid = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateOpenIdIdpConfigRequestUserInfoSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user_info_endpoint = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id_token = 1,
	}
	
	/// <summary>
	/// Request model for creating a room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateRoomRequest
	{
		
		/// <summary>
		/// List of group ids
		///
		///A room requires at least one admin (user or group)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminGroupIds")]
		public int[] AdminGroupIds { get; set; }
		
		/// <summary>
		/// List of user ids
		///
		///A room requires at least one admin (user or group)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminIds")]
		public int[] AdminIds { get; set; }
		
		/// <summary>
		/// Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		///
		///
		///
		///Provided (or default) classification is taken from room
		///
		///when file gets uploaded without any classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<CreateRoomRequestClassification> Classification { get; set; }
		
		/// <summary>
		/// Is activities log active (for rooms only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasActivitiesLog")]
		public System.Nullable<System.Boolean> HasActivitiesLog { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.10.0
		///
		///Is recycle bin active (for rooms only)
		///
		///Recycle bin is always on (disabling is not possible).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasRecycleBin")]
		public System.Nullable<System.Boolean> HasRecycleBin { get; set; }
		
		/// <summary>
		/// Inherit permissions from parent room
		///
		///(default: `false` if `parentId` is `0`; otherwise: `true`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritPermissions")]
		public System.Nullable<System.Boolean> InheritPermissions { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Behaviour when new users are added to the group:
		///
		///* `autoallow`
		///
		///* `pending`
		///
		///
		///
		///Only relevant if `adminGroupIds` has items.
		/// </summary>
		[System.ComponentModel.DefaultValue(ConfigRoomRequestNewGroupMemberAcceptance.autoallow)]
		[System.Runtime.Serialization.DataMember(Name="newGroupMemberAcceptance")]
		public ConfigRoomRequestNewGroupMemberAcceptance NewGroupMemberAcceptance { get; set; } = ConfigRoomRequestNewGroupMemberAcceptance.autoallow;
		
		/// <summary>
		/// User notes
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Parent room ID or `null` (not 0) to create a top level room
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Quota in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public System.Nullable<System.Int64> Quota { get; set; }
		
		/// <summary>
		/// Retention period for deleted nodes in days
		/// Minimum: 0
		/// Maximum: 9999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recycleBinRetentionPeriod")]
		[System.ComponentModel.DataAnnotations.Range(0, 9999)]
		public System.Nullable<System.Int32> RecycleBinRetentionPeriod { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateRoomRequestClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	/// <summary>
	/// Request model for creating an upload channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateShareUploadChannelRequest
	{
		
		/// <summary>
		/// &#128640; Since v4.15.0
		///
		///Upload direct to S3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directS3Upload")]
		public System.Nullable<System.Boolean> DirectS3Upload { get; set; }
		
		/// <summary>
		/// File name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// File size in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	/// <summary>
	/// Upload channel information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateShareUploadChannelResponse
	{
		
		/// <summary>
		/// Upload (channel) ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadId")]
		public string UploadId { get; set; }
		
		/// <summary>
		/// (public) Upload URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uploadUrl")]
		public string UploadUrl { get; set; }
	}
	
	/// <summary>
	/// Request model for creating an Upload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUploadShareRequest
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Language tag for messages to creator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorLanguage")]
		public string CreatorLanguage { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// Number of days after which uploaded files expire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesExpiryPeriod")]
		public System.Nullable<System.Int32> FilesExpiryPeriod { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Internal notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalNotes")]
		public string InternalNotes { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Notification email content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailBody")]
		public string MailBody { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient email addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailRecipients")]
		public string MailRecipients { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Notification email subject
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mailSubject")]
		public string MailSubject { get; set; }
		
		/// <summary>
		/// Maximal total size of uploaded files (in bytes)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSize")]
		public System.Nullable<System.Int64> MaxSize { get; set; }
		
		/// <summary>
		/// Maximal amount of files to upload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSlots")]
		public System.Nullable<System.Int32> MaxSlots { get; set; }
		
		/// <summary>
		/// Alias name
		///
		///(default: name of the shared node)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Notify creator on every upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyCreator")]
		public System.Nullable<System.Boolean> NotifyCreator { get; set; }
		
		/// <summary>
		/// Password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Language tag for messages to receiver
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Notify recipients via email
		///
		///Please use `POST /shares/uploads/{share_id}/email` API instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendMail")]
		public System.Nullable<System.Boolean> SendMail { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Send share password via SMS
		///
		///Please use `textMessageRecipients` attribute instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendSms")]
		public System.Nullable<System.Boolean> SendSms { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
		
		/// <summary>
		/// Allow display of already uploaded files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showUploadedFiles")]
		public System.Nullable<System.Boolean> ShowUploadedFiles { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient MSISDNs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsRecipients")]
		public string SmsRecipients { get; set; }
		
		/// <summary>
		/// Target room or folder ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public long TargetId { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///List of recipient FQTNs
		///
		///E.123 / E.164 Format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textMessageRecipients")]
		public string[] TextMessageRecipients { get; set; }
	}
	
	/// <summary>
	/// Request model for creating an user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserRequest
	{
		
		/// <summary>
		/// User Authentication Data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authData")]
		public UserAuthData AuthData { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Authentication methods:
		///
		///* `sql`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		///
		///use `authData` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public UserAuthMethod[] AuthMethods { get; set; }
		
		/// <summary>
		/// Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		///
		///Do NOT use `gender`! It will be ignored.
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///Determines whether user has the role NONMEMBER_VIEWER
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNonmemberViewer")]
		public System.Nullable<System.Boolean> IsNonmemberViewer { get; set; }
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Multi-factor authentication configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaConfig")]
		public MfaConfig MfaConfig { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Determines whether user has to change his / her initial password.
		///
		///use `authDate.mustChangePassword` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needsToChangePassword")]
		public System.Nullable<System.Boolean> NeedsToChangePassword { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.9.0
		///
		///Notify user about his new account
		///
		///* default: `true` for `basic` auth type
		///
		///* default: `false` for `active_directory`, `openid` and `radius` auth types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyUser")]
		public System.Nullable<System.Boolean> NotifyUser { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///An initial password may be preset
		///
		///use `authData` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// IETF language tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// User Authentication Data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAuthData
	{
		
		/// <summary>
		/// ID of the user's Active Directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adConfigId")]
		public System.Nullable<System.Int32> AdConfigId { get; set; }
		
		/// <summary>
		/// User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Authentication method
		///
		///
		///
		///Authentication methods:
		///
		///* `basic`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Determines whether user has to change his / her password
		///
		///* default: `true` for `basic` auth type
		///
		///* default: `false` for `active_directory`, `openid` and `radius` auth types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustChangePassword")]
		public System.Nullable<System.Boolean> MustChangePassword { get; set; }
		
		/// <summary>
		/// ID of the user's OIDC provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oidConfigId")]
		public System.Nullable<System.Int32> OidConfigId { get; set; }
		
		/// <summary>
		/// Password (only relevant for `basic` authentication type)
		///
		///*NOT* your Active Directory, OpenID or RADIUS password!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Authentication method
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAuthMethod
	{
		
		/// <summary>
		/// Authentication method
		///
		///
		///
		///Authentication methods:
		///
		///* `basic`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authId")]
		public string AuthId { get; set; }
		
		/// <summary>
		/// Is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Authentication method options
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public KeyValueEntry[] Options { get; set; }
	}
	
	/// <summary>
	/// Multi-factor authentication configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MfaConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="mfaEnforced")]
		public System.Nullable<System.Boolean> MfaEnforced { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a webhook
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWebhookRequest
	{
		
		/// <summary>
		/// List of names of event types
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTypeNames")]
		public string[] EventTypeNames { get; set; }
		
		/// <summary>
		/// Is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Secret; used for event message signatures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// If set to true, an example event is being created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerExampleEvent")]
		public System.Nullable<System.Boolean> TriggerExampleEvent { get; set; }
		
		/// <summary>
		/// URL (must begin with the `HTTPS` scheme)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Customer information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Customer
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.8.0
		///
		///Customer activation code string:
		///
		///* valid only for types `free` and `demo`
		///
		///* for `pay` customers it is empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationCode")]
		public string ActivationCode { get; set; }
		
		/// <summary>
		/// Number of guest user accounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cntGuestUser")]
		public int CntGuestUser { get; set; }
		
		/// <summary>
		/// Number of internal user accounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cntInternalUser")]
		public int CntInternalUser { get; set; }
		
		/// <summary>
		/// Company name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// List of customer attributes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerAttributes")]
		public CustomerAttributes CustomerAttributes { get; set; }
		
		/// <summary>
		/// Customer type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerContractType")]
		public CustomerCustomerContractType CustomerContractType { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.21.0
		///
		///Customer UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerUuid")]
		public string CustomerUuid { get; set; }
		
		/// <summary>
		/// Unique identifier for the customer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Customer is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///All users of this customer will be blocked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// Date of last seen login for the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginAt")]
		public System.Nullable<System.DateTimeOffset> LastLoginAt { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Customer lock status:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///Please use `isLocked` instead.
		///
		///All users of this customer will be blocked and can not login anymore.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public bool LockStatus { get; set; } = false;
		
		/// <summary>
		/// Provider customer ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerCustomerId")]
		public string ProviderCustomerId { get; set; }
		
		/// <summary>
		/// Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quotaMax")]
		public long QuotaMax { get; set; }
		
		/// <summary>
		/// Used amount of disc space in bytes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quotaUsed")]
		public long QuotaUsed { get; set; }
		
		/// <summary>
		/// Number of days left for trial period (relevant only for type `demo`)
		///
		///(not used)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialDaysLeft")]
		public System.Nullable<System.Int32> TrialDaysLeft { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// Maximal number of users
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userMax")]
		public int UserMax { get; set; }
		
		/// <summary>
		/// Number of users which are already allocated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userUsed")]
		public int UserUsed { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.19.0
		///
		///Maximal number of webhooks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhooksMax")]
		public System.Nullable<System.Int64> WebhooksMax { get; set; }
	}
	
	/// <summary>
	/// List of customer attributes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerAttributes
	{
		
		/// <summary>
		/// List of customer attributes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyValueEntry[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomerCustomerContractType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		demo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		free = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pay = 2,
	}
	
	/// <summary>
	/// Customer information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerData
	{
		
		/// <summary>
		/// User accounts limit
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountsLimit")]
		public int AccountsLimit { get; set; }
		
		/// <summary>
		/// User accounts used
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountsUsed")]
		public int AccountsUsed { get; set; }
		
		/// <summary>
		/// Number of guest user accounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cntGuestUser")]
		public int CntGuestUser { get; set; }
		
		/// <summary>
		/// Number of internal user accounts
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cntInternalUser")]
		public int CntInternalUser { get; set; }
		
		/// <summary>
		/// Clientside encryption for customer enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerEncryptionEnabled")]
		public bool CustomerEncryptionEnabled { get; set; }
		
		/// <summary>
		/// Unique identifier for the customer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Customer is Provider Customer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isProviderCustomer")]
		public bool IsProviderCustomer { get; set; }
		
		/// <summary>
		/// Customer name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Space limit (in bytes). -1 for unlimited
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceLimit")]
		public long SpaceLimit { get; set; }
		
		/// <summary>
		/// Space used (in bytes)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="spaceUsed")]
		public long SpaceUsed { get; set; }
	}
	
	/// <summary>
	/// List of customers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerList
	{
		
		/// <summary>
		/// List of customers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Customer[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Request model for setting the customer settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerSettingsRequest
	{
		
		/// <summary>
		/// Homeroom Parent Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomParentName")]
		public string HomeRoomParentName { get; set; }
		
		/// <summary>
		/// Homeroom Quota in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomQuota")]
		public System.Nullable<System.Int64> HomeRoomQuota { get; set; }
		
		/// <summary>
		/// Homerooms active
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomsActive")]
		public System.Nullable<System.Boolean> HomeRoomsActive { get; set; }
	}
	
	/// <summary>
	/// Customer settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerSettingsResponse
	{
		
		/// <summary>
		/// Homeroom Parent ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomParentId")]
		public System.Nullable<System.Int64> HomeRoomParentId { get; set; }
		
		/// <summary>
		/// Homeroom Parent Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomParentName")]
		public string HomeRoomParentName { get; set; }
		
		/// <summary>
		/// Homeroom Quota in bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomQuota")]
		public System.Nullable<System.Int64> HomeRoomQuota { get; set; }
		
		/// <summary>
		/// Homerooms active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="homeRoomsActive")]
		public bool HomeRoomsActive { get; set; }
	}
	
	/// <summary>
	/// Request model for deleting nodes from recycle bin
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeletedNodesRequest
	{
		
		/// <summary>
		/// List of deleted node IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deletedNodeIds")]
		public int[] DeletedNodeIds { get; set; }
	}
	
	/// <summary>
	/// Request model for deleting Download Shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDownloadSharesRequest
	{
		
		/// <summary>
		/// List of share IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareIds")]
		public int[] ShareIds { get; set; }
	}
	
	/// <summary>
	/// Request model for deleting nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNodesRequest
	{
		
		/// <summary>
		/// List of node IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeIds")]
		public int[] NodeIds { get; set; }
	}
	
	/// <summary>
	/// Request model for deleting Upload Shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUploadSharesRequest
	{
		
		/// <summary>
		/// List of share IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shareIds")]
		public int[] ShareIds { get; set; }
	}
	
	/// <summary>
	/// Deleted node information (Deleted node can be a folder or file)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletedNode
	{
		
		/// <summary>
		/// Last access date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessedAt")]
		public System.Nullable<System.DateTimeOffset> AccessedAt { get; set; }
		
		/// <summary>
		/// Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		///
		///
		///
		///(default: classification from parent room)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<DeletedNodeClassification> Classification { get; set; }
		
		/// <summary>
		/// Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// Deletion date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedAt")]
		public System.Nullable<System.DateTimeOffset> DeletedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedBy")]
		public UserInfo DeletedBy { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// Node ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Encryption state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Node name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public long ParentId { get; set; }
		
		/// <summary>
		/// Parent node path
		///
		///`/` if node is a root node (room)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentPath")]
		public string ParentPath { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.37.0
		///
		///Reference ID. Identical across all versions of a file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public System.Nullable<System.Int64> ReferenceId { get; set; }
		
		/// <summary>
		/// Node size in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Node type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DeletedNodeType Type { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeletedNodeClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeletedNodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		folder = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 1,
	}
	
	/// <summary>
	/// Deleted node information (Deleted node can be a folder or file)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletedNodeSummary
	{
		
		/// <summary>
		/// Number of deleted versions of this file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cntVersions")]
		public int CntVersions { get; set; }
		
		/// <summary>
		/// First deleted version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstDeletedAt")]
		public System.DateTimeOffset FirstDeletedAt { get; set; }
		
		/// <summary>
		/// Last deleted version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastDeletedAt")]
		public System.DateTimeOffset LastDeletedAt { get; set; }
		
		/// <summary>
		/// Node ID of last deleted version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastDeletedNodeId")]
		public long LastDeletedNodeId { get; set; }
		
		/// <summary>
		/// Node name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public long ParentId { get; set; }
		
		/// <summary>
		/// Parent node path
		///
		///`/` if node is a root node (room)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentPath")]
		public string ParentPath { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.37.0
		///
		///Reference ID. Identical across all versions of a file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public System.Nullable<System.Int64> ReferenceId { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
		
		/// <summary>
		/// Node type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DeletedNodeType Type { get; set; }
	}
	
	/// <summary>
	/// List of deleted nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletedNodeSummaryList
	{
		
		/// <summary>
		/// List of deleted nodes (summary)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DeletedNodeSummary[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// List of deleted versions of nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletedNodeVersionsList
	{
		
		/// <summary>
		/// List of deleted nodes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DeletedNode[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Download Share information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadShare
	{
		
		/// <summary>
		/// Share access key to generate secure link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public string AccessKey { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		///
		///
		///
		///(default: classification from parent room)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<DownloadShareClassification> Classification { get; set; }
		
		/// <summary>
		/// Downloads counter (incremented on each download)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cntDownloads")]
		public int CntDownloads { get; set; }
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// Path to shared download node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataUrl")]
		public string DataUrl { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// Share ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Internal notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalNotes")]
		public string InternalNotes { get; set; }
		
		/// <summary>
		/// Encrypted share
		///
		///(this only applies to shared files, not folders)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Is share protected by password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isProtected")]
		public System.Nullable<System.Boolean> IsProtected { get; set; }
		
		/// <summary>
		/// Max allowed downloads
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDownloads")]
		public System.Nullable<System.Int32> MaxDownloads { get; set; }
		
		/// <summary>
		/// Alias name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Source node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public long NodeId { get; set; }
		
		/// <summary>
		/// Path to shared download node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodePath")]
		public string NodePath { get; set; }
		
		/// <summary>
		/// Node type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeType")]
		public string NodeType { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Notify creator on every download.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notifyCreator")]
		public bool NotifyCreator { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient email addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string Recipients { get; set; }
		
		/// <summary>
		/// Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient MSISDNs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsRecipients")]
		public string SmsRecipients { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DownloadShareClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	/// <summary>
	/// Request model for sending an email of a Download Share link
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadShareLinkEmail
	{
		
		/// <summary>
		/// Notification email content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Language tag for messages to receiver
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// List of recipient email addresses
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
	}
	
	/// <summary>
	/// List of Download Shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadShareList
	{
		
		/// <summary>
		/// List of Download Shares
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DownloadShare[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Download URL
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DownloadTokenGenerateResponse
	{
		
		/// <summary>
		/// Download URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
	}
	
	/// <summary>
	/// Emergency TOTP code
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmergencyMfaCodeResponse
	{
		
		/// <summary>
		/// Emergency TOTP code which can be used instead of standard TOTP code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
	}
	
	/// <summary>
	/// Request model for enabling customer encryption
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnableCustomerEncryptionRequest
	{
		
		/// <summary>
		/// Key pair container
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSpaceRescueKey")]
		public UserKeyPairContainer DataSpaceRescueKey { get; set; }
		
		/// <summary>
		/// Set `true` to enable encryption for this customer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableCustomerEncryption")]
		public bool EnableCustomerEncryption { get; set; }
	}
	
	/// <summary>
	/// Request model for handling encryption settings for a room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptRoomRequest
	{
		
		/// <summary>
		/// Key pair container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRoomRescueKey")]
		public UserKeyPairContainer DataRoomRescueKey { get; set; }
		
		/// <summary>
		/// Encryption state
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public bool IsEncrypted { get; set; }
		
		/// <summary>
		/// Use system emergency password (rescue key) for files in this room
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useDataSpaceRescueKey")]
		public System.Nullable<System.Boolean> UseDataSpaceRescueKey { get; set; }
	}
	
	/// <summary>
	/// Encryption states
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionInfo
	{
		
		/// <summary>
		/// DRACOON key state
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataSpaceKeyState")]
		public EncryptionInfoDataSpaceKeyState DataSpaceKeyState { get; set; }
		
		/// <summary>
		/// Room key state
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roomKeyState")]
		public EncryptionInfoDataSpaceKeyState RoomKeyState { get; set; }
		
		/// <summary>
		/// User key state
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userKeyState")]
		public EncryptionInfoDataSpaceKeyState UserKeyState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionInfoDataSpaceKeyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
	}
	
	/// <summary>
	/// Encryption password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionPasswordPolicies
	{
		
		/// <summary>
		/// Password character rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterRules")]
		public CharacterRules CharacterRules { get; set; }
		
		/// <summary>
		/// Minimum number of characters a password must contain
		/// Minimum: 1
		/// Maximum: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		[System.ComponentModel.DataAnnotations.Range(1, 1024)]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
		///
		///(min. 4 character pattern)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectKeyboardPatterns")]
		public System.Nullable<System.Boolean> RejectKeyboardPatterns { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain user info (first name, last name, email, user name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectUserInfo")]
		public System.Nullable<System.Boolean> RejectUserInfo { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	/// <summary>
	/// Error information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// HTTP status code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Debug information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public string DebugInfo { get; set; }
		
		/// <summary>
		/// Internal error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// HTTP status code description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Event type information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventType
	{
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Usable as customer admin webhook
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usableCustomerAdminWebhook")]
		public bool UsableCustomerAdminWebhook { get; set; }
		
		/// <summary>
		/// Usable as node webhook
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usableNodeWebhook")]
		public bool UsableNodeWebhook { get; set; }
		
		/// <summary>
		/// Usable as push notification
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usablePushNotification")]
		public bool UsablePushNotification { get; set; }
		
		/// <summary>
		/// Usable as tenant webhook
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usableTenantWebhook")]
		public bool UsableTenantWebhook { get; set; }
	}
	
	/// <summary>
	/// List of event types
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventTypeList
	{
		
		/// <summary>
		/// List of event types
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public EventType[] Items { get; set; }
	}
	
	/// <summary>
	/// Eventlog settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventlogConfig
	{
		
		/// <summary>
		/// Is eventlog enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Determines whether user’s IP address is logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logIpEnabled")]
		public System.Nullable<System.Boolean> LogIpEnabled { get; set; }
		
		/// <summary>
		/// Retention period (in days) of event log entries.
		///
		///After that period, all entries are deleted.
		///
		///Recommended value: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Failover server information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailoverServer
	{
		
		/// <summary>
		/// RADIUS Failover Server is active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failoverEnabled")]
		public bool FailoverEnabled { get; set; }
		
		/// <summary>
		/// RADIUS Failover Server IP Address
		///
		///Required if failover server is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failoverIpAddress")]
		public string FailoverIpAddress { get; set; }
		
		/// <summary>
		/// RADIUS Failover Server Port
		///
		///Required if failover server is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failoverPort")]
		public int FailoverPort { get; set; }
	}
	
	/// <summary>
	/// Feature
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Feature
	{
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="featureId")]
		public int FeatureId { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="featureName")]
		public string FeatureName { get; set; }
		
		/// <summary>
		/// Is Available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isAvailable")]
		public bool IsAvailable { get; set; }
	}
	
	/// <summary>
	/// OAuthClientInfo
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeaturedOAuthClient
	{
		
		/// <summary>
		/// Is Available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isAvailable")]
		public bool IsAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauthClientName")]
		public string OauthClientName { get; set; }
	}
	
	/// <summary>
	/// File key information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileFileKeys
	{
		
		/// <summary>
		/// File key container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileKeyContainer")]
		public FileKeyContainer FileKeyContainer { get; set; }
		
		/// <summary>
		/// File ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	/// <summary>
	/// File key container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileKeyContainer
	{
		
		/// <summary>
		/// Initial vector
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="iv")]
		public string Iv { get; set; }
		
		/// <summary>
		/// Encryption key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Authentication tag
		///
		///(needed with authenticated encryption)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// Version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// List of File Versions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Reference ID. Identical across all versions of a file
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public long ReferenceId { get; set; }
	}
	
	/// <summary>
	/// List of File Versions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileVersionList
	{
		
		/// <summary>
		/// List of file versions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public FileVersion[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// First administrator user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstAdminUser
	{
		
		/// <summary>
		/// User Authentication Data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authData")]
		public UserAuthData AuthData { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Authentication methods:
		///
		///* `sql`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		///
		///use `authData` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public UserAuthMethod[] AuthMethods { get; set; }
		
		/// <summary>
		/// Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Language ID or ISO 639-1 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Determines whether user has to change his / her initial password.
		///
		///use `authDate.mustChangePassword` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needsToChangePassword")]
		public System.Nullable<System.Boolean> NeedsToChangePassword { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///If `true`, the user must change the `userName` at the first login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needsToChangeUserName")]
		public System.Nullable<System.Boolean> NeedsToChangeUserName { get; set; }
		
		/// <summary>
		/// Notify user about his new account
		///
		///* default: `true` for `basic` auth type
		///
		///* default: `false` for `active_directory`, `openid` and `radius` auth types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyUser")]
		public System.Nullable<System.Boolean> NotifyUser { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///An initial password may be preset
		///
		///use `authData` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// IETF language tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// General settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneralSettings
	{
		
		/// <summary>
		/// Auth token restrictions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authTokenRestrictions")]
		public AuthTokenRestrictions AuthTokenRestrictions { get; set; }
		
		/// <summary>
		/// Activation status of client-side encryption.
		///
		///Can only be enabled once; disabling is not possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoEnabled")]
		public System.Nullable<System.Boolean> CryptoEnabled { get; set; }
		
		/// <summary>
		/// Enable email notification button
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailNotificationButtonEnabled")]
		public System.Nullable<System.Boolean> EmailNotificationButtonEnabled { get; set; }
		
		/// <summary>
		/// Each user has to confirm the EULA at first login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eulaEnabled")]
		public System.Nullable<System.Boolean> EulaEnabled { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.42.0
		///
		///Defines if login fields should be hidden
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideLoginInputFields")]
		public System.Nullable<System.Boolean> HideLoginInputFields { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Determines if the media server is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaServerEnabled")]
		public System.Nullable<System.Boolean> MediaServerEnabled { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.9.0
		///
		///Defines if S3 tags are enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3TagsEnabled")]
		public System.Nullable<System.Boolean> S3TagsEnabled { get; set; }
		
		/// <summary>
		/// Allow sending of share passwords via SMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharePasswordSmsEnabled")]
		public System.Nullable<System.Boolean> SharePasswordSmsEnabled { get; set; }
		
		/// <summary>
		/// Defines if S3 is used as storage backend
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useS3Storage")]
		public System.Nullable<System.Boolean> UseS3Storage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.14.0
		///
		///Allow weak password
		///
		///* A weak password has to fulfill the following criteria:
		///
		///   * is at least 8 characters long
		///
		///   * contains letters and numbers
		///
		///* A strong password has to fulfill the following criteria in addition:
		///
		///   * contains at least one special character
		///
		///   * contains upper and lower case characters
		///
		///Please use `GET /system/config/policies/passwords` API to get configured password policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weakPasswordEnabled")]
		public System.Nullable<System.Boolean> WeakPasswordEnabled { get; set; }
	}
	
	/// <summary>
	/// General settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneralSettingsInfo
	{
		
		/// <summary>
		/// Auth token restrictions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authTokenRestrictions")]
		public AuthTokenRestrictions AuthTokenRestrictions { get; set; }
		
		/// <summary>
		/// Activation status of client-side encryption.
		///
		///Can only be enabled once; disabling is not possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoEnabled")]
		public System.Nullable<System.Boolean> CryptoEnabled { get; set; }
		
		/// <summary>
		/// Enable email notification button
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailNotificationButtonEnabled")]
		public System.Nullable<System.Boolean> EmailNotificationButtonEnabled { get; set; }
		
		/// <summary>
		/// Each user has to confirm the EULA at first login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eulaEnabled")]
		public System.Nullable<System.Boolean> EulaEnabled { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.42.0
		///
		///Defines if login fields should be hidden
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideLoginInputFields")]
		public System.Nullable<System.Boolean> HideLoginInputFields { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.10.0
		///
		///Homeroom Parent ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomParentId")]
		public System.Nullable<System.Int64> HomeRoomParentId { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.10.0
		///
		///Homerooms active
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="homeRoomsActive")]
		public bool HomeRoomsActive { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Determines if the media server is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaServerEnabled")]
		public System.Nullable<System.Boolean> MediaServerEnabled { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.9.0
		///
		///Defines if S3 tags are enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3TagsEnabled")]
		public System.Nullable<System.Boolean> S3TagsEnabled { get; set; }
		
		/// <summary>
		/// Allow sending of share passwords via SMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharePasswordSmsEnabled")]
		public System.Nullable<System.Boolean> SharePasswordSmsEnabled { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.30.0
		///
		///Subscription Plan
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionPlan")]
		public int SubscriptionPlan { get; set; }
		
		/// <summary>
		/// Defines if S3 is used as storage backend
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useS3Storage")]
		public System.Nullable<System.Boolean> UseS3Storage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.14.0
		///
		///Allow weak password
		///
		///* A weak password has to fulfill the following criteria:
		///
		///   * is at least 8 characters long
		///
		///   * contains letters and numbers
		///
		///* A strong password has to fulfill the following criteria in addition:
		///
		///   * contains at least one special character
		///
		///   * contains upper and lower case characters
		///
		///Please use `GET /system/config/policies/passwords` API to get configured password policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weakPasswordEnabled")]
		public System.Nullable<System.Boolean> WeakPasswordEnabled { get; set; }
	}
	
	/// <summary>
	/// Request model for generating presigned URLs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratePresignedUrlsRequest
	{
		
		/// <summary>
		/// First part number of a range of requested presigned URLs (for S3 it is: `1`)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstPartNumber")]
		public int FirstPartNumber { get; set; }
		
		/// <summary>
		/// Last part number of a range of requested presigned URLs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastPartNumber")]
		public int LastPartNumber { get; set; }
		
		/// <summary>
		/// `Content-Length` header size for each presigned URL (in bytes)
		///
		///*MUST* be >= 5 MB except the last part.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public long Size { get; set; }
	}
	
	/// <summary>
	/// Group information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group
	{
		
		/// <summary>
		/// Amount of users
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cntUsers")]
		public int CntUsers { get; set; }
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// List of roles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupRoles")]
		public RoleList GroupRoles { get; set; }
		
		/// <summary>
		/// Unique identifier for the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Group name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	/// <summary>
	/// List of roles
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoleList
	{
		
		/// <summary>
		/// List of roles
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Role[] Items { get; set; }
	}
	
	/// <summary>
	/// Role information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Role
	{
		
		/// <summary>
		/// Role description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique identifier for the role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// List of reachable right over role
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Right[] Items { get; set; }
		
		/// <summary>
		/// Role (unique) name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Right information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Right
	{
		
		/// <summary>
		/// Right description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique identifier for the right
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Right (unique) name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Group IDs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupIds
	{
		
		/// <summary>
		/// List of group IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public int[] Ids { get; set; }
	}
	
	/// <summary>
	/// Group information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupInfo
	{
		
		/// <summary>
		/// Unique identifier for the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Group name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of groups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupList
	{
		
		/// <summary>
		/// List of groups
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Group[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupUser
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Display name
		///
		///use information from `UserInfo` instead to combine a display name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Email 
		///
		///use `email` from `UserInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Unique identifier for the user
		///
		///use `id` from `UserInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Determines whether user is a member of the group or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMember")]
		public bool IsMember { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///User login name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public UserInfo UserInfo { get; set; }
	}
	
	/// <summary>
	/// List of users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupUserList
	{
		
		/// <summary>
		/// List of group-user mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GroupUser[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Set of guest user policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GuestUsersPoliciesConfig
	{
		
		/// <summary>
		/// Determines whether the invite of users to rooms is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isInviteUsersEnabled")]
		public bool IsInviteUsersEnabled { get; set; }
	}
	
	/// <summary>
	/// Infrastructure properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InfrastructureProperties
	{
		
		/// <summary>
		/// &#128640; Since v4.21.0
		///
		///Determines if the DRACOON Core is deployed in the cloud environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDracoonCloud")]
		public System.Nullable<System.Boolean> IsDracoonCloud { get; set; }
		
		/// <summary>
		/// Determines if the media server is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaServerConfigEnabled")]
		public System.Nullable<System.Boolean> MediaServerConfigEnabled { get; set; }
		
		/// <summary>
		/// Suggested S3 Region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3DefaultRegion")]
		public string S3DefaultRegion { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.15.0
		///
		///Enforce direct upload to S3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3EnforceDirectUpload")]
		public System.Nullable<System.Boolean> S3EnforceDirectUpload { get; set; }
		
		/// <summary>
		/// Allow sending of share passwords via SMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsConfigEnabled")]
		public System.Nullable<System.Boolean> SmsConfigEnabled { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.21.0
		///
		///Current tenant UUID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantUuid")]
		public string TenantUuid { get; set; }
	}
	
	/// <summary>
	/// Room information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LastAdminGroupRoom
	{
		
		/// <summary>
		/// Room ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Room name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent room ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Parent node path
		///
		///`/` if node is a root node (room)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentPath")]
		public string ParentPath { get; set; }
	}
	
	/// <summary>
	/// List of (last admin group) rooms
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LastAdminGroupRoomList
	{
		
		/// <summary>
		/// List of last admin rooms
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LastAdminGroupRoom[] Items { get; set; }
	}
	
	/// <summary>
	/// Room information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LastAdminUserRoom
	{
		
		/// <summary>
		/// Room ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Determines whether user is last admin of a room due to being the last member of last admin group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastAdminInGroup")]
		public bool LastAdminInGroup { get; set; }
		
		/// <summary>
		/// ID of the last admin group where the user is the only remaining member
		///
		///(returned only if `lastAdminInGroup` is `true`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastAdminInGroupId")]
		public System.Nullable<System.Int64> LastAdminInGroupId { get; set; }
		
		/// <summary>
		/// Room name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent room ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Parent node path
		///
		///`/` if node is a root node (room)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentPath")]
		public string ParentPath { get; set; }
	}
	
	/// <summary>
	/// List of (last admin user) rooms
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LastAdminUserRoomList
	{
		
		/// <summary>
		/// List of last admin rooms
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LastAdminUserRoom[] Items { get; set; }
	}
	
	/// <summary>
	/// Log event information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogEvent
	{
		
		/// <summary>
		/// Attribute 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute1")]
		public string Attribute1 { get; set; }
		
		/// <summary>
		/// Attribute 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute2")]
		public string Attribute2 { get; set; }
		
		/// <summary>
		/// Attribute 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute3")]
		public string Attribute3 { get; set; }
		
		/// <summary>
		/// Auth parent source ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authParentSource")]
		public string AuthParentSource { get; set; }
		
		/// <summary>
		/// Auth parent target ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authParentTarget")]
		public string AuthParentTarget { get; set; }
		
		/// <summary>
		/// Unique identifier for the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public System.Nullable<System.Int64> CustomerId { get; set; }
		
		/// <summary>
		/// Event ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Event description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Object ID 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId1")]
		public System.Nullable<System.Int64> ObjectId1 { get; set; }
		
		/// <summary>
		/// Object ID 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId2")]
		public System.Nullable<System.Int64> ObjectId2 { get; set; }
		
		/// <summary>
		/// Object name 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectName1")]
		public string ObjectName1 { get; set; }
		
		/// <summary>
		/// Object name 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectName2")]
		public string ObjectName2 { get; set; }
		
		/// <summary>
		/// Object type 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType1")]
		public System.Nullable<System.Int32> ObjectType1 { get; set; }
		
		/// <summary>
		/// Object type 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType2")]
		public System.Nullable<System.Int32> ObjectType2 { get; set; }
		
		/// <summary>
		/// Operation type ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public System.Nullable<System.Int32> OperationId { get; set; }
		
		/// <summary>
		/// Operation name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationName")]
		public string OperationName { get; set; }
		
		/// <summary>
		/// Operation status:
		///
		///* `0` - Success
		///
		///* `2` - Error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<LogEventStatus> Status { get; set; }
		
		/// <summary>
		/// Event timestamp
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.DateTimeOffset Time { get; set; }
		
		/// <summary>
		/// Client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userClient")]
		public string UserClient { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
		
		/// <summary>
		/// User IP
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userIp")]
		public string UserIp { get; set; }
		
		/// <summary>
		/// Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LogEventStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	/// <summary>
	/// List of log events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogEventList
	{
		
		/// <summary>
		/// List of log events
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LogEvent[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Log operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogOperation
	{
		
		/// <summary>
		/// Operation type ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Determines whether log operation is deprecated or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isDeprecated")]
		public bool IsDeprecated { get; set; }
		
		/// <summary>
		/// Operation name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of log operations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LogOperationList
	{
		
		/// <summary>
		/// List of all log operations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operationList")]
		public LogOperation[] OperationList { get; set; }
	}
	
	/// <summary>
	/// Login password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoginPasswordPolicies
	{
		
		/// <summary>
		/// Password character rules
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="characterRules")]
		public CharacterRules CharacterRules { get; set; }
		
		/// <summary>
		/// Minimum number of characters a password must contain
		/// Required
		/// Minimum: 1
		/// Maximum: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		[System.ComponentModel.DataAnnotations.Range(1, 1024)]
		public int MinLength { get; set; }
		
		/// <summary>
		/// Number of passwords to archive
		///
		///(must be between `0` and `10`; `0` means that password history is disabled)
		/// Required
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfArchivedPasswords")]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public int NumberOfArchivedPasswords { get; set; }
		
		/// <summary>
		/// Password expiration information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="passwordExpiration")]
		public PasswordExpiration PasswordExpiration { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain word(s) from a dictionary
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejectDictionaryWords")]
		public bool RejectDictionaryWords { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
		///
		///(min. 4 character pattern)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejectKeyboardPatterns")]
		public bool RejectKeyboardPatterns { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain user info (first name, last name, email, user name)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejectUserInfo")]
		public bool RejectUserInfo { get; set; }
		
		/// <summary>
		/// Modification date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
		
		/// <summary>
		/// User lockout information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userLockout")]
		public UserLockout UserLockout { get; set; }
	}
	
	/// <summary>
	/// Password expiration information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PasswordExpiration
	{
		
		/// <summary>
		/// Determines whether password expiration is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Maximum allowed password age (in days)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPasswordAge")]
		public System.Nullable<System.Int32> MaxPasswordAge { get; set; }
	}
	
	/// <summary>
	/// User lockout information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserLockout
	{
		
		/// <summary>
		/// Determines whether user lockout is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockoutPeriod")]
		public System.Nullable<System.Int32> LockoutPeriod { get; set; }
		
		/// <summary>
		/// Maximum allowed number of failed login attempts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxNumberOfLoginFailures")]
		public System.Nullable<System.Int32> MaxNumberOfLoginFailures { get; set; }
	}
	
	/// <summary>
	/// User credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoginRequest
	{
		
		/// <summary>
		/// Authentication methods
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public System.Nullable<LoginRequestAuthType> AuthType { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Language ID or ISO 639-1 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// For RADIUS Access-Challenge
		///
		///If a `replyState` is returned, it must be included as `state` in the following request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// RADIUS Token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoginRequestAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active_directory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		radius = 2,
	}
	
	/// <summary>
	/// Authentication token
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoginResponse
	{
		
		/// <summary>
		/// Authentication token
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Set of multi-factor authentication policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MfaPoliciesConfig
	{
		
		/// <summary>
		/// Determines whether multi-factor authentication is enforced
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMfaEnforced")]
		public bool IsMfaEnforced { get; set; }
	}
	
	/// <summary>
	/// Contains the save-to-send-out information of a MFA-setup
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MfaSetupStatus
	{
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Type of second factor authentication
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mfaType")]
		public MfaSetupStatusMfaType MfaType { get; set; }
		
		/// <summary>
		/// A name to identify the MFA setup by the user. Default is MFA-type followed by a number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MfaSetupStatusMfaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U2F = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MfaTotpConfirmationRequest
	{
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Generated valid OTP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otp")]
		public string Otp { get; set; }
	}
	
	/// <summary>
	/// Missing keys information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MissingKeysResponse
	{
		
		/// <summary>
		/// List of file keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public FileFileKeys[] Files { get; set; }
		
		/// <summary>
		/// List of user ID and file ID mappings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserIdFileIdItem[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
		
		/// <summary>
		/// List of user public keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserUserPublicKey[] Users { get; set; }
	}
	
	/// <summary>
	/// User ID and file ID mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserIdFileIdItem
	{
		
		/// <summary>
		/// File ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public System.Nullable<System.Int64> FileId { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public System.Nullable<System.Int64> UserId { get; set; }
	}
	
	/// <summary>
	/// Public key information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserUserPublicKey
	{
		
		/// <summary>
		/// Unique identifier for the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Public key container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeyContainer")]
		public PublicKeyContainer PublicKeyContainer { get; set; }
	}
	
	/// <summary>
	/// Moved node information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MoveNode
	{
		
		/// <summary>
		/// Source node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// New node name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	/// <summary>
	/// Request model for moving nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MoveNodesRequest
	{
		
		/// <summary>
		/// List of nodes to be moved
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public MoveNode[] Items { get; set; }
		
		/// <summary>
		/// Preserve Download Share Links and point them to the new node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepShareLinks")]
		public System.Nullable<System.Boolean> KeepShareLinks { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.5.0
		///
		///Node IDs
		///
		///Please use `items` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIds")]
		public int[] NodeIds { get; set; }
		
		/// <summary>
		/// Node conflict resolution strategy:
		///
		///* `autorename`
		///
		///* `overwrite`
		///
		///* `fail`
		/// </summary>
		[System.ComponentModel.DefaultValue(CompleteS3FileUploadRequestResolutionStrategy.autorename)]
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public CompleteS3FileUploadRequestResolutionStrategy ResolutionStrategy { get; set; } = CompleteS3FileUploadRequestResolutionStrategy.autorename;
	}
	
	/// <summary>
	/// Request model for creating a customer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewCustomerRequest
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.8.0
		///
		///Customer activation code string:
		///
		///* valid only for types `free` and `demo`
		///
		///* for `pay` customers it is empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationCode")]
		public string ActivationCode { get; set; }
		
		/// <summary>
		/// Company name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// List of customer attributes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerAttributes")]
		public CustomerAttributes CustomerAttributes { get; set; }
		
		/// <summary>
		/// Customer type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerContractType")]
		public CustomerCustomerContractType CustomerContractType { get; set; }
		
		/// <summary>
		/// First administrator user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstAdminUser")]
		public FirstAdminUser FirstAdminUser { get; set; }
		
		/// <summary>
		/// Customer is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///All users of this customer will be blocked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Customer lock status:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///Please use `isLocked` instead.
		///
		///All users of this customer will be blocked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public System.Nullable<System.Boolean> LockStatus { get; set; }
		
		/// <summary>
		/// Provider customer ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerCustomerId")]
		public string ProviderCustomerId { get; set; }
		
		/// <summary>
		/// Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quotaMax")]
		public long QuotaMax { get; set; }
		
		/// <summary>
		/// Number of days left for trial period (relevant only for type `demo`)
		///
		///(not used)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialDays")]
		public System.Nullable<System.Int32> TrialDays { get; set; }
		
		/// <summary>
		/// Maximal number of users
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userMax")]
		public int UserMax { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.19.0
		///
		///Maximal number of webhooks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhooksMax")]
		public System.Nullable<System.Int64> WebhooksMax { get; set; }
	}
	
	/// <summary>
	/// Customer information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewCustomerResponse
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.8.0
		///
		///Customer activation code string:
		///
		///* valid only for types `free` and `demo`
		///
		///* for `pay` customers it is empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationCode")]
		public string ActivationCode { get; set; }
		
		/// <summary>
		/// Company name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// List of customer attributes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerAttributes")]
		public CustomerAttributes CustomerAttributes { get; set; }
		
		/// <summary>
		/// Customer type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerContractType")]
		public CustomerCustomerContractType CustomerContractType { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.21.0
		///
		///Customer UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerUuid")]
		public string CustomerUuid { get; set; }
		
		/// <summary>
		/// First administrator user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstAdminUser")]
		public FirstAdminUser FirstAdminUser { get; set; }
		
		/// <summary>
		/// Unique identifier for the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Customer is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///All users of this customer will be blocked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Customer lock status:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///Please use `isLocked` instead.
		///
		///All users of this customer will be blocked and can not login anymore.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public bool LockStatus { get; set; } = false;
		
		/// <summary>
		/// Provider customer ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerCustomerId")]
		public string ProviderCustomerId { get; set; }
		
		/// <summary>
		/// Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quotaMax")]
		public long QuotaMax { get; set; }
		
		/// <summary>
		/// Number of days left for trial period (relevant only for type `demo`)
		///
		///(not used)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialDays")]
		public System.Nullable<System.Int32> TrialDays { get; set; }
		
		/// <summary>
		/// Maximal number of users
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userMax")]
		public int UserMax { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.19.0
		///
		///Maximal number of webhooks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhooksMax")]
		public System.Nullable<System.Int64> WebhooksMax { get; set; }
	}
	
	/// <summary>
	/// Node information (Node can be a room, folder or file)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Node
	{
		
		/// <summary>
		/// &#128640; Since v4.15.0
		///
		///Auth parent room ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authParentId")]
		public System.Nullable<System.Int64> AuthParentId { get; set; }
		
		/// <summary>
		/// Version of last change in this node or a node further down the tree.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchVersion")]
		public System.Nullable<System.Int64> BranchVersion { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.10.0
		///
		///Child nodes list (if requested)
		///
		///(for rooms / folders only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public Node[] Children { get; set; }
		
		/// <summary>
		/// Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<NodeClassification> Classification { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Number of direct children
		///
		///(no recursion; for rooms / folders only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntChildren")]
		public System.Nullable<System.Int32> CntChildren { get; set; }
		
		/// <summary>
		/// Returns the number of comments of this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntComments")]
		public System.Nullable<System.Int32> CntComments { get; set; }
		
		/// <summary>
		/// Number of deleted versions of this file / folder
		///
		///(for rooms / folders only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntDeletedVersions")]
		public System.Nullable<System.Int32> CntDeletedVersions { get; set; }
		
		/// <summary>
		/// Returns the number of Download Shares of this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntDownloadShares")]
		public System.Nullable<System.Int32> CntDownloadShares { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Amount of direct child files where this node is the parent node
		///
		///(no recursion; for rooms / folders only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntFiles")]
		public System.Nullable<System.Int32> CntFiles { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Amount of direct child folders where this node is the parent node
		///
		///(no recursion; for rooms / folders only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntFolders")]
		public System.Nullable<System.Int32> CntFolders { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Amount of direct child rooms where this node is the parent node
		///
		///(no recursion; for rooms only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntRooms")]
		public System.Nullable<System.Int32> CntRooms { get; set; }
		
		/// <summary>
		/// Returns the number of Upload Shares of this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntUploadShares")]
		public System.Nullable<System.Int32> CntUploadShares { get; set; }
		
		/// <summary>
		/// Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// Encryption states
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionInfo")]
		public EncryptionInfo EncryptionInfo { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// File type / extension (for files only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public string FileType { get; set; }
		
		/// <summary>
		/// Is activities log active (for rooms only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasActivitiesLog")]
		public System.Nullable<System.Boolean> HasActivitiesLog { get; set; }
		
		/// <summary>
		/// MD5 hash of file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// Node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Inherit permissions from parent room
		///
		///(default: `false` if `parentId` is `0`; otherwise: `true`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritPermissions")]
		public System.Nullable<System.Boolean> InheritPermissions { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Determines whether node is browsable by client (for rooms only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isBrowsable")]
		public System.Nullable<System.Boolean> IsBrowsable { get; set; }
		
		/// <summary>
		/// Encryption state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Node is marked as favorite (for rooms / folders only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFavorite")]
		public System.Nullable<System.Boolean> IsFavorite { get; set; }
		
		/// <summary>
		/// Media server media token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaToken")]
		public string MediaToken { get; set; }
		
		/// <summary>
		/// File media type (for files only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public string MediaType { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Parent node path
		///
		///`/` if node is a root node (room)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentPath")]
		public string ParentPath { get; set; }
		
		/// <summary>
		/// Node permissions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public NodePermissions Permissions { get; set; }
		
		/// <summary>
		/// Quota in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public System.Nullable<System.Int64> Quota { get; set; }
		
		/// <summary>
		/// Retention period for deleted nodes in days
		/// Minimum: 0
		/// Maximum: 9999
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recycleBinRetentionPeriod")]
		[System.ComponentModel.DataAnnotations.Range(0, 9999)]
		public System.Nullable<System.Int32> RecycleBinRetentionPeriod { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.37.0
		///
		///Reference ID. Identical across all versions of a file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public System.Nullable<System.Int64> ReferenceId { get; set; }
		
		/// <summary>
		/// Node size in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
		
		/// <summary>
		/// Node type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NodeType Type { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NodeClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		room = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		folder = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 2,
	}
	
	/// <summary>
	/// List of nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeList
	{
		
		/// <summary>
		/// List of nodes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Node[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Parent node
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeParent
	{
		
		/// <summary>
		/// Node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Node name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Node type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of parent nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeParentList
	{
		
		/// <summary>
		/// List of node parents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NodeParent[] Items { get; set; }
	}
	
	/// <summary>
	/// Notification channel information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationChannel
	{
		
		/// <summary>
		/// Channel frequency (aggregation window size in minutes)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public long Frequency { get; set; }
		
		/// <summary>
		/// Channel ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Determines whether channel is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Channel type (only `EMAIL` available at the moment)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Request model for switching notification channel status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationChannelActivationRequest
	{
		
		/// <summary>
		/// Channel ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public int ChannelId { get; set; }
		
		/// <summary>
		/// Determines whether channel is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
	}
	
	/// <summary>
	/// List of notification channels
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationChannelList
	{
		
		/// <summary>
		/// List of notification channels
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NotificationChannel[] Items { get; set; }
	}
	
	/// <summary>
	/// Notification configuration information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationConfig
	{
		
		/// <summary>
		/// List of notification channel IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelIds")]
		public int[] ChannelIds { get; set; }
		
		/// <summary>
		/// Event type name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTypeName")]
		public string EventTypeName { get; set; }
		
		/// <summary>
		/// Notification configuration ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Scope ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scopeId")]
		public int ScopeId { get; set; }
	}
	
	/// <summary>
	/// Request model for updating notification configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationConfigChangeRequest
	{
		
		/// <summary>
		/// List of notification channel IDs.
		///
		///Leave empty to disable notifications.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelIds")]
		public int[] ChannelIds { get; set; }
	}
	
	/// <summary>
	/// List of notification configurations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationConfigList
	{
		
		/// <summary>
		/// List of notification configurations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NotificationConfig[] Items { get; set; }
	}
	
	/// <summary>
	/// Notification scope information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationScope
	{
		
		/// <summary>
		/// Scope ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of notification scopes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotificationScopeList
	{
		
		/// <summary>
		/// List of notification scopes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NotificationScope[] Items { get; set; }
	}
	
	/// <summary>
	/// OAuth client approval information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OAuthApproval
	{
		
		/// <summary>
		/// ID of the OAuth client
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Name, which is shown at the client configuration and authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientName")]
		public string ClientName { get; set; }
		
		/// <summary>
		/// Expiration date of the approval
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.Nullable<System.DateTimeOffset> ExpiresAt { get; set; }
	}
	
	/// <summary>
	/// OAuth authorization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OAuthAuthorization
	{
		
		/// <summary>
		/// ID of the OAuth client
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Name, which is shown at the client configuration and authorization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientName")]
		public string ClientName { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Creation date of the authorization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Expiration date of the authorization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public System.Nullable<System.DateTimeOffset> ExpiresAt { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///ID of the OAuth authorization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.25.0
		///
		///Determines whether authorization matches the one from Authorization Header
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCurrentAuthorization")]
		public System.Nullable<System.Boolean> IsCurrentAuthorization { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///Determines whether client is a standard client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStandard")]
		public System.Nullable<System.Boolean> IsStandard { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Usage date of the authorization
		///
		///(Time of last usage.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedAt")]
		public System.Nullable<System.DateTimeOffset> UsedAt { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///User agent category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userAgentCategory")]
		public OAuthAuthorizationUserAgentCategory UserAgentCategory { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///User agent info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgentInfo")]
		public string UserAgentInfo { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///User agent OS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgentOs")]
		public string UserAgentOs { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///User agent type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAgentType")]
		public string UserAgentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OAuthAuthorizationUserAgentCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		browser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		native = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 2,
	}
	
	/// <summary>
	/// OAuth client information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OAuthClient
	{
		
		/// <summary>
		/// Validity of the access token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTokenValidity")]
		public System.Nullable<System.Int32> AccessTokenValidity { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Validity of the approval interval in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalValidity")]
		public System.Nullable<System.Int32> ApprovalValidity { get; set; }
		
		/// <summary>
		/// ID of the OAuth client
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Name, which is shown at the client configuration and authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientName")]
		public string ClientName { get; set; }
		
		/// <summary>
		/// Secret, which client uses at authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Determines whether client is a confidential or public client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientType")]
		public System.Nullable<OAuthClientClientType> ClientType { get; set; }
		
		/// <summary>
		/// Authorized grant types
		///
		///* `authorization_code`
		///
		///* `implicit`
		///
		///* `password`
		///
		///* `client_credentials`
		///
		///* `refresh_token`
		///
		///
		///
		///cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grantTypes")]
		public string[] GrantTypes { get; set; }
		
		/// <summary>
		/// Determines whether client is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// Determines whether client is an external client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isExternal")]
		public System.Nullable<System.Boolean> IsExternal { get; set; }
		
		/// <summary>
		/// Determines whether client is a standard client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isStandard")]
		public System.Nullable<System.Boolean> IsStandard { get; set; }
		
		/// <summary>
		/// URIs, to which a user is redirected after authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUris")]
		public string[] RedirectUris { get; set; }
		
		/// <summary>
		/// Validity of the refresh token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshTokenValidity")]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OAuthClientClientType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confidential = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
	}
	
	/// <summary>
	/// List of OpenID Connect providers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OpenIdAuthInfo
	{
		
		/// <summary>
		/// List of available OpenID Connect identity providers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public OpenIdProvider[] Items { get; set; }
	}
	
	/// <summary>
	/// OpenID Connect provider information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OpenIdProvider
	{
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Is available for all customers
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isGlobalAvailable")]
		public bool IsGlobalAvailable { get; set; }
		
		/// <summary>
		/// Issuer identifier of the IDP
		///
		///The value is a case sensitive URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// Name of the claim which is used for the user mapping.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mappingClaim")]
		public string MappingClaim { get; set; }
		
		/// <summary>
		/// Name of the IDP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// URL of the user management UI.
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userManagementUrl")]
		public string UserManagementUrl { get; set; }
	}
	
	/// <summary>
	/// OpenID Connect IDP configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OpenIdIdpConfig
	{
		
		/// <summary>
		/// URL of the authorization endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationEndPointUrl")]
		public string AuthorizationEndPointUrl { get; set; }
		
		/// <summary>
		/// ID of the OpenID client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Secret, which client uses at authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Name of the claim which is used for the user mapping fallback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackMappingClaim")]
		public string FallbackMappingClaim { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Flow, which is used at authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public CreateOpenIdIdpConfigRequestFlow Flow { get; set; }
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		/// <summary>
		/// Issuer identifier of the IDP
		///
		///The value is a case sensitive URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// URL of the JWKS endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwksEndPointUrl")]
		public string JwksEndPointUrl { get; set; }
		
		/// <summary>
		/// Name of the claim which is used for the user mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingClaim")]
		public string MappingClaim { get; set; }
		
		/// <summary>
		/// Name of the IDP
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// PKCE code challenge method.
		///
		///cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkceChallengeMethod")]
		public string PkceChallengeMethod { get; set; }
		
		/// <summary>
		/// Determines whether PKCE is enabled.
		///
		///cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkceEnabled")]
		public System.Nullable<System.Boolean> PkceEnabled { get; set; }
		
		/// <summary>
		/// URIs, to which a user is redirected after authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUris")]
		public string[] RedirectUris { get; set; }
		
		/// <summary>
		/// List of requested scopes
		///
		///Usually `openid` and the names of the requested claims.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// URL of the token endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenEndPointUrl")]
		public string TokenEndPointUrl { get; set; }
		
		/// <summary>
		/// Determines if a DRACOON account is automatically created for a new user
		///
		///who successfully logs on with his / her AD / IDP account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImportEnabled")]
		public System.Nullable<System.Boolean> UserImportEnabled { get; set; }
		
		/// <summary>
		/// User group that is assigned to users who are created by automatic import.
		///
		///Reset with `0`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImportGroup")]
		public System.Nullable<System.Int64> UserImportGroup { get; set; }
		
		/// <summary>
		/// URL of the user info endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInfoEndPointUrl")]
		public string UserInfoEndPointUrl { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.23.0
		///
		///Source, which is used to get user information at the import or update of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInfoSource")]
		public CreateOpenIdIdpConfigRequestUserInfoSource UserInfoSource { get; set; }
		
		/// <summary>
		/// URL of the user management UI.
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userManagementUrl")]
		public string UserManagementUrl { get; set; }
		
		/// <summary>
		/// Determines if the DRACOON account is updated with data from AD / IDP.
		///
		///For OpenID Connect, the scopes `email` and `profile` are needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userUpdateEnabled")]
		public System.Nullable<System.Boolean> UserUpdateEnabled { get; set; }
	}
	
	/// <summary>
	/// Set of password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PasswordPoliciesConfig
	{
		
		/// <summary>
		/// Encryption password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionPasswordPolicies")]
		public EncryptionPasswordPolicies EncryptionPasswordPolicies { get; set; }
		
		/// <summary>
		/// Login password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginPasswordPolicies")]
		public LoginPasswordPolicies LoginPasswordPolicies { get; set; }
		
		/// <summary>
		/// Shares password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharesPasswordPolicies")]
		public SharesPasswordPolicies SharesPasswordPolicies { get; set; }
	}
	
	/// <summary>
	/// Shares password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharesPasswordPolicies
	{
		
		/// <summary>
		/// Password character rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterRules")]
		public CharacterRules CharacterRules { get; set; }
		
		/// <summary>
		/// Minimum number of characters a password must contain
		/// Minimum: 1
		/// Maximum: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		[System.ComponentModel.DataAnnotations.Range(1, 1024)]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain word(s) from a dictionary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectDictionaryWords")]
		public System.Nullable<System.Boolean> RejectDictionaryWords { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
		///
		///(min. 4 character pattern)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectKeyboardPatterns")]
		public System.Nullable<System.Boolean> RejectKeyboardPatterns { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain user info (first name, last name, email, user name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectUserInfo")]
		public System.Nullable<System.Boolean> RejectUserInfo { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	/// <summary>
	/// List of violated password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PasswordPolicyViolationResponse
	{
		
		/// <summary>
		/// HTTP status code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Debug information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public string DebugInfo { get; set; }
		
		/// <summary>
		/// Internal error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// HTTP status code description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// List of violated password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="violatedPasswordPolicies")]
		public ViolatedPasswordPolicy[] ViolatedPasswordPolicies { get; set; }
	}
	
	/// <summary>
	/// Violated password policy information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViolatedPasswordPolicy
	{
		
		/// <summary>
		/// Message from password validator
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Name of the violated password policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Pending assignment information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingAssignment
	{
		
		/// <summary>
		/// Unique identifier for the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public long GroupId { get; set; }
		
		/// <summary>
		/// Room ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roomId")]
		public long RoomId { get; set; }
		
		/// <summary>
		/// Room name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roomName")]
		public string RoomName { get; set; }
		
		/// <summary>
		/// Acceptance state:
		///
		///* `ACCEPTED`
		///
		///* `WAITING`
		///
		///* `DENIED`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public PendingAssignmentState State { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PendingAssignmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 2,
	}
	
	/// <summary>
	/// Pending assignment information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingAssignmentData
	{
		
		/// <summary>
		/// Group information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupInfo")]
		public GroupInfo GroupInfo { get; set; }
		
		/// <summary>
		/// Pending group information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pendingGroupData")]
		public PendingGroupData PendingGroupData { get; set; }
		
		/// <summary>
		/// Pending user information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pendingUserData")]
		public PendingUserData PendingUserData { get; set; }
		
		/// <summary>
		/// Room ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roomId")]
		public long RoomId { get; set; }
		
		/// <summary>
		/// Room name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roomName")]
		public string RoomName { get; set; }
		
		/// <summary>
		/// Acceptance state:
		///
		///* `ACCEPTED`
		///
		///* `WAITING`
		///
		///* `DENIED`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public PendingAssignmentState State { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public UserInfo UserInfo { get; set; }
	}
	
	/// <summary>
	/// Pending group information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingGroupData
	{
		
		/// <summary>
		/// Unique identifier for the group
		///
		///use `id` from `GroupInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Group name
		///
		///use `name` from `GroupInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Pending user information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingUserData
	{
		
		/// <summary>
		/// Display name
		///
		///use information from `UserInfo` instead to combine a display name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Email 
		///
		///use `email` from `UserInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// User login name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
	}
	
	/// <summary>
	/// List of pending assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingAssignmentList
	{
		
		/// <summary>
		/// List of pending assignment information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PendingAssignmentData[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Request model for handling pending assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingAssignmentsRequest
	{
		
		/// <summary>
		/// List of pending assignments
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PendingAssignment[] Items { get; set; }
	}
	
	/// <summary>
	/// Presigned URL information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PresignedUrl
	{
		
		/// <summary>
		/// Corresponding part number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public int PartNumber { get; set; }
		
		/// <summary>
		/// S3 presigned URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// List of generated presigned URLs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PresignedUrlList
	{
		
		/// <summary>
		/// List of S3 presigned URLs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public PresignedUrl[] Urls { get; set; }
	}
	
	/// <summary>
	/// ProductPackageResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPackageResponse
	{
		
		/// <summary>
		/// OAuth Client Information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public FeaturedOAuthClient[] Clients { get; set; }
		
		/// <summary>
		/// Features
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="features")]
		public Feature[] Features { get; set; }
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productPackageId")]
		public long ProductPackageId { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productPackageName")]
		public string ProductPackageName { get; set; }
	}
	
	/// <summary>
	/// ProductPackageResponseList
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPackageResponseList
	{
		
		/// <summary>
		/// Packages
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public ProductPackageResponse[] Packages { get; set; }
	}
	
	/// <summary>
	/// User profile attributes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProfileAttributes
	{
		
		/// <summary>
		/// List of key-value pairs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyValueEntry[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Request model for setting user profile attributes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProfileAttributesRequest
	{
		
		/// <summary>
		/// List of key-value pairs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyValueEntry[] Items { get; set; }
	}
	
	/// <summary>
	/// Download Share information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicDownloadShare
	{
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Creator name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creatorName")]
		public string CreatorName { get; set; }
		
		/// <summary>
		/// Creator username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorUsername")]
		public string CreatorUsername { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// File key information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileKey")]
		public FileKey FileKey { get; set; }
		
		/// <summary>
		/// File name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Determines whether Download Share has a limit for amount of downloads
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasDownloadLimit")]
		public bool HasDownloadLimit { get; set; }
		
		/// <summary>
		/// Encryption state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Is share protected by password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isProtected")]
		public bool IsProtected { get; set; }
		
		/// <summary>
		/// Downloads limit reached
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limitReached")]
		public bool LimitReached { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///* `application/zip` (for folders and rooms)
		///
		///* actual file media type (for files only)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public string MediaType { get; set; }
		
		/// <summary>
		/// Share display name (alias name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Private key container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeyContainer")]
		public PrivateKeyContainer PrivateKeyContainer { get; set; }
		
		/// <summary>
		/// File size or container size not compressed (in bytes)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public long Size { get; set; }
	}
	
	/// <summary>
	/// Request model for generating download URL
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicDownloadTokenGenerateRequest
	{
		
		/// <summary>
		/// Password (only for password-protected shares)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Download URL
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicDownloadTokenGenerateResponse
	{
		
		/// <summary>
		/// Download URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
	}
	
	/// <summary>
	/// Upload Share information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicUploadShare
	{
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Creator name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creatorName")]
		public string CreatorName { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Creator username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorUsername")]
		public string CreatorUsername { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// Encryption state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Is share protected by password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isProtected")]
		public bool IsProtected { get; set; }
		
		/// <summary>
		/// Share display name (alias name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Remaining size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingSize")]
		public System.Nullable<System.Int64> RemainingSize { get; set; }
		
		/// <summary>
		/// Remaining slots
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingSlots")]
		public System.Nullable<System.Int32> RemainingSlots { get; set; }
		
		/// <summary>
		/// Allow display of already uploaded files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showUploadedFiles")]
		public System.Nullable<System.Boolean> ShowUploadedFiles { get; set; }
		
		/// <summary>
		/// List of (public) uploaded files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadedFiles")]
		public PublicUploadedFileData[] UploadedFiles { get; set; }
		
		/// <summary>
		/// List of user public keys
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userUserPublicKeyList")]
		public UserUserPublicKeyList UserUserPublicKeyList { get; set; }
	}
	
	/// <summary>
	/// File information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicUploadedFileData
	{
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Hash value of transferred file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// File size in byte
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public long Size { get; set; }
	}
	
	/// <summary>
	/// List of user public keys
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserUserPublicKeyList
	{
		
		/// <summary>
		/// List of user public keys
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserUserPublicKey[] Items { get; set; }
	}
	
	/// <summary>
	/// RADIUS challenge reply
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RadiusChallengeResponse
	{
		
		/// <summary>
		/// HTTP status code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Debug information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugInfo")]
		public string DebugInfo { get; set; }
		
		/// <summary>
		/// Internal error code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// HTTP status code description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// RADIUS Reply-Message
		///
		///Instruction how to handle the situation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replyMessage")]
		public string ReplyMessage { get; set; }
		
		/// <summary>
		/// For RADIUS Access-Challenge
		///
		///If a `replyState` is returned, it must be included as `state` in the following request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="replyState")]
		public string ReplyState { get; set; }
	}
	
	/// <summary>
	/// RADIUS configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RadiusConfig
	{
		
		/// <summary>
		/// Failover server information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverServer")]
		public FailoverServer FailoverServer { get; set; }
		
		/// <summary>
		/// RADIUS Server IP Address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Sequence order of concatenated PIN and one-time token
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otpPinFirst")]
		public bool OtpPinFirst { get; set; } = true;
		
		/// <summary>
		/// RADIUS Server Port
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public int Port { get; set; }
		
		/// <summary>
		/// Shared Secret to access the RADIUS server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sharedSecret")]
		public string SharedSecret { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a RADIUS configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RadiusConfigCreateRequest
	{
		
		/// <summary>
		/// Failover server information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverServer")]
		public FailoverServer FailoverServer { get; set; }
		
		/// <summary>
		/// RADIUS Server IP Address
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Sequence order of concatenated PIN and one-time token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otpPinFirst")]
		public System.Nullable<System.Boolean> OtpPinFirst { get; set; }
		
		/// <summary>
		/// RADIUS Server Port
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="port")]
		public int Port { get; set; }
		
		/// <summary>
		/// Shared Secret to access the RADIUS server
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sharedSecret")]
		public string SharedSecret { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a RADIUS configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RadiusConfigUpdateRequest
	{
		
		/// <summary>
		/// Failover server information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failoverServer")]
		public FailoverServer FailoverServer { get; set; }
		
		/// <summary>
		/// RADIUS Server IP Address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Sequence order of concatenated PIN and one-time token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otpPinFirst")]
		public System.Nullable<System.Boolean> OtpPinFirst { get; set; }
		
		/// <summary>
		/// RADIUS Server Port
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Shared Secret to access the RADIUS server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedSecret")]
		public string SharedSecret { get; set; }
	}
	
	/// <summary>
	/// Recover usernames for email
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoverUserNameRequest
	{
		
		/// <summary>
		/// IETF language tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorLanguage")]
		public string CreatorLanguage { get; set; }
		
		/// <summary>
		/// Email 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// Request model for reseting user's login password
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetPasswordRequest
	{
		
		/// <summary>
		/// IETF language tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatorLanguage")]
		public string CreatorLanguage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Language ID or ISO 639-1 code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// Password reset information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetPasswordTokenValidateResponse
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.14.0
		///
		///Allow weak password
		///
		///Please use `loginPasswordPolicies` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowSystemGlobalWeakPassword")]
		public System.Nullable<System.Boolean> AllowSystemGlobalWeakPassword { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// Login password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginPasswordPolicies")]
		public LoginPasswordPolicies LoginPasswordPolicies { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// New password
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetPasswordWithTokenRequest
	{
		
		/// <summary>
		/// New password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Request model for restoring deleted nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RestoreDeletedNodesRequest
	{
		
		/// <summary>
		/// List of deleted node IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deletedNodeIds")]
		public int[] DeletedNodeIds { get; set; }
		
		/// <summary>
		/// Preserve Download Share Links and point them to the new node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepShareLinks")]
		public System.Nullable<System.Boolean> KeepShareLinks { get; set; }
		
		/// <summary>
		/// Node parent ID
		///
		///(default: previous parent ID)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Node conflict resolution strategy:
		///
		///* `autorename`
		///
		///* `overwrite`
		///
		///* `fail`
		/// </summary>
		[System.ComponentModel.DefaultValue(CompleteS3FileUploadRequestResolutionStrategy.autorename)]
		[System.Runtime.Serialization.DataMember(Name="resolutionStrategy")]
		public CompleteS3FileUploadRequestResolutionStrategy ResolutionStrategy { get; set; } = CompleteS3FileUploadRequestResolutionStrategy.autorename;
	}
	
	/// <summary>
	/// Group information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoleGroup
	{
		
		/// <summary>
		/// Unique identifier for the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Is group member of the role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMember")]
		public bool IsMember { get; set; }
		
		/// <summary>
		/// Group name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// List of groups with assigned role
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoleGroupList
	{
		
		/// <summary>
		/// List of role-group mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoleGroup[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoleUser
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Display name
		///
		///use information from `UserInfo` instead to combine a display name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Unique identifier for the user
		///
		///use `id` from `UserInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Is user member of the role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMember")]
		public bool IsMember { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public UserInfo UserInfo { get; set; }
	}
	
	/// <summary>
	/// List of users with assigned role
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoleUserList
	{
		
		/// <summary>
		/// List of role-user mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoleUser[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Room information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomData
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.10.0
		///
		///List of rooms, where this room is a parent (if exist)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public RoomData[] Children { get; set; }
		
		/// <summary>
		/// Returns the number of Download Shares of this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntDownloadShares")]
		public System.Nullable<System.Int32> CntDownloadShares { get; set; }
		
		/// <summary>
		/// Returns the number of Upload Shares of this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntUploadShares")]
		public System.Nullable<System.Int32> CntUploadShares { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.10.0
		///
		///Is recycle bin active (for rooms only)
		///
		///Recycle bin is always on (disabling is not possible).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasRecycleBin")]
		public bool HasRecycleBin { get; set; }
		
		/// <summary>
		/// Room ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Encryption state
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public bool IsEncrypted { get; set; }
		
		/// <summary>
		/// Node is marked as favorite (for rooms / folders only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFavorite")]
		public System.Nullable<System.Boolean> IsFavorite { get; set; }
		
		/// <summary>
		/// Is user granted room permissions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isGranted")]
		public bool IsGranted { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent node ID (room or folder)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public System.Nullable<System.Int64> ParentId { get; set; }
		
		/// <summary>
		/// Node permissions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public NodePermissions Permissions { get; set; }
		
		/// <summary>
		/// Quota in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public System.Nullable<System.Int64> Quota { get; set; }
		
		/// <summary>
		/// Retention period for deleted nodes in days
		/// Required
		/// Minimum: 0
		/// Maximum: 9999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recycleBinRetentionPeriod")]
		[System.ComponentModel.DataAnnotations.Range(0, 9999)]
		public int RecycleBinRetentionPeriod { get; set; }
		
		/// <summary>
		/// Room size
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// Node type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<RoomDataType> Type { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RoomDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		room = 0,
	}
	
	/// <summary>
	/// Group information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomGroup
	{
		
		/// <summary>
		/// Unique identifier for the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Is user granted room permissions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isGranted")]
		public bool IsGranted { get; set; }
		
		/// <summary>
		/// Group name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Behaviour when new users are added to the group:
		///
		///* `autoallow`
		///
		///* `pending`
		///
		///
		///
		///Only relevant if `adminGroupIds` has items.
		/// </summary>
		[System.ComponentModel.DefaultValue(ConfigRoomRequestNewGroupMemberAcceptance.autoallow)]
		[System.Runtime.Serialization.DataMember(Name="newGroupMemberAcceptance")]
		public ConfigRoomRequestNewGroupMemberAcceptance NewGroupMemberAcceptance { get; set; } = ConfigRoomRequestNewGroupMemberAcceptance.autoallow;
		
		/// <summary>
		/// Node permissions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public NodePermissions Permissions { get; set; }
	}
	
	/// <summary>
	/// List of groups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomGroupList
	{
		
		/// <summary>
		/// List of room-group mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoomGroup[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Request model for granting group(s) to the room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomGroupsAddBatchRequest
	{
		
		/// <summary>
		/// List of room-group mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoomGroupsAddBatchRequestItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Request item model for granting group to the room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomGroupsAddBatchRequestItem
	{
		
		/// <summary>
		/// Unique identifier for the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Behaviour when new users are added to the group:
		///
		///* `autoallow`
		///
		///* `pending`
		///
		///
		///
		///Only relevant if `adminGroupIds` has items.
		/// </summary>
		[System.ComponentModel.DefaultValue(ConfigRoomRequestNewGroupMemberAcceptance.autoallow)]
		[System.Runtime.Serialization.DataMember(Name="newGroupMemberAcceptance")]
		public ConfigRoomRequestNewGroupMemberAcceptance NewGroupMemberAcceptance { get; set; } = ConfigRoomRequestNewGroupMemberAcceptance.autoallow;
		
		/// <summary>
		/// Node permissions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public NodePermissions Permissions { get; set; }
	}
	
	/// <summary>
	/// Request model for revoking group(s) from the room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomGroupsDeleteBatchRequest
	{
		
		/// <summary>
		/// List of group IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public int[] Ids { get; set; }
	}
	
	/// <summary>
	/// Request model for adding a guest user to the room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomGuestUserAddRequest
	{
		
		/// <summary>
		/// List of room-user mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roomGuestInvitations")]
		public RoomGuestUserInvitation[] RoomGuestInvitations { get; set; }
	}
	
	/// <summary>
	/// Request item model for inviting a guest user to a room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomGuestUserInvitation
	{
		
		/// <summary>
		/// Email 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	/// <summary>
	/// Room Polices
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomPolicies
	{
		
		/// <summary>
		/// Default policy room expiration period in seconds.
		///
		///All files in a room will have their expiration date set to this period after their respective upload. 
		///
		///0 means no default expiration policy is set.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultExpirationPeriod")]
		public int DefaultExpirationPeriod { get; set; }
	}
	
	/// <summary>
	/// Room Policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomPoliciesRequest
	{
		
		/// <summary>
		/// Default policy room expiration period in seconds.
		///
		///All files in a room will have their expiration date set to this period after their respective upload. 
		///
		///0 means no default expiration policy is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultExpirationPeriod")]
		public System.Nullable<System.Int32> DefaultExpirationPeriod { get; set; }
	}
	
	/// <summary>
	/// List of rooms
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomTreeDataList
	{
		
		/// <summary>
		/// List of room data information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoomData[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomUser
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Display name
		///
		///use information from `UserInfo` instead to combine a display name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Email 
		///
		///use `email` from `UserInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///Unique identifier for the user
		///
		///use `id` from `UserInfo` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Is user granted room permissions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isGranted")]
		public bool IsGranted { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///User login name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Node permissions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public NodePermissions Permissions { get; set; }
		
		/// <summary>
		/// Public key container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeyContainer")]
		public PublicKeyContainer PublicKeyContainer { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public UserInfo UserInfo { get; set; }
	}
	
	/// <summary>
	/// List of users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomUserList
	{
		
		/// <summary>
		/// List of room-user mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoomUser[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Request model for granting user(s) to the room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomUsersAddBatchRequest
	{
		
		/// <summary>
		/// List of room-user mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoomUsersAddBatchRequestItem[] Items { get; set; }
	}
	
	/// <summary>
	/// Request item model for granting user to the room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomUsersAddBatchRequestItem
	{
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Node permissions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public NodePermissions Permissions { get; set; }
	}
	
	/// <summary>
	/// Request model for revoking user(s) from the room
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomUsersDeleteBatchRequest
	{
		
		/// <summary>
		/// List of user IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public int[] Ids { get; set; }
	}
	
	/// <summary>
	/// Webhook information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomWebhook
	{
		
		/// <summary>
		/// Determines whether webhook is assigned to the room.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isAssigned")]
		public bool IsAssigned { get; set; }
		
		/// <summary>
		/// Webhook information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	/// Webhook information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook
	{
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// List of names of event types
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTypeNames")]
		public string[] EventTypeNames { get; set; }
		
		/// <summary>
		/// Expiration date / time
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.DateTimeOffset ExpireAt { get; set; }
		
		/// <summary>
		/// Last HTTP status code when a webhook is disabled due to delivery failures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failStatus")]
		public System.Nullable<System.Int32> FailStatus { get; set; }
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Is enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Secret; used for event message signatures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// Modification date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
		
		/// <summary>
		/// URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Request model for handling webhook assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomWebhookAssignment
	{
		
		/// <summary>
		/// Determines whether webhook is assigned to the room.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isAssigned")]
		public bool IsAssigned { get; set; }
		
		/// <summary>
		/// Webhook ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public long WebhookId { get; set; }
	}
	
	/// <summary>
	/// List of webhooks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RoomWebhookList
	{
		
		/// <summary>
		/// List of webhooks
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoomWebhook[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// S3 configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Config
	{
		
		/// <summary>
		/// Determines whether Access Key ID is defined
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKeyDefined")]
		public bool AccessKeyDefined { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.24.0
		///
		///S3 bucket name
		///
		///use `bucketUrl` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// S3 object storage bucket URL
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketUrl")]
		public string BucketUrl { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.24.0
		///
		///S3 object storage endpoint URL
		///
		///use `bucketUrl` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUrl")]
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// S3 region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Determines whether Access Secret Key is defined
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretKeyDefined")]
		public bool SecretKeyDefined { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a S3 configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3ConfigCreateRequest
	{
		
		/// <summary>
		/// Access Key ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public string AccessKey { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.24.0
		///
		///S3 bucket name
		///
		///use `bucketUrl` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// S3 object storage bucket URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketUrl")]
		public string BucketUrl { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.24.0
		///
		///S3 object storage endpoint URL
		///
		///use `bucketUrl` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUrl")]
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// S3 region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Secret Access Key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretKey")]
		public string SecretKey { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a S3 configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3ConfigUpdateRequest
	{
		
		/// <summary>
		/// Access Key ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public string AccessKey { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.24.0
		///
		///S3 bucket name
		///
		///use `bucketUrl` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// S3 object storage bucket URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketUrl")]
		public string BucketUrl { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.24.0
		///
		///S3 object storage endpoint URL
		///
		///use `bucketUrl` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endpointUrl")]
		public string EndpointUrl { get; set; }
		
		/// <summary>
		/// S3 region
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Secret Access Key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretKey")]
		public string SecretKey { get; set; }
	}
	
	/// <summary>
	/// S3 file upload status information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3FileUploadStatus
	{
		
		/// <summary>
		/// Error information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ErrorResponse ErrorDetails { get; set; }
		
		/// <summary>
		/// Node information (Node can be a room, folder or file)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="node")]
		public Node Node { get; set; }
		
		/// <summary>
		/// S3 file upload status:
		///
		///* `transfer` - upload in progress
		///
		///* `finishing` - completing file upload
		///
		///* `done` - file upload successully done
		///
		///* `error` - an error occurred while file upload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// S3 file upload status information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3ShareUploadStatus
	{
		
		/// <summary>
		/// Error information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ErrorResponse ErrorDetails { get; set; }
		
		/// <summary>
		/// File name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// File size in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// S3 file upload status:
		///
		///* `transfer` - upload in progress
		///
		///* `finishing` - completing file upload
		///
		///* `done` - file upload successully done
		///
		///* `error` - an error occurred while file upload
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// S3 tag information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Tag
	{
		
		/// <summary>
		/// S3 tag ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Determines whether S3 is mandatory or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMandatory")]
		public System.Nullable<System.Boolean> IsMandatory { get; set; }
		
		/// <summary>
		/// S3 tag key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// S3 tag value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Request model for creating a S3 tag
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3TagCreateRequest
	{
		
		/// <summary>
		/// Determines whether S3 is mandatory or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMandatory")]
		public System.Nullable<System.Boolean> IsMandatory { get; set; }
		
		/// <summary>
		/// S3 tag key
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// S3 tag value
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// List of S3 tag IDs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3TagIds
	{
		
		/// <summary>
		/// List of S3 tag IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public int[] Ids { get; set; }
	}
	
	/// <summary>
	/// List of S3 tags
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3TagList
	{
		
		/// <summary>
		/// List of configured S3 tags
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public S3Tag[] Items { get; set; }
	}
	
	/// <summary>
	/// DRACOON server time
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdsServerTime
	{
		
		/// <summary>
		/// DRACOON server time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	/// <summary>
	/// Software version information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SoftwareVersionData
	{
		
		/// <summary>
		/// Build date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="buildDate")]
		public System.DateTimeOffset BuildDate { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.24.0
		///
		///Determines if the DRACOON Core is deployed in the cloud environment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDracoonCloud")]
		public System.Nullable<System.Boolean> IsDracoonCloud { get; set; }
		
		/// <summary>
		/// REST API version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="restApiVersion")]
		public string RestApiVersion { get; set; }
		
		/// <summary>
		/// Revision number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scmRevisionNumber")]
		public string ScmRevisionNumber { get; set; }
		
		/// <summary>
		/// DRACOON server version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sdsServerVersion")]
		public string SdsServerVersion { get; set; }
	}
	
	/// <summary>
	/// Subscribed download share information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribedDownloadShare
	{
		
		/// <summary>
		/// Auth parent room ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authParentId")]
		public System.Nullable<System.Int64> AuthParentId { get; set; }
		
		/// <summary>
		/// Share ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
	}
	
	/// <summary>
	/// List of subscribed download shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribedDownloadShareList
	{
		
		/// <summary>
		/// List of subscribed download shares
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SubscribedDownloadShare[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Subscribed node information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribedNode
	{
		
		/// <summary>
		/// Auth parent room ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authParentId")]
		public System.Nullable<System.Int64> AuthParentId { get; set; }
		
		/// <summary>
		/// Node ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Node type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NodeType Type { get; set; }
	}
	
	/// <summary>
	/// List of subscribed nodes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribedNodeList
	{
		
		/// <summary>
		/// List of subscribed nodes
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SubscribedNode[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Subscribed upload share information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribedUploadShare
	{
		
		/// <summary>
		/// Share ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Target room or folder ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNodeId")]
		public System.Nullable<System.Int64> TargetNodeId { get; set; }
	}
	
	/// <summary>
	/// List of subscribed upload shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscribedUploadShareList
	{
		
		/// <summary>
		/// List of subscribed upload shares
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SubscribedUploadShare[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPlanRequest
	{
		
		/// <summary>
		/// subscription plan id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionPlanId")]
		public int SubscriptionPlanId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPlanResponse
	{
		
		/// <summary>
		/// subscription plan id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionPlanId")]
		public int SubscriptionPlanId { get; set; }
	}
	
	/// <summary>
	/// Syslog settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyslogConfig
	{
		
		/// <summary>
		/// Is syslog enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Syslog server (IP or FQDN)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Determines whether user’s IP address is logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logIpEnabled")]
		public System.Nullable<System.Boolean> LogIpEnabled { get; set; }
		
		/// <summary>
		/// Syslog server port
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Protocol to connect to syslog server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<SyslogConfigProtocol> Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SyslogConfigProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
	}
	
	/// <summary>
	/// System defaults
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemDefaults
	{
		
		/// <summary>
		/// Default expiration period for Download Shares in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadShareDefaultExpirationPeriod")]
		public System.Nullable<System.Int32> DownloadShareDefaultExpirationPeriod { get; set; }
		
		/// <summary>
		/// Default expiration period for all uploaded files in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileDefaultExpirationPeriod")]
		public System.Nullable<System.Int32> FileDefaultExpirationPeriod { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.42.0
		///
		///Defines if login fields should be hidden
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideLoginInputFields")]
		public System.Nullable<System.Boolean> HideLoginInputFields { get; set; }
		
		/// <summary>
		/// Define which language should be default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageDefault")]
		public string LanguageDefault { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///Defines if new users get the role Non Member Viewer by default
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonmemberViewerDefault")]
		public System.Nullable<System.Boolean> NonmemberViewerDefault { get; set; }
		
		/// <summary>
		/// Default expiration period for Upload Shares in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadShareDefaultExpirationPeriod")]
		public System.Nullable<System.Int32> UploadShareDefaultExpirationPeriod { get; set; }
	}
	
	/// <summary>
	/// System information (default language and authentication methods)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SystemInfo
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Authentication methods:
		///
		///* `sql`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		///
		///use `authData` instead
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public AuthMethod[] AuthMethods { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.42.0
		///
		///Defines if login fields should be hidden
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hideLoginInputFields")]
		public bool HideLoginInputFields { get; set; }
		
		/// <summary>
		/// System default language
		///
		///cf. [RFC 5646](https://tools.ietf.org/html/rfc5646)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="languageDefault")]
		public string LanguageDefault { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.15.0
		///
		///Determines whether S3 direct upload is enforced or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3EnforceDirectUpload")]
		public bool S3EnforceDirectUpload { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.14.0
		///
		///List of S3 Hosts for CSP header
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3Hosts")]
		public string[] S3Hosts { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.21.0
		///
		///Defines if S3 is used as storage backend
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useS3Storage")]
		public bool UseS3Storage { get; set; }
	}
	
	/// <summary>
	/// Request model for testing connection for Active Directory configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestActiveDirectoryConfigRequest
	{
		
		/// <summary>
		/// Search scope of Active Directory; only users below this node can log on.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ldapUsersDomain")]
		public string LdapUsersDomain { get; set; }
		
		/// <summary>
		/// Distinguished Name (DN) of Active Directory administrative account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverAdminName")]
		public string ServerAdminName { get; set; }
		
		/// <summary>
		/// Password of Active Directory administrative account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverAdminPassword")]
		public string ServerAdminPassword { get; set; }
		
		/// <summary>
		/// IPv4 or IPv6 address or host name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// Port
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverPort")]
		public int ServerPort { get; set; }
		
		/// <summary>
		/// SSL finger print of Active Directory server.
		///
		///Mandatory for LDAPS connections.
		///
		///Format: `Algorithm/Fingerprint`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslFingerPrint")]
		public string SslFingerPrint { get; set; }
		
		/// <summary>
		/// Determines whether LDAPS should be used instead of plain LDAP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useLdaps")]
		public System.Nullable<System.Boolean> UseLdaps { get; set; }
	}
	
	/// <summary>
	/// Response model for testing connection for Active Directory configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestActiveDirectoryConfigResponse
	{
		
		/// <summary>
		/// Search scope of Active Directory; only users below this node can log on.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ldapUsersDomain")]
		public string LdapUsersDomain { get; set; }
		
		/// <summary>
		/// Distinguished Name (DN) of Active Directory administrative account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverAdminName")]
		public string ServerAdminName { get; set; }
		
		/// <summary>
		/// Password of Active Directory administrative account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverAdminPassword")]
		public string ServerAdminPassword { get; set; }
		
		/// <summary>
		/// IPv4 or IPv6 address or host name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// Port
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverPort")]
		public int ServerPort { get; set; }
		
		/// <summary>
		/// SSL finger print of Active Directory server.
		///
		///Mandatory for LDAPS connections.
		///
		///Format: `Algorithm/Fingerprint`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslFingerPrint")]
		public string SslFingerPrint { get; set; }
		
		/// <summary>
		/// Determines whether LDAPS should be used instead of plain LDAP.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="useLdaps")]
		public bool UseLdaps { get; set; }
	}
	
	/// <summary>
	/// Third-party dependency information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyDependenciesData
	{
		
		/// <summary>
		/// Third party dependencies artifactId
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// Third party dependencies description
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Third party dependencies groupId
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// Third party dependencies id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Third party dependencies licenses type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		/// <summary>
		/// Third party dependencies name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Third party dependencies type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Third party dependencies url
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Third party dependencies version
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Contains QR code URL and OTP URI for TOTP setup
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TotpSetupResponse
	{
		
		/// <summary>
		/// ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// URI containing secret key, issuer and account information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otpUri")]
		public string OtpUri { get; set; }
		
		/// <summary>
		/// TOTP data URL (QR Code)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="qrCode")]
		public string QrCode { get; set; }
		
		/// <summary>
		/// Secret key used for setup of TOTP authentication
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
	}
	
	/// <summary>
	/// Request model for updating an Active Directory configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateActiveDirectoryConfigRequest
	{
		
		/// <summary>
		/// If `userImport` is set to `true`,
		///
		///the user must be member of this Active Directory group to receive a newly created DRACOON account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adExportGroup")]
		public string AdExportGroup { get; set; }
		
		/// <summary>
		/// Unique name for an Active Directory configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// DEPRECATED, will be ignored
		///
		///Determines whether a room is created for each user that is created by automatic import (like a home folder).
		///
		///Room's name will equal the user's login name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createHomeFolder")]
		public System.Nullable<System.Boolean> CreateHomeFolder { get; set; }
		
		/// <summary>
		/// DEPRECATED, will be ignored
		///
		///ID of the room in which the individual rooms for users will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeFolderParent")]
		public System.Nullable<System.Int64> HomeFolderParent { get; set; }
		
		/// <summary>
		/// Search scope of Active Directory; only users below this node can log on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ldapUsersDomain")]
		public string LdapUsersDomain { get; set; }
		
		/// <summary>
		/// User group that is assigned to users who are created by automatic import.
		///
		///Reset with `0`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdsImportGroup")]
		public System.Nullable<System.Int64> SdsImportGroup { get; set; }
		
		/// <summary>
		/// Distinguished Name (DN) of Active Directory administrative account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverAdminName")]
		public string ServerAdminName { get; set; }
		
		/// <summary>
		/// Password of Active Directory administrative account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverAdminPassword")]
		public string ServerAdminPassword { get; set; }
		
		/// <summary>
		/// IPv4 or IPv6 address or host name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverIp")]
		public string ServerIp { get; set; }
		
		/// <summary>
		/// Port
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverPort")]
		public System.Nullable<System.Int32> ServerPort { get; set; }
		
		/// <summary>
		/// SSL finger print of Active Directory server.
		///
		///Mandatory for LDAPS connections.
		///
		///Format: `Algorithm/Fingerprint`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslFingerPrint")]
		public string SslFingerPrint { get; set; }
		
		/// <summary>
		/// Determines whether LDAPS should be used instead of plain LDAP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useLdaps")]
		public System.Nullable<System.Boolean> UseLdaps { get; set; }
		
		/// <summary>
		/// Name of Active Directory attribute that is used as login name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userFilter")]
		public string UserFilter { get; set; }
		
		/// <summary>
		/// Determines if a DRACOON account is automatically created for a new user
		///
		///who successfully logs on with his / her AD / IDP account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImport")]
		public System.Nullable<System.Boolean> UserImport { get; set; }
	}
	
	/// <summary>
	/// Request model for updating auth token settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAuthTokenRestrictions
	{
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Restricted OAuth access token validity (in seconds)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTokenValidity")]
		public System.Nullable<System.Int32> AccessTokenValidity { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Defines if OAuth token restrictions are enabled
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="overwriteEnabled")]
		public bool OverwriteEnabled { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Restricted OAuth refresh token validity (in seconds)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshTokenValidity")]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
	}
	
	/// <summary>
	/// Set of classification policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateClassificationPoliciesConfig
	{
		
		/// <summary>
		/// Shares classification policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareClassificationPolicies")]
		public ShareClassificationPolicies ShareClassificationPolicies { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a customer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCustomerRequest
	{
		
		/// <summary>
		/// Company name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Customer type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerContractType")]
		public CustomerCustomerContractType CustomerContractType { get; set; }
		
		/// <summary>
		/// Customer is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///All users of this customer will be blocked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Customer lock status:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///Please use `isLocked` instead.
		///
		///All users of this customer will be blocked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public System.Nullable<System.Boolean> LockStatus { get; set; }
		
		/// <summary>
		/// Provider customer ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerCustomerId")]
		public string ProviderCustomerId { get; set; }
		
		/// <summary>
		/// Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaMax")]
		public System.Nullable<System.Int64> QuotaMax { get; set; }
		
		/// <summary>
		/// Maximal number of users
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userMax")]
		public System.Nullable<System.Int32> UserMax { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.19.0
		///
		///Maximal number of webhooks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhooksMax")]
		public System.Nullable<System.Int64> WebhooksMax { get; set; }
	}
	
	/// <summary>
	/// Customer information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCustomerResponse
	{
		
		/// <summary>
		/// &#128679; Deprecated since v4.8.0
		///
		///Customer activation code string:
		///
		///* valid only for types `free` and `demo`
		///
		///* for `pay` customers it is empty
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationCode")]
		public string ActivationCode { get; set; }
		
		/// <summary>
		/// Company name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// List of customer attributes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerAttributes")]
		public CustomerAttributes CustomerAttributes { get; set; }
		
		/// <summary>
		/// Customer type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerContractType")]
		public CustomerCustomerContractType CustomerContractType { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.21.0
		///
		///Customer UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerUuid")]
		public string CustomerUuid { get; set; }
		
		/// <summary>
		/// Unique identifier for the customer
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Customer is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///All users of this customer will be blocked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///Customer lock status:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///Please use `isLocked` instead.
		///
		///All users of this customer will be blocked and can not login anymore.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public bool LockStatus { get; set; } = false;
		
		/// <summary>
		/// Provider customer ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerCustomerId")]
		public string ProviderCustomerId { get; set; }
		
		/// <summary>
		/// Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quotaMax")]
		public long QuotaMax { get; set; }
		
		/// <summary>
		/// Number of days left for trial period (relevant only for type `demo`)
		///
		///(not used)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialDays")]
		public System.Nullable<System.Int32> TrialDays { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// Maximal number of users
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userMax")]
		public int UserMax { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.19.0
		///
		///Maximal number of webhooks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhooksMax")]
		public System.Nullable<System.Int64> WebhooksMax { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a Download Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDownloadShareRequest
	{
		
		/// <summary>
		/// Country shorthand symbol (cf. ISO 3166-2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCountry")]
		public string DefaultCountry { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Internal notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalNotes")]
		public string InternalNotes { get; set; }
		
		/// <summary>
		/// Max allowed downloads
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDownloads")]
		public System.Nullable<System.Int32> MaxDownloads { get; set; }
		
		/// <summary>
		/// Alias name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Notify creator on every download.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyCreator")]
		public System.Nullable<System.Boolean> NotifyCreator { get; set; }
		
		/// <summary>
		/// Access password, not allowed for encrypted shares
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Language tag for messages to receiver
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'maxDownloads' for Download Share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetMaxDownloads")]
		public System.Nullable<System.Boolean> ResetMaxDownloads { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'password' for Download Share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetPassword")]
		public System.Nullable<System.Boolean> ResetPassword { get; set; }
		
		/// <summary>
		/// Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
		
		/// <summary>
		/// List of recipient FQTNs
		///
		///E.123 / E.164 Format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textMessageRecipients")]
		public string[] TextMessageRecipients { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a list of Download Shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDownloadSharesBulkRequest
	{
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// Max allowed downloads
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxDownloads")]
		public System.Nullable<System.Int32> MaxDownloads { get; set; }
		
		/// <summary>
		/// List of ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public int[] ObjectIds { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'maxDownloads' for Download Share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetMaxDownloads")]
		public System.Nullable<System.Boolean> ResetMaxDownloads { get; set; }
		
		/// <summary>
		/// Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
	}
	
	/// <summary>
	/// Request model for updating encryption password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEncryptionPasswordPolicies
	{
		
		/// <summary>
		/// Password character rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterRules")]
		public CharacterRules CharacterRules { get; set; }
		
		/// <summary>
		/// Minimum number of characters a password must contain
		/// Minimum: 1
		/// Maximum: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		[System.ComponentModel.DataAnnotations.Range(1, 1024)]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
		///
		///(min. 4 character pattern)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectKeyboardPatterns")]
		public System.Nullable<System.Boolean> RejectKeyboardPatterns { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain user info (first name, last name, email, user name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectUserInfo")]
		public System.Nullable<System.Boolean> RejectUserInfo { get; set; }
	}
	
	/// <summary>
	/// Request model for updating eventlog settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEventlogConfig
	{
		
		/// <summary>
		/// Is eventlog enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Determines whether user’s IP address is logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logIpEnabled")]
		public System.Nullable<System.Boolean> LogIpEnabled { get; set; }
		
		/// <summary>
		/// Retention period (in days) of event log entries.
		///
		///After that period, all entries are deleted.
		///
		///Recommended value: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Request model for updating favorites
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFavoritesBulkRequest
	{
		
		/// <summary>
		/// Sets the favorite attribute to true or false on each file in an array of nodes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isFavorite")]
		public bool IsFavorite { get; set; }
		
		/// <summary>
		/// List of ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public int[] ObjectIds { get; set; }
	}
	
	/// <summary>
	/// Request model for updating file's metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFileRequest
	{
		
		/// <summary>
		/// Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<System.Int32> Classification { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// File name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	/// <summary>
	/// Request model for updating files
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFilesBulkRequest
	{
		
		/// <summary>
		/// Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<System.Int32> Classification { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// List of ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public int[] ObjectIds { get; set; }
	}
	
	/// <summary>
	/// Request model for updating folder's metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFolderRequest
	{
		
		/// <summary>
		/// &#128640; Since v4.30.0
		///
		///Classification ID:
		///
		///* `1` - public
		///
		///* `2` - internal
		///
		///* `3` - confidential
		///
		///* `4` - strictly confidential
		///
		///
		///
		///Provided (or default) classification is taken from room
		///
		///when file gets uploaded without any classification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<UpdateFolderRequestClassification> Classification { get; set; }
		
		/// <summary>
		/// Folder name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		///
		///(default: current server datetime in UTC format)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateFolderRequestClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	/// <summary>
	/// Request model for updating general settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGeneralSettings
	{
		
		/// <summary>
		/// Request model for updating auth token settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authTokenRestrictions")]
		public UpdateAuthTokenRestrictions AuthTokenRestrictions { get; set; }
		
		/// <summary>
		/// Activation status of client-side encryption.
		///
		///Can only be enabled once; disabling is not possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cryptoEnabled")]
		public System.Nullable<System.Boolean> CryptoEnabled { get; set; }
		
		/// <summary>
		/// Enable email notification button
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailNotificationButtonEnabled")]
		public System.Nullable<System.Boolean> EmailNotificationButtonEnabled { get; set; }
		
		/// <summary>
		/// Each user has to confirm the EULA at first login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eulaEnabled")]
		public System.Nullable<System.Boolean> EulaEnabled { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Defines if login fields should be hidden
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideLoginInputFields")]
		public System.Nullable<System.Boolean> HideLoginInputFields { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Determines if the media server is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaServerEnabled")]
		public System.Nullable<System.Boolean> MediaServerEnabled { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.9.0
		///
		///Defines if S3 tags are enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3TagsEnabled")]
		public System.Nullable<System.Boolean> S3TagsEnabled { get; set; }
		
		/// <summary>
		/// Allow sending of share passwords via SMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharePasswordSmsEnabled")]
		public System.Nullable<System.Boolean> SharePasswordSmsEnabled { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.14.0
		///
		///Allow weak password
		///
		///* A weak password has to fulfill the following criteria:
		///
		///   * is at least 8 characters long
		///
		///   * contains letters and numbers
		///
		///* A strong password has to fulfill the following criteria in addition:
		///
		///   * contains at least one special character
		///
		///   * contains upper and lower case characters
		///
		///Please use `PUT /system/config/policies/passwords` API to change configured password policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weakPasswordEnabled")]
		public System.Nullable<System.Boolean> WeakPasswordEnabled { get; set; }
	}
	
	/// <summary>
	/// Request model for updating group's metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGroupRequest
	{
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// Group name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Set of guest user policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGuestUsersPoliciesConfig
	{
		
		/// <summary>
		/// Determines whether the invite of users to rooms is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isInviteUsersEnabled")]
		public bool IsInviteUsersEnabled { get; set; }
	}
	
	/// <summary>
	/// Request model for updating login password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateLoginPasswordPolicies
	{
		
		/// <summary>
		/// Password character rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterRules")]
		public CharacterRules CharacterRules { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.24.0
		///
		///Determines whether a login password change should be enforced for all users
		///
		///Only takes effect, if login password policies get stricter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforceLoginPasswordChange")]
		public System.Nullable<System.Boolean> EnforceLoginPasswordChange { get; set; }
		
		/// <summary>
		/// Minimum number of characters a password must contain
		/// Minimum: 1
		/// Maximum: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		[System.ComponentModel.DataAnnotations.Range(1, 1024)]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Number of passwords to archive
		///
		///(must be between `0` and `10`; `0` means that password history is disabled)
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfArchivedPasswords")]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> NumberOfArchivedPasswords { get; set; }
		
		/// <summary>
		/// Password expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passwordExpiration")]
		public PasswordExpiration PasswordExpiration { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain word(s) from a dictionary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectDictionaryWords")]
		public System.Nullable<System.Boolean> RejectDictionaryWords { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
		///
		///(min. 4 character pattern)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectKeyboardPatterns")]
		public System.Nullable<System.Boolean> RejectKeyboardPatterns { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain user info (first name, last name, email, user name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectUserInfo")]
		public System.Nullable<System.Boolean> RejectUserInfo { get; set; }
		
		/// <summary>
		/// User lockout information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userLockout")]
		public UserLockout UserLockout { get; set; }
	}
	
	/// <summary>
	/// Set of multi-factor authentication policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateMfaPoliciesConfig
	{
		
		/// <summary>
		/// Determines whether multi-factor authentication is enforced
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMfaEnforced")]
		public bool IsMfaEnforced { get; set; }
	}
	
	/// <summary>
	/// Request model for updating an OAuth client
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateOAuthClientRequest
	{
		
		/// <summary>
		/// Validity of the access token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessTokenValidity")]
		public System.Nullable<System.Int32> AccessTokenValidity { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Validity of the approval interval in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalValidity")]
		public System.Nullable<System.Int32> ApprovalValidity { get; set; }
		
		/// <summary>
		/// Name, which is shown at the client configuration and authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientName")]
		public string ClientName { get; set; }
		
		/// <summary>
		/// Secret, which client uses at authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Determines whether client is a confidential or public client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientType")]
		public System.Nullable<UpdateOAuthClientRequestClientType> ClientType { get; set; }
		
		/// <summary>
		/// Authorized grant types
		///
		///* `authorization_code`
		///
		///* `implicit`
		///
		///* `password`
		///
		///* `client_credentials`
		///
		///* `refresh_token`
		///
		///
		///
		///cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grantTypes")]
		public string[] GrantTypes { get; set; }
		
		/// <summary>
		/// Determines whether client is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// URIs, to which a user is redirected after authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUris")]
		public string[] RedirectUris { get; set; }
		
		/// <summary>
		/// Validity of the refresh token in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshTokenValidity")]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateOAuthClientRequestClientType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confidential = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 1,
	}
	
	/// <summary>
	/// Request model for updating an OpenID Connect IDP configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateOpenIdIdpConfigRequest
	{
		
		/// <summary>
		/// URL of the authorization endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationEndPointUrl")]
		public string AuthorizationEndPointUrl { get; set; }
		
		/// <summary>
		/// ID of the OpenID client
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Secret, which client uses at authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// Name of the claim which is used for the user mapping fallback.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackMappingClaim")]
		public string FallbackMappingClaim { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Flow, which is used at authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flow")]
		public CreateOpenIdIdpConfigRequestFlow Flow { get; set; }
		
		/// <summary>
		/// Issuer identifier of the IDP
		///
		///The value is a case sensitive URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// URL of the JWKS endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwksEndPointUrl")]
		public string JwksEndPointUrl { get; set; }
		
		/// <summary>
		/// Name of the claim which is used for the user mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mappingClaim")]
		public string MappingClaim { get; set; }
		
		/// <summary>
		/// Name of the IDP
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// PKCE code challenge method.
		///
		///cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkceChallengeMethod")]
		public string PkceChallengeMethod { get; set; }
		
		/// <summary>
		/// Determines whether PKCE is enabled.
		///
		///cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pkceEnabled")]
		public System.Nullable<System.Boolean> PkceEnabled { get; set; }
		
		/// <summary>
		/// URIs, to which a user is redirected after authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUris")]
		public string[] RedirectUris { get; set; }
		
		/// <summary>
		/// Set `true` to reset `fallbackMappingClaim`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetFallbackMappingClaim")]
		public System.Nullable<System.Boolean> ResetFallbackMappingClaim { get; set; }
		
		/// <summary>
		/// List of requested scopes
		///
		///Usually `openid` and the names of the requested claims.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		/// <summary>
		/// URL of the token endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenEndPointUrl")]
		public string TokenEndPointUrl { get; set; }
		
		/// <summary>
		/// Determines if a DRACOON account is automatically created for a new user
		///
		///who successfully logs on with his / her AD / IDP account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImportEnabled")]
		public System.Nullable<System.Boolean> UserImportEnabled { get; set; }
		
		/// <summary>
		/// User group that is assigned to users who are created by automatic import.
		///
		///Reset with `0`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userImportGroup")]
		public System.Nullable<System.Int64> UserImportGroup { get; set; }
		
		/// <summary>
		/// URL of the user info endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInfoEndPointUrl")]
		public string UserInfoEndPointUrl { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.23.0
		///
		///Source, which is used to get user information at the import or update of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInfoSource")]
		public CreateOpenIdIdpConfigRequestUserInfoSource UserInfoSource { get; set; }
		
		/// <summary>
		/// URL of the user management UI.
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userManagementUrl")]
		public string UserManagementUrl { get; set; }
		
		/// <summary>
		/// Determines if the DRACOON account is updated with data from AD / IDP.
		///
		///For OpenID Connect, the scopes `email` and `profile` are needed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userUpdateEnabled")]
		public System.Nullable<System.Boolean> UserUpdateEnabled { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a set of password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePasswordPoliciesConfig
	{
		
		/// <summary>
		/// Request model for updating encryption password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionPasswordPolicies")]
		public UpdateEncryptionPasswordPolicies EncryptionPasswordPolicies { get; set; }
		
		/// <summary>
		/// Request model for updating login password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginPasswordPolicies")]
		public UpdateLoginPasswordPolicies LoginPasswordPolicies { get; set; }
		
		/// <summary>
		/// Request model for updating shares password policies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharesPasswordPolicies")]
		public UpdateSharesPasswordPolicies SharesPasswordPolicies { get; set; }
	}
	
	/// <summary>
	/// Request model for updating shares password policies
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSharesPasswordPolicies
	{
		
		/// <summary>
		/// Password character rules
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterRules")]
		public CharacterRules CharacterRules { get; set; }
		
		/// <summary>
		/// Minimum number of characters a password must contain
		/// Minimum: 1
		/// Maximum: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		[System.ComponentModel.DataAnnotations.Range(1, 1024)]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain word(s) from a dictionary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectDictionaryWords")]
		public System.Nullable<System.Boolean> RejectDictionaryWords { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
		///
		///(min. 4 character pattern)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectKeyboardPatterns")]
		public System.Nullable<System.Boolean> RejectKeyboardPatterns { get; set; }
		
		/// <summary>
		/// Determines whether a password must NOT contain user info (first name, last name, email, user name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rejectUserInfo")]
		public System.Nullable<System.Boolean> RejectUserInfo { get; set; }
	}
	
	/// <summary>
	/// Request model for updating room's metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRoomRequest
	{
		
		/// <summary>
		/// Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		///
		///Use empty string to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Quota in byte
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public System.Nullable<System.Int64> Quota { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the node was created on external file system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampCreation")]
		public System.Nullable<System.DateTimeOffset> TimestampCreation { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.22.0
		///
		///Time the content of a node was last modified on external file system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampModification")]
		public System.Nullable<System.DateTimeOffset> TimestampModification { get; set; }
	}
	
	/// <summary>
	/// Request model for handling webhook assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateRoomWebhookRequest
	{
		
		/// <summary>
		/// Assign a webhook to a room to use it for node actions within the room 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RoomWebhookAssignment[] Items { get; set; }
	}
	
	/// <summary>
	/// Request model for updating subscriptions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubscriptionsBulkRequest
	{
		
		/// <summary>
		/// Creates or deletes a subscription on each item in an array of objects.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isSubscribed")]
		public bool IsSubscribed { get; set; }
		
		/// <summary>
		/// List of ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public int[] ObjectIds { get; set; }
	}
	
	/// <summary>
	/// Request model for updating syslog settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSyslogConfig
	{
		
		/// <summary>
		/// Is syslog enabled?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Syslog server (IP or FQDN)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host")]
		public string Host { get; set; }
		
		/// <summary>
		/// Determines whether user’s IP address is logged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logIpEnabled")]
		public System.Nullable<System.Boolean> LogIpEnabled { get; set; }
		
		/// <summary>
		/// Syslog server port
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Protocol to connect to syslog server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public SyslogConfigProtocol Protocol { get; set; }
	}
	
	/// <summary>
	/// Request model for updating system defaults
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSystemDefaults
	{
		
		/// <summary>
		/// Default expiration period for Download Shares in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadShareDefaultExpirationPeriod")]
		public System.Nullable<System.Int32> DownloadShareDefaultExpirationPeriod { get; set; }
		
		/// <summary>
		/// Default expiration period for all uploaded files in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileDefaultExpirationPeriod")]
		public System.Nullable<System.Int32> FileDefaultExpirationPeriod { get; set; }
		
		/// <summary>
		/// Define which language should be default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageDefault")]
		public string LanguageDefault { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.12.0
		///
		///Defines if new users get the role Non Member Viewer by default
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonmemberViewerDefault")]
		public System.Nullable<System.Boolean> NonmemberViewerDefault { get; set; }
		
		/// <summary>
		/// Default expiration period for Upload Shares in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadShareDefaultExpirationPeriod")]
		public System.Nullable<System.Int32> UploadShareDefaultExpirationPeriod { get; set; }
	}
	
	/// <summary>
	/// Request model for updating an Upload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUploadShareRequest
	{
		
		/// <summary>
		/// Country shorthand symbol (cf. ISO 3166-2)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCountry")]
		public string DefaultCountry { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// Number of days after which uploaded files expire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesExpiryPeriod")]
		public System.Nullable<System.Int32> FilesExpiryPeriod { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Internal notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalNotes")]
		public string InternalNotes { get; set; }
		
		/// <summary>
		/// Maximal total size of uploaded files (in bytes)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSize")]
		public System.Nullable<System.Int64> MaxSize { get; set; }
		
		/// <summary>
		/// Maximal amount of files to upload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSlots")]
		public System.Nullable<System.Int32> MaxSlots { get; set; }
		
		/// <summary>
		/// Alias name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Notify creator on every upload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifyCreator")]
		public System.Nullable<System.Boolean> NotifyCreator { get; set; }
		
		/// <summary>
		/// Password
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Language tag for messages to receiver
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'filesExpiryPeriod' for Upload Share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetFilesExpiryPeriod")]
		public System.Nullable<System.Boolean> ResetFilesExpiryPeriod { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'maxSize' for Upload Share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetMaxSize")]
		public System.Nullable<System.Boolean> ResetMaxSize { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'maxSlots' for Upload Share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetMaxSlots")]
		public System.Nullable<System.Boolean> ResetMaxSlots { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'password' for Upload Share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetPassword")]
		public System.Nullable<System.Boolean> ResetPassword { get; set; }
		
		/// <summary>
		/// Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
		
		/// <summary>
		/// Allow display of already uploaded files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showUploadedFiles")]
		public System.Nullable<System.Boolean> ShowUploadedFiles { get; set; }
		
		/// <summary>
		/// List of recipient FQTNs
		///
		///E.123 / E.164 Format
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textMessageRecipients")]
		public string[] TextMessageRecipients { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a list of Download Shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUploadSharesBulkRequest
	{
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// Number of days after which uploaded files expire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesExpiryPeriod")]
		public System.Nullable<System.Int32> FilesExpiryPeriod { get; set; }
		
		/// <summary>
		/// Maximal total size of uploaded files (in bytes)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSize")]
		public System.Nullable<System.Int64> MaxSize { get; set; }
		
		/// <summary>
		/// Maximal amount of files to upload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSlots")]
		public System.Nullable<System.Int32> MaxSlots { get; set; }
		
		/// <summary>
		/// List of ids
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public int[] ObjectIds { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'filesExpiryPeriod' for Upload Share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetFilesExpiryPeriod")]
		public System.Nullable<System.Boolean> ResetFilesExpiryPeriod { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'maxSize' for Upload Share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetMaxSize")]
		public System.Nullable<System.Boolean> ResetMaxSize { get; set; }
		
		/// <summary>
		/// Set 'true' to reset 'maxSlots' for Upload Share
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetMaxSlots")]
		public System.Nullable<System.Boolean> ResetMaxSlots { get; set; }
		
		/// <summary>
		/// Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
		
		/// <summary>
		/// Allow display of already uploaded files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showUploadedFiles")]
		public System.Nullable<System.Boolean> ShowUploadedFiles { get; set; }
	}
	
	/// <summary>
	/// Request model for updating user account information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserAccountRequest
	{
		
		/// <summary>
		/// Accept EULA
		///
		///Present, if EULA is system global active.
		///
		///cf. `GET system/config/settings/general` - `eulaEnabled`
		///
		///If accepted can not be undone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptEULA")]
		public System.Nullable<System.Boolean> AcceptEULA { get; set; }
		
		/// <summary>
		/// Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// User first name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		///
		///Do NOT use `gender`! It will be ignored.
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// &#128640; Since v4.20.0
		///
		///IETF language tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// User last name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// Request model for updating user's metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserRequest
	{
		
		/// <summary>
		/// User Authentication Data Update Request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authData")]
		public UserAuthDataUpdateRequest AuthData { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Authentication methods:
		///
		///* `sql`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		///
		///use `authData` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public UserAuthMethod[] AuthMethods { get; set; }
		
		/// <summary>
		/// Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Expiration information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public ObjectExpiration Expiration { get; set; }
		
		/// <summary>
		/// User first name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		///
		///Do NOT use `gender`! It will be ignored.
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// User is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///User is locked and can not login anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// User last name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///User lock status:
		///
		///* `0` - locked
		///
		///* `1` - Web access allowed
		///
		///* `2` - Web and mobile access allowed
		///
		///
		///
		///Please use `isLocked` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public System.Nullable<System.Int32> LockStatus { get; set; }
		
		/// <summary>
		/// Multi-factor authentication configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaConfig")]
		public MfaConfig MfaConfig { get; set; }
		
		/// <summary>
		/// Phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// IETF language tag
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	/// <summary>
	/// User Authentication Data Update Request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAuthDataUpdateRequest
	{
		
		/// <summary>
		/// ID of the user's Active Directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adConfigId")]
		public System.Nullable<System.Int32> AdConfigId { get; set; }
		
		/// <summary>
		/// User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Authentication method
		///
		///
		///
		///Authentication methods:
		///
		///* `basic`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// ID of the user's OIDC provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oidConfigId")]
		public System.Nullable<System.Int32> OidConfigId { get; set; }
	}
	
	/// <summary>
	/// Request model for updating a webhook
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWebhookRequest
	{
		
		/// <summary>
		/// List of names of event types
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventTypeNames")]
		public string[] EventTypeNames { get; set; }
		
		/// <summary>
		/// Is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// Name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Secret; used for event message signatures
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// If set to true, an example event is being created
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerExampleEvent")]
		public System.Nullable<System.Boolean> TriggerExampleEvent { get; set; }
		
		/// <summary>
		/// URL (must begin with the `HTTPS` scheme)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Upload Share information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadShare
	{
		
		/// <summary>
		/// Share access key to generate secure link
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKey")]
		public string AccessKey { get; set; }
		
		/// <summary>
		/// Total amount of existing files uploaded with this share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntFiles")]
		public System.Nullable<System.Int32> CntFiles { get; set; }
		
		/// <summary>
		/// Total amount of uploads conducted with this share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cntUploads")]
		public System.Nullable<System.Int32> CntUploads { get; set; }
		
		/// <summary>
		/// Creation date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserInfo CreatedBy { get; set; }
		
		/// <summary>
		/// Upload Share URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataUrl")]
		public string DataUrl { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// Number of days after which uploaded files expire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filesExpiryPeriod")]
		public System.Nullable<System.Int32> FilesExpiryPeriod { get; set; }
		
		/// <summary>
		/// Share ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Internal notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalNotes")]
		public string InternalNotes { get; set; }
		
		/// <summary>
		/// Encryption state
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncrypted")]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Is share protected by password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isProtected")]
		public bool IsProtected { get; set; }
		
		/// <summary>
		/// Maximal total size of uploaded files (in bytes)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSize")]
		public System.Nullable<System.Int64> MaxSize { get; set; }
		
		/// <summary>
		/// Maximal amount of files to upload
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSlots")]
		public System.Nullable<System.Int32> MaxSlots { get; set; }
		
		/// <summary>
		/// Alias name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.20.0
		///
		///Notify creator on every upload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notifyCreator")]
		public bool NotifyCreator { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient email addresses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string Recipients { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Show creator first and last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorName")]
		public System.Nullable<System.Boolean> ShowCreatorName { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Show creator email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCreatorUsername")]
		public System.Nullable<System.Boolean> ShowCreatorUsername { get; set; }
		
		/// <summary>
		/// Allow display of already uploaded files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showUploadedFiles")]
		public System.Nullable<System.Boolean> ShowUploadedFiles { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.11.0
		///
		///CSV string of recipient MSISDNs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsRecipients")]
		public string SmsRecipients { get; set; }
		
		/// <summary>
		/// Target room or folder ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public long TargetId { get; set; }
		
		/// <summary>
		/// Path to shared upload node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetPath")]
		public string TargetPath { get; set; }
		
		/// <summary>
		/// Node type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetType")]
		public string TargetType { get; set; }
		
		/// <summary>
		/// Modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// User information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public UserInfo UpdatedBy { get; set; }
	}
	
	/// <summary>
	/// Request model for sending an email of an Upload Share link
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadShareLinkEmail
	{
		
		/// <summary>
		/// Notification email content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// Language tag for messages to receiver
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverLanguage")]
		public string ReceiverLanguage { get; set; }
		
		/// <summary>
		/// List of recipient email addresses
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
	}
	
	/// <summary>
	/// List of Upload Shares
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadShareList
	{
		
		/// <summary>
		/// List of Upload Shares
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UploadShare[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccount
	{
		
		/// <summary>
		/// User Authentication Data
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authData")]
		public UserAuthData AuthData { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Authentication methods:
		///
		///* `sql`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		///
		///use `authData` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public UserAuthMethod[] AuthMethods { get; set; }
		
		/// <summary>
		/// Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// User has manageable rooms
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasManageableRooms")]
		public bool HasManageableRooms { get; set; }
		
		/// <summary>
		/// Homeroom ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomId")]
		public System.Nullable<System.Int64> HomeRoomId { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// User has generated private key.
		///
		///Possible if client-side encryption is active for this customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncryptionEnabled")]
		public System.Nullable<System.Boolean> IsEncryptionEnabled { get; set; }
		
		/// <summary>
		/// User is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///User is locked and can not login anymore.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public bool IsLocked { get; set; } = false;
		
		/// <summary>
		/// &#128640; Since v4.20.0
		///
		///IETF language tag
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Last failed logon date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginFailAt")]
		public System.Nullable<System.DateTimeOffset> LastLoginFailAt { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.6.0
		///
		///Last failed logon IP address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginFailIp")]
		public string LastLoginFailIp { get; set; }
		
		/// <summary>
		/// Last successful logon date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginSuccessAt")]
		public System.Nullable<System.DateTimeOffset> LastLoginSuccessAt { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.6.0
		///
		///Last successful logon IP address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginSuccessIp")]
		public string LastLoginSuccessIp { get; set; }
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///User lock status:
		///
		///* `0` - locked
		///
		///* `1` - Web access allowed
		///
		///* `2` - Web and mobile access allowed
		///
		///
		///
		///Please use `isLocked` instead.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public int LockStatus { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///If `true`, the user must set the `email` at the first login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mustSetEmail")]
		public System.Nullable<System.Boolean> MustSetEmail { get; set; }
		
		/// <summary>
		/// User has accepted EULA.
		///
		///Present, if EULA is system global active.
		///
		///cf. `GET system/config/settings/general` - `eulaEnabled`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needsToAcceptEULA")]
		public System.Nullable<System.Boolean> NeedsToAcceptEULA { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Determines whether user has to change his / her password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="needsToChangePassword")]
		public bool NeedsToChangePassword { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///If `true`, the user must change the `userName` at the first login.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needsToChangeUserName")]
		public System.Nullable<System.Boolean> NeedsToChangeUserName { get; set; }
		
		/// <summary>
		/// Phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// User custom attributes (list of key-value pairs)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAttributes")]
		public UserAttributes UserAttributes { get; set; }
		
		/// <summary>
		/// All groups the user is member of
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userGroups")]
		public UserGroup[] UserGroups { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// List of roles
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userRoles")]
		public RoleList UserRoles { get; set; }
	}
	
	/// <summary>
	/// User custom attributes (list of key-value pairs)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAttributes
	{
		
		/// <summary>
		/// List of key-value pairs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public KeyValueEntry[] Items { get; set; }
	}
	
	/// <summary>
	/// Group information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserGroup
	{
		
		/// <summary>
		/// Unique identifier for the group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// Determines whether user is a member of the group or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isMember")]
		public bool IsMember { get; set; }
		
		/// <summary>
		/// Group name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserData
	{
		
		/// <summary>
		/// User Authentication Data
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authData")]
		public UserAuthData AuthData { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///Authentication methods:
		///
		///* `sql`
		///
		///* `active_directory`
		///
		///* `radius`
		///
		///* `openid`
		///
		///use `authData` instead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMethods")]
		public UserAuthMethod[] AuthMethods { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Avatar UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avatarUuid")]
		public string AvatarUuid { get; set; }
		
		/// <summary>
		/// Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// User has manageable rooms
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManageableRooms")]
		public System.Nullable<System.Boolean> HasManageableRooms { get; set; }
		
		/// <summary>
		/// Homeroom ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomId")]
		public System.Nullable<System.Int64> HomeRoomId { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// User has generated private key.
		///
		///Possible if client-side encryption is active for this customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncryptionEnabled")]
		public System.Nullable<System.Boolean> IsEncryptionEnabled { get; set; }
		
		/// <summary>
		/// User is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///User is locked and can not login anymore.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public bool IsLocked { get; set; } = false;
		
		/// <summary>
		/// Determines whether multi-factor authentication is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMfaEnabled")]
		public System.Nullable<System.Boolean> IsMfaEnabled { get; set; }
		
		/// <summary>
		/// Determines whether multi-factor authentication is enforced
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMfaEnforced")]
		public System.Nullable<System.Boolean> IsMfaEnforced { get; set; }
		
		/// <summary>
		/// Last successful logon date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginSuccessAt")]
		public System.Nullable<System.DateTimeOffset> LastLoginSuccessAt { get; set; }
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///User lock status:
		///
		///* `0` - locked
		///
		///* `1` - Web access allowed
		///
		///* `2` - Web and mobile access allowed
		///
		///
		///
		///Please use `isLocked` instead.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public int LockStatus { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///User login name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// Public key container
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeyContainer")]
		public PublicKeyContainer PublicKeyContainer { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// User custom attributes (list of key-value pairs)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAttributes")]
		public UserAttributes UserAttributes { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// List of roles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRoles")]
		public RoleList UserRoles { get; set; }
	}
	
	/// <summary>
	/// List of request models for setting a user file key(s)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserFileKeySetBatchRequest
	{
		
		/// <summary>
		/// List of user file keys
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserFileKeySetRequest[] Items { get; set; }
	}
	
	/// <summary>
	/// Request model for setting a user file key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserFileKeySetRequest
	{
		
		/// <summary>
		/// File ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public long FileId { get; set; }
		
		/// <summary>
		/// File key information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileKey")]
		public FileKey FileKey { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public long UserId { get; set; }
	}
	
	/// <summary>
	/// List of groups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserGroupList
	{
		
		/// <summary>
		/// List of user-group mappings
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserGroup[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// User IDs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserIds
	{
		
		/// <summary>
		/// List of user IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public int[] Ids { get; set; }
	}
	
	/// <summary>
	/// User information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserItem
	{
		
		/// <summary>
		/// &#128640; Since v4.11.0
		///
		///Avatar UUID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="avatarUuid")]
		public string AvatarUuid { get; set; }
		
		/// <summary>
		/// Creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Email 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireAt")]
		public System.Nullable<System.DateTimeOffset> ExpireAt { get; set; }
		
		/// <summary>
		/// User first name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.12.0
		///
		///Gender
		/// </summary>
		[System.ComponentModel.DefaultValue("n")]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; } = "n";
		
		/// <summary>
		/// &#128679; Deprecated since v4.27.0
		///
		///User has manageable rooms
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasManageableRooms")]
		public System.Nullable<System.Boolean> HasManageableRooms { get; set; }
		
		/// <summary>
		/// Homeroom ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeRoomId")]
		public System.Nullable<System.Int64> HomeRoomId { get; set; }
		
		/// <summary>
		/// Unique identifier for the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public long Id { get; set; }
		
		/// <summary>
		/// User has generated private key.
		///
		///Possible if client-side encryption is active for this customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEncryptionEnabled")]
		public System.Nullable<System.Boolean> IsEncryptionEnabled { get; set; }
		
		/// <summary>
		/// User is locked:
		///
		///* `false` - unlocked
		///
		///* `true` - locked
		///
		///
		///
		///User is locked and can not login anymore.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public bool IsLocked { get; set; } = false;
		
		/// <summary>
		/// Last successful logon date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginSuccessAt")]
		public System.Nullable<System.DateTimeOffset> LastLoginSuccessAt { get; set; }
		
		/// <summary>
		/// User last name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.7.0
		///
		///User lock status:
		///
		///* `0` - locked
		///
		///* `1` - Web access allowed
		///
		///* `2` - Web and mobile access allowed
		///
		///
		///
		///Please use `isLocked` instead.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lockStatus")]
		public int LockStatus { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.13.0
		///
		///User login name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// Phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// &#128679; Deprecated since v4.18.0
		///
		///Job title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// User custom attributes (list of key-value pairs)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAttributes")]
		public UserAttributes UserAttributes { get; set; }
		
		/// <summary>
		/// &#128640; Since v4.13.0
		///
		///Username
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		/// <summary>
		/// List of roles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRoles")]
		public RoleList UserRoles { get; set; }
	}
	
	/// <summary>
	/// List of users
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserList
	{
		
		/// <summary>
		/// List of users
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UserItem[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Contains information about the user's MFA status
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserMfaStatusResponse
	{
		
		/// <summary>
		/// Determines whether multi-factor authentication is enforced
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mfaEnforced")]
		public bool MfaEnforced { get; set; }
		
		/// <summary>
		/// Information about the second factor authentication method setup by the user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mfaSetups")]
		public MfaSetupStatus[] MfaSetups { get; set; }
	}
	
	/// <summary>
	/// List of webhooks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebhookList
	{
		
		/// <summary>
		/// List of webhooks
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Webhook[] Items { get; set; }
		
		/// <summary>
		/// Range information
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Request model for ZIP download
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ZipDownloadRequest
	{
		
		/// <summary>
		/// List of node IDs
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodeIds")]
		public int[] NodeIds { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Authenticate user (Login)
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.13.0</h3>
		/// 
		/// ### Description:
		/// Authenticates user and provides an authentication token (`X-Sds-Auth-Token`) that is required for the most operations.
		/// 
		/// ### Precondition:
		/// Existing user that is **NOT** locked.
		/// 
		/// ### Postcondition:
		/// User is logged in.
		/// 
		/// ### Further Information:
		/// The provided token is valid for **two hours**, every usage resets this period to two full hours again.
		/// Logging off invalidates the token.
		/// 
		/// ### Available authentication methods:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method (`authType`) | Description |
		/// | :--- | :--- |
		/// | `basic` | Log in with credentials stored in the database <br>Formerly known as `sql`.|
		/// | `active_directory` | Log in with Active Directory credentials |
		/// | `radius` | Log in with RADIUS username, PIN and token password.<br>Token (request parameter) may be set, otherwise this parameter is ignored. If token is set, password is optional. |
		/// | `openid` | Please use `POST /auth/openid/login` API to login with OpenID Connect identity |
		/// 
		/// </details>
		/// Login v4/auth/login
		/// </summary>
		/// <returns>OK</returns>
		public async Task<LoginResponse> LoginAsync(LoginRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LoginResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiate OpenID Connect authentication
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>
		/// 
		/// ### Description:
		/// This is the first step of the OpenID Connect authentication.
		/// The user is send to the OpenID Connect identity provider to authenticate himself and retrieve an authorization code.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// User is redirected to OpenID Connect identity provider to authenticate himself.
		/// 
		/// ### Further Information:
		/// None.
		/// InitiateOpenIdLogin v4/auth/openid/login
		/// </summary>
		/// <param name="issuer">Issuer identifier of the OpenID Connect identity provider</param>
		/// <param name="redirect_uri">Redirect URI to complete the OpenID Connect authentication</param>
		/// <param name="language">Language ID or ISO 639-1 code</param>
		/// <param name="test">Flag to test the authentication parameters.
		///
		///If the request is valid, the API will respond with `204 No Content`.</param>
		public async Task InitiateOpenIdLoginAsync(string issuer, string redirect_uri, string language, bool test, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/openid/login?issuer=" + (issuer==null? "" : System.Uri.EscapeDataString(issuer))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&test="+test;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete OpenID Connect authentication
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>
		/// 
		/// ### Description:
		/// This is the second step of the OpenID Connect authentication.
		/// The user hands over the authorization code and is logged in.
		/// 
		/// ### Precondition:
		/// Existing user with activated OpenID Connect authentication that is **NOT** locked.
		/// 
		/// ### Postcondition:
		/// User is logged in.
		/// 
		/// ### Further Information:
		/// None.
		/// CompleteOpenIdLogin v4/auth/openid/login
		/// </summary>
		/// <param name="code">Authorization code</param>
		/// <param name="id_token">Identity token</param>
		/// <param name="state">Authentication state</param>
		/// <returns>OK</returns>
		public async Task<LoginResponse> CompleteOpenIdLoginAsync(string code, string id_token, string state, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/openid/login?code=" + (code==null? "" : System.Uri.EscapeDataString(code))+"&id_token=" + (id_token==null? "" : System.Uri.EscapeDataString(id_token))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LoginResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ping
		/// ### Description:
		/// Test connection to DRACOON Core Service.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// `200 OK` with current date string is returned if successful.
		/// 
		/// ### Further Information:
		/// None.
		/// Ping v4/auth/ping
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> PingAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recover username
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.13.0</h3>
		/// 
		/// ### Description:
		/// Request an email with the user names of all accounts connected to the email.
		/// 
		/// ### Precondition:
		/// Valid email address.
		/// 
		/// ### Postcondition:
		/// An email is sent to the provided address, with a list of account user names connected to it.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// RecoverUserName v4/auth/recover_username
		/// </summary>
		public async Task RecoverUserNameAsync(RecoverUserNameRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/recover_username";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request password reset
		/// ### Description:
		/// Request an email with a password reset token for a certain user to reset password.
		/// 
		/// ### Precondition:
		/// Registered user account.
		/// 
		/// ### Postcondition:
		/// Provided user receives email with password reset token.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestPasswordReset v4/auth/reset_password
		/// </summary>
		public async Task RequestPasswordResetAsync(ResetPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/reset_password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validate information for password reset
		/// ### Description:
		/// Request all information for a password change dialogue e.g. real name of user.
		/// 
		/// ### Precondition:
		/// User received a password reset token.
		/// 
		/// ### Postcondition:
		/// Context information is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// ValidateResetPasswordToken v4/auth/reset_password/{token}
		/// </summary>
		/// <param name="token">Password reset token</param>
		/// <returns>OK</returns>
		public async Task<ResetPasswordTokenValidateResponse> ValidateResetPasswordTokenAsync(string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/reset_password/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResetPasswordTokenValidateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset password
		/// ### Description:
		/// Resets user's password.
		/// 
		/// ### Precondition:
		/// User received a password reset token.
		/// 
		/// ### Postcondition:
		/// User's password is reset to the provided password.
		/// 
		/// ### Further Information:
		/// Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// ResetPassword v4/auth/reset_password/{token}
		/// </summary>
		/// <param name="token">Password reset token</param>
		public async Task ResetPasswordAsync(string token, ResetPasswordWithTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/auth/reset_password/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request default values
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// Returns a list of configurable system default values.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of configurable default settings is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable default values:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
		/// | `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |
		/// | `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |
		/// | `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |
		/// | `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |
		/// 
		/// </details>
		/// RequestSystemDefaultsInfo v4/config/info/defaults
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemDefaults> RequestSystemDefaultsInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/defaults";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemDefaults>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request general settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// Returns a list of configurable general settings.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of configurable general settings is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable general settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
		/// | `cryptoEnabled` | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
		/// | `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |
		/// | `eulaEnabled` | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |
		/// | `useS3Storage` | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
		/// | `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |
		/// | `homeRoomsActive` | Determines whether each AD user has a personal home room | `true or false` |
		/// | `homeRoomParentId` | Defines a node under which all personal home rooms are located. **NULL** if `homeRoomsActive` is `false` | `Long` |
		/// | `subscriptionPlan` | Subscription Plan. <br> 0 = Pro, 1 = Premium, 2 = Basic | `Integer` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated general settings:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | <del>`mediaServerEnabled`</del> | Determines whether media server is enabled.<br>Returns boolean value dependent on conjunction of `mediaServerConfigEnabled` AND `mediaServerEnabled` | `true or false` |
		/// | <del>`weakPasswordEnabled`</del> | Determines whether weak password is allowed.<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |
		/// 
		/// </details>
		/// RequestGeneralSettingsInfo v4/config/info/general
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GeneralSettingsInfo> RequestGeneralSettingsInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/general";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GeneralSettingsInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request infrastructure properties
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// Returns a list of read-only infrastructure properties.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of infrastructure properties is returned.
		/// 
		/// ### Further Information:
		/// Source: `core-service.properties`
		/// 
		/// ### Read-only infrastructure properties:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `smsConfigEnabled` | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |
		/// | `mediaServerConfigEnabled` | Determines whether media server is **system-wide** enabled. | `true or false` |
		/// | `s3DefaultRegion` | Suggested S3 region | `Region name` |
		/// | `s3EnforceDirectUpload` | Enforce direct upload to S3 | `true or false` |
		/// | `isDracoonCloud` | Determines if the **DRACOON Core** is deployed in the cloud environment | `true or false` |
		/// | `tenantUuid` | Current tenant UUID | `UUID` |
		/// 
		/// </details>
		/// 
		/// RequestInfrastructurePropertiesInfo v4/config/info/infrastructure
		/// </summary>
		/// <returns>OK</returns>
		public async Task<InfrastructureProperties> RequestInfrastructurePropertiesInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/infrastructure";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InfrastructureProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of notification channels
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of configured notification channels.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of notification channels is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestNotificationChannelsInfo v4/config/info/notifications/channels
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NotificationChannelList> RequestNotificationChannelsInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/notifications/channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationChannelList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request algorithms
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of available algorithms used for encryption.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of available algorithms is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestAlgorithms v4/config/info/policies/algorithms
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AlgorithmVersionInfoList> RequestAlgorithmsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/policies/algorithms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlgorithmVersionInfoList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request classification policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.30.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of classification policies:
		/// * `shareClassificationPolicies`
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of configured classification policies is returned.
		/// 
		/// ### Further Information:
		/// `classificationRequiresSharePassword`: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. `0` means no password will be enforced.
		/// 
		/// RequestClassificationPoliciesConfigInfo v4/config/info/policies/classifications
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ClassificationPoliciesConfig> RequestClassificationPoliciesConfigInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/policies/classifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClassificationPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request guest users policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.40.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of guest users policies.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of configured guest users policies is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestGuestUsersPoliciesConfigInfo v4/config/info/policies/guest_users
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GuestUsersPoliciesConfig> RequestGuestUsersPoliciesConfigInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/policies/guest_users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestUsersPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request password policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of configured password policies for all password types:
		/// * `login`
		/// * `shares`
		/// * `encryption`
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of configured password policies is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Available password policies:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Value | Password Type |
		/// | :--- | :--- | :--- | :--- |
		/// | `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |
		/// | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfArchivedPasswords` | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |
		/// | `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |
		/// | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |
		/// | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |
		/// | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |
		/// | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |
		/// 
		/// </details>
		/// RequestPasswordPoliciesConfigInfo v4/config/info/policies/passwords
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PasswordPoliciesConfig> RequestPasswordPoliciesConfigInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/policies/passwords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PasswordPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of product packages
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.38.0</h3>
		/// 
		/// ### Description:
		/// Returns a list of product packages.
		/// 
		/// ### Precondition:
		/// Authenticated user
		/// 
		/// ### Postcondition:
		/// List of Product Packages is returned.
		/// 
		/// ### Further Information:
		/// 
		/// RequestProductPackages v4/config/info/product_packages
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ProductPackageResponseList> RequestProductPackagesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/product_packages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductPackageResponseList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of currently enabled product packages
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.38.0</h3>
		/// 
		/// ### Description:
		/// Returns a list of currently enabled product packages.
		/// 
		/// ### Precondition:
		/// Authenticated user
		/// 
		/// ### Postcondition:
		/// List of currently enabled Product Packages is returned.
		/// 
		/// ### Further Information:
		/// 
		/// RequestCurrentProductPackages v4/config/info/product_packages/current
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ProductPackageResponseList> RequestCurrentProductPackagesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/product_packages/current";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProductPackageResponseList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of configured S3 tags
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Retrieve all configured S3 tags.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of configured S3 tags is returned.
		/// 
		/// ### Further Information:
		/// An empty list is returned if no S3 tags are found / configured.
		/// RequestS3TagsInfo v4/config/info/s3_tags
		/// </summary>
		/// <returns>OK</returns>
		public async Task<S3TagList> RequestS3TagsInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/info/s3_tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3TagList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request system settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.6.0</h3>
		/// 
		/// ### Description:
		/// Returns a list of configurable system settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> required.
		/// 
		/// ### Postcondition:
		/// List of configurable settings is returned.
		/// 
		/// ### Further Information:
		/// Check for every settings key new corresponding API and key below.
		/// 
		/// If `eula_active` is true, but **NOT** accepted yet, or password **MUST** be changed, only the following two values are returned:
		/// * `allow_system_global_weak_password`
		/// * `eula_active`
		/// 
		/// ### Configurable settings
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `branding_server_branding_id` | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.<br>cf. `GET /system/config/settings/branding` `BrandingConfig.brandingQualifier` | `String` |
		/// | `branding_portal_url` | Access URL to to the Branding Portal<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/branding` `BrandingConfig.brandingProviderUrl` | `String` |
		/// | `dblog` | Write logs to local database.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/eventlog` `EventlogConfig.enabled` | `true or false` |
		/// | `default_downloadshare_expiration_period` | Default expiration period for Download Shares in days<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.downloadShareDefaultExpirationPeriod` | `Integer between 0 and 9999` |
		/// | `default_file_upload_expiration_date` | Default expiration period for all uploaded files in days<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.fileDefaultExpirationPeriod` | `Integer between 0 and 9999` |
		/// | `default_language` | Define which language should be default.<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.languageDefault` | cf. `GET /public/system/info` - `SystemInfo.languageDefault` |
		/// | `default_uploadshare_expiration_period` | Default expiration period for Upload Shares in days<br>cf. `GET /system/config/settings/defaults` `SystemDefaults.uploadShareDefaultExpirationPeriod` | `Integer between 0 and 9999` |
		/// | `enable_client_side_crypto` | Activation status of client-side encryption<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `GET /system/config/settings/general` `GeneralSettings.cryptoEnabled` | `true or false`<br>default: `false` |
		/// | `eula_active` | Each user has to confirm the EULA at first login.<br>cf. `GET /system/config/settings/general` `GeneralSettings.eulaEnabled` | `true or false` |
		/// | `eventlog_retention_period` | Retention period (in days) of event log entries<br>After that period, all entries are deleted.<br>cf. `GET /system/config/settings/eventlog` `EventlogConfig.retentionPeriod` | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: `7` |
		/// | `ip_address_logging` | Determines whether a user's IP address is logged.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/eventlog` `EventlogConfig.logIpEnabled`<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.logIpEnabled` | `true or false` |
		/// | `mailserver` | Email server to send emails.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.host` | `DNS name or IPv4 of an email server` |
		/// | `mailserver_authentication_necessary` | Set to `true` if the email server requires authentication.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.authenticationEnabled` | `true or false` |
		/// | `mailserver_password` | **Password is no longer returned.**<br>Check `mailserver_password_set` to determine whether password is set. |  |
		/// | `mailserver_password_set` | Indicates if a password is set for the mailserver (because `mailserver_password` is always returned empty).<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.passwordDefined` | `true or false` |
		/// | `mailserver_port` | Email server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.port` | `Valid port number` |
		/// | `mailserver_username` | User ame for email server<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.username` | `Username for authentication` |
		/// | `mailserver_use_ssl` | Email server requires SSL connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_starttls` to be `false`<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.username` | `true or false` |
		/// | `mailserver_use_starttls` | Email server requires StartTLS connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_ssl` to be `false`<br>cf. `GET /system/config/settings/mail_server` `MailServerConfig.starttlsEnabled` | `true or false` |
		/// | `syslog` | Write logs to a syslog interface.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.enabled` | `true or false` |
		/// | `syslog_host` | Syslog server (IP or FQDN)<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.host` | `DNS name or IPv4 of a syslog server` |
		/// | `syslog_port` | Syslog server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.port` | `Valid port number` |
		/// | `syslog_protocol` | Protocol to connect to syslog server.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `GET /system/config/settings/syslog` `SyslogConfig.protocol` | `TCP or UDP` |
		/// | `enable_email_notification_button` | Enable mail notification button.<br>cf. `GET /system/config/settings/general` `GeneralSettings.emailNotificationButtonEnabled` | `true or false` |
		/// | `allow_share_password_sms` | Allow sending of share passwords via SMS.<br>cf. `GET /system/config/settings/general` `GeneralSettings.sharePasswordSmsEnabled` | `true or false` |
		/// | `globally_allow_share_password_sms` | Allow sending of share passwords via SMS **system-wide** (read-only).<br>cf. `GET /system/config/settings/infrastructure` `InfrastructureProperties.smsConfigEnabled` | `true or false` |
		/// | `use_s3_storage` | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `GET /system/config/settings/general` `GeneralSettings.useS3Storage` | `true or false` |
		/// | `s3_default_region` |Suggested S3 region (read-only)<br>cf. `GET /system/config/settings/infrastructure` `InfrastructureProperties.s3DefaultRegion` | `Region name` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated settings
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | <del>`allow_system_global_weak_password`</del> | Determines whether weak password (cf. _Password Policy_ below) is allowed.<br>cf. `GET /system/config/settings/general` `GeneralSettings.weakPasswordEnabled`<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |
		/// | <del>`branding_server_customer`</del> | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |
		/// | <del>`branding_server_url`</del> | Access URL to to the Branding Server.<br>Only visible for _Config Manager_ of Provider Customer. | `String` |
		/// | <del>`email_from`</del> | Sender of system-generated emails<br>Only visible for _Config Manager_ of Provider Customer.<br>**Moved to branding** | `Valid email address` |
		/// | <del>`email_to_sales`</del> | Contact email address for customers to request more user licenses or data volume.<br>**Moved to branding** | `Valid email address` |
		/// | <del>`email_to_support`</del> | Support email address for users<br>**Moved to branding** | `Valid email address` |
		/// | <del>`file_size_js`</del> | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.<br>Bigger files will require a JavaApplet. | `Integer`<br>Recommended value: `10485760` (=`10MB`) |
		/// | <del>`system_name`</del> | System name<br>**Moved to branding** use `product.title` | `Display name of the DRACOON` |
		/// 
		/// </details>
		/// RequestSystemSettings v4/config/settings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ConfigOptionList> RequestSystemSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ConfigOptionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update system settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.6.0</h3>
		/// 
		/// ### Description:
		/// Update configurable settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// One or more global settings gets changed.
		/// 
		/// ### Further Information:
		/// This API is deprecated and will be removed in the future.
		/// Check for every settings key new corresponding API and key below.
		/// 
		/// ### Configurable settings:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `branding_server_branding_id` | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.<br>cf. `PUT /system/config/settings/branding` `BrandingConfig.brandingQualifier` | `String` |
		/// | `branding_portal_url` | Access URL to to the Branding Portal<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/branding` `BrandingConfig.brandingProviderUrl` | `String` |
		/// | `dblog` | Write logs to local database.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/eventlog` `EventlogConfig.enabled` | `true or false` |
		/// | `default_downloadshare_expiration_period` | Default expiration period for Download Shares in days<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.downloadShareDefaultExpirationPeriod` | `Integer between 0 and 9999`<br>Set `0` to disable. |
		/// | `default_file_upload_expiration_date` | Default expiration period for all uploaded files in days<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.fileDefaultExpirationPeriod` | `Integer between 0 and 9999`<br>Set `0` to disable. |
		/// | `default_language` | Define which language should be default.<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.languageDefault` | cf. `GET /public/system/info` - `SystemInfo.languageDefault` |
		/// | `default_uploadshare_expiration_period` | Default expiration period for Upload Shares in days<br>cf. `PUT /system/config/settings/defaults` `SystemDefaults.uploadShareDefaultExpirationPeriod` | `Integer between 0 and 9999`<br>Set `0` to disable. |
		/// | `enable_client_side_crypto` | Activation status of client-side encryption<br>Can only be enabled once; disabling is **NOT** possible.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.cryptoEnabled` | `true or false`<br>default: `false` |
		/// | `eula_active` | Each user has to confirm the EULA at first login.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.eulaEnabled` | `true or false` |
		/// | `eventlog_retention_period` | Retention period (in days) of event log entries<br>After that period, all entries are deleted.<br>cf. `PUT /system/config/settings/eventlog` `EventlogConfig.retentionPeriod` | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: `7` |
		/// | `ip_address_logging` | Determines whether a user's IP address is logged.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/eventlog` `EventlogConfig.logIpEnabled`<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.logIpEnabled` | `true or false` |
		/// | `mailserver` | Email server to send emails.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.host` | `DNS name or IPv4 of an email server` |
		/// | `mailserver_authentication_necessary` | Set to `true` if the email server requires authentication.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.authenticationEnabled` | `true or false` |
		/// | `mailserver_password` | Password for email server<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.password` | `Password for authentication` |
		/// | `mailserver_port` | Email server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.port` | `Valid port number` |
		/// | `mailserver_username` | Username for email server<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.username` | `Username for authentication` |
		/// | `mailserver_use_ssl` | Email server requires SSL connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_starttls` to be `false`<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.username` | `true or false` |
		/// | `mailserver_use_starttls` | Email server requires StartTLS connection?<br>Only visible for _Config Manager_ of Provider Customer.<br>Requires `mailserver_use_ssl` to be `false`<br>cf. `PUT /system/config/settings/mail_server` `MailServerConfig.starttlsEnabled` | `true or false` |
		/// | `syslog` | Write logs to a syslog interface.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.enabled` | `true or false` |
		/// | `syslog_host` | Syslog server (IP or FQDN)<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.host` | `DNS name or IPv4 of a syslog server` |
		/// | `syslog_port` | Syslog server port<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.port` | `Valid port number` |
		/// | `syslog_protocol` | Protocol to connect to syslog server.<br>Only visible for _Config Manager_ of Provider Customer.<br>cf. `PUT /system/config/settings/syslog` `SyslogConfig.protocol` | `TCP or UDP` |
		/// | `enable_email_notification_button` | Enable mail notification button.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.emailNotificationButtonEnabled` | `true or false` |
		/// | `allow_share_password_sms` | Allow sending of share passwords via SMS.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.sharePasswordSmsEnabled` | `true or false` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated settings:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | <del>`allow_system_global_weak_password`</del> | Determines whether weak password (cf. _Password Policy_ below) is allowed.<br>cf. `PUT /system/config/settings/general` `GeneralSettings.weakPasswordEnabled`<br>Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |
		/// | <del>`branding_server_customer`</del> | The UUID of the branding server customer, which corresponds to customer key in the branding server. | `String` |
		/// | <del>`branding_server_url`</del> | Access URL to to the Branding Server.<br>Only visible for _Config Manager_ of Provider Customer. | `String` |
		/// | <del>`email_from`</del> | Sender of system-generated emails<br>Only visible for _Config Manager_ of Provider Customer.<br>**Moved to branding** | `Valid email address` |
		/// | <del>`email_to_sales`</del> | Contact email address for customers to request more user licenses or data volume.<br>**Moved to branding** | `Valid email address` |
		/// | <del>`email_to_support`</del> | Support email address for users<br>**Moved to branding** | `Valid email address` |
		/// | <del>`file_size_js`</del> | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.<br>Bigger files will require a JavaApplet. | `Integer`<br>Recommended value: `10485760` (=`10MB`) |
		/// | <del>`system_name`</del> | System name<br>**Moved to branding** use `product.title` | `Display name of the DRACOON` |
		/// 
		/// </details>
		/// UpdateSystemSettings v4/config/settings
		/// </summary>
		public async Task UpdateSystemSettingsAsync(ConfigOptionList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/config/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download avatar
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
		/// 
		/// ### Description:
		/// Download avatar for given user ID and UUID.
		/// 
		/// ### Precondition:
		/// Valid UUID.
		/// 
		/// ### Postcondition:
		/// Stream is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// DownloadAvatar v4/downloads/avatar/{user_id}/{uuid}
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <param name="uuid">UUID of the avatar</param>
		/// <returns>OK</returns>
		public async Task DownloadAvatarAsync(long user_id, string uuid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/downloads/avatar/"+user_id+"/"+ (uuid==null? "" : System.Uri.EscapeDataString(uuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download ZIP archive
		/// ### Description:
		/// Download multiple files in a ZIP archive.
		/// 
		/// ### Precondition:
		/// Valid download token.
		/// 
		/// ### Postcondition:
		/// Stream is returned.
		/// 
		/// ### Further Information:
		/// Create a download token with `POST /nodes/zip` API.
		/// DownloadZipArchiveViaToken v4/downloads/zip/{token}
		/// </summary>
		/// <param name="token">Download token</param>
		/// <returns>OK</returns>
		public async Task DownloadZipArchiveViaTokenAsync(string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/downloads/zip/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download file
		/// ### Description:
		/// Download a file.
		/// 
		/// ### Precondition:
		/// Valid download token.
		/// 
		/// ### Postcondition:
		/// Stream is returned.
		/// 
		/// ### Further Information:
		/// Range requests are supported.
		/// DownloadFileViaToken v4/downloads/{token}
		/// </summary>
		/// <param name="token">Download token</param>
		/// <param name="generic_mimetype">Always return `application/octet-stream` instead of specific mimetype</param>
		/// <param name="inline">Use Content-Disposition: `inline` instead of `attachment`</param>
		/// <returns>OK</returns>
		public async Task DownloadFileViaTokenAsync(string token, bool generic_mimetype, bool inline, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/downloads/"+ (token==null? "" : System.Uri.EscapeDataString(token))+"&generic_mimetype="+generic_mimetype+"&inline="+inline;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request nodes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.31.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of all nodes of type room under a certain parent.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read audit log</span> required.
		/// 
		/// ### Postcondition:
		/// List of rooms.
		/// 
		/// ### Further Information:
		/// For rooms on root level, use parent_id = 0.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `nodeName:cn:searchString_1|nodeIsEncrypted:eq:true`
		/// Filter by node name containing `searchString_1` **AND** node is encrypted .
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `nodeId` | Node ID filter | `eq` | Node ID equals value. | `positive Integer` |
		/// | `nodeName` | Node name filter | `cn, eq, sw` | Node name contains / equals / starts with value. | `search String` |
		/// | `nodeIsEncrypted` | Encrypted node filter | `eq` |  | `true or false` |
		/// 
		/// </details>
		/// 
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `nodeName:asc`
		/// Sort by `nodeName` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `nodeId` | Node ID |
		/// | `nodeName` | Node name |
		/// 
		/// </details>
		/// 
		/// RequestAuditNodeInfo v4/eventlog/audits/node_info
		/// </summary>
		/// <param name="parent_id">Parent node ID.
		///
		///Only rooms can be parents.
		///
		///Parent ID `0` or empty is the root node.</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<AuditNodeInfoResponse> RequestAuditNodeInfoAsync(long parent_id, int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/eventlog/audits/node_info?parent_id="+parent_id+"&offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuditNodeInfoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request node assigned users with permissions
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.32.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of all nodes of type room, and the room assignment users with permissions.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read audit log</span> required.
		/// 
		/// ### Postcondition:
		/// List of rooms and their assigned users is returned.
		/// 
		/// ### Further Information:
		/// 
		/// Output is limited to **500** entries.
		/// For more results please use filter criteria and the `limit` parameter.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Except for `userName`, `userFirstName` and  `userLastName` - these are connected via logical disjunction (**OR**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`
		/// Filter by user login containing `searchString_1` **OR** first name containing `searchString_2` **AND** node ID equals `2`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `nodeId` | Node ID filter | `eq` | Node ID equals value. | `positive Integer` |
		/// | `nodeName` | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |
		/// | `nodeParentId` | Node parent ID filter | `eq` | Parent ID equals value. | `positive Integer`<br>Parent ID `0` is the root node. |
		/// | `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` |
		/// | `userName` | Username (login) filter | `cn, eq` | Username contains / equals value. | `search String` |
		/// | `userFirstName` | User first name filter | `cn, eq` | User first name contains / equals value. | `search String` |
		/// | `userLastName` | User last name filter | `cn, eq` | User last name contains / equals value. | `search String` |
		/// | `permissionsManage` | Filter the users that do (not) have `manage` permissions in this room | `eq` |  | `true or false` |
		/// | `nodeIsEncrypted` | Encrypted node filter | `eq` |  | `true or false` |
		/// | `nodeHasActivitiesLog` | Activities log filter | `eq` |  | `true or false` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`nodeHasRecycleBin`</del> | Recycle bin filter<br>**Filter has no effect!** | `eq` |  | `true or false` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `nodeName:asc`
		/// Sort by `nodeName` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `nodeId` | Node ID |
		/// | `nodeName` | Node name |
		/// | `nodeParentId` | Node parent ID |
		/// | `nodeSize` | Node size |
		/// | `nodeQuota` | Node quota |
		/// 
		/// </details>
		/// RequestAuditNodeUserData v4/eventlog/audits/nodes
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<AuditNodeResponse[]> RequestAuditNodeUserDataAsync(int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/eventlog/audits/nodes?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuditNodeResponse[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request system events
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>
		/// 
		/// ### Description:
		/// Retrieve eventlog (audit log) events.
		/// 
		/// ### Precondition:
		/// Role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.
		/// 
		/// ### Postcondition:
		/// List of audit log events is returned.
		/// 
		/// ### Further Information:
		/// Output is limited to **500** entries.
		/// For more results please use filter criteria and paging (`offset` + `limit`).
		/// 
		/// Allowed `Accept-Header`:
		/// * `Accept: application/json`
		/// * `Accept: text/csv`
		/// 
		/// ---
		/// 
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `time:desc`
		/// Sort by `time` descending (default sort option).
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `time` | Event timestamp |
		/// 
		/// </details>
		/// RequestLogEventsAsJson v4/eventlog/events
		/// </summary>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="date_start">Filter events from given date 
		///
		///e.g. `2015-12-31T23:59:00`</param>
		/// <param name="date_end">Filter events until given date 
		///
		///e.g. `2015-12-31T23:59:00`</param>
		/// <param name="type">Operation ID 
		///
		///cf. `GET /eventlog/operations`</param>
		/// <param name="user_id">User ID</param>
		/// <param name="status">Operation status:
		///
		///* `0` - Success
		///
		///* `2` - Error</param>
		/// <param name="user_client">User client</param>
		/// <returns>OK</returns>
		public async Task<LogEventList> RequestLogEventsAsJsonAsync(string sort, int offset, int limit, string date_start, string date_end, int type, long user_id, RequestLogEventsAsJsonStatus status, string user_client, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/eventlog/events?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&date_start=" + (date_start==null? "" : System.Uri.EscapeDataString(date_start))+"&date_end=" + (date_end==null? "" : System.Uri.EscapeDataString(date_end))+"&type="+type+"&user_id="+user_id+"&status=" + status+"&user_client=" + (user_client==null? "" : System.Uri.EscapeDataString(user_client));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LogEventList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request allowed Log Operations
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>
		/// 
		/// ### Description:
		/// Retrieve eventlog (audit log) operation IDs and the associated log operation description.
		/// 
		/// ### Precondition:
		/// Role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.
		/// 
		/// ### Postcondition:
		/// List of available log operations is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestLogOperations v4/eventlog/operations
		/// </summary>
		/// <param name="is_deprecated">Show only deprecated operations</param>
		/// <returns>OK</returns>
		public async Task<LogOperationList> RequestLogOperationsAsync(bool is_deprecated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/eventlog/operations?is_deprecated="+is_deprecated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LogOperationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of user groups
		/// ### Description:
		/// Returns a list of user groups.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.
		/// 
		/// ### Postcondition:
		/// List of user groups is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:cn:searchString`
		/// Filter by group name containing `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `name` | Group name filter | `cn` | Group name contains value. | `search String` |
		/// | `hasRole` | (**`NEW`**) Group role filter<br>For more information about roles check **`GET /roles`** API | `eq` | Group role equals value. | <ul><li>`CONFIG_MANAGER` - Manages global configuration</li><li>`USER_MANAGER` - Manages users</li><li>`GROUP_MANAGER` - Manages user groups</li><li>`ROOM_MANAGER` - Manages top level rooms</li><li>`LOG_AUDITOR` - Reads audit logs</li><li>`NONMEMBER_VIEWER` - Views users and groups when having room _"manage"_ permission</li></ul> |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:asc|expireAt:desc`
		/// Sort by `name` ascending **AND** by `expireAt` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `name` | Group name |
		/// | `createdAt` | Creation date |
		/// | `expireAt` | Expiration date |
		/// | `cntUsers` | Amount of users |
		/// 
		/// </details>
		/// RequestGroups v4/groups
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<GroupList> RequestGroupsAsync(int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new user group
		/// ### Description:
		/// Create a new user group.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.
		/// 
		/// ### Postcondition:
		/// A new user group is created.
		/// 
		/// ### Further Information:
		/// * If a group should **NOT** expire, leave `expireAt` empty.
		/// * Group names are limited to **150** characters
		/// * Forbidden characters in group name: [`<`, `>`]
		/// 
		/// CreateGroup v4/groups
		/// </summary>
		public async Task CreateGroupAsync(CreateGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove user group
		/// ### Description:
		/// Delete a user group.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete groups</span> required.
		/// 
		/// ### Postcondition:
		/// User group is deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveGroup v4/groups/{group_id}
		/// </summary>
		/// <param name="group_id">Group ID</param>
		public async Task RemoveGroupAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user group
		/// ### Description:
		/// Retrieve detailed information about a user group.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.
		/// 
		/// ### Postcondition:
		/// User group is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestGroup v4/groups/{group_id}
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <returns>OK</returns>
		public async Task<Group> RequestGroupAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update user group's metadata
		/// ### Description:
		/// Update user group's metadata .
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.
		/// 
		/// ### Postcondition:
		/// User group's metadata is changed.
		/// 
		/// ### Further Information:
		/// * If a group should **NOT** expire, leave `expireAt` empty.
		/// * Group names are limited to **150** characters
		/// * **All** characters are allowed.
		/// UpdateGroup v4/groups/{group_id}
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <returns>OK</returns>
		public async Task<Group> UpdateGroupAsync(long group_id, UpdateGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request rooms where the group is defined as last admin group
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of all rooms where the group is defined as last admin group.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.
		/// 
		/// ### Postcondition:
		/// List of rooms is returned.
		/// 
		/// ### Further Information:
		/// An empty list is returned if no rooms were found where the group is defined as last admin group.
		/// RequestLastAdminRoomsGroups v4/groups/{group_id}/last_admin_rooms
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <returns>OK</returns>
		public async Task<LastAdminGroupRoomList> RequestLastAdminRoomsGroupsAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id+"/last_admin_rooms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LastAdminGroupRoomList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of roles assigned to the group
		/// ### Description:
		/// Retrieve a list of all roles granted to a group.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.
		/// 
		/// ### Postcondition:
		/// List of granted roles is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestGroupRoles v4/groups/{group_id}/roles
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <returns>OK</returns>
		public async Task<RoleList> RequestGroupRolesAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id+"/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request rooms granted to the group or / and rooms that can be granted
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Retrieves a list of rooms granted to the group and / or that can be granted.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.
		/// 
		/// ### Postcondition:
		/// List of rooms is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isGranted:eq:false|name:cn:searchString`
		/// Get all rooms where the group is **NOT** granted **AND** whose name is like `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `name` | Room name filter | `cn` | Room name contains value. | `search String` |
		/// | `isGranted` | Filter rooms which the group is (not) granted | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// | `effectivePerm` | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`:  DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `true` |
		/// 
		/// </details>
		/// RequestGroupRooms v4/groups/{group_id}/rooms
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <returns>OK</returns>
		public async Task<RoomTreeDataList> RequestGroupRoomsAsync(long group_id, int offset, int limit, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id+"/rooms?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoomTreeDataList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove group members
		/// ### Description:
		/// Remove group members.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.
		/// 
		/// ### Postcondition:
		/// Provided users are removed from the user group.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// The provided users are removed from the user group. Maximum number of users to remove in one request is 200.
		/// RemoveGroupMembers v4/groups/{group_id}/users
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <returns>OK</returns>
		public async Task<Group> RemoveGroupMembersAsync(long group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request group member users or / and users who can become a member
		/// ### Description:
		/// Retrieve a list of group member users or / and users who can become a member.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.
		/// 
		/// ### Postcondition:
		/// List of users is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isMember:eq:false|user:cn:searchString`
		/// Get all users that are **NOT** in this group **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
		/// | `isMember` | Filter group members | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`displayName`</del> | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |
		/// 
		/// </details>
		/// RequestGroupMembers v4/groups/{group_id}/users
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <returns>OK</returns>
		public async Task<GroupUserList> RequestGroupMembersAsync(long group_id, int offset, int limit, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id+"/users?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GroupUserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add group members
		/// ### Description:
		/// Add members to a group.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.
		/// 
		/// ### Postcondition:
		/// New members are added to the group.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// The newly provided members will be added to the existing ones.
		/// AddGroupMembers v4/groups/{group_id}/users
		/// </summary>
		/// <param name="group_id">Group ID</param>
		/// <returns>OK</returns>
		public async Task<Group> AddGroupMembersAsync(long group_id, ChangeGroupMembersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/groups/"+group_id+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Group>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request subscription plan
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.36.0</h3>
		/// 
		/// ### Description:
		/// Get the subscription plan id of the current tenant
		/// 
		/// ### Precondition:
		/// Valid `X-SDS-Service-Token` Header
		/// 
		/// ### Postcondition:
		/// Returns SubscriptionPlanResponse model that includes subscription plan id.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// InternalRequestSubscriptionPlan v4/internal/tenant/subscription_plan
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SubscriptionPlanResponse> InternalRequestSubscriptionPlanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/internal/tenant/subscription_plan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionPlanResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set subscription plan
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.36.0</h3>
		/// 
		/// ### Description:
		/// Change the subscription plan id of the current tenant
		/// 
		/// ### Precondition:
		/// Valid `X-SDS-Service-Token` Header
		/// 
		/// ### Postcondition:
		/// The subscription plan of the current tenant is set to the given value.
		/// Returns SubscriptionPlanResponse model that includes subscription plan id.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// InternalSetSubscriptionPlan v4/internal/tenant/subscription_plan
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SubscriptionPlanResponse> InternalSetSubscriptionPlanAsync(SubscriptionPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/internal/tenant/subscription_plan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscriptionPlanResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove nodes
		/// ### Description:
		/// Delete nodes (room, folder or file).
		/// 
		/// ### Precondition:
		/// Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions on supplied nodes (for folders or files) or on superordinated node (for rooms).
		/// 
		/// ### Postcondition:
		/// Nodes are deleted.
		/// 
		/// ### Further Information:
		/// Nodes **MUST** be in same parent.
		/// RemoveNodes v4/nodes
		/// </summary>
		public async Task RemoveNodesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of nodes
		/// ### Description:
		/// Provides a hierarchical list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of nodes is returned.
		/// 
		/// ### Further Information:
		/// `EncryptionInfo` is **NOT** provided.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `type:eq:room:folder|perm:eq:read`
		/// Get nodes where type equals (`room` **OR** `folder`) **AND** user has `read` permissions.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `type` | Node type filter | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder` | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> |
		/// | `perm` | Permission filter | `eq` | Permission equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `perm:eq:read:create:delete` | <ul><li>`manage`</li><li>`read`</li><li>`change`</li><li>`create`</li><li>`delete`</li><li>`manageDownloadShare`</li><li>`manageUploadShare`</li><li>`canReadRecycleBin`</li><li>`canRestoreRecycleBin`</li><li>`canDeleteRecycleBin`</li></ul> |
		/// | `childPerm` | Same as `perm`, but less restrictive (applies to child nodes only).<br>Child nodes of the parent node which do not meet the filter condition<br>are **NOT** returned. | `eq` | cf. `perm` | cf. `perm` |
		/// | `name` | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` |
		/// | `encrypted` | Node encryption status filter | `eq` |  | `true or false` |
		/// | `branchVersion` | Node branch version filter | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404` | `version number` |
		/// | `timestampCreation` | Creation timestamp filter | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampCreation:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |
		/// | `timestampModification` | Modification timestamp filter | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |
		/// | `referenceId`           | Reference ID filter               | `eq` | Reference ID equals value.   | `Integer ` |
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// Nodes are sorted by type first, then by sent sort string.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:desc|fileType:asc`
		/// Sort by `name` descending **AND** `fileType` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `name` | Node name |
		/// | `createdAt` | Creation date |
		/// | `createdBy` | Creator first name, last name |
		/// | `updatedAt` | Last modification date |
		/// | `updatedBy` | Last modifier first name, last name |
		/// | `fileType` | File type (extension) |
		/// | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
		/// | `size` | Node size |
		/// | `cntDeletedVersions` | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) |
		/// | `timestampCreation` | Creation timestamp |
		/// | `timestampModification` | Modification timestamp |
		/// 
		/// </details>
		/// 
		/// ### Deprecated sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | <del>`cntChildren`</del> | Number of direct children (**NOT** recursive; for rooms and folders only) |
		/// 
		/// </details>
		/// RequestNodes v4/nodes
		/// </summary>
		/// <param name="depth_level">* `0` - top level nodes only
		///
		///* `n` (any positive number) - include `n` levels starting from the current node</param>
		/// <param name="parent_id">Parent node ID.
		///
		///Only rooms and folders can be parents.
		///
		///Parent ID `0` or empty is the root node.</param>
		/// <param name="room_manager">Show all rooms for management perspective.
		///
		///Only possible for _Rooms Managers_ / _Room Admins_.
		///
		///For all other users, it will be ignored.</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <returns>OK</returns>
		public async Task<NodeList> RequestNodesAsync(int depth_level, long parent_id, bool room_manager, string filter, string sort, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes?depth_level="+depth_level+"&parent_id="+parent_id+"&room_manager="+room_manager+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove node comment
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Delete an existing comment for a specific node.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node and is the creator of the comment **OR** <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span> in auth parent room.
		/// 
		/// ### Postcondition:
		/// Comment is deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveNodeComment v4/nodes/comments/{comment_id}
		/// </summary>
		/// <param name="comment_id">Comment ID</param>
		public async Task RemoveNodeCommentAsync(long comment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/comments/"+comment_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit node comment
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Edit the text of an existing comment for a specific node.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node and is the creator of the comment.
		/// 
		/// ### Postcondition:
		/// Comments text gets changed.
		/// 
		/// ### Further Information:
		/// Maximum allowed text length: **65535** characters.
		/// UpdateNodeComment v4/nodes/comments/{comment_id}
		/// </summary>
		/// <param name="comment_id">Comment ID</param>
		/// <returns>OK</returns>
		public async Task<Comment> UpdateNodeCommentAsync(long comment_id, ChangeNodeCommentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/comments/"+comment_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Comment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove nodes from recycle bin
		/// ### Description:
		/// Permanently remove a list of nodes from the recycle bin.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete recycle bin</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// All provided nodes are removed.
		/// 
		/// ### Further Information:
		/// The removal of deleted nodes from the recycle bin is irreversible.
		/// RemoveDeletedNodes v4/nodes/deleted_nodes
		/// </summary>
		public async Task RemoveDeletedNodesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/deleted_nodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restore deleted nodes
		/// ### Description:
		/// Restore a list of deleted nodes.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in parent room and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; restore recycle bin</span> permissions.
		/// 
		/// ### Postcondition:
		/// The selected files are moved from the recycle bin to the chosen productive container.
		/// 
		/// ### Further Information:
		/// If no parent ID is provided, the node is restored to its previous location.
		/// The default resolution strategy is `autorename` that adds numbers to the file name until the conflict is solved.
		/// If an existing file is overwritten, it is moved to the recycle bin instead of the restored one.
		/// 
		/// Download share id (if exists) gets changed if:
		/// - node with the same name exists in the target container
		/// - `resolutionStrategy` is `overwrite`
		/// - `keepShareLinks` is `true`
		/// RestoreNodes v4/nodes/deleted_nodes/actions/restore
		/// </summary>
		public async Task RestoreNodesAsync(RestoreDeletedNodesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/deleted_nodes/actions/restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request deleted node
		/// ### Description:
		/// Get metadata of a deleted node.
		/// 
		/// ### Precondition:
		/// User can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.
		/// 
		/// ### Postcondition:
		/// Requested deleted node is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestDeletedNode v4/nodes/deleted_nodes/{deleted_node_id}
		/// </summary>
		/// <param name="deleted_node_id">Deleted node ID</param>
		/// <returns>OK</returns>
		public async Task<DeletedNode> RequestDeletedNodeAsync(long deleted_node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/deleted_nodes/"+deleted_node_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeletedNode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark or unmark a list of nodes (room, folder or file) as favorite
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>
		/// 
		/// ### Description:
		/// Marks or unmarks a list of nodes (room, folder or file) as favorite.
		/// 
		/// ### Precondition:
		/// Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).
		/// 
		/// ### Postcondition:
		/// Nodes gets marked as favorite.
		/// 
		/// ### Further Information:
		/// Maximum number of nodes is 200.
		/// UpdateFavorites v4/nodes/favorites
		/// </summary>
		public async Task UpdateFavoritesAsync(UpdateFavoritesBulkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/favorites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a list of  file’s metadata
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>
		/// 
		/// ### Description:
		/// Updates a list of file’s metadata.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// File's metadata is changed.
		/// 
		/// ### Further Information:
		/// Maximum number of files is 200
		/// 
		/// UpdateFiles v4/nodes/files
		/// </summary>
		public async Task UpdateFilesAsync(UpdateFilesBulkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set file keys for a list of users and files
		/// ### Description:
		/// Sets symmetric file keys for several users and files.
		/// 
		/// ### Precondition:
		/// User has file keys for the files.
		/// Only settable by users that own one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>
		/// 
		/// ### Postcondition:
		/// Stores new file keys for other users.
		/// 
		/// ### Further Information:
		/// Only users with copies of the file key (encrypted with their public keys) can access a certain file.
		/// This endpoint is used for the distribution of file keys amongst an authorized user base.
		/// User can set file key for himself.
		/// The users who already have a file key are ignored and keep the distributed file key
		/// 
		/// SetUserFileKeys v4/nodes/files/keys
		/// </summary>
		public async Task SetUserFileKeysAsync(UserFileKeySetBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new file upload channel
		/// ### Description:
		/// This endpoint creates a new upload channel which is the first step in any file upload workflow.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the parent container (room or folder).
		/// 
		/// ### Postcondition:
		/// A new upload channel for a file is created.
		/// Its ID and an upload token are returned.
		/// 
		/// ### Further Information:
		/// The upload ID is used for uploads with `X-Sds-Auth-Token` header, the upload token can be used for uploads without authentication header.
		/// 
		/// Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.
		/// 
		/// Notes are limited to **255** characters.
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// 
		/// CreateFileUploadChannel v4/nodes/files/uploads
		/// </summary>
		public async Task CreateFileUploadChannelAsync(CreateFileUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/uploads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel file upload
		/// ### Description:
		/// Cancel a (S3) file upload and destroy the upload channel.
		/// 
		/// ### Precondition:
		/// An upload channel has been created and user has to be the creator of the upload channel.
		/// 
		/// ### Postcondition:
		/// The upload channel is removed and all temporary uploaded data is purged.
		/// 
		/// ### Further Information:
		/// It is recommended to notify the API about cancelled uploads if possible.
		/// CancelFileUpload v4/nodes/files/uploads/{upload_id}
		/// </summary>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task CancelFileUploadAsync(string upload_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/uploads/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request status of S3 file upload
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>
		/// 
		/// ### Description:
		/// Request status of a S3 file upload.
		/// 
		/// ### Precondition:
		/// An upload channel has been created and user has to be the creator of the upload channel.
		/// 
		/// ### Postcondition:
		/// Status of S3 multipart upload request is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Possible errors:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Http Status | Error Code | Description |
		/// | :--- | :--- | :--- |
		/// | `400 Bad Request` | `-80000` | Mandatory fields cannot be empty |
		/// | `400 Bad Request` | `-80001` | Invalid positive number |
		/// | `400 Bad Request` | `-80002` | Invalid number |
		/// | `400 Bad Request` | `-40001` | (Target) room is not encrypted |
		/// | `400 Bad Request` | `-40755` | Bad file name |
		/// | `400 Bad Request` | `-40763` | File key must be set for an upload into encrypted room |
		/// | `400 Bad Request` | `-50506` | Exceeds the number of files for this Upload Share |
		/// | `403 Forbidden` |  | Access denied |
		/// | `404 Not Found` | `-20501` | Upload not found |
		/// | `404 Not Found` | `-40000` | Container not found |
		/// | `404 Not Found` | `-41000` | Node not found |
		/// | `404 Not Found` | `-70501` | User not found |
		/// | `409 Conflict` | `-40010` | Container cannot be overwritten |
		/// | `409 Conflict` |  | File cannot be overwritten |
		/// | `500 Internal Server Error` |  | System Error |
		/// | `502 Bad Gateway` |  | S3 Error |
		/// | `502 Insufficient Storage` | `-50504` | Exceeds the quota for this Upload Share |
		/// | `502 Insufficient Storage` | `-40200` | Exceeds the free node quota in room |
		/// | `502 Insufficient Storage` | `-90200` | Exceeds the free customer quota |
		/// | `502 Insufficient Storage` | `-90201` | Exceeds the free customer physical disk space |
		/// 
		/// </details>
		/// RequestUploadStatusFiles v4/nodes/files/uploads/{upload_id}
		/// </summary>
		/// <param name="upload_id">Upload channel ID</param>
		/// <returns>OK</returns>
		public async Task<S3FileUploadStatus> RequestUploadStatusFilesAsync(string upload_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/uploads/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3FileUploadStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete file upload
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.9.0</h3>
		/// 
		/// ### Use `uploads` API
		/// 
		/// ### Description:
		/// Finishes an upload and closes the corresponding upload channel.
		/// 
		/// ### Precondition:
		/// An upload channel has been created and data has been transmitted.
		/// 
		/// ### Postcondition:
		/// The upload is finished and the temporary file is moved to the productive environment.
		/// 
		/// ### Further Information:
		/// The provided file name might be changed in accordance with the resolution strategy:
		/// * **autorename**: changes the file name and adds a number to avoid conflicts.
		/// * **overwrite**: deletes any old file with the same file name.
		/// * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.
		/// 
		/// Please ensure that all chunks have been transferred correctly before finishing the upload.
		/// Download share id (if exists) gets changed if:
		/// - node with the same name exists in the target container
		/// - `resolutionStrategy` is `overwrite`
		/// - `keepShareLinks` is `true`
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// CompleteFileUpload v4/nodes/files/uploads/{upload_id}
		/// </summary>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task CompleteFileUploadAsync(string upload_id, CompleteUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/uploads/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete S3 file upload
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>
		/// 
		/// ### Description:
		/// Finishes a S3 file upload and closes the corresponding upload channel.
		/// 
		/// ### Precondition:
		/// An upload channel has been created, data has been transmitted and user has to be the creator of the upload channel
		/// 
		/// ### Postcondition:
		/// Upload channel is closed. S3 multipart upload request is completed.
		/// 
		/// ### Further Information:
		/// Download share id (if exists) gets changed if:
		/// - node with the same name exists in the target container
		/// - `resolutionStrategy` is `overwrite`
		/// - `keepShareLinks` is `true`
		/// CompleteS3FileUpload v4/nodes/files/uploads/{upload_id}/s3
		/// </summary>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task CompleteS3FileUploadAsync(string upload_id, CompleteS3FileUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/uploads/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id))+"/s3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate presigned URLs for S3 file upload
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>
		/// 
		/// ### Description:
		/// Generate presigned URLs for S3 file upload.
		/// 
		/// ### Precondition:
		/// An upload channel has been created and user has to be the creator of the upload channel.
		/// 
		/// ### Postcondition:
		/// List of presigned URLs is returned.
		/// 
		/// ### Further Information:
		/// The size for each part must be >= 5 MB, except for the last part.
		/// The part number of the first part in S3 is 1 (not 0).
		/// Use HTTP method `PUT` for uploading bytes via presigned URL.
		/// GeneratePresignedUrlsFiles v4/nodes/files/uploads/{upload_id}/s3_urls
		/// </summary>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task GeneratePresignedUrlsFilesAsync(string upload_id, GeneratePresignedUrlsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/uploads/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id))+"/s3_urls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of file versions
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Request a list of file versions. Both nodes and deleted nodes are included, depending on the user's permissions.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read/read recycle bin</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// List of file versions is returned.
		/// 
		/// ### Further Information:
		/// Maximum number of file versions is 500. The list is sorted by ID DESC.
		/// 
		/// RequestFileVersionList v4/nodes/files/versions/{reference_id}
		/// </summary>
		/// <param name="reference_id">Reference ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <returns>OK</returns>
		public async Task<FileVersionList> RequestFileVersionListAsync(long reference_id, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/versions/"+reference_id+"?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FileVersionList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a file’s metadata
		/// ### Description:
		/// Updates a list of file’s metadata.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// File's metadata is changed.
		/// 
		/// 
		/// 
		/// UpdateFile v4/nodes/files/{file_id}
		/// </summary>
		/// <param name="file_id">File ID</param>
		/// <returns>OK</returns>
		public async Task<Node> UpdateFileAsync(long file_id, UpdateFileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/"+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request room rescue key
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Returns the file key for the room emergency password / rescue key of a certain file (if available).
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// File key is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestRoomRescueKey v4/nodes/files/{file_id}/data_room_file_key
		/// </summary>
		/// <param name="file_id">File ID</param>
		/// <param name="version">Version (NEW)</param>
		/// <returns>OK</returns>
		public async Task<FileKey> RequestRoomRescueKeyAsync(long file_id, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/"+file_id+"/data_room_file_key?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FileKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request system rescue key
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Returns the file key for the system emergency password / rescue key of a certain file (if available).
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// File key is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestSystemRescueKey v4/nodes/files/{file_id}/data_space_file_key
		/// </summary>
		/// <param name="file_id">File ID</param>
		/// <param name="version">Version (NEW)</param>
		/// <returns>OK</returns>
		public async Task<FileKey> RequestSystemRescueKeyAsync(long file_id, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/"+file_id+"/data_space_file_key?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FileKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate download URL
		/// ### Description:
		/// Create a download URL to retrieve a file without `X-Sds-Auth-Token` Header.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// Download token is generated and returned.
		/// 
		/// ### Further Information:
		/// The token is necessary to access `downloads` ressources.
		/// GenerateDownloadUrl v4/nodes/files/{file_id}/downloads
		/// </summary>
		/// <param name="file_id">File ID</param>
		/// <returns>OK</returns>
		public async Task<DownloadTokenGenerateResponse> GenerateDownloadUrlAsync(long file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/"+file_id+"/downloads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DownloadTokenGenerateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user's file key
		/// ### Description:
		/// Returns the file key for the current user (if available).
		/// 
		/// ### Precondition:
		/// User with one of the following permissions in parent room: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>
		/// 
		/// ### Postcondition:
		/// File key is returned.
		/// 
		/// ### Further Information:
		/// The symmetric file key is encrypted with the user's public key.
		/// File keys are generated with the workflow _"Generate file keys"_ that starts at `GET /nodes/missingFileKeys`.
		/// RequestUserFileKey v4/nodes/files/{file_id}/user_file_key
		/// </summary>
		/// <param name="file_id">File ID</param>
		/// <param name="version">Version (NEW)</param>
		/// <returns>OK</returns>
		public async Task<FileKey> RequestUserFileKeyAsync(long file_id, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/files/"+file_id+"/user_file_key?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FileKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new folder
		/// ### Description:
		/// Create a new folder.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in current room.
		/// 
		/// ### Postcondition:
		/// New folder is created.
		/// 
		/// ### Further Information:
		/// Folders **CANNOT** be created on top level (without parent element).
		/// Notes are limited to **255** characters.
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// 
		/// CreateFolder v4/nodes/folders
		/// </summary>
		public async Task CreateFolderAsync(CreateFolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/folders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates folder’s metadata
		/// ### Description:
		/// Updates folder’s metadata.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// Folder's metadata is changed.
		/// 
		/// ### Further Information:
		/// Notes are limited to **255** characters.
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// 
		/// UpdateFolder v4/nodes/folders/{folder_id}
		/// </summary>
		/// <param name="folder_id">Folder ID</param>
		/// <returns>OK</returns>
		public async Task<Node> UpdateFolderAsync(long folder_id, UpdateFolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/folders/"+folder_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request files without user's file key
		/// ### Description:
		/// Requests a list of missing file keys that may be generated by the current user.
		/// 
		/// ### Precondition:
		/// User has a key pair.
		/// Only returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>
		/// 
		/// ### Postcondition:
		/// None.
		/// 
		/// ### Further Information:
		/// Clients **SHOULD** regularly request missing file keys to provide access to files for other users.
		/// The returned list is ordered by priority (emergency passwords / rescue keys are returned first).
		/// There is an enforced limit of **100** items per request.
		/// A total value greater than limit signals that there are more entries but does not necessarily reflect the precise
		/// number of total items.
		/// 
		/// RequestMissingFileKeys v4/nodes/missingFileKeys
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="room_id">Room ID</param>
		/// <param name="file_id">File ID</param>
		/// <param name="user_id">User ID</param>
		/// <param name="use_key">Determines which key should be used (NEW)</param>
		/// <returns>OK</returns>
		public async Task<MissingKeysResponse> RequestMissingFileKeysAsync(int offset, int limit, long room_id, long file_id, long user_id, RequestMissingFileKeysUse_key use_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/missingFileKeys?offset="+offset+"&limit="+limit+"&room_id="+room_id+"&file_id="+file_id+"&user_id="+user_id+"&use_key=" + use_key;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MissingKeysResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new room
		/// ### Description:
		/// Creates a new room at the provided parent node.
		/// Creation of top level rooms provided.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span> permissions in the parent room.
		/// 
		/// ### Postcondition:
		/// A new room is created.
		/// 
		/// ### Further Information:
		/// Rooms may only have other rooms as parent.
		/// Rooms on top level do **NOT** have any parent.
		/// Rooms may have rooms as children on n hierarchy levels.
		/// If permission inheritance is disabled, there **MUST** be at least one admin user / group (with neither the group nor the user having an expiration date).
		/// 
		/// Notes are limited to **255** characters.
		/// 
		/// Provided (or default) classification is taken from room when file gets uploaded without any classification.
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// CreateRoom v4/nodes/rooms
		/// </summary>
		public async Task CreateRoomAsync(CreateRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user-room assignments per group
		/// ### Description:
		/// Requests a list of user-room assignments by groups that have **NOT** been approved yet
		/// These can have the state:
		/// * **WAITING**
		/// * **DENIED**
		/// * **ACCEPTED**
		/// 
		/// **ACCEPTED** assignments are already removed from the list.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// List of user-room assignments is returned.
		/// 
		/// ### Further Information:
		/// Room administrators **SHOULD** regularly request pending assingments to provide access to rooms for other users.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `state:eq:WAITING`
		/// Filter assignments by state `WAITING`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` |
		/// | `groupId` | Group ID filter | `eq` | Group ID equals value. | `positive Integer` |
		/// | `roomId` | Room ID filter | `eq` | Room ID equals value. | `positive Integer` |
		/// | `state` | Assignment state | `eq` | Assignment state equals value. | `WAITING or DENIED` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `userId:desc|state:asc`
		/// Sort by `userId` descending **AND** `state` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `userId` | User ID |
		/// | `groupId` | Group ID |
		/// | `roomId` | Room ID |
		/// | `state` | State |
		/// 
		/// </details>
		/// RequestPendingAssignments v4/nodes/rooms/pending
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<PendingAssignmentList> RequestPendingAssignmentsAsync(int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/pending?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PendingAssignmentList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Handle user-room assignments per group
		/// ### Description:
		/// Handles a list of user-room assignments by groups that have **NOT** been approved yet
		/// **WAITING** or **DENIED** assignments can be **ACCEPTED**.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// User-room assignment is approved and the user gets access to the group.
		/// 
		/// ### Further Information:
		/// Room administrators should **SHOULD** handle pending assignments to provide access to rooms for other users.
		/// ChangePendingAssignments v4/nodes/rooms/pending
		/// </summary>
		public async Task ChangePendingAssignmentsAsync(PendingAssignmentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/pending";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates room’s metadata
		/// ### Description:
		/// Updates room’s metadata.
		/// 
		/// ### Precondition:
		/// User is a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span> at superordinated level.
		/// 
		/// ### Postcondition:
		/// Room's metadata is changed.
		/// 
		/// ### Further Information:
		/// Notes are limited to **255** characters.
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// UpdateRoom v4/nodes/rooms/{room_id}
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <returns>OK</returns>
		public async Task<Node> UpdateRoomAsync(long room_id, UpdateRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configure room
		/// ### Description:
		/// Configure a room.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// Room's configuration is changed.
		/// 
		/// ### Further Information:
		/// Provided (or default) classification is taken from room when file gets uploaded without any classification.
		/// 
		/// To set `adminIds` or `adminGroupIds` the `inheritPermissions` value has to be `false`. Otherwise use:
		/// * `PUT /nodes/rooms/{room_id}/groups`
		/// * `PUT /nodes/rooms/{room_id}/users `
		/// 
		/// APIs.
		/// ConfigureRoom v4/nodes/rooms/{room_id}/config
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <returns>OK</returns>
		public async Task<Node> ConfigureRoomAsync(long room_id, ConfigRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Encrypt room
		/// ### Description:
		/// Activates the client-side encryption for a room.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// Encryption of room is activated.
		/// 
		/// ### Further Information:
		/// Only empty rooms at the top level may be encrypted.
		/// This endpoint may also be used to disable encryption of an empty room.
		/// EncryptRoom v4/nodes/rooms/{room_id}/encrypt
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <returns>OK</returns>
		public async Task<Node> EncryptRoomAsync(long room_id, EncryptRoomRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/encrypt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request events of a room
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>
		/// 
		/// ### Description:
		/// Retrieve syslog (audit log) events related to a room.
		/// 
		/// ### Precondition:
		/// Requires <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on that room.
		/// 
		/// ### Postcondition:
		/// List of events is returned.
		/// 
		/// ### Further Information:
		/// Output may be limited to a certain number of entries.
		/// Please use filter criteria and paging.
		/// 
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `time:desc`
		/// Sort by `time` descending (default sort option).
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `time` | Event timestamp |
		/// 
		/// </details>
		/// RequestRoomActivitiesLogAsJson v4/nodes/rooms/{room_id}/events
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="date_start">Filter events from given date 
		///
		///e.g. `2015-12-31T23:59:00`</param>
		/// <param name="date_end">Filter events until given date 
		///
		///e.g. `2015-12-31T23:59:00`</param>
		/// <param name="type">Operation ID 
		///
		///cf. `GET /eventlog/operations`</param>
		/// <param name="user_id">User ID</param>
		/// <param name="status">Operation status:
		///
		///* `0` - Success
		///
		///* `2` - Error</param>
		/// <returns>OK</returns>
		public async Task<LogEventList> RequestRoomActivitiesLogAsJsonAsync(long room_id, string sort, int offset, int limit, string date_start, string date_end, int type, long user_id, int status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/events?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&date_start=" + (date_start==null? "" : System.Uri.EscapeDataString(date_start))+"&date_end=" + (date_end==null? "" : System.Uri.EscapeDataString(date_end))+"&type="+type+"&user_id="+user_id+"&status="+status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LogEventList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke granted group(s) from room
		/// ### Description:
		/// Revoke granted groups from room.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// Group's permissions are revoked.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// RevokeRoomGroups v4/nodes/rooms/{room_id}/groups
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task RevokeRoomGroupsAsync(long room_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request room granted group(s) or / and group(s) that can be granted
		/// ### Description:
		/// Retrieve a list of groups that are and / or can be granted to the room.
		/// 
		/// ### Precondition:
		/// Any permissions on target room.
		/// 
		/// ### Postcondition:
		/// List of groups is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isGranted:eq:false|name:cn:searchString`
		/// Get all groups that are **NOT** granted to this room **AND** whose name is like `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `name` | Group name filter | `cn` | Group name contains value. | `search String` |
		/// | `groupId` | Group ID filter | `eq` | Group ID equals value. | `positive Integer` |
		/// | `isGranted` | Filter the groups that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for groups in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// | `permissionsManage` | Filter the groups that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` |
		/// | `effectivePerm` | Filter groups with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `false` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:desc`
		/// Sort by `name` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `name` | Group name |
		/// 
		/// </details>
		/// RequestRoomGroups v4/nodes/rooms/{room_id}/groups
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<RoomGroupList> RequestRoomGroupsAsync(long room_id, int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/groups?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoomGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or change room granted group(s)
		/// ### Description:
		/// All existing group permissions will be overwritten.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.
		/// 
		/// ### Postcondition:
		/// Group's permissions are changed.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// 
		/// UpdateRoomGroups v4/nodes/rooms/{room_id}/groups
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task UpdateRoomGroupsAsync(long room_id, RoomGroupsAddBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add guest users to a room
		/// ### Description:
		/// Add guest users to a room
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.
		/// <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Guest User Policy</span> needs to be enabled.
		/// 
		/// 
		/// ### Postcondition:
		/// New or existing Guest-Users now have guest-permissions for this room
		/// 
		/// ### Further Information:
		/// Batch function.
		/// AddRoomGuestUsers v4/nodes/rooms/{room_id}/guest_users
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task AddRoomGuestUsersAsync(long room_id, RoomGuestUserAddRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/guest_users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove rooms's rescue key pair
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Delete room rescue key pair.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Key pair is removed (cf. further information below).
		/// 
		/// ### Further Information:
		/// Please set a new room rescue key pair first and re-encrypt file keys with it.
		/// If no version is set, deleted key pair with lowest preference value.
		/// Although, `version` **SHOULD** be set.
		/// 
		/// RemoveRoomRescueKeyPair v4/nodes/rooms/{room_id}/keypair
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <param name="version">Version (NEW)</param>
		public async Task RemoveRoomRescueKeyPairAsync(long room_id, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/keypair?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request room rescue key
		/// ### Description:
		/// Retrieve the room rescue key pair.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in that room.
		/// 
		/// ### Postcondition:
		/// Key pair is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestRoomRescueKeyPair v4/nodes/rooms/{room_id}/keypair
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <param name="version">Version (NEW)</param>
		/// <returns>OK</returns>
		public async Task<UserKeyPairContainer> RequestRoomRescueKeyPairAsync(long room_id, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/keypair?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserKeyPairContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set room's rescue key pair
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Set room rescue key pair.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// Key pair is set.
		/// 
		/// ### Further Information:
		/// Room rescue key pair can be used to upgrade algorithm.
		/// SetRoomRescueKeyPair v4/nodes/rooms/{room_id}/keypair
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task SetRoomRescueKeyPairAsync(long room_id, UserKeyPairContainer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/keypair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request all room rescue key pairs
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Retrieve all room rescue key pairs to allow migrating room-rescue-key-encrypted file keys.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in that room.
		/// 
		/// ### Postcondition:
		/// List of key pairs is returned.
		/// 
		/// ### Further Information:
		/// In the case of an algorithm migration to a room rescue key pair, one should create the new key pair before deleting the old one. This allows re-encrypting file keys with the new key pair, using the old one.
		/// 
		/// This API allows to retrieve both key pairs, in contrast to `GET /nodes/rooms/{room_id}/keypair`, which only delivers the preferred one.
		/// 
		/// RequestRoomRescueKeyPairs v4/nodes/rooms/{room_id}/keypairs
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <returns>OK</returns>
		public async Task<UserKeyPairContainer[]> RequestRoomRescueKeyPairsAsync(long room_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/keypairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserKeyPairContainer[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create key pair and preserve copy of old private key
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Create room rescue key pair and preserve copy of old private key.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// Room rescue key pair is created.
		/// Copy of old private key is preserved.
		/// 
		/// ### Further Information:
		/// You can submit your old private key, encrypted with your current password.
		/// This allows migrating file keys encrypted with your old key pair to the new one.
		/// CreateAndPreserveRoomRescueKeyPair v4/nodes/rooms/{room_id}/keypairs
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task CreateAndPreserveRoomRescueKeyPairAsync(long room_id, CreateKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/keypairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request Room Policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.32.0</h3>
		/// 
		/// ### Description:
		/// Retrieve the room policies:
		/// * `defaultExpirationPeriod`
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in that room.
		/// 
		/// ### Postcondition:
		/// Room Policies returned.
		/// 
		/// ### Further Information:
		/// `defaultExpirationPeriod`: Default policy room expiration period in seconds.
		/// All existing and future files in a room will have their expiration date set to this period after their respective upload.
		/// Existing files can be set to expire earlier afterwards.
		/// `0` means no default expiration policy will be enforced.
		/// 
		/// 
		/// 
		/// RequestRoomPolicies v4/nodes/rooms/{room_id}/policies
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <returns>OK</returns>
		public async Task<RoomPolicies> RequestRoomPoliciesAsync(long room_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/policies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoomPolicies>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set room policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.32.0</h3>
		/// 
		/// ### Description:
		/// Retrieve the room policies:
		/// * `defaultExpirationPeriod`
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// Room policy is set.
		/// 
		/// ### Further Information:
		/// `defaultExpirationPeriod`: Default policy room expiration period in seconds.
		/// All existing and future files in a room will have their expiration date set to this period after their respective upload.
		/// Existing files can be set to expire earlier afterwards.
		/// `0` means no default expiration policy will be enforced. This removes all expiration dates from existing files.
		/// SetRoomPolicies v4/nodes/rooms/{room_id}/policies
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task SetRoomPoliciesAsync(long room_id, RoomPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/policies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of all assigned S3 tags to the room
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of S3 tags assigned to a room.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// List of assigned S3 tags is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestRoomS3Tags v4/nodes/rooms/{room_id}/s3_tags
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <returns>OK</returns>
		public async Task<S3TagList> RequestRoomS3TagsAsync(long room_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/s3_tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3TagList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set S3 tags for a room
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Set S3 tags to a room.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// Provided S3 tags are assigned to a room.
		/// 
		/// ### Further Information:
		/// Every request overrides current S3 tags.
		/// Mandatory S3 tag IDs **MUST** be sent.
		/// SetRoomS3Tags v4/nodes/rooms/{room_id}/s3_tags
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task SetRoomS3TagsAsync(long room_id, S3TagIds requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/s3_tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke granted user(s) from room
		/// ### Description:
		/// Revoke granted users from room.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// User's permissions are revoked.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// RevokeRoomUsers v4/nodes/rooms/{room_id}/users
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task RevokeRoomUsersAsync(long room_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request room granted user(s) or / and user(s) that can be granted
		/// ### Description:
		/// Retrieve a list of users that are and / or can be granted to the room.
		/// 
		/// ### Precondition:
		/// Any permissions on target room.
		/// 
		/// ### Postcondition:
		/// None.
		/// 
		/// ### Further Information:
		/// List of users is returned.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// > `permissionsManage:eq:true|user:cn:searchString`
		/// Get all users that have `manage` permissions to this room **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
		/// | `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` |
		/// | `isGranted` | Filter the users that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for users in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// | `permissionsManage` | Filter the users that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` |
		/// | `effectivePerm` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li><li>`any`: DIRECT **AND** EFFECTIVE **AND** OVER GROUP permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**.<br>OVER GROUP means: e.g. user gets `read` permissions on desired room through **group membership**. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `false` |
		/// | `hasRole` | User role filter<br>For more Roles information please call `GET /roles API` | `eq`, `neq` | User role  equals value. | <ul><li>`CONFIG_MANAGER` - Manage global configs</li><li>`USER_MANAGER` - Manage Users</li><li>`GROUP_MANAGER` - Manage User-Groups</li><li>`ROOM_MANAGER` - Manage top level Data Rooms</li><li>`LOG_AUDITOR` - Read logs</li><li>`NONMEMBER_VIEWER` - View users and groups when having room manage permission</li><li>`USER` - Regular User role</li><li>`GUEST_USER` - Guest User role</li></ul> |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`displayName`</del> | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `user:desc`
		/// Sort by `user` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | **`user`** | User - sort by `firstName`, `lastName`, `username`, `email` (in this order) |
		/// 
		/// </details>
		/// RequestRoomUsers v4/nodes/rooms/{room_id}/users
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<RoomUserList> RequestRoomUsersAsync(long room_id, int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/users?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoomUserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or change room granted user(s)
		/// ### Description:
		/// All existing user permissions will be overwritten.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.
		/// 
		/// ### Postcondition:
		/// User's permissions are changed.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// UpdateRoomUsers v4/nodes/rooms/{room_id}/users
		/// </summary>
		/// <param name="room_id">Room ID</param>
		public async Task UpdateRoomUsersAsync(long room_id, RoomUsersAddBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of webhooks that are assigned or can be assigned to this room
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Get a list of webhooks for the room scope with their assignment status.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// List of webhooks is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isAssigned:eq:true`
		/// Get a list of assigned webhooks to the room.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | **`isAssigned`** | Assigned/unassigned webhooks filter | `eq` |  | `true or false` |
		/// 
		/// </details>
		/// RequestListOfWebhooksForRoom v4/nodes/rooms/{room_id}/webhooks
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <returns>OK</returns>
		public async Task<RoomWebhookList> RequestListOfWebhooksForRoomAsync(long room_id, int offset, int limit, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/webhooks?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoomWebhookList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign or unassign webhooks to room
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Handle room webhook assignments.
		/// 
		/// ### Precondition:
		/// User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.
		/// 
		/// ### Postcondition:
		/// List of webhooks is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Available event types:
		/// 
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Scope |
		/// | :--- | :--- | :--- |
		/// | **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook |
		/// | **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook |
		/// | **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook |
		/// | **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook |
		/// | **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook |
		/// | **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook |
		/// | **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook |
		/// | **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook |
		/// | **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook |
		/// | **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook |
		/// | **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook |
		/// | **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |
		/// 
		/// </details>
		/// HandleRoomWebhookAssignments v4/nodes/rooms/{room_id}/webhooks
		/// </summary>
		/// <param name="room_id">Room ID</param>
		/// <returns>OK</returns>
		public async Task<RoomWebhookList> HandleRoomWebhookAssignmentsAsync(long room_id, UpdateRoomWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/rooms/"+room_id+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoomWebhookList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search nodes
		/// ### Description:
		/// Provides a flat list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.
		/// 
		/// ### Precondition:
		/// Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> nodes (i.e. `isBrowsable = true`).
		/// 
		/// ### Postcondition:
		/// List of nodes is returned.
		/// 
		/// ### Further Information:
		/// Output is limited to **500** entries.
		/// For more results please use filter criteria and paging (`offset` + `limit`).
		/// `EncryptionInfo` is **NOT** provided.
		/// Wildcard character is the asterisk character: `*`
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `type:eq:file|createdAt:ge:2015-01-01`
		/// Get nodes where type equals `file` **AND** file creation date is **>=** `2015-01-01`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME`            | Filter Description                | `OPERATOR` | Operator Description                                                                                                                                                                                                                                                                | `VALUE` |
		/// |:------------------------|:----------------------------------| :--- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| :--- |
		/// | `type`                  | Node type filter                  | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder`                                                                                                                                        | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> |
		/// | `fileType`              | File type filter (file extension) | `cn, eq` | File type contains / equals value.                                                                                                                                                                                                                                                  | `search String` |
		/// | `classification`        | Classification filter             | `eq` | Classification equals value.                                                                                                                                                                                                                                                        | <ul><li>`1` - public</li><li>`2` - internal</li><li>`3` - confidential</li><li>`4` - strictly confidential</li></ul> |
		/// | `createdBy`             | Creator login filter              | `cn, eq` | Creator login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`).                                                                                                                                                                             | `search String` |
		/// | `createdById`           | Creator ID filter                 | `eq` | Creator ID equals value.                                                                                                                                                                                                                                                            | `positive Integer  or -1 for external user` |
		/// | `createdAt`             | Creation date filter              | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01`                                                                | `Date (yyyy-MM-dd)` |
		/// | `updatedBy`             | Last modifier login filter        | `cn, eq` | Last modifier login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`).                                                                                                                                                                       | `search String` |
		/// | `updatedById`           | Last modifier ID filter           | `eq` | Modifier ID equals value.                                                                                                                                                                                                                                                           | `positive Integer or -1 for external user` |
		/// | `updatedAt`             | Last modification date filter     | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01`                                                       | `Date (yyyy-MM-dd)` |
		/// | `expireAt`              | Expiration date filter            | `ge, le` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expireAt:ge:2016-12-31`&#124;`expireAt:le:2018-01-01`                                                                | `Date (yyyy-MM-dd)` |
		/// | `size`                  | Node size filter                  | `ge, le` | Node size is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `size:ge:5`&#124;`size:le:10`                                                                                               | `size in bytes` |
		/// | `isFavorite`            | Favorite filter                   | `eq` |                                                                                                                                                                                                                                                                                     | `true or false` |
		/// | `branchVersion`         | Node branch version filter        | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404`                                                 | `version number` |
		/// | `parentPath`            | Parent path                       | `cn, eq` | Parent path contains / equals  value.                                                                                                                                                                                                                                               | `search String` |
		/// | `timestampCreation`     | Creation timestamp filter         | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampCreation:le:2018-01-01T11:00:00.540`             | `Date (yyyy-MM-dd)` |
		/// | `timestampModification` | Modification timestamp filter     | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |
		/// | `referenceId`           | Reference ID filter               | `eq` | Reference ID equals value.                                                                                                                                                                                                                                                          | `Integer ` |
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:desc|size:asc`
		/// Sort by `name` descending **AND** `size` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `name` | Node name |
		/// | `createdAt` | Creation date |
		/// | `createdBy` | Creator first name, last name |
		/// | `updatedAt` | Last modification date |
		/// | `updatedBy` | Last modifier first name, last name |
		/// | `fileType` | File type (extension) |
		/// | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
		/// | `size` | Node size |
		/// | `cntDeletedVersions` | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) |
		/// | `type` | Node type (room, folder, file) |
		/// | `parentPath` | Parent path |
		/// | `timestampCreation` | Creation timestamp |
		/// | `timestampModification` | Modification timestamp |
		/// 
		/// </details>
		/// 
		/// ### Deprecated sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | <del>`cntChildren`</del> | Number of direct children (**NOT** recursive; for rooms and folders only) |
		/// 
		/// </details>
		/// SearchNodes v4/nodes/search
		/// </summary>
		/// <param name="search_string">Search string</param>
		/// <param name="depth_level">* `0` - top level nodes only (default)
		///
		///* `-1` - full tree
		///
		///* `n` (any positive number) - include `n` levels starting from the current node</param>
		/// <param name="parent_id">Parent node ID.
		///
		///Only rooms and folders can be parents.
		///
		///Parent ID `0` or empty is the root node.</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <returns>OK</returns>
		public async Task<NodeList> SearchNodesAsync(string search_string, int depth_level, long parent_id, string filter, string sort, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/search?search_string=" + (search_string==null? "" : System.Uri.EscapeDataString(search_string))+"&depth_level="+depth_level+"&parent_id="+parent_id+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate download URL for ZIP download
		/// ### Description:
		/// Create a download URL to retrieve several files in one ZIP archive.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// Download URL is generated and returned.
		/// 
		/// ### Further Information:
		/// The token is necessary to access `downloads` resources.
		/// ZIP download is only available for files and folders.
		/// GenerateDownloadUrlForZipArchive v4/nodes/zip
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DownloadTokenGenerateResponse> GenerateDownloadUrlForZipArchiveAsync(ZipDownloadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/zip";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DownloadTokenGenerateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download files / folders as ZIP archive
		/// ### Description:
		/// Download multiple files in a ZIP archive.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in auth parent room.
		/// 
		/// ### Postcondition:
		/// Stream is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// DownloadZipArchive v4/nodes/zip/download
		/// </summary>
		/// <returns>OK</returns>
		public async Task DownloadZipArchiveAsync(ZipDownloadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/zip/download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove node
		/// ### Description:
		/// Delete node (room, folder or file).
		/// 
		/// ### Precondition:
		/// Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions on supplied nodes (for folders or files) or on superordinated node (for rooms).
		/// 
		/// ### Postcondition:
		/// Node gets deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveNode v4/nodes/{node_id}
		/// </summary>
		/// <param name="node_id">Node ID</param>
		public async Task RemoveNodeAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request node
		/// ### Description:
		/// Get node (room, folder or file).
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in auth parent room.
		/// 
		/// ### Postcondition:
		/// Requested node is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestNode v4/nodes/{node_id}
		/// </summary>
		/// <param name="node_id">Node ID</param>
		/// <returns>OK</returns>
		public async Task<Node> RequestNodeAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of node comments
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Get comments for a specific node.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node.
		/// 
		/// ### Postcondition:
		/// List with comments (sorted by `createdAt` timestamp) is returned.
		/// 
		/// ### Further Information:
		/// An empty list is returned if no comments were found.
		/// Output is limited to **500** entries.
		/// For more results please use filter criteria and paging (`offset` + `limit`).
		/// 
		/// RequestNodeComments v4/nodes/{node_id}/comments
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="node_id">Node ID</param>
		/// <param name="hide_deleted">Hide deleted comments (default: false)</param>
		/// <returns>OK</returns>
		public async Task<CommentList> RequestNodeCommentsAsync(int offset, int limit, long node_id, bool hide_deleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/comments?offset="+offset+"&limit="+limit+"&hide_deleted="+hide_deleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CommentList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create node comment
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Create a comment for a specific node.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node.
		/// 
		/// ### Postcondition:
		/// Comment is created.
		/// 
		/// ### Further Information:
		/// Maximum allowed text length: **65535** characters.
		/// CreateNodeComment v4/nodes/{node_id}/comments
		/// </summary>
		/// <param name="node_id">Node ID</param>
		public async Task CreateNodeCommentAsync(long node_id, CreateNodeCommentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copy node(s)
		/// ### Description:
		/// Copies nodes (folder, file) to another parent.
		/// 
		/// ### Precondition:
		/// Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in the source parent and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the target parent node.
		/// 
		/// ### Postcondition:
		/// Nodes are copied to target parent.
		/// 
		/// ### Further Information:
		/// Nodes **MUST** be in same source parent.
		/// **Rooms **CANNOT** be copied.**
		/// 
		/// Download share id (if exists) gets changed if:
		/// - node with the same name exists in the target container
		/// - `resolutionStrategy` is `overwrite`
		/// - `keepShareLinks` is `true`
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// 
		/// CopyNodes v4/nodes/{node_id}/copy_to
		/// </summary>
		/// <param name="node_id">Target parent node ID</param>
		public async Task CopyNodesAsync(long node_id, CopyNodesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/copy_to";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Empty recycle bin
		/// ### Description:
		/// Empty a recycle bin.
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete recycle bin</span> permissions in parent room.
		/// 
		/// ### Postcondition:
		/// All files in the recycle bin are permanently removed.
		/// 
		/// ### Further Information:
		/// Actually removes the previously deleted files from the system.
		/// **This action is irreversible.**
		/// EmptyDeletedNodes v4/nodes/{node_id}/deleted_nodes
		/// </summary>
		/// <param name="node_id">Room ID</param>
		public async Task EmptyDeletedNodesAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/deleted_nodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of deleted nodes
		/// ### Description:
		/// Retrieve a list of deleted nodes in a recycle bin.
		/// 
		/// ### Precondition:
		/// User can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.
		/// 
		/// ### Postcondition:
		/// List of deleted nodes is returned.
		/// 
		/// ### Further Information:
		/// Only room IDs are accepted as parent ID since only rooms may have a recycle bin.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `type:eq:file:folder|name:cn:searchString_1|parentPath:cn:searchString_2`
		/// Get deleted nodes where type equals (`file` **OR** `folder`) **AND** deleted node name containing `searchString_1` **AND** deleted node parent path containing `searchString 2`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `type` | Node type filter | `eq` | Node type equals value(s).<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:folder:file` | <ul><li>`folder`</li><li>`file`</li></ul> |
		/// | `name` | Node name filter | `cn` | Node name contains value. | `search String` |
		/// | `parentPath` | Parent path filter | `cn` | Parent path contains value. | `search String` |
		/// | `timestampCreation` | Creation timestamp filter | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31`&#124;<br>`timestampCreation:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | `timestampModification` | Modification timestamp filter | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// Nodes are sorted by type first, then by sent sort string.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:desc|timestampCreation:asc`
		/// Sort by `name` descending **AND** `timestampCreation` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `name` | Node name |
		/// | `cntVersions` | Number of deleted versions of this file |
		/// | `firstDeletedAt` | First deleted version |
		/// | `lastDeletedAt` | Last deleted version |
		/// | `parentPath` | Parent path of deleted node |
		/// | `timestampCreation` | Creation timestamp |
		/// | `timestampModification` | Modification timestamp |
		/// 
		/// </details>
		/// RequestDeletedNodesSummary v4/nodes/{node_id}/deleted_nodes
		/// </summary>
		/// <param name="node_id">Parent ID (can only be a room ID)</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <returns>OK</returns>
		public async Task<DeletedNodeSummaryList> RequestDeletedNodesSummaryAsync(long node_id, string filter, string sort, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/deleted_nodes?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeletedNodeSummaryList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request deleted versions of nodes
		/// ### Description:
		/// Retrieve all deleted versions of a node.
		/// 
		/// ### Precondition:
		/// User can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.
		/// 
		/// ### Postcondition:
		/// List of deleted versions of a node is returned.
		/// 
		/// ### Further Information:
		/// The node is identified by three parameters:
		/// * parent ID
		/// * name
		/// * type (file, folder).
		/// 
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `expireAt:desc|size:asc`
		/// Sort by `expireAt` descending **AND** `size` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `expireAt` | Expiration date |
		/// | `accessedAt` | Last access date |
		/// | `size` | Node size |
		/// | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
		/// | `createdAt` | Creation date |
		/// | `createdBy` | Creator first name, last name |
		/// | `updatedAt` | Last modification date |
		/// | `updatedBy` | Last modifier first name, last name |
		/// | `deletedAt` | Deleted date |
		/// | `deletedBy` | Deleter first name, last name |
		/// 
		/// </details>
		/// RequestDeletedNodeVersions v4/nodes/{node_id}/deleted_nodes/versions
		/// </summary>
		/// <param name="node_id">Parent ID (room or folder ID)</param>
		/// <param name="type">Node type</param>
		/// <param name="name">Node name</param>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <returns>OK</returns>
		public async Task<DeletedNodeVersionsList> RequestDeletedNodeVersionsAsync(long node_id, string type, string name, string sort, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/deleted_nodes/versions?type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeletedNodeVersionsList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unmark a node (room, folder or file) as favorite
		/// ### Description:
		/// Unmarks a node (room, folder or file) as favorite.
		/// 
		/// ### Precondition:
		/// Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).
		/// 
		/// ### Postcondition:
		/// A node gets unmarked as favorite.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveFavorite v4/nodes/{node_id}/favorite
		/// </summary>
		/// <param name="node_id">Node ID</param>
		public async Task RemoveFavoriteAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/favorite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark a node (room, folder or file) as favorite
		/// ### Description:
		/// Marks a node (room, folder or file) as favorite.
		/// 
		/// ### Precondition:
		/// Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).
		/// 
		/// ### Postcondition:
		/// A node gets marked as favorite.
		/// 
		/// ### Further Information:
		/// None.
		/// AddFavorite v4/nodes/{node_id}/favorite
		/// </summary>
		/// <param name="node_id">Node ID</param>
		public async Task AddFavoriteAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/favorite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Move node(s)
		/// ### Description:
		/// Moves nodes (folder, file) to another parent.
		/// 
		/// ### Precondition:
		/// Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions in the source parent and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the target parent node.
		/// 
		/// ### Postcondition:
		/// Nodes are moved to target parent.
		/// 
		/// ### Further Information:
		/// Nodes **MUST** be in same source parent.
		/// **Rooms **CANNOT** be moved.**
		/// 
		/// Download share id (if exists) gets changed if:
		/// - node with the same name exists in the target container
		/// - `resolutionStrategy` is `overwrite`
		/// - `keepShareLinks` is `true`
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// 
		/// MoveNodes v4/nodes/{node_id}/move_to
		/// </summary>
		/// <param name="node_id">Target parent node ID</param>
		/// <returns>OK</returns>
		public async Task<Node> MoveNodesAsync(long node_id, MoveNodesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/move_to";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of parent nodes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Requests a list of node ancestors, sorted from root node to the node's direct parent node.
		/// 
		/// ### Precondition:
		/// User is allowed to browse through the node tree until the requested node.
		/// 
		/// ### Postcondition:
		/// List of parent nodes is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestNodeParents v4/nodes/{node_id}/parents
		/// </summary>
		/// <param name="node_id">Node ID</param>
		/// <returns>OK</returns>
		public async Task<NodeParentList> RequestNodeParentsAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/nodes/"+node_id+"/parents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeParentList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of customers
		/// ### Description:
		/// Receive a list of customers.
		/// 
		/// ### Precondition:
		/// Authentication with `X-Sds-Service-Token` required.
		/// 
		/// ### Postcondition:
		/// List of customers is returned.
		/// 
		/// ### Further Information:
		/// This list returns a maximum of **1000** entries.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `trialDaysLeft:le:10|userMax:le:100`
		/// Get all customers with `10` trial days left **AND** user maximum **<=** `100`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `id` | Customer ID filter | `eq` | Customer ID equals value. | `positive Integer` |
		/// | `companyName` | Company name filter | `cn` | Company name contains value. | `search String` |
		/// | `customerContractType` | Customer contract type filter | `eq` | Customer contract type equals value. | <ul><li>`demo`</li><li>`free`</li><li>`pay`</li></ul> |
		/// | `trialDaysLeft` | Left trial days filter | `ge, le` | Left trial days are greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `trialDaysLeft:ge:5`&#124;`trialDaysLeft:le:10` |
		/// | `providerCustomerId` | Provider Customer ID filter | `cn, eq` | Provider Customer ID contains / equals value. | `search String` |
		/// | `quotaMax` | Maximum quota filter | `ge, le` | Maximum quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaMax:ge:1024`&#124;`quotaMax:le:1073741824` | `positive Integer` |
		/// | `quotaUsed` | Used quota filter | `ge, le` | Used quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaUsed:ge:1024`&#124;`quotaUsed:le:1073741824` | `positive Integer` |
		/// | `userMax` | User maximum filter | `ge, le` | User maxiumum is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userMax:ge:10`&#124;`userMax:le:100` | `positive Integer` |
		/// | `userUsed` | Number of registered users filter | `ge, le` | Number of registered users is is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userUsed:ge:10`&#124;`userUsed:le:100` | `positive Integer` |
		/// | `isLocked` | Lock status filter | `eq` |  | `true or false` |
		/// | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | `updatedAt` | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | `lastLoginAt` | Last login date filter | `ge, le` | Last login date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `lastLoginAt:ge:2016-12-31`&#124;`lastLoginAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | `userLogin` | User login filter | `eq` | User login name equals value.<br>Search user all logins e.g. `basic`, `active_directory`, `radius`. | `search String` |
		/// | `attributeKey` | Customer attribute key filter | `eq`, `nex` | Customer attribute key equals value / Customer attribute does **NOT** exist at customer | `search String` |
		/// | `attributeValue` | Customer attribute value filter | `eq` | Customer attribute value equals value. | `search String` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`activationCode`</del> | Activation code filter | `cn, eq` | Activation code contains / equals value. | `search String` |
		/// | <del>`lockStatus`</del> | Lock status filter | `eq` |  | <ul><li>`0` - unlocked</li><li>`1` - locked</li></ul> |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `companyName:desc|userUsed:asc`
		/// Sort by `companyName` descending **AND** `userUsed` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `companyName` | Company name |
		/// | `customerContractType` | Customer contract type |
		/// | `trialDaysLeft` | Number of remaining trial days (demo customers) |
		/// | `providerCustomerId` | Provider Customer ID |
		/// | `quotaMax` | Maximum quota |
		/// | `quotaUsed` | Currently used quota |
		/// | `userMax` | Maximum user number |
		/// | `userUsed` | Number of registered users |
		/// | `isLocked` | Lock status of customer |
		/// | `createdAt` | Creation date |
		/// | `updatedAt` | Last modification date |
		/// | `lastLoginAt` | Last login date of any user of this customer |
		/// 
		/// </details>
		/// 
		/// ### Deprecated sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | <del>`lockStatus`</del> | Lock status of customer |
		/// 
		/// </details>
		/// RequestCustomers v4/provisioning/customers
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="include_attributes">Include custom customer attributes.</param>
		/// <returns>OK</returns>
		public async Task<CustomerList> RequestCustomersAsync(int offset, int limit, string filter, string sort, bool include_attributes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&include_attributes="+include_attributes;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomerList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create customer
		/// ### Description:
		/// Create a new customer.
		/// 
		/// ### Precondition:
		/// Authentication with `X-Sds-Service-Token` required.
		/// 
		/// ### Postcondition:
		/// A new customer is created.
		/// 
		/// ### Further Information:
		/// If no company name is set, first letter of the first name separated by dot followed by last name of the first administrator is used (e.g. `J.Doe`).
		/// Max quota has to be at least `1 MB` (= `1.048.576 B`).
		/// 
		/// If `basic` authentication is enabled, the first administrator will get `basic` authentication by default.
		/// To create a first administrator without `basic` authentication it **MUST** be disabled explicitly.
		/// 
		/// Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// 
		/// ### Authentication Method Options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method | Option Key | Option Value |
		/// | :--- | :--- | :--- |
		/// | `basic` / `sql` | `username` | Unique user identifier |
		/// | `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |
		/// |  | `username` | Active Directory username according to authentication setting `userFilter` |
		/// | `radius` | `username` | RADIUS username |
		/// | `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |
		/// |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |
		/// 
		/// </details>
		/// 
		/// CreateCustomer v4/provisioning/customers
		/// </summary>
		public async Task CreateCustomerAsync(NewCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove customer
		/// ### Description:
		/// Delete a customer.
		/// 
		/// ### Precondition:
		/// Authentication with `X-Sds-Service-Token` required.
		/// 
		/// ### Postcondition:
		/// Customer is deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveCustomer v4/provisioning/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		public async Task RemoveCustomerAsync(long customer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customer
		/// ### Description:
		/// Receive details of a selected customer.
		/// 
		/// ### Precondition:
		/// Authentication with `X-Sds-Service-Token` required.
		/// 
		/// ### Postcondition:
		/// Customer details are returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestCustomer v4/provisioning/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		/// <param name="include_attributes">Include custom customer attributes.</param>
		/// <returns>OK</returns>
		public async Task<Customer> RequestCustomerAsync(long customer_id, bool include_attributes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id+"?include_attributes="+include_attributes;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Customer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update customer
		/// ### Description:
		/// Change selected attributes of a customer.
		/// 
		/// ### Precondition:
		/// Authentication with `X-Sds-Service-Token` required.
		/// 
		/// ### Postcondition:
		/// Selected attributes of customer are updated.
		/// 
		/// ### Further Information:
		/// None.
		/// UpdateCustomer v4/provisioning/customers/{customer_id}
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateCustomerResponse> UpdateCustomerAsync(long customer_id, UpdateCustomerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateCustomerResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request customer attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of customer attributes.
		/// 
		/// ### Precondition:
		/// Authentication with `X-Sds-Service-Token` required.
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read all customers</span> required.
		/// 
		/// ### Postcondition:
		/// List of attributes is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// Filters are case insensitive.
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `key:cn:searchString_1|value:cn:searchString_2`
		/// Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `key` | Customer attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |
		/// | `value` | Customer attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `key:asc|value:desc`
		/// Sort by `key` ascending **AND** by `value` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `key` | Customer attribute key |
		/// | `value` | Customer attribute value |
		/// 
		/// </details>
		/// RequestCustomerAttributes v4/provisioning/customers/{customer_id}/customerAttributes
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<AttributesResponse> RequestCustomerAttributesAsync(long customer_id, int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id+"/customerAttributes?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttributesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set customer attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.28.0</h3>
		/// 
		/// ### Description:
		/// Set custom customer attributes.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.
		/// 
		/// ### Postcondition:
		/// Custom customer attributes gets set.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// All existing customer attributes will be deleted.
		/// 
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**.
		/// 
		/// SetCustomerAttributes v4/provisioning/customers/{customer_id}/customerAttributes
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		public async Task SetCustomerAttributesAsync(long customer_id, CustomerAttributes requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id+"/customerAttributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or edit customer attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>
		/// 
		/// ### Description:
		/// Add or edit custom customer attributes.
		/// <br/><br/><span style="font-weight: bold; color: red;"> &#128679; **Warning: Please note that the response with HTTP status code 200 (OK) is deprecated and will be replaced with HTTP status code 204 (No content)!**</span><br/>
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.
		/// 
		/// ### Postcondition:
		/// Custom customer attributes get added or edited.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// If an entry exists before, it will be overwritten.
		/// 
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**.
		/// UpdateCustomerAttributes v4/provisioning/customers/{customer_id}/customerAttributes
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		/// <returns>OK **(DEPRECATED: WILL BE REPLACED BY 204: "No content")**</returns>
		public async Task<Customer> UpdateCustomerAttributesAsync(long customer_id, CustomerAttributes requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id+"/customerAttributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Customer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove customer attribute
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>
		/// 
		/// ### Description:
		/// Delete a custom customer attribute.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.
		/// 
		/// ### Postcondition:
		/// Custom customer attribute gets deleted.
		/// 
		/// ### Further Information:
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**.
		/// RemoveCustomerAttribute v4/provisioning/customers/{customer_id}/customerAttributes/{key}
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		/// <param name="key">Key</param>
		public async Task RemoveCustomerAttributeAsync(long customer_id, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id+"/customerAttributes/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of customer users
		/// ### Description:
		/// Receive a list of users associated with a certain customer.
		/// 
		/// ### Precondition:
		/// Authentication with `X-Sds-Service-Token` required.
		/// 
		/// ### Postcondition:
		/// List of customer users is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Except for `login`, `firstName` and  `lastName` - these are connected via logical disjunction (**OR**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`
		/// Filter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `email` | Email filter | `eq`, `cn` | Email contains value. | `search String` |
		/// | `userName` | User name filter | `eq`, `cn` | UserName contains value. | `search String` |
		/// | `firstName` | User first name filter | `cn` | User first name contains value. | `search String` |
		/// | `lastName` | User last name filter | `cn` | User last name contains value. | `search String` |
		/// | `isLocked` | User lock status filter | `eq` |  | `true or false` |
		/// | `effectiveRoles` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq` |  | `true or false`<br>default: `false` |
		/// | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | `phone` | Phone filter | `eq` | Phone equals value. | `search String` |
		/// | `isEncryptionEnabled` | Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq` |  | `true or false` |
		/// | `hasRole` | (**`NEW`**) User role filter<br>Depends on **effectiveRoles**.<br>For more information about roles check **`GET /roles`** API | `eq`, `neq` | User role equals value. | <ul><li>`CONFIG_MANAGER` - Manages global configuration</li><li>`USER_MANAGER` - Manages users</li><li>`GROUP_MANAGER` - Manages user groups</li><li>`ROOM_MANAGER` - Manages top level rooms</li><li>`LOG_AUDITOR` - Reads audit logs</li><li>`NONMEMBER_VIEWER` - Views users and groups when having room _"manage"_ permission</li><li>`USER` - Regular User role</li><li>`GUEST_USER` - Guest User role</li></ul> |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`lockStatus`</del> | User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> |
		/// | <del>`login`</del> |  User login filter | `cn` | User login contains value. | `search String` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `firstName:asc|lastLoginSuccessAt:desc`
		/// Sort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `userName` | User name |
		/// | `email` | User email |
		/// | `firstName` | User first name |
		/// | `lastName` | User last name |
		/// | `isLocked` | User lock status |
		/// | `lastLoginSuccessAt` | Last successful login date |
		/// | `expireAt` | Expiration date |
		/// | `createdAt` | Creation date |
		/// 
		/// </details>
		/// 
		/// ### Deprecated sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | <del>`gender`</del> | Gender |
		/// | <del>`lockStatus`</del> | User lock status |
		/// | <del>`login`</del> | User login |
		/// 
		/// </details>
		/// RequestCustomerUsers v4/provisioning/customers/{customer_id}/users
		/// </summary>
		/// <param name="customer_id">Customer ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="include_attributes">Include custom user attributes.</param>
		/// <param name="include_roles">Include roles</param>
		/// <param name="include_manageable_rooms">Include hasManageableRooms (deprecated)</param>
		/// <returns>OK</returns>
		public async Task<UserList> RequestCustomerUsersAsync(long customer_id, int offset, int limit, string filter, string sort, bool include_attributes, bool include_roles, bool include_manageable_rooms, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/customers/"+customer_id+"/users?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&include_attributes="+include_attributes+"&include_roles="+include_roles+"&include_manageable_rooms="+include_manageable_rooms;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of tenant webhooks
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Get a list of webhooks for the tenant scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.
		/// 
		/// ### Postcondition:
		/// List of webhooks is returned.
		/// 
		/// ### Further Information:
		/// Output is limited to **500** entries.
		/// For more results please use filter criteria and paging (`offset` + `limit`).
		/// `EncryptionInfo` is **NOT** provided.
		/// Wildcard character is the asterisk character: **`*`**
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:cn:goo|createdAt:ge:2015-01-01`
		/// Get webhooks where name contains `goo` **AND** webhook creation date is **>=** `2015-01-01`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | **`id`** | Webhook id filter | `eq` | Webhook id equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**). |`positive number`|
		/// | **`name`** | Webhook type name| `cn, eq` | Webhook name contains / equals value. | `search String` |
		/// | **`isEnabled`** | Webhook isEnabled filter | `eq` |  | `true or false` |
		/// | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | **`expiration`** | Expiration date filter | `ge, le, eq` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expiration:ge:2016-12-31`&#124;`expiration:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | **`lastFailStatus`** | Failure status filter | `eq` | Last HTTP status code. Set when a webhook is auto-disabled due to repeated delivery failures |`positive number`|
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:desc|isEnabled:asc`
		/// Sort by `name` descending and `isEnabled` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | **`id`** | Webhook id |
		/// | **`name`** | Webhook name |
		/// | **`isEnabled`** | Webhook isEnabled |
		/// | **`createdAt`** | Creation date |
		/// | **`updatedAt`** | Last modification date |
		/// | **`expiration`** | Expiration date |
		/// 
		/// </details>
		/// 
		/// RequestListOfTenantWebhooks v4/provisioning/webhooks
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<WebhookList> RequestListOfTenantWebhooksAsync(int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/webhooks?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebhookList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create tenant webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Create a new webhook for the tenant scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is created for given event types.
		/// 
		/// ### Further Information:
		/// URL must begin with the `HTTPS` scheme.
		/// Webhook names are limited to 150 characters.
		/// 
		/// ### Available event types:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Scope |
		/// | :--- | :--- | :--- |
		/// | **`customer.created`** | Triggered when a new customer is created | Tenant Webhook |
		/// | **`customer.deleted`** | Triggered when a user is deleted | Tenant Webhook |
		/// | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Tenant Webhook |
		/// 
		/// </details>
		/// CreateTenantWebhook v4/provisioning/webhooks
		/// </summary>
		public async Task CreateTenantWebhookAsync(CreateWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of event types
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Get a list of available event types.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.
		/// 
		/// ### Postcondition:
		/// List of available event types is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestListOfEventTypesForTenant v4/provisioning/webhooks/event_types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EventTypeList> RequestListOfEventTypesForTenantAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/webhooks/event_types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTypeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove tenant webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Delete a webhook for the tenant scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveTenantWebhook v4/provisioning/webhooks/{webhook_id}
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		public async Task RemoveTenantWebhookAsync(long webhook_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/webhooks/"+webhook_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request tenant webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Get a specific webhook for the tenant scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestTenantWebhook v4/provisioning/webhooks/{webhook_id}
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		/// <returns>OK</returns>
		public async Task<Webhook> RequestTenantWebhookAsync(long webhook_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/webhooks/"+webhook_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update tenant webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Update an existing webhook for the tenant scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is updated.
		/// 
		/// ### Further Information:
		/// URL must begin with the `HTTPS` scheme.
		/// Webhook names are limited to 150 characters.
		/// 
		/// ### Available event types:
		/// 
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Scope |
		/// | :--- | :--- | :--- |
		/// | **`customer.created`** | Triggered when a new customer is created | Tenant Webhook |
		/// | **`customer.deleted`** | Triggered when a user is deleted | Tenant Webhook |
		/// | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Tenant Webhook |
		/// 
		/// </details>
		/// UpdateTenantWebhook v4/provisioning/webhooks/{webhook_id}
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		/// <returns>OK</returns>
		public async Task<Webhook> UpdateTenantWebhookAsync(long webhook_id, UpdateWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/webhooks/"+webhook_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset tenant webhook lifetime
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Reset the lifetime of a webhook for the tenant scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.
		/// 
		/// ### Postcondition:
		/// Lifetime of the webhook is reset.
		/// 
		/// ### Further Information:
		/// None.
		/// ResetTenantWebhookLifetime v4/provisioning/webhooks/{webhook_id}/reset_lifetime
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		/// <returns>OK</returns>
		public async Task<Webhook> ResetTenantWebhookLifetimeAsync(long webhook_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/provisioning/webhooks/"+webhook_id+"/reset_lifetime";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request public Download Share information
		/// ### Description:
		/// Retrieve the public information of a Download Share.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Download Share information is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestPublicDownloadShareInfo v4/public/shares/downloads/{access_key}
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <returns>OK</returns>
		public async Task<PublicDownloadShare> RequestPublicDownloadShareInfoAsync(string access_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/downloads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicDownloadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate download URL
		/// ### Description:
		/// Generate a download URL to retrieve a shared file.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Download URL and token are generated and returned.
		/// 
		/// ### Further Information:
		/// Use `downloadUrl` the download `token` is deprecated.
		/// GenerateDownloadUrlPublic v4/public/shares/downloads/{access_key}
		/// </summary>
		/// <param name="access_key">Access key</param>
		public async Task GenerateDownloadUrlPublicAsync(string access_key, PublicDownloadTokenGenerateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/downloads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download file with token
		/// ### Description:
		/// Download a file (or zip archive if target is a folder or room).
		/// 
		/// ### Precondition:
		/// Valid download token.
		/// 
		/// ### Postcondition:
		/// Stream is returned.
		/// 
		/// ### Further Information:
		/// Range requests are supported.
		/// Range requests are illegal for zip archive download.
		/// DownloadFileViaTokenPublic v4/public/shares/downloads/{access_key}/{token}
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <param name="token">Download token</param>
		/// <param name="generic_mimetype">Always return `application/octet-stream` instead of specific mimetype</param>
		/// <param name="inline">Use Content-Disposition: `inline` instead of `attachment`</param>
		/// <returns>OK</returns>
		public async Task DownloadFileViaTokenPublicAsync(string access_key, string token, bool generic_mimetype, bool inline, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/downloads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"/"+ (token==null? "" : System.Uri.EscapeDataString(token))+"&generic_mimetype="+generic_mimetype+"&inline="+inline;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request public Upload Share information
		/// ### Description:
		/// Provides information about the desired Upload Share.
		/// 
		/// ### Precondition:
		/// Only `userUserPublicKeyList` is returned to the users who owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>
		/// 
		/// ### Postcondition:
		/// None.
		/// 
		/// ### Further Information:
		/// If no password is set, the returned information is reduced to the following attributes (if available):
		/// 
		/// * `name`
		/// * `createdAt`
		/// * `isProtected`
		/// * `isEncrypted`
		/// * `showUploadedFiles`
		/// * `userUserPublicKeyList` (if parent is end-to-end encrypted)
		/// 
		/// Only if the password is transmitted as `X-Sds-Share-Password` header, all values are returned.
		/// 
		/// RequestPublicUploadShareInfo v4/public/shares/uploads/{access_key}
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <returns>OK</returns>
		public async Task<PublicUploadShare> RequestPublicUploadShareInfoAsync(string access_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/uploads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicUploadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new file upload channel
		/// ### Description:
		/// Create a new upload channel.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Upload channel is created and corresponding upload URL, token & upload ID are returned.
		/// 
		/// ### Further Information:
		/// Use `uploadUrl` the upload `token` is deprecated.
		/// 
		/// Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// 
		/// CreateShareUploadChannel v4/public/shares/uploads/{access_key}
		/// </summary>
		/// <param name="access_key">Access key</param>
		public async Task CreateShareUploadChannelAsync(string access_key, CreateShareUploadChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/uploads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel file upload
		/// ### Description:
		/// Abort (chunked) upload via Upload Share.
		/// 
		/// ### Precondition:
		/// Valid Upload ID.
		/// 
		/// ### Postcondition:
		/// Aborts upload and invalidates upload ID / token.
		/// 
		/// ### Further Information:
		/// None.
		/// CancelFileUploadViaShare v4/public/shares/uploads/{access_key}/{upload_id}
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task CancelFileUploadViaShareAsync(string access_key, string upload_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/uploads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request status of S3 file upload
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>
		/// 
		/// ### Description:
		/// Request status of a S3 file upload.
		/// 
		/// ### Precondition:
		/// An upload channel has been created and the user has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the parent container (room or folder).
		/// 
		/// ### Postcondition:
		/// Status of S3 multipart upload request is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Possible errors:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Http Status | Error Code | Description |
		/// | :--- | :--- | :--- |
		/// | `400 Bad Request` | `-80000` | Mandatory fields cannot be empty |
		/// | `400 Bad Request` | `-80001` | Invalid positive number |
		/// | `400 Bad Request` | `-80002` | Invalid number |
		/// | `400 Bad Request` | `-40001` | (Target) room is not encrypted |
		/// | `400 Bad Request` | `-40755` | Bad file name |
		/// | `400 Bad Request` | `-40763` | File key must be set for an upload into encrypted room |
		/// | `400 Bad Request` | `-50506` | Exceeds the number of files for this Upload Share |
		/// | `403 Forbidden` |  | Access denied |
		/// | `404 Not Found` | `-20501` | Upload not found |
		/// | `404 Not Found` | `-40000` | Container not found |
		/// | `404 Not Found` | `-41000` | Node not found |
		/// | `404 Not Found` | `-70501` | User not found |
		/// | `409 Conflict` | `-40010` | Container cannot be overwritten |
		/// | `409 Conflict` |  | File cannot be overwritten |
		/// | `500 Internal Server Error` |  | System Error |
		/// | `502 Bad Gateway` |  | S3 Error |
		/// | `502 Insufficient Storage` | `-50504` | Exceeds the quota for this Upload Share |
		/// | `502 Insufficient Storage` | `-40200` | Exceeds the free node quota in room |
		/// | `502 Insufficient Storage` | `-90200` | Exceeds the free customer quota |
		/// | `502 Insufficient Storage` | `-90201` | Exceeds the free customer physical disk space |
		/// 
		/// </details>
		/// RequestUploadStatusPublic v4/public/shares/uploads/{access_key}/{upload_id}
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <param name="upload_id">Upload channel ID</param>
		/// <returns>OK</returns>
		public async Task<S3ShareUploadStatus> RequestUploadStatusPublicAsync(string access_key, string upload_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/uploads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3ShareUploadStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete file upload
		/// ### Description:
		/// Finalize (chunked) upload via Upload Share.
		/// 
		/// ### Precondition:
		/// Valid upload ID.
		/// Only returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>
		/// 
		/// ### Postcondition:
		/// Finalizes upload.
		/// 
		/// ### Further Information:
		/// Chunked uploads (range requests) are supported.
		/// 
		/// Please ensure that all chunks have been transferred correctly before finishing the upload.
		/// If file hash has been created in time a `201 Created` will be responded and hash will be part of response, otherwise it will be a `202 Accepted` without it.
		/// 
		/// CompleteFileUploadViaShare v4/public/shares/uploads/{access_key}/{upload_id}
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task CompleteFileUploadViaShareAsync(string access_key, string upload_id, UserFileKeyList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/uploads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete S3 file upload
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>
		/// 
		/// ### Description:
		/// Finishes a S3 file upload and closes the corresponding upload channel.
		/// 
		/// ### Precondition:
		/// Valid upload ID.
		/// Only returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>
		/// 
		/// ### Postcondition:
		/// Upload channel is closed. S3 multipart upload request is completed.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// CompleteS3FileUploadViaShare v4/public/shares/uploads/{access_key}/{upload_id}/s3
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task CompleteS3FileUploadViaShareAsync(string access_key, string upload_id, CompleteS3ShareUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/uploads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id))+"/s3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate presigned URLs for S3 file upload
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>
		/// 
		/// ### Description:
		/// Generate presigned URLs for S3 file upload.
		/// 
		/// ### Precondition:
		/// Valid upload ID
		/// 
		/// ### Postcondition:
		/// List of presigned URLs is returned.
		/// 
		/// ### Further Information:
		/// The size for each part must be >= 5 MB, except for the last part.
		/// The part number of the first part in S3 is 1 (not 0).
		/// Use HTTP method `PUT` for uploading bytes via presigned URL.
		/// GeneratePresignedUrlsPublic v4/public/shares/uploads/{access_key}/{upload_id}/s3_urls
		/// </summary>
		/// <param name="access_key">Access key</param>
		/// <param name="upload_id">Upload channel ID</param>
		public async Task GeneratePresignedUrlsPublicAsync(string access_key, string upload_id, GeneratePresignedUrlsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/shares/uploads/"+ (access_key==null? "" : System.Uri.EscapeDataString(access_key))+"/"+ (upload_id==null? "" : System.Uri.EscapeDataString(upload_id))+"/s3_urls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request third-party software dependencies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Provides information about used third-party software dependencies.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// List of the third-party software dependencies used by **DRACOON Core** (referred to as _"Server"_) is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// 
		/// RequestThirdPartyDependencies v4/public/software/third_party_dependencies
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ThirdPartyDependenciesData[]> RequestThirdPartyDependenciesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/software/third_party_dependencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThirdPartyDependenciesData[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request software version information
		/// ### Description:
		/// Public software version information.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Sofware version information is returned.
		/// 
		/// ### Further Information:
		/// The version of DRACOON Server consists of two components:
		/// * **API**
		/// * **Core** (referred to as _"Server"_)
		/// 
		/// which are versioned individually.
		/// RequestSoftwareVersion v4/public/software/version
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SoftwareVersionData> RequestSoftwareVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/software/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SoftwareVersionData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request system information
		/// ### Description:
		/// Provides information about system.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// System information is returned.
		/// 
		/// ### Further Information:
		/// Authentication methods are sorted by **priority** attribute.
		/// Smaller values have higher priority.
		/// Authentication method with highest priority is considered as default.
		/// 
		/// ### System information:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
		/// | `hideLoginInputFields` | Defines if login fields should be hidden. | `true or false` |
		/// | `s3Hosts` | List of available S3 hosts. | `String array` |
		/// | `s3EnforceDirectUpload` | Determines whether S3 direct upload is enforced or not. | `true or false` |
		/// | `useS3Storage` | Determines whether S3 Storage enabled and used. | `true or false` |
		/// 
		/// </details>
		/// 
		/// ### Authentication methods:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method | Description |
		/// | :--- | :--- |
		/// | `basic` | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as `sql`. |
		/// | `active_directory` | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
		/// | `radius` | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
		/// | `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
		/// | `hideLoginInputFields` | Determines whether input fields for login should be enabled | `true or false` |
		/// 
		/// </details>
		/// RequestSystemInfo v4/public/system/info
		/// </summary>
		/// <param name="is_enabled">Show only enabled authentication methods</param>
		/// <returns>OK</returns>
		public async Task<SystemInfo> RequestSystemInfoAsync(bool is_enabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/system/info?is_enabled="+is_enabled;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request Active Directory authentication information
		/// ### Description:
		/// Provides information about Active Directory authentication options.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Active Directory authentication options information is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestActiveDirectoryAuthInfo v4/public/system/info/auth/ad
		/// </summary>
		/// <param name="is_global_available">Show only global available items</param>
		/// <returns>OK</returns>
		public async Task<ActiveDirectoryAuthInfo> RequestActiveDirectoryAuthInfoAsync(bool is_global_available, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/system/info/auth/ad?is_global_available="+is_global_available;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActiveDirectoryAuthInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request OpenID Connect provider authentication information
		/// ### Description:
		/// Provides information about OpenID Connect authentication options.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// OpenID Connect authentication options information is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestOpenIdAuthInfo v4/public/system/info/auth/openid
		/// </summary>
		/// <param name="is_global_available">Show only global available items</param>
		/// <returns>OK</returns>
		public async Task<OpenIdAuthInfo> RequestOpenIdAuthInfoAsync(bool is_global_available, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/system/info/auth/openid?is_global_available="+is_global_available;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OpenIdAuthInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request system time
		/// ### Description:
		/// Retrieve the actual server time.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Server time is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestSystemTime v4/public/time
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SdsServerTime> RequestSystemTimeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/public/time";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SdsServerTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of subscription scopes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of subscription scopes.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of scopes is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestSubscriptionScopes v4/resources/user/notifications/scopes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NotificationScopeList> RequestSubscriptionScopesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/resources/user/notifications/scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationScopeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user avatar
		/// ### Description:
		/// Get user avatar.
		/// 
		/// ### Precondition:
		/// Valid user ID and avatar UUID
		/// 
		/// ### Postcondition:
		/// Avatar is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestUserAvatar v4/resources/users/{user_id}/avatar/{uuid}
		/// </summary>
		/// <param name="uuid">UUID of the avatar</param>
		/// <param name="user_id">User ID</param>
		/// <returns>OK</returns>
		public async Task<Avatar> RequestUserAvatarAsync(string uuid, long user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/resources/users/"+user_id+"/avatar/"+ (uuid==null? "" : System.Uri.EscapeDataString(uuid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Avatar>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request all roles with assigned rights
		/// ### Description:
		/// Retrieve a list of all roles with assigned rights.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.
		/// 
		/// ### Postcondition:
		/// List of roles with assigned rights is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestRoles v4/roles
		/// </summary>
		/// <returns>OK</returns>
		public async Task<RoleList> RequestRolesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke granted role from group(s)
		/// ### Description:
		/// Revoke granted group(s) from a role.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.
		/// For each role, at least one non-expiring user **MUST** remain who may grant the role.
		/// 
		/// ### Postcondition:
		/// One or more groups will be removed from a role.
		/// 
		/// ### Further Information:
		/// None.
		/// RevokeRoleGroups v4/roles/{role_id}/groups
		/// </summary>
		/// <param name="role_id">Role ID</param>
		/// <returns>OK</returns>
		public async Task<RoleGroupList> RevokeRoleGroupsAsync(int role_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/roles/"+role_id+"/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request groups with specific role
		/// ### Description:
		/// Get all groups with a specific role.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.
		/// 
		/// ### Postcondition:
		/// List of to the role assigned groups is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isMember:eq:false|name:cn:searchString`
		/// Get all groups that are **NOT** a member of that role **AND** whose name contains `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `isMember` | Filter the groups which are (not) member of that role | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// | `name` | Group name filter | `cn` | Group name contains value. | `search String` |
		/// 
		/// </details>
		/// RequestRoleGroups v4/roles/{role_id}/groups
		/// </summary>
		/// <param name="role_id">Role ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <returns>OK</returns>
		public async Task<RoleGroupList> RequestRoleGroupsAsync(int role_id, int offset, int limit, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/roles/"+role_id+"/groups?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign group(s) to the role
		/// ### Description:
		/// Assign group(s) to a role.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.
		/// 
		/// ### Postcondition:
		/// One or more groups will be added to a role.
		/// 
		/// ### Further Information:
		/// None.
		/// AddRoleGroups v4/roles/{role_id}/groups
		/// </summary>
		/// <param name="role_id">Role ID</param>
		/// <returns>OK</returns>
		public async Task<RoleGroupList> AddRoleGroupsAsync(int role_id, GroupIds requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/roles/"+role_id+"/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke granted role from user(s)
		/// ### Description:
		/// Revoke granted user(s) from a role.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.
		/// For each role, at least one non-expiring user **MUST** remain who may grant the role.
		/// 
		/// ### Postcondition:
		/// One or more users will be removed from a role.
		/// 
		/// ### Further Information:
		/// None.
		/// RevokeRoleUsers v4/roles/{role_id}/users
		/// </summary>
		/// <param name="role_id">Role ID</param>
		/// <returns>OK</returns>
		public async Task<RoleUserList> RevokeRoleUsersAsync(int role_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/roles/"+role_id+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleUserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request users with specific role
		/// ### Description:
		/// Get all users with a specific role.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.
		/// 
		/// ### Postcondition:
		/// List of users is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isMember:eq:false|user:cn:searchString`
		/// Get all users that are **NOT** member of that role **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` |
		/// | `isMember` | Filter the users which are (not) member of that role | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`displayName`</del> | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |
		/// 
		/// </details>
		/// RequestRoleUsers v4/roles/{role_id}/users
		/// </summary>
		/// <param name="role_id">Role ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <returns>OK</returns>
		public async Task<RoleUserList> RequestRoleUsersAsync(int role_id, int offset, int limit, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/roles/"+role_id+"/users?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleUserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign user(s) to the role
		/// ### Description:
		/// Assign user(s) to a role.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; grant permission on desired role</span> required.
		/// 
		/// ### Postcondition:
		/// One or more users will be added to a role.
		/// 
		/// ### Further Information:
		/// None.
		/// AddRoleUsers v4/roles/{role_id}/users
		/// </summary>
		/// <param name="role_id">Role ID</param>
		/// <returns>OK</returns>
		public async Task<RoleUserList> AddRoleUsersAsync(int role_id, UserIds requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/roles/"+role_id+"/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleUserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request customer settings
		/// ### Description:
		/// Retrieve customer related settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read config</span> required.
		/// 
		/// ### Postcondition:
		/// List of available settings is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable customer settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description                                                                                                                                                           | Value |
		/// | :--- |:----------------------------------------------------------------------------------------------------------------------------------------------------------------------| :--- |
		/// | `homeRoomParentName` | Name of the container in which all user's home rooms are located.<br>`null` if `homeRoomsActive` is `false`.                                                          | `String` |
		/// | `homeRoomQuota` | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if `homeRoomsActive` is `false`.                                           | `positive Long` |
		/// | `homeRoomsActive` | If set to `true`, every user with an Active Directory account or OpenID Connect account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |
		/// 
		/// 
		/// </details>
		/// RequestSettings v4/settings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CustomerSettingsResponse> RequestSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomerSettingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set customer settings
		/// ### Description:
		/// Set customer related settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> required.
		/// 
		/// ### Postcondition:
		/// Provided settings are updated.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable customer settings
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description                                                                                                                                                          | Value |
		/// | :--- |:---------------------------------------------------------------------------------------------------------------------------------------------------------------------| :--- |
		/// | `homeRoomParentName` | Name of the container in which all user's home rooms are located.<br>`null` if `homeRoomsActive` is `false`.                                                         | `String` |
		/// | `homeRoomQuota` | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if `homeRoomsActive` is `false`.                                          | `positive Long` |
		/// | `homeRoomsActive` | If set to `true`, every user with an Active Directory account or OpenID Connect account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |
		/// 
		/// </details>
		/// 
		/// ### Node naming convention:
		/// * Node (room, folder, file) names are limited to **150** characters.
		/// * Illegal names:
		/// `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)`
		/// * Illegal characters in names:
		/// `'\\', '<','>', ':', '\"', '|', '?', '*', '/', leading '-', trailing '.' `
		/// 
		/// SetSettings v4/settings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CustomerSettingsResponse> SetSettingsAsync(CustomerSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomerSettingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove system rescue key pair
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Remove the system rescue key pair.
		/// 
		/// ### Precondition:
		/// * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>
		/// * Existence of own key pair
		/// 
		/// ### Postcondition:
		/// Key pair is removed (cf. further information below).
		/// 
		/// ### Further Information:
		/// Please set a new system rescue key pair first and re-encrypt file keys with it.
		/// If no version is set, deleted key pair with lowest preference value.
		/// Although, `version` **SHOULD** be set.
		/// 
		/// RemoveSystemRescueKeyPair v4/settings/keypair
		/// </summary>
		/// <param name="version">Version (NEW)</param>
		public async Task RemoveSystemRescueKeyPairAsync(string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/keypair?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request system rescue key pair
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Retrieve the system rescue key pair.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>
		/// 
		/// ### Postcondition:
		/// Key pair is returned.
		/// 
		/// ### Further Information:
		/// If more than one key pair exists the one with highest preference value is returned.
		/// 
		/// RequestSystemRescueKeyPair v4/settings/keypair
		/// </summary>
		/// <param name="version">Version (NEW)</param>
		/// <returns>OK</returns>
		public async Task<UserKeyPairContainer> RequestSystemRescueKeyPairAsync(string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/keypair?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserKeyPairContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate client-side encryption for customer
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Set the system rescue key pair and activate client-side encryption for according customer.
		/// 
		/// ### Precondition:
		/// * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>
		/// * Existence of own key pair
		/// 
		/// ### Postcondition:
		/// System rescue key pair is set and client-side encryption is enabled.
		/// 
		/// ### Further Information:
		/// Sets the ability for this customer to encrypt rooms.
		/// Once enabled on customer level, it **CANNOT** be unset.
		/// On activation, a customer rescue key pair **MUST** be set.
		/// 
		/// SetSystemRescueKeyPair v4/settings/keypair
		/// </summary>
		public async Task SetSystemRescueKeyPairAsync(UserKeyPairContainer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/keypair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request all system rescue key pairs
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Retrieve all system rescue key pairs to allow migrating system-rescue-key-encrypted file keys.
		/// 
		/// ### Precondition:
		/// * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>
		/// * Existence of own key pair
		/// 
		/// ### Postcondition:
		/// List of key pairs is returned.
		/// 
		/// ### Further Information:
		/// In the case of an algorithm migration of a system rescue key, one should create the new key pair before deleting the old one.
		/// This allows re-encrypting file keys with the new key pair, using the old one.
		/// 
		/// This API allows to retrieve both key pairs, in contrast to `GET /settings/keypair`, which only delivers the preferred one.
		/// 
		/// RequestAllSystemRescueKeyPairs v4/settings/keypairs
		/// </summary>
		/// <returns>OK</returns>
		public async Task<UserKeyPairContainer[]> RequestAllSystemRescueKeyPairsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/keypairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserKeyPairContainer[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create system rescue key pair and preserve copy of old private key
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Create system rescue key pair and preserve copy of old private key.
		/// 
		/// ### Precondition:
		/// * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>
		/// * Existence of own key pair
		/// 
		/// ### Postcondition:
		/// System rescue key pair is created.
		/// Copy of old private key is preserved.
		/// 
		/// ### Further Information:
		/// You can submit your old private key, encrypted with your current password.
		/// This allows migrating file keys encrypted with your old key pair to the new one.
		/// 
		/// CreateAndPreserveKeyPair v4/settings/keypairs
		/// </summary>
		public async Task CreateAndPreserveKeyPairAsync(CreateKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/keypairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of notification channels
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of configured notification channels.
		/// 
		/// ### Precondition:
		/// Right _"change config"_ required.
		/// 
		/// ### Postcondition:
		/// List of notification channels is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// RequestNotificationChannels v4/settings/notifications/channels
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NotificationChannelList> RequestNotificationChannelsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/notifications/channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationChannelList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Toggle notification channels
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Toggle configured notification channels.
		/// 
		/// ### Precondition:
		/// Right _"change config"_ required.
		/// 
		/// ### Postcondition:
		/// Channel status is switched.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ToggleNotificationChannels v4/settings/notifications/channels
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NotificationChannelList> ToggleNotificationChannelsAsync(NotificationChannelActivationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/notifications/channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationChannelList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of webhooks
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Get a list of webhooks for the customer scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// List of webhooks is returned.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:cn:goo|createdAt:ge:2015-01-01`
		/// Get webhooks where name contains `goo` **AND** webhook creation date is **>=** `2015-01-01`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | **`id`** | Webhook id filter | `eq` | Webhook id equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**). |`positive number`|
		/// | **`name`** | Webhook type name| `cn, eq` | Webhook name contains / equals value. | `search String` |
		/// | **`isEnabled`** | Webhook isEnabled filter | `eq` |  | `true or false` |
		/// | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | **`expiration`** | Expiration date filter | `ge, le, eq` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expiration:ge:2016-12-31`&#124;`expiration:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | **`lastFailStatus`** | Failure status filter | `eq` | Last HTTP status code. Set when a webhook is auto-disabled due to repeated delivery failures |`positive number`|
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:desc|isEnabled:asc`
		/// Sort by `name` descending and `isEnabled` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | **`id`** | Webhook id |
		/// | **`name`** | Webhook name |
		/// | **`isEnabled`** | Webhook isEnabled |
		/// | **`createdAt`** | Creation date |
		/// | **`updatedAt`** | Last modification date |
		/// | **`expiration`** | Expiration date |
		/// 
		/// </details>
		/// 
		/// RequestListOfWebhooks v4/settings/webhooks
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<WebhookList> RequestListOfWebhooksAsync(int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/webhooks?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WebhookList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Create a new webhook for the customer scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is created for given event types.
		/// 
		/// ### Further Information:
		/// URL must begin with the `HTTPS` scheme.
		/// Webhook names are limited to 150 characters.
		/// 
		/// ### Available event types:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Scope |
		/// | :--- | :--- | :--- |
		/// | **`user.created`** | Triggered when a new user is created | Customer Admin Webhook |
		/// | **`user.deleted`** | Triggered when a user is deleted | Customer Admin Webhook |
		/// | **`user.locked`** | Triggered when a user gets locked | Customer Admin Webhook |
		/// |  |  |  |
		/// | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Customer Admin Webhook |
		/// |  |  |  |
		/// | **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook |
		/// | **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook |
		/// | **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook |
		/// | **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook |
		/// | **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook |
		/// | **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook |
		/// | **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook |
		/// | **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook |
		/// | **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook |
		/// | **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook |
		/// | **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook |
		/// | **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |
		/// 
		/// </details>
		/// CreateWebhook v4/settings/webhooks
		/// </summary>
		public async Task CreateWebhookAsync(CreateWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of event types
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Get a list of available (for <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span>) event types.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// List of available event types is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// RequestListOfEventTypesForConfigManager v4/settings/webhooks/event_types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EventTypeList> RequestListOfEventTypesForConfigManagerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/webhooks/event_types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventTypeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Delete a webhook for the customer scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveWebhook v4/settings/webhooks/{webhook_id}
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		public async Task RemoveWebhookAsync(long webhook_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/webhooks/"+webhook_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Get a specific webhook for the customer scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestWebhook v4/settings/webhooks/{webhook_id}
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		/// <returns>OK</returns>
		public async Task<Webhook> RequestWebhookAsync(long webhook_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/webhooks/"+webhook_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update webhook
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Update an existing webhook for the customer scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// Webhook is updated.
		/// 
		/// ### Further Information:
		/// URL must begin with the `HTTPS` scheme.
		/// Webhook names are limited to 150 characters.
		/// Webhook event types can not be changed from Customer Admin Webhook types to Node Webhook types and vice versa
		/// 
		/// ### Available event types:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Scope |
		/// | :--- | :--- | :--- |
		/// | **`user.created`** | Triggered when a new user is created | Customer Admin Webhook |
		/// | **`user.deleted`** | Triggered when a user is deleted | Customer Admin Webhook |
		/// | **`user.locked`** | Triggered when a user gets locked | Customer Admin Webhook |
		/// |  |  |  |
		/// | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Customer Admin Webhook |
		/// |  |  |  |
		/// | **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook |
		/// | **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook |
		/// | **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook |
		/// | **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook |
		/// | **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook |
		/// | **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook |
		/// | **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook |
		/// | **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook |
		/// | **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook |
		/// | **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook |
		/// | **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook |
		/// | **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |
		/// 
		/// </details>
		/// UpdateWebhook v4/settings/webhooks/{webhook_id}
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		/// <returns>OK</returns>
		public async Task<Webhook> UpdateWebhookAsync(long webhook_id, UpdateWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/webhooks/"+webhook_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset webhook lifetime
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>
		/// 
		/// ### Description:
		/// Reset the lifetime of a webhook for the customer scope.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// Lifetime of the webhook is reset.
		/// 
		/// ### Further Information:
		/// None.
		/// ResetWebhookLifetime v4/settings/webhooks/{webhook_id}/reset_lifetime
		/// </summary>
		/// <param name="webhook_id">Webhook ID</param>
		/// <returns>OK</returns>
		public async Task<Webhook> ResetWebhookLifetimeAsync(long webhook_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/settings/webhooks/"+webhook_id+"/reset_lifetime";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Download Shares
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.21.0</h3>
		/// 
		/// ### Functional Description:
		/// Delete multiple Download Shares.
		/// 
		/// ### Precondition:
		/// User with _"manage download share"_ permissions on target nodes.
		/// 
		/// ### Postcondition:
		/// Download Shares are deleted.
		/// 
		/// ### Further Information:
		/// Only the Download Shares are removed; the referenced files or containers persists.
		/// DeleteDownloadShares v4/shares/downloads
		/// </summary>
		public async Task DeleteDownloadSharesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of Download Shares
		/// ### Description:
		/// Retrieve a list of Download Shares.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of available Download Shares is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical (**AND**). createdBy and updatedBy searches several user-related attributes.
		/// 
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:cn:searchString_1|createdBy:cn:searchString_2`
		/// Filter by file name contains `searchString_1` **AND** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `name` | Alias or node name filter | `cn` | Alias or node name contains value. | `search String` |
		/// | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | `createdBy` | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
		/// | `createdById` | Creator ID filter | `eq` | Creator ID equals value. | `positive Integer` |
		/// | `accessKey` | Share access key filter | `cn` | Share access key contains values. | `search String` |
		/// | `nodeId` | Source node ID | `eq` | Source node (room, folder, file) ID equals value. | `positive Integer` |
		/// | `updatedBy` | Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
		/// | `updatedById` | Modifier ID filter | `eq` | Modifier ID equals value. | `positive Integer` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`userId`</del>  | Creator user ID | `eq` | Creator user ID equals value. Use `createdById` instead | `positive Integer` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:asc|expireAt:desc`
		/// Sort by `name` ascending **AND** by `expireAt` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `name` | Alias or node name |
		/// | `notifyCreator` | Notify creator on every download |
		/// | `expireAt` | Expiration date |
		/// | `createdAt` | Creation date |
		/// | `createdBy` | Creator first name, last name |
		/// | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |
		/// 
		/// </details>
		/// 
		/// RequestDownloadShares v4/shares/downloads
		/// </summary>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <returns>OK</returns>
		public async Task<DownloadShareList> RequestDownloadSharesAsync(string filter, string sort, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DownloadShareList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Download Share
		/// ### Description:
		/// Create a new Download Share.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share is created.
		/// 
		/// ### Further Information:
		/// 
		/// If the target node is a room: subordinary rooms are excluded from a Download Share.
		/// 
		/// * `name` is limited to **150** characters.
		/// * `notes` are limited to **255** characters.
		/// * `password` is limited to **1024** characters.
		/// 
		/// Use `POST /shares/downloads/{share_id}/email` API for sending emails.
		/// 
		/// Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// 
		/// Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters
		/// may not be displayed correctly in short messages (SMS).
		/// CreateDownloadShare v4/shares/downloads
		/// </summary>
		public async Task CreateDownloadShareAsync(CreateDownloadShareRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a list of Download Shares
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>
		/// 
		/// ### Description:
		/// Update a list of existing Download Shares.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Shares are successfully updated.
		/// 
		/// ### Further Information:
		/// Maximum number of shares is 200
		/// UpdateDownloadShares v4/shares/downloads
		/// </summary>
		/// <returns>No Content</returns>
		public async Task UpdateDownloadSharesAsync(UpdateDownloadSharesBulkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Download Share
		/// ### Description:
		/// Delete a Download Share.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share is deleted.
		/// 
		/// ### Further Information:
		/// Only the Download Share is removed; the referenced file or container persists.
		/// RemoveDownloadShare v4/shares/downloads/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task RemoveDownloadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request Download Share
		/// ### Description:
		/// Retrieve detailed information about one Download Share.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share is returned
		/// 
		/// ### Further Information:
		/// None.
		/// RequestDownloadShare v4/shares/downloads/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		/// <returns>OK</returns>
		public async Task<DownloadShare> RequestDownloadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DownloadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Download Share
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
		/// 
		/// ### Description:
		/// Update an existing Download Share.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share is successfully updated.
		/// 
		/// ### Further Information:
		/// * `name` is limited to **150** characters.
		/// * `notes` are limited to **255** characters.
		/// * `password` is limited to **1024** characters.
		/// 
		/// Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// 
		/// Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters
		/// may not be displayed correctly in short messages (SMS).
		/// UpdateDownloadShare v4/shares/downloads/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		/// <returns>OK</returns>
		public async Task<DownloadShare> UpdateDownloadShareAsync(long share_id, UpdateDownloadShareRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DownloadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send an existing Download Share link via email
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
		/// 
		/// ### Description:
		/// Send an email to specific recipients for existing Download Share.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share link successfully sent.
		/// 
		/// ### Further Information:
		/// 
		/// * Forbidden characters in the email body: [`<`, `>`]
		/// 
		/// SendDownloadShareLinkViaEmail v4/shares/downloads/{share_id}/email
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task SendDownloadShareLinkViaEmailAsync(long share_id, DownloadShareLinkEmail requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads/"+share_id+"/email";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request Download Share via QR Code
		/// ### Description:
		/// Retrieve detailed information about one Download Share.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share is returned
		/// 
		/// ### Further Information:
		/// None.
		/// RequestDownloadShareQr v4/shares/downloads/{share_id}/qr
		/// </summary>
		/// <param name="share_id">Share ID</param>
		/// <returns>OK</returns>
		public async Task<DownloadShare> RequestDownloadShareQrAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/downloads/"+share_id+"/qr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DownloadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Upload Shares
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.21.0</h3>
		/// 
		/// ### Functional Description:
		/// Delete multiple Upload Shares (aka Upload Accounts).
		/// 
		/// ### Precondition:
		/// User has _"manage upload share"_ permissions on target containers.
		/// 
		/// ### Postcondition:
		/// Upload Shares are deleted.
		/// 
		/// ### Further Information:
		/// Only the Upload Shares are removed; already uploaded files and the target container persist.
		/// DeleteUploadShares v4/shares/uploads
		/// </summary>
		public async Task DeleteUploadSharesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of Upload Shares
		/// ### Description:
		/// Retrieve a list of Upload Shares (aka File Requests).
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of available Upload Shares is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical (**AND**). createdBy and updatedBy searches several user-related attributes.
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:cn:searchString_1|createdBy:cn:searchString_2`
		/// Filter by alias name contains `searchString_1` **AND** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `name` | Alias name filter | `cn` | Alias name contains value. | `search String` |
		/// | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` |
		/// | `createdBy` | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
		/// | `createdById` | Creator ID filter | `eq` | Creator ID equals value. | `positive Integer` |
		/// | `accessKey` | Share access key filter | `cn` | Share access key contains values. | `search String` |
		/// | `userId` | Creator user ID | `eq` | Creator user ID equals value. | `positive Integer` |
		/// | `targetId` | Target node ID | `eq` | Target node (room, folder) ID equals value. | `positive Integer` |
		/// | `updatedBy` | Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` |
		/// | `updatedById` | Modifier ID filter | `eq` | Modifier ID equals value. | `positive Integer` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`targetId`</del> | Target node ID | `cn` | Target node (room, folder) ID equals value. | `positive Integer` |
		/// | <del>`userId` </del>| Creator user ID | `eq` | Creator user ID equals value. Use `createdById` instead. | `positive Integer` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `name:asc|expireAt:desc`
		/// Sort by `name` ascending **AND** by `expireAt` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `name` | Alias name |
		/// | `notifyCreator` | Notify creator on every upload |
		/// | `expireAt` | Expiration date |
		/// | `createdAt` | Creation date |
		/// | `createdBy` | Creator first name, last name |
		/// 
		/// </details>
		/// RequestUploadShares v4/shares/uploads
		/// </summary>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <returns>OK</returns>
		public async Task<UploadShareList> RequestUploadSharesAsync(string filter, string sort, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UploadShareList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Upload Share
		/// ### Description:
		/// Create a new Upload Share (aka File Request).
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.
		/// 
		/// ### Postcondition:
		/// Upload Share is created.
		/// 
		/// ### Further Information:
		/// 
		/// * `name` is limited to **150** characters.
		/// * `notes` are limited to **255** characters.
		/// * `password` is limited to **1024** characters.
		/// 
		/// Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// 
		/// Use `POST /shares/uploads/{share_id}/email` API for sending emails.
		/// 
		/// Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters
		/// may not be displayed correctly in short messages (SMS).
		/// CreateUploadShare v4/shares/uploads
		/// </summary>
		public async Task CreateUploadShareAsync(CreateUploadShareRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update List of Upload Shares
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>
		/// 
		/// ### Description:
		/// Update a list of existing Upload Shares (aka File Request).
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.
		/// 
		/// ### Postcondition:
		/// Upload Shares successfully updated.
		/// 
		/// ### Further Information:
		/// Maximum number of shares is 200
		/// UpdateUploadShares v4/shares/uploads
		/// </summary>
		/// <returns>OK</returns>
		public async Task UpdateUploadSharesAsync(UpdateUploadSharesBulkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Upload Share
		/// ### Description:
		/// Delete an Upload Share (aka File Request).
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.
		/// 
		/// ### Postcondition:
		/// Upload Share is deleted.
		/// 
		/// ### Further Information:
		/// Only the Upload Share is removed; already uploaded files and the target container persist.
		/// RemoveUploadShare v4/shares/uploads/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task RemoveUploadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request Upload Share
		/// ### Description:
		/// Retrieve detailed information about one Upload Share (aka File Request).
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.
		/// 
		/// ### Postcondition:
		/// Upload Share is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestUploadShare v4/shares/uploads/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		/// <returns>OK</returns>
		public async Task<UploadShare> RequestUploadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UploadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Upload Share
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
		/// 
		/// ### Description:
		/// Update existing Upload Share (aka File Request).
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.
		/// 
		/// ### Postcondition:
		/// Upload Share successfully updated.
		/// 
		/// ### Further Information:
		/// 
		/// * `name` is limited to **150** characters.
		/// * `notes` are limited to **255** characters.
		/// * `password` is limited to **1024** characters.
		/// 
		/// Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// 
		/// Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters
		/// may not be displayed correctly in short messages (SMS).
		/// UpdateUploadShare v4/shares/uploads/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		/// <returns>OK</returns>
		public async Task<UploadShare> UpdateUploadShareAsync(long share_id, UpdateUploadShareRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UploadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send an existing Upload Share link via email
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
		/// 
		/// ### Description:
		/// Send an email to specific recipients for existing Upload Share.
		/// 
		/// ### Precondition:
		/// User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.
		/// 
		/// ### Postcondition:
		/// Upload Share link successfully sent.
		/// 
		/// ### Further Information:
		/// 
		/// * Forbidden characters in the email body: [`<`, `>`]
		/// 
		/// SendUploadShareLinkViaEmail v4/shares/uploads/{share_id}/email
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task SendUploadShareLinkViaEmailAsync(long share_id, UploadShareLinkEmail requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads/"+share_id+"/email";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request Upload Share via QR Code
		/// ### Description:
		/// Retrieve detailed information about one Upload Share (aka File Request).
		/// 
		/// ### Precondition:
		/// User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.
		/// 
		/// ### Postcondition:
		/// Upload Share is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestUploadShareQr v4/shares/uploads/{share_id}/qr
		/// </summary>
		/// <param name="share_id">Share ID</param>
		/// <returns>OK</returns>
		public async Task<UploadShare> RequestUploadShareQrAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/shares/uploads/"+share_id+"/qr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UploadShare>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test Active Directory configuration
		/// ### Description:
		/// Test Active Directory configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Active Directory configuration is returned if successful.
		/// 
		/// ### Further Information:
		/// DRACOON tries to establish a connection with the provided information.
		/// TestAdConfig v4/system/config/actions/test/ad
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TestActiveDirectoryConfigResponse> TestAdConfigAsync(TestActiveDirectoryConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/actions/test/ad";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TestActiveDirectoryConfigResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test RADIUS server availability
		/// ### Description:
		/// Test RADIUS configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// RADIUS configuration is returned if successful.
		/// 
		/// ### Further Information:
		/// DRACOON tries to establish a connection with the provided information.
		/// TestRadiusConfig v4/system/config/actions/test/radius
		/// </summary>
		public async Task TestRadiusConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/actions/test/radius";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of Active Directory configurations
		/// ### Description:
		/// Retrieve a list of configured Active Directories.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// List of Active Directory configurations is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestAdConfigs v4/system/config/auth/ads
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ActiveDirectoryConfigList> RequestAdConfigsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/ads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActiveDirectoryConfigList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Active Directory configuration
		/// ### Description:
		/// Create a new Active Directory configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// New Active Directory configuration created.
		/// 
		/// ### Further Information:
		/// None.
		/// CreateAdConfig v4/system/config/auth/ads
		/// </summary>
		public async Task CreateAdConfigAsync(CreateActiveDirectoryConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/ads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Active Directory configuration
		/// ### Description:
		/// Delete an existing Active Directory configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Active Directory configuration is removed.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveAdConfig v4/system/config/auth/ads/{ad_id}
		/// </summary>
		/// <param name="ad_id">Active Directory ID</param>
		public async Task RemoveAdConfigAsync(int ad_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/ads/"+ad_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request Active Directory configuration
		/// ### Description:
		/// Retrieve the configuration of an Active Directory.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Active Directory configuration is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestAdConfig v4/system/config/auth/ads/{ad_id}
		/// </summary>
		/// <param name="ad_id">Active Directory ID</param>
		/// <returns>OK</returns>
		public async Task<ActiveDirectoryConfig> RequestAdConfigAsync(int ad_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/ads/"+ad_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActiveDirectoryConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Active Directory configuration
		/// ### Description:
		/// Update an existing Active Directory configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Active Directory configuration updated.
		/// 
		/// ### Further Information:
		/// None.
		/// UpdateAdConfig v4/system/config/auth/ads/{ad_id}
		/// </summary>
		/// <param name="ad_id">Active Directory ID</param>
		/// <returns>OK</returns>
		public async Task<ActiveDirectoryConfig> UpdateAdConfigAsync(int ad_id, UpdateActiveDirectoryConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/ads/"+ad_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActiveDirectoryConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of OpenID Connect IDP configurations
		/// ### Description:
		/// Retrieve a list of configured OpenID Connect IDPs.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// List of OpenID Connect IDP configurations is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestOpenIdIdpConfigs v4/system/config/auth/openid/idps
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OpenIdIdpConfig[]> RequestOpenIdIdpConfigsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/openid/idps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OpenIdIdpConfig[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create OpenID Connect IDP configuration
		/// ### Description:
		/// Create new OpenID Connect IDP configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// New OpenID Connect IDP configuration is created.
		/// 
		/// ### Further Information:
		/// None.
		/// CreateOpenIdIdpConfig v4/system/config/auth/openid/idps
		/// </summary>
		public async Task CreateOpenIdIdpConfigAsync(CreateOpenIdIdpConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/openid/idps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove OpenID Connect IDP configuration
		/// ### Description:
		/// Delete an existing OpenID Connect IDP configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// OpenID Connect IDP configuration is removed.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveOpenIdIdpConfig v4/system/config/auth/openid/idps/{idp_id}
		/// </summary>
		/// <param name="idp_id">OpenID Connect IDP configuration ID</param>
		public async Task RemoveOpenIdIdpConfigAsync(int idp_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/openid/idps/"+idp_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request OpenID Connect IDP configuration
		/// ### Description:
		/// Retrieve an OpenID Connect IDP configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// OpenID Connect IDP configuration is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestOpenIdIdpConfig v4/system/config/auth/openid/idps/{idp_id}
		/// </summary>
		/// <param name="idp_id">OpenID Connect IDP configuration ID</param>
		/// <returns>OK</returns>
		public async Task<OpenIdIdpConfig> RequestOpenIdIdpConfigAsync(int idp_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/openid/idps/"+idp_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OpenIdIdpConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update OpenID Connect IDP configuration
		/// ### Description:
		/// Update an existing OpenID Connect IDP configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// OpenID Connect IDP configuration is updated.
		/// 
		/// ### Further Information:
		/// None.
		/// UpdateOpenIdIdpConfig v4/system/config/auth/openid/idps/{idp_id}
		/// </summary>
		/// <param name="idp_id">OpenID Connect IDP configuration ID</param>
		/// <returns>OK</returns>
		public async Task<OpenIdIdpConfig> UpdateOpenIdIdpConfigAsync(int idp_id, UpdateOpenIdIdpConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/openid/idps/"+idp_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OpenIdIdpConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove RADIUS configuration
		/// ### Description:
		/// Delete existing RADIUS configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// RADIUS configuration is deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveRadiusConfig v4/system/config/auth/radius
		/// </summary>
		public async Task RemoveRadiusConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/radius";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request RADIUS configuration
		/// ### Description:
		/// Retrieve a RADIUS configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// RADIUS configuration is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestRadiusConfig v4/system/config/auth/radius
		/// </summary>
		/// <returns>OK</returns>
		public async Task<RadiusConfig> RequestRadiusConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/radius";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RadiusConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create RADIUS configuration
		/// ### Description:
		/// Create new RADIUS configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// New RADIUS configuration is created.
		/// 
		/// ### Further Information:
		/// None.
		/// CreateRadiusConfig v4/system/config/auth/radius
		/// </summary>
		public async Task CreateRadiusConfigAsync(RadiusConfigCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/radius";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update RADIUS configuration
		/// ### Description:
		/// Update existing RADIUS configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// RADIUS configuration is updated.
		/// 
		/// ### Further Information:
		/// None.
		/// UpdateRadiusConfig v4/system/config/auth/radius
		/// </summary>
		/// <returns>OK</returns>
		public async Task<RadiusConfig> UpdateRadiusConfigAsync(RadiusConfigUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/auth/radius";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RadiusConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of OAuth clients
		/// ### Description:
		/// Retrieve a list of configured OAuth clients.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// List of OAuth clients is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isStandard:eq:true`
		/// Get standard OAuth clients.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `isStandard` | Standard client filter | `eq` |  | `true or false` |
		/// | `isExternal` | External client filter | `eq` |  | `true or false` |
		/// | `isEnabled` | Enabled/disabled clients filter | `eq` |  | `true or false` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `clientName:desc|isStandard:asc`
		/// Sort by `clientName` descending **AND** `isStandard` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `clientName` | Client name |
		/// | `isStandard` | Is a standard client |
		/// | `isExternal` | Is a external client |
		/// | `isEnabled` | Is a enabled client |
		/// 
		/// </details>
		/// RequestOAuthClients v4/system/config/oauth/clients
		/// </summary>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<OAuthClient[]> RequestOAuthClientsAsync(string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/oauth/clients?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OAuthClient[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create OAuth client
		/// ### Description:
		/// Create a new OAuth client.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// New OAuth client created.
		/// 
		/// ### Further Information:
		/// Client secret **MUST** have:
		/// * at least 12 characters, at most 32 characters
		/// * only lower case characters, upper case characters and digits
		/// * at least 1 lower case character, 1 upper case character and 1 digit
		/// 
		/// The client secret is optional and will be generated if it is left empty.
		/// 
		/// Valid grant types are:
		/// * `authorization_code`
		/// * `implicit`
		/// * `password`
		/// * `client_credentials`
		/// * `refresh_token`
		/// 
		/// Grant type `client_credentials` is currently **NOT** permitted!
		/// 
		/// Allowed characters for client ID are: `[a-zA-Z0-9_-]`
		/// 
		/// If grant types `authorization_code` or `implicit` are used, a
		/// redirect URI **MUST** be provided!
		/// 
		/// Default access token validity: **8 hours**
		/// Default refresh token validity: **30 days**
		/// Default approval validity: **½ year**
		/// CreateOAuthClient v4/system/config/oauth/clients
		/// </summary>
		public async Task CreateOAuthClientAsync(CreateOAuthClientRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/oauth/clients";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove OAuth client
		/// ### Description:
		/// Delete an existing OAuth client.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// OAuth client is removed.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveOAuthClient v4/system/config/oauth/clients/{client_id}
		/// </summary>
		/// <param name="client_id">OAuth client ID</param>
		public async Task RemoveOAuthClientAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/oauth/clients/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request OAuth client
		/// ### Description:
		/// Retrieve the configuration of an OAuth client.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// OAuth client is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestOAuthClient v4/system/config/oauth/clients/{client_id}
		/// </summary>
		/// <param name="client_id">OAuth client ID</param>
		/// <returns>OK</returns>
		public async Task<OAuthClient> RequestOAuthClientAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/oauth/clients/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OAuthClient>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update OAuth client
		/// ### Description:
		/// Update an existing OAuth client.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// OAuth client updated.
		/// 
		/// ### Further Information:
		/// Client secret **MUST** have:
		/// * at least 12 characters, at most 32 characters
		/// * only lower case characters, upper case characters and digits
		/// * at least 1 lower case character, 1 upper case character and 1 digit
		/// 
		/// The client secret is optional and will be generated if it is left empty.
		/// 
		/// Valid grant types are:
		/// * `authorization_code`
		/// * `implicit`
		/// * `password`
		/// * `client_credentials`
		/// * `refresh_token`
		/// 
		/// Grant type `client_credentials` is currently **NOT** permitted!
		/// 
		/// If grant types `authorization_code` or `implicit` are used, a
		/// redirect URI **MUST** be provided!
		/// 
		/// UpdateOAuthClient v4/system/config/oauth/clients/{client_id}
		/// </summary>
		/// <param name="client_id">OAuth client ID</param>
		/// <returns>OK</returns>
		public async Task<OAuthClient> UpdateOAuthClientAsync(string client_id, UpdateOAuthClientRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/oauth/clients/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OAuthClient>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request classification policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.30.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of classification policies:
		/// * `shareClassificationPolicies`
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// List of configured classification policies is returned.
		/// 
		/// ### Further Information:
		/// `classificationRequiresSharePassword`: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. `0` means no password will be enforced.
		/// 
		/// RequestClassificationPoliciesConfig v4/system/config/policies/classifications
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ClassificationPoliciesConfig> RequestClassificationPoliciesConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/classifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClassificationPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change classification policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.30.0</h3>
		/// 
		/// ### Description:
		/// Change current classification policies:
		/// * `shareClassificationPolicies`
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Classification policies are changed.
		/// 
		/// ### Further Information:
		/// `classificationRequiresSharePassword`: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. `0` means no password will be enforced.
		/// 
		/// 
		/// ChangeClassificationPoliciesConfig v4/system/config/policies/classifications
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ClassificationPoliciesConfig> ChangeClassificationPoliciesConfigAsync(UpdateClassificationPoliciesConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/classifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ClassificationPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request guest user policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.40.0</h3>
		/// 
		/// ### Description:
		/// Retrieve guest user policies.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Guest user policies are returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestGuestUsersPoliciesConfig v4/system/config/policies/guest_users
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GuestUsersPoliciesConfig> RequestGuestUsersPoliciesConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/guest_users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestUsersPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change guest user policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.40.0</h3>
		/// 
		/// ### Description:
		/// Change current guest user policies.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Guest user policies are changed.
		/// 
		/// ### Further Information:
		/// None.
		/// ChangeGuestUsersPoliciesConfig v4/system/config/policies/guest_users
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GuestUsersPoliciesConfig> ChangeGuestUsersPoliciesConfigAsync(UpdateGuestUsersPoliciesConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/guest_users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuestUsersPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request MFA policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of multi-factor authentication policies.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// List of configured multi-factor authentication policies is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestMfaPoliciesConfig v4/system/config/policies/mfa
		/// </summary>
		/// <returns>OK</returns>
		public async Task<MfaPoliciesConfig> RequestMfaPoliciesConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/mfa";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MfaPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change MFA policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Change current multi-factor authentication policies.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Multi-factor authentication policies are changed.
		/// 
		/// ### Further Information:
		/// None.
		/// ChangeMfaPoliciesConfig v4/system/config/policies/mfa
		/// </summary>
		/// <returns>OK</returns>
		public async Task<MfaPoliciesConfig> ChangeMfaPoliciesConfigAsync(UpdateMfaPoliciesConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/mfa";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MfaPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request password policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of configured password policies for all password types:
		/// * `login`
		/// * `shares`
		/// * `encryption`
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// List of configured password policies is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Available password policies:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Value | Password Type |
		/// | :--- | :--- | :--- | :--- |
		/// | `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |
		/// | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfArchivedPasswords` | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |
		/// | `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |
		/// | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |
		/// | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |
		/// | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |
		/// | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |
		/// 
		/// </details>
		/// RequestPasswordPoliciesConfig v4/system/config/policies/passwords
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PasswordPoliciesConfig> RequestPasswordPoliciesConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/passwords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PasswordPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change password policies
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>
		/// 
		/// ### Description:
		/// Change current password policies for any password types:
		/// * `login`
		/// * `shares`
		/// * `encryption`
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Password policies get changed.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Available password policies:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Value | Recommended Value | Password Type |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li><li>`all` - combination of `uppercase`, `lowercase`, `numeric` and `special`</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li><li>`all`</li></ul> | <ul><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li></ul>  | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4`<br><br>default:<ul><li>`none` - `0`</li><li>`all` - `4`</li><li>otherwise - amount of distinct values<br>cf. `mustContainCharacters` matrix</li></ul> | `3` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`: `12`</li><li>`shares`: `12`</li><li>`encryption`: `14`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li></ul> |
		/// | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | `true` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfArchivedPasswords` | Number of passwords to archive. | `Integer between 0 and 10`<br>Set `0` to disable password history. | `3` | <ul><li>`login`</li></ul> |
		/// | `passwordExpiration.enabled` | Determines whether password expiration is enabled.<br>Password expiration policy can only be enabled in context with `enforceLoginPasswordChange`. | `true or false` | `false` | <ul><li>`login`</li></ul> |
		/// | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` |  | <ul><li>`login`</li></ul> |
		/// | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | `true` | <ul><li>`login`</li></ul> |
		/// | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | `5` | <ul><li>`login`</li></ul> |
		/// | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | `10` | <ul><li>`login`</li></ul> |
		/// 
		/// </details>
		/// 
		/// ### Deprecated password policies:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Value | Recommended Value | Password Type |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`enforceLoginPasswordChange`</del> | Determines whether a login password change should be enforced for all users.<br>Only takes effect, if login password policies get stricter.<br>Use `POST /system/config/policies/passwords/enforce_change` API to enforce a login password change. | `true or false`<br>default: `false` |  | <ul><li>`login`</li></ul> |
		/// 
		/// </details>
		/// 
		/// ### `mustContainCharacters` matrix:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// |  | `alpha` | `uppercase` | `lowercase` | `numeric` | `special` | `all` | `none` |
		/// | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |
		/// | `alpha` | `alpha` | `uppercase` | `lowercase` | `alpha`<br>`numeric` | `alpha`<br>`special` | `all` | `none` |
		/// | `uppercase` | `uppercase` | `uppercase` | `uppercase`<br>`lowercase` | `uppercase`<br>`numeric` | `uppercase`<br>`special` | `all` | `none` |
		/// | `lowercase` | `lowercase` | `uppercase`<br>`lowercase` | `lowercase` | `lowercase`<br>`numeric` | `lowercase`<br>`special` | `all` | `none` |
		/// | `numeric` | `alpha`<br>`numeric` | `uppercase`<br>`numeric` | `lowercase`<br>`numeric` | `numeric` | `numeric`<br>`special` | `all` | `none` |
		/// | `special` | `alpha`<br>`special` | `uppercase`<br>`special` | `lowercase`<br>`special` | `numeric`<br>`special` | `special` | `all` | `none` |
		/// | `all` | `all` | `all` | `all` | `all` | `all` | `all` | `none` |
		/// | `none` | `none` | `none` |  `none` | `none` | `none` | `none` | `none` |
		/// 
		/// </details>
		/// ChangePasswordPoliciesConfig v4/system/config/policies/passwords
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PasswordPoliciesConfig> ChangePasswordPoliciesConfigAsync(UpdatePasswordPoliciesConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/passwords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PasswordPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enforce login password change for all users
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Enforce login password change for all users.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Login password change is enforced.
		/// Every user has to change their login password at next login.
		/// 
		/// ### Further Information:
		/// None.
		/// EnforceLoginPasswordChange v4/system/config/policies/passwords/enforce_change
		/// </summary>
		/// <returns>OK</returns>
		public async Task EnforceLoginPasswordChangeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/passwords/enforce_change";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request password policies for a certain password type
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.14.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of configured password policies for a certain password type:
		/// * `login`
		/// * `shares`
		/// * `encryption`
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// List of configured password policies is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Available password policies:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Name | Description | Value | Password Type |
		/// | :--- | :--- | :--- | :--- |
		/// | `mustContainCharacters` | Characters which a password must contain:<br><ul><li>`alpha` - at least one alphabetical character (`uppercase` **OR** `lowercase`)<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`uppercase` - at least one uppercase character<pre>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</pre></li><li>`lowercase` - at least one lowercase character<pre>a b c d e f g h i j k l m n o p q r s t u v w x y z</pre></li><li>`numeric` - at least one numeric character<pre>0 1 2 3 4 5 6 7 8 9</pre></li><li>`special` - at least one special character (letters and digits excluded)<pre>! " # $ % ( ) * + , - . / : ; = ? @ [ \ ] ^ _ { &#124; } ~</pre></li><li>`none` - none of the above</li></ul> | <ul><li>`alpha`</li><li>`uppercase`</li><li>`lowercase`</li><li>`numeric`</li><li>`special`</li><li>`none`</li></ul> | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfCharacteristicsToEnforce` | Number of characteristics to enforce.<br>e.g. from `["uppercase", "lowercase", "numeric", "special"]`<br>all 4 character sets can be enforced; but also only 2 of them | `Integer between 0 and 4` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `minLength` | Minimum number of characters a password must contain. | `Integer between 1 and 1024` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectDictionaryWords` | Determines whether a password must **NOT** contain word(s) from a dictionary.<br>In `core-service.properties` a path to directory with dictionary files (`*.txt`) can be defined<br>cf. `policies.passwords.dictionary.directory`.<br><br>If this rule gets enabled `policies.passwords.dictionary.directory` must be defined and contain dictionary files.<br>Otherwise, the rule will not have any effect on password validation process. | `true or false` | <ul><li>`login`</li><li>`shares`</li></ul> |
		/// | `rejectUserInfo` | Determines whether a password must **NOT** contain user info.<br>Affects user's **first name**, **last name**, **email** and **user name**. | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `rejectKeyboardPatterns` | Determines whether a password must **NOT** contain keyboard patterns.<br>e.g. `qwertz`, `asdf` (min. 4 character pattern) | `true or false` | <ul><li>`login`</li><li>`shares`</li><li>`encryption`</li></ul> |
		/// | `numberOfArchivedPasswords` | Number of passwords to archive.<br>Value `0` means that password history is disabled. | `Integer between 0 and 10` | <ul><li>`login`</li></ul> |
		/// | `passwordExpiration.enabled` | Determines whether password expiration is enabled. | `true or false` | <ul><li>`login`</li></ul> |
		/// | `maxPasswordAge` | Maximum allowed password age (in **days**) | `positive Integer` | <ul><li>`login`</li></ul> |
		/// | `userLockout.enabled` | Determines whether user lockout is enabled. | `true or false` | <ul><li>`login`</li></ul> |
		/// | `maxNumberOfLoginFailures` | Maximum allowed number of failed login attempts. | `positive Integer` | <ul><li>`login`</li></ul> |
		/// | `lockoutPeriod` | Amount of **minutes** a user has to wait to make another login attempt<br>after `maxNumberOfLoginFailures` has been exceeded. | `positive Integer` | <ul><li>`login`</li></ul> |
		/// 
		/// </details>
		/// RequestPasswordPoliciesForPasswordType v4/system/config/policies/passwords/{password_type}
		/// </summary>
		/// <param name="password_type">Password type</param>
		/// <returns>OK</returns>
		public async Task<PasswordPoliciesConfig> RequestPasswordPoliciesForPasswordTypeAsync(RequestPasswordPoliciesForPasswordTypePassword_type password_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/policies/passwords/"+password_type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PasswordPoliciesConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request authentication settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON authentication configuration entry point.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Returns a list of configurable authentication methods.
		/// 
		/// ### Further Information:
		/// Authentication methods are sorted by priority attribute.
		/// Smaller values have higher priority.
		/// Authentication method with highest priority is considered as default.
		/// Priority **MUST** be a positive value.
		/// 
		/// ### Configurable authentication settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method | Description |
		/// | :--- | :--- |
		/// | `basic` | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as `sql`. |
		/// | `active_directory` | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
		/// | `radius` | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
		/// | `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
		/// 
		/// </details>
		/// RequestAuthConfig v4/system/config/settings/auth
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AuthConfig> RequestAuthConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/auth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update authentication settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON authentication configuration entry point.
		/// Change configurable authentication settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// One or more authentication methods gets changed.
		/// 
		/// ### Further Information:
		/// Authentication methods are sorted by priority attribute.
		/// Smaller values have higher priority.
		/// Authentication method with highest priority is considered as default.
		/// Priority **MUST** be a positive value.
		/// 
		/// ### Configurable authentication settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method | Description |
		/// | :--- | :--- |
		/// | `basic` | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as `sql`. |
		/// | `active_directory` | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. |
		/// | `radius` | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. |
		/// | `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. |
		/// 
		/// </details>
		/// UpdateAuthConfig v4/system/config/settings/auth
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AuthConfig> UpdateAuthConfigAsync(AuthConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/auth";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuthConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request system defaults
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON system defaults configuration entry point.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Returns a list of configurable system default values.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable default values
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
		/// | `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999` |
		/// | `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999` |
		/// | `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999` |
		/// | `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |
		/// 
		/// </details>
		/// RequestSystemDefaults v4/system/config/settings/defaults
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemDefaults> RequestSystemDefaultsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/defaults";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemDefaults>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update system defaults
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON system defaults configuration entry point.
		/// Change configurable system default values.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// One or more system default values gets changed.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable default values
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` |
		/// | `downloadShareDefaultExpirationPeriod` | Default expiration period for Download Shares in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |
		/// | `uploadShareDefaultExpirationPeriod` | Default expiration period for Upload Shares in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |
		/// | `fileDefaultExpirationPeriod` | Default expiration period for all uploaded files in _days_. | `Integer between 0 and 9999`<br>Set `0` to disable. |
		/// | `nonmemberViewerDefault` | Defines if new users get the role _Non Member Viewer_ by default | `true or false` |
		/// 
		/// </details>
		/// UpdateSystemDefaults v4/system/config/settings/defaults
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemDefaults> UpdateSystemDefaultsAsync(UpdateSystemDefaults requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/defaults";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SystemDefaults>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request eventlog settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON eventlog configuration entry point.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Returns a list of configurable eventlog settings.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable eventlog settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `enabled` | Determines whether eventlog is enabled. | `true or false` |
		/// | `retentionPeriod` | Retention period (in _days_) of eventlog entries.<br>After that period, all entries are deleted. | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted |
		/// | `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |
		/// 
		/// </details>
		/// RequestEventlogConfig v4/system/config/settings/eventlog
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EventlogConfig> RequestEventlogConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/eventlog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventlogConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update eventlog settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON eventlog configuration entry point.
		/// Change configurable eventlog settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// One or more eventlog settings gets changed.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable eventlog settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `enabled` | Determines whether eventlog is enabled. | `true or false` |
		/// | `retentionPeriod` | Retention period (in _days_) of eventlog entries.<br>After that period, all entries are deleted. | `Integer between 0 and 9999`<br>If set to `0`: no logs are deleted<br>Recommended value: 7 |
		/// | `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |
		/// 
		/// </details>
		/// UpdateEventlogConfig v4/system/config/settings/eventlog
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EventlogConfig> UpdateEventlogConfigAsync(UpdateEventlogConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/eventlog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventlogConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request general settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON general settings configuration entry point.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Returns a list of configurable general settings.
		/// 
		/// ### Further Information:
		/// 
		/// ### Auth token restrictions:
		/// 
		/// A restriction is a lower bound for a token timeout and defines a duration after which a token is invalidated when it wasn't used.
		/// The access/refresh token validity duration of the client is the upper bound. A token is invalidated - in any case - when it has passed.
		/// 
		/// Auth token restrictions are enabled by default.
		/// 
		/// * Default access token validity: **2 hours**
		/// * Default refresh token validity: **30 days**
		/// 
		/// ### Configurable general settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
		/// | `cryptoEnabled` | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
		/// | `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |
		/// | `eulaEnabled` | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |
		/// | `useS3Storage` | Defines if S3 is used as storage backend.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
		/// | `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |
		/// | `authTokenRestrictions` | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated configurable general settings:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting                           | Description | Value |
		/// |:----------------------------------| :--- | :--- |
		/// | <del>`mediaServerEnabled`</del>   | Determines whether media server is enabled.<br>Returns boolean value dependent on conjunction of `mediaServerConfigEnabled` AND `mediaServerEnabled` | `true or false` |
		/// | <del>`weakPasswordEnabled`</del>  | Determines whether weak password is allowed.<br>Use `GET /system/config/policies/passwords` API to get configured password policies. | `true or false` |
		/// | <del>`hideLoginInputFields`</del> | Determines whether input fields for login should be enabled | `true or false` |
		/// 
		/// </details>
		/// RequestGeneralSettings v4/system/config/settings/general
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GeneralSettings> RequestGeneralSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/general";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GeneralSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update general settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON general settings configuration entry point.
		/// Change configurable general settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// One or more general settings gets changed.
		/// 
		/// ### Further Information:
		/// Auth token restrictions are enabled by default.
		/// 
		/// * Default access token validity: **2 hours**
		/// * Default refresh token validity: **30 days**
		/// 
		/// ### Configurable general settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `sharePasswordSmsEnabled` | Determines whether sending of share passwords via SMS is allowed. | `true or false` |
		/// | `cryptoEnabled` | Determines whether client-side encryption is enabled.<br>Can only be enabled once; disabling is **NOT** possible. | `true or false` |
		/// | `emailNotificationButtonEnabled` | Determines whether email notification button is enabled. | `true or false` |
		/// | `eulaEnabled` | Determines whether EULA is enabled.<br>Each user has to confirm the EULA at first login. | `true or false` |
		/// | `s3TagsEnabled` | Determines whether S3 tags are enabled | `true or false` |
		/// | `authTokenRestrictions` | Determines auth token restrictions. (e.g. restricted access token validity) | `object` |
		/// 
		/// </details>
		/// 
		/// ### Deprecated configurable general settings:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting                           | Description | Value |
		/// |:----------------------------------| :--- | :--- |
		/// | <del>`mediaServerEnabled`</del>   | Determines whether media server is enabled.<br>**CANNOT** be enabled if media server configuration is disabled in `core-service.properties`.<br>Check `mediaServerConfigEnabled` with `GET /system/config/settings/infrastructure`. | `true or false` |
		/// | <del>`weakPasswordEnabled`</del>  | Determines whether weak password is allowed.<br>Use `PUT /system/config/policies/passwords` API to change configured password policies. | `true or false` |
		/// | <del>`hideLoginInputFields`</del> | Determines whether input fields for login should be enabled | `true or false` |
		/// 
		/// </details>
		/// UpdateGeneralSettings v4/system/config/settings/general
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GeneralSettings> UpdateGeneralSettingsAsync(UpdateGeneralSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/general";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GeneralSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request infrastructure properties
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON infrastructure properties entry point.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Returns a list of read-only infrastructure properties.
		/// 
		/// ### Further Information:
		/// Source: `core-service.properties`
		/// 
		/// ### Read-only infrastructure properties:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `smsConfigEnabled` | Determines whether sending of share passwords via SMS is **system-wide** enabled. | `true or false` |
		/// | `mediaServerConfigEnabled` | Determines whether media server is **system-wide** enabled. | `true or false` |
		/// | `s3DefaultRegion` | Suggested S3 region | `Region name` |
		/// | `s3EnforceDirectUpload` | Enforce direct upload to S3 | `true or false` |
		/// | `dracoonCloud` | Determines if the **DRACOON Core** is deployed in the cloud environment | `true or false` |
		/// | `tenantUuid` | Current tenant UUID | `UUID` |
		/// 
		/// </details>
		/// RequestInfrastructureProperties v4/system/config/settings/infrastructure
		/// </summary>
		/// <returns>OK</returns>
		public async Task<InfrastructureProperties> RequestInfrastructurePropertiesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/infrastructure";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InfrastructureProperties>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request syslog settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON syslog configuration entry point.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// Returns a list of configurable syslog settings.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable syslog settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `enabled` | Determines whether syslog is enabled. | `true or false` |
		/// | `host` | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |
		/// | `port` | Syslog server port | `Valid port number` |
		/// | `protocol` | Protocol to connect to syslog server | `TCP or UDP` |
		/// | `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |
		/// 
		/// </details>
		/// RequestSyslogConfig v4/system/config/settings/syslog
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SyslogConfig> RequestSyslogConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/syslog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SyslogConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update syslog settings
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.6.0</h3>
		/// 
		/// ### Description:
		/// DRACOON syslog configuration entry point.
		/// Change configurable syslog settings.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// One or more syslog settings gets changed.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Configurable syslog settings:
		/// <details open style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Setting | Description | Value |
		/// | :--- | :--- | :--- |
		/// | `enabled` | Set `true` to enable syslog. | `true or false` |
		/// | `host` | Syslog server (IP or FQDN) | `DNS name or IPv4 of a syslog server` |
		/// | `port` | Syslog server port | `Valid port number` |
		/// | `protocol` | Protocol to connect to syslog server | `TCP or UDP` |
		/// | `logIpEnabled` | Determines whether user’s IP address is logged. | `true or false` |
		/// 
		/// </details>
		/// UpdateSyslogConfig v4/system/config/settings/syslog
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SyslogConfig> UpdateSyslogConfigAsync(UpdateSyslogConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/settings/syslog";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SyslogConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request S3 storage configuration
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>
		/// 
		/// ### Description:
		/// Retrieve S3 configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// S3 configuration is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Virtual hosted style access
		/// 
		/// Example: https://<span style="color:red;">bucket-name</span>.s3.<span style="color:red;">region</span>.amazonaws.com/<span style="color:red;">key-name</span>
		/// 
		/// Request3Config v4/system/config/storage/s3
		/// </summary>
		/// <returns>OK</returns>
		public async Task<S3Config> Request3ConfigAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/storage/s3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3Config>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create S3 storage configuration
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>
		/// 
		/// ### Description:
		/// Create new S3 configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// New S3 configuration is created.
		/// 
		/// ### Further Information:
		/// Forbidden characters in bucket names: [`.`]
		/// `bucketName` and `endpointUrl` are deprecated, use `bucketUrl` instead.
		/// 
		/// ### Virtual hosted style access
		/// 
		/// Example: https://<span style="color:red;">bucket-name</span>.s3.<span style="color:red;">region</span>.amazonaws.com/<span style="color:red;">key-name</span>
		/// 
		/// CreateS3Config v4/system/config/storage/s3
		/// </summary>
		public async Task CreateS3ConfigAsync(S3ConfigCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/storage/s3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update S3 storage configuration
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>
		/// 
		/// ### Description:
		/// Update existing S3 configuration.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// S3 configuration is updated.
		/// 
		/// ### Further Information:
		/// Forbidden characters in bucket names: [`.`]
		/// `bucketName` and `endpointUrl` are deprecated, use `bucketUrl` instead.
		/// 
		/// ### Virtual hosted style access
		/// 
		/// Example: https://<span style="color:red;">bucket-name</span>.s3.<span style="color:red;">region</span>.amazonaws.com/<span style="color:red;">key-name</span>
		/// 
		/// UpdateS3Config v4/system/config/storage/s3
		/// </summary>
		/// <returns>OK</returns>
		public async Task<S3Config> UpdateS3ConfigAsync(S3ConfigUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/storage/s3";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3Config>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of configured S3 tags
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Retrieve all configured S3 tags.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// S3 tags are returned.
		/// 
		/// ### Further Information:
		/// An empty list is returned if no S3 tags are found / configured.
		/// RequestS3TagList v4/system/config/storage/s3/tags
		/// </summary>
		/// <returns>OK</returns>
		public async Task<S3TagList> RequestS3TagListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/storage/s3/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3TagList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create S3 tag
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Create new S3 tag.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// New S3 tag is created.
		/// 
		/// ### Further Information:
		/// * Maximum key length: **128** characters.
		/// * Maximum value length: **256** characters.
		/// * Both S3 tag key and value are **case-sensitive** strings.
		/// * Maximum of **20 mandatory S3 tags** is allowed.
		/// CreateS3Tag v4/system/config/storage/s3/tags
		/// </summary>
		public async Task CreateS3TagAsync(S3TagCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/storage/s3/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove S3 tag
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Delete S3 tag.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// S3 tag gets deleted.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveS3Tag v4/system/config/storage/s3/tags/{id}
		/// </summary>
		/// <param name="id">S3 tag ID</param>
		public async Task RemoveS3TagAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/storage/s3/tags/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request S3 tag
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>
		/// 
		/// ### Description:
		/// Retrieve single S3 tag.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and
		/// role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.
		/// 
		/// ### Postcondition:
		/// S3 tag is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestS3Tag v4/system/config/storage/s3/tags/{id}
		/// </summary>
		/// <param name="id">S3 tag ID</param>
		/// <returns>OK</returns>
		public async Task<S3Tag> RequestS3TagAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/system/config/storage/s3/tags/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<S3Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel file upload
		/// ### Description:
		/// Cancel file upload.
		/// 
		/// ### Precondition:
		/// Valid upload token.
		/// 
		/// ### Postcondition:
		/// Upload canceled, token invalidated and all already transfered chunks removed.
		/// 
		/// ### Further Information:
		/// It is recommended to notify the API about cancelled uploads if possible.
		/// CancelFileUploadByToken v4/uploads/{token}
		/// </summary>
		/// <param name="token">Upload token</param>
		public async Task CancelFileUploadByTokenAsync(string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/uploads/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete file upload
		/// ### Description:
		/// Finish uploading a file.
		/// 
		/// ### Precondition:
		/// Valid upload token.
		/// 
		/// ### Postcondition:
		/// File created.
		/// 
		/// ### Further Information:
		/// The provided file name might be changed in accordance with the resolution strategy:
		/// 
		/// * **autorename**: changes the file name and adds a number to avoid conflicts.
		/// * **overwrite**: deletes any old file with the same file name.
		/// * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.
		/// 
		/// Please ensure that all chunks have been transferred correctly before finishing the upload.
		/// 
		/// Download share id (if exists) gets changed if:
		/// - node with the same name exists in the target container
		/// - `resolutionStrategy` is `overwrite`
		/// - `keepShareLinks` is `true`
		/// CompleteFileUploadByToken v4/uploads/{token}
		/// </summary>
		/// <param name="token">Upload token</param>
		public async Task CompleteFileUploadByTokenAsync(string token, CompleteUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/uploads/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user account information
		/// ### Description:
		/// Retrieves all information regarding the current user's account.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// User information is returned.
		/// 
		/// ### Further Information:
		/// Setting the query parameter `more_info` to `true`, causes the API to return more details e.g. the user's groups.
		/// 
		/// `customer` (`CustomerData`) attribute in `UserAccount` response model is deprecated. Please use response from `GET /user/account/customer` instead.
		/// RequestUserInfo v4/user/account
		/// </summary>
		/// <param name="more_info">Get more info for this user
		///
		///e.g. list of user groups</param>
		/// <returns>OK</returns>
		public async Task<UserAccount> RequestUserInfoAsync(bool more_info, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account?more_info="+more_info;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update user account
		/// ### Description:
		/// Update current user's account.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// User's account is updated.
		/// 
		/// ### Further Information:
		/// * All input fields are limited to **150** characters.
		/// * **All** characters are allowed.
		/// 
		/// `customer` (`CustomerData`) attribute in `UserAccount` response model is deprecated. Please use response from `GET /user/account/customer` instead.
		/// UpdateUserAccount v4/user/account
		/// </summary>
		/// <returns>OK</returns>
		public async Task<UserAccount> UpdateUserAccountAsync(UpdateUserAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserAccount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset avatar
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
		/// 
		/// ### Description:
		/// Reset (custom) avatar to default avatar.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// * User's avatar gets deleted.
		/// * Default avatar is set.
		/// 
		/// ### Further Information:
		/// None.
		/// ResetAvatar v4/user/account/avatar
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Avatar> ResetAvatarAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/avatar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Avatar>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request avatar
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>
		/// 
		/// ### Description:
		/// Get the avatar.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Avatar is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestAvatar v4/user/account/avatar
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Avatar> RequestAvatarAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/avatar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Avatar>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request customer information for user
		/// ### Description:
		/// Use this API to get:
		/// * customer name
		/// * used / free space
		/// * used / available
		/// * user account info
		/// 
		/// of the according customer.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Customer information is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestCustomerInfo v4/user/account/customer
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CustomerData> RequestCustomerInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/customer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomerData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate client-side encryption for customer
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>
		/// 
		/// ### Use `POST /settings/keypair` API
		/// 
		/// ### Description:
		/// Activate client-side encryption for according customer.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.
		/// 
		/// ### Postcondition:
		/// Client-side encryption is enabled.
		/// 
		/// ### Further Information:
		/// Sets the ability for this customer to encrypt rooms.
		/// Once enabled on customer level, it **CANNOT** be unset.
		/// On activation, a customer rescue key pair **MUST** be set.
		/// EnableCustomerEncryption v4/user/account/customer
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CustomerData> EnableCustomerEncryptionAsync(EnableCustomerEncryptionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/customer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomerData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request customer's key pair
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>
		/// 
		/// ### Use `GET /settings/keypair` API
		/// 
		/// ### Description:
		/// Retrieve the customer rescue key pair.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Key pair is returned.
		/// 
		/// ### Further Information:
		/// The private key is password-based encrypted with `AES256` / `PBKDF2`.
		/// RequestCustomerKeyPair v4/user/account/customer/keypair
		/// </summary>
		/// <returns>OK</returns>
		public async Task<UserKeyPairContainer> RequestCustomerKeyPairAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/customer/keypair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserKeyPairContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove user's key pair
		/// ### Description:
		/// Delete user key pair.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Key pair is deleted.
		/// 
		/// ### Further Information:
		/// If parameter `version` is not set and two key versions exist, this API deletes version A.
		/// If two keys with the same version are set, this API deletes the older one.
		/// 
		/// This will also remove all file keys that were encrypted with the user public key.
		/// If the user had exclusive access to some files, those are removed as well since decrypting them became impossible.
		/// RemoveUserKeyPair v4/user/account/keypair
		/// </summary>
		/// <param name="version">Version (NEW)</param>
		public async Task RemoveUserKeyPairAsync(string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/keypair?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user's key pair
		/// ### Description:
		/// Retrieve the user key pair.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Key pair is returned.
		/// 
		/// ### Further Information:
		/// The private key is password-based encrypted with `AES256` / `PBKDF2`.
		/// RequestUserKeyPair v4/user/account/keypair
		/// </summary>
		/// <param name="version">Version (NEW)</param>
		/// <returns>OK</returns>
		public async Task<UserKeyPairContainer> RequestUserKeyPairAsync(string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/keypair?version=" + (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserKeyPairContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set user's key pair
		/// ### Description:
		/// Set the user key pair.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Key pair is set.
		/// 
		/// ### Further Information:
		/// Overwriting an existing key pair is **NOT** possible.
		/// Please delete the existing key pair first.
		/// The private key is password-based encrypted with `AES256` / `PBKDF2`.
		/// SetUserKeyPair v4/user/account/keypair
		/// </summary>
		public async Task SetUserKeyPairAsync(UserKeyPairContainer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/keypair";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request all user key pairs
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Retrieve all user key pairs to allow re-encrypting file keys without need for a second distributor.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of key pairs is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestUserKeyPairs v4/user/account/keypairs
		/// </summary>
		/// <returns>OK</returns>
		public async Task<UserKeyPairContainer[]> RequestUserKeyPairsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/keypairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserKeyPairContainer[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create key pair and preserve copy of old private key
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Create user key pair and preserve copy of old private key.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Key pair is created.
		/// Copy of old private key is preserved.
		/// 
		/// ### Further Information:
		/// You can submit your old private key, encrypted with your current password.
		/// This allows migrating file keys encrypted with your old key pair to the new one.
		/// CreateAndPreserveUserKeyPair v4/user/account/keypairs
		/// </summary>
		public async Task CreateAndPreserveUserKeyPairAsync(CreateKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/keypairs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Using emergency-code
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Using emergency code for login
		/// 
		/// ### Precondition:
		/// User has MFA enabled and is already logged in with account/pw (aka pre-Auth-Role)
		/// 
		/// ### Postcondition:
		/// All MFA-setups for the user are deleted.
		/// 
		/// ### Further Information:
		/// 
		/// 
		/// 
		/// UseEmergencyCode v4/user/account/mfa
		/// </summary>
		/// <returns>OK</returns>
		public async Task UseEmergencyCodeAsync(string emergency_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/mfa?emergency_code=" + (emergency_code==null? "" : System.Uri.EscapeDataString(emergency_code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request information about the user's mfa status
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Request information about the user's mfa status
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// None.
		/// 
		/// ### Further Information:
		/// None.
		/// GetMfaStatusForUser v4/user/account/mfa
		/// </summary>
		/// <returns>OK</returns>
		public async Task<UserMfaStatusResponse> GetMfaStatusForUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/mfa";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserMfaStatusResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request information to setup TOTP as second authentication factor
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Get setup information for multi-factor authentication (TOTP).
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// None.
		/// 
		/// ### Further Information:
		/// None.
		/// GetTotpSetupInformation v4/user/account/mfa/totp
		/// </summary>
		public async Task GetTotpSetupInformationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/mfa/totp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Confirm second factor TOTP setup with a generated OTP
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Confirm second factor TOTP setup with a generated OTP.
		/// 
		/// ### Precondition:
		/// Authenticated user
		/// 
		/// ### Postcondition:
		/// Second factor TOTP is enabled.
		/// 
		/// ### Further Information:
		/// None.
		/// ConfirmTotpSetup v4/user/account/mfa/totp
		/// </summary>
		public async Task ConfirmTotpSetupAsync(MfaTotpConfirmationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/mfa/totp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a MFA TOTP setup with generated OTP
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Delete multi-factor authentication TOTP setup with a valid OTP code.
		/// 
		/// ### Precondition:
		/// Authenticated user
		/// Multi-factor authentication is **NOT** enforced
		/// 
		/// ### Postcondition:
		/// Second factor TOTP is disabled.
		/// 
		/// ### Further Information:
		/// None.
		/// DeleteMfaTotpSetup v4/user/account/mfa/totp/{id}
		/// </summary>
		public async Task DeleteMfaTotpSetupAsync(long id, string valid_otp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/mfa/totp/"+id+"?valid_otp=" + (valid_otp==null? "" : System.Uri.EscapeDataString(valid_otp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change user's password
		/// ### Description:
		/// Change the user's password.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// User's password is changed.
		/// 
		/// ### Further Information:
		/// The password **MUST** comply to configured password policies.
		/// 
		/// Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// ChangeUserPassword v4/user/account/password
		/// </summary>
		public async Task ChangeUserPasswordAsync(ChangeUserPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/account/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invalidate authentication token
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.12.0</h3>
		/// 
		/// ### Description:
		/// Log out a user.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// * User is logged out
		/// * Authentication token gets invalidated.
		/// 
		/// ### Further Information:
		/// None.
		/// Logout v4/user/logout
		/// </summary>
		/// <param name="everywhere">Invalidate all tokens</param>
		public async Task LogoutAsync(bool everywhere, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/logout?everywhere="+everywhere;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of notification configurations
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of notification configurations for current user.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of available notification configurations is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestListOfNotificationConfigs v4/user/notifications/config
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NotificationConfigList> RequestListOfNotificationConfigsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/notifications/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationConfigList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update notification configuration
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Update notification configuration for current user.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// Notification configuration is updated.
		/// 
		/// ### Further Information:
		/// Leave `channelIds` empty to disable notifications.
		/// UpdateNotificationConfig v4/user/notifications/config/{id}
		/// </summary>
		/// <param name="id">Unique identifier for a notification configuration</param>
		/// <returns>OK</returns>
		public async Task<NotificationConfig> UpdateNotificationConfigAsync(long id, NotificationConfigChangeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/notifications/config/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotificationConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of OAuth client approvals
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.22.0</h3>
		/// 
		/// ### Functional Description:
		/// Retrieve information about all OAuth client approvals.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// None.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `clientName:desc`
		/// Sort by `clientName` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `clientName` | Client name |
		/// 
		/// </details>
		/// RequestOAuthApprovals v4/user/oauth/approvals
		/// </summary>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<OAuthApproval[]> RequestOAuthApprovalsAsync(string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/oauth/approvals?sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OAuthApproval[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove OAuth client approval
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.22.0</h3>
		/// 
		/// ### Functional Description:
		/// Delete an OAuth client approval.
		/// 
		/// ### Precondition:
		/// Authenticated user and valid client ID
		/// 
		/// ### Postcondition:
		/// OAuth Client approval is revoked.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveOAuthApproval v4/user/oauth/approvals/{client_id}
		/// </summary>
		/// <param name="client_id">OAuth client ID</param>
		public async Task RemoveOAuthApprovalAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/oauth/approvals/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request list of OAuth client authorizations
		/// ### Description:
		/// Retrieve information about all OAuth client authorizations.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of OAuth client authorizations is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isStandard:eq:true`
		/// Get standard OAuth clients.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `isStandard` | Standard client filter | `eq` |  | `true or false` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `clientName:desc`
		/// Sort by `clientName` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `clientName` | Client name |
		/// 
		/// </details>
		/// RequestOAuthAuthorizations v4/user/oauth/authorizations
		/// </summary>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<OAuthAuthorization[]> RequestOAuthAuthorizationsAsync(string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/oauth/authorizations?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OAuthAuthorization[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove all OAuth authorizations of a client
		/// ### Description:
		/// Delete all authorizations of a client.
		/// 
		/// ### Precondition:
		/// Authenticated user and valid client ID
		/// 
		/// ### Postcondition:
		/// All authorizations for the client are revoked.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveOAuthAuthorizations v4/user/oauth/authorizations/{client_id}
		/// </summary>
		/// <param name="client_id">OAuth client ID</param>
		public async Task RemoveOAuthAuthorizationsAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/oauth/authorizations/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a OAuth authorization
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.12.0</h3>
		/// 
		/// ### Description:
		/// Delete an authorization.
		/// 
		/// ### Precondition:
		/// Authenticated user and valid client ID, authorization ID
		/// 
		/// ### Postcondition:
		/// Authorization is revoked.
		/// 
		/// ### Further Information:
		/// None.
		/// RemoveOAuthAuthorization v4/user/oauth/authorizations/{client_id}/{authorization_id}
		/// </summary>
		/// <param name="client_id">OAuth client ID</param>
		/// <param name="authorization_id">OAuth authorization ID</param>
		public async Task RemoveOAuthAuthorizationAsync(string client_id, long authorization_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/oauth/authorizations/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"/"+authorization_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// (authenticated) Ping
		/// ### Description:
		/// Test connection to DRACOON Server (while authenticated).
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// `200 OK` with principal information is returned if successful.
		/// 
		/// ### Further Information:
		/// None.
		/// PingUser v4/user/ping
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> PingUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user profile attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of user profile attributes.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// List of attributes is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `key:cn:searchString_1|value:cn:searchString_2`
		/// Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `key` | User profile attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |
		/// | `value` | User profile attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `key:asc|value:desc`
		/// Sort by `key` ascending **AND** by `value` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `key` | User profile attribute key |
		/// | `value` | User profile attribute value |
		/// 
		/// </details>
		/// RequestProfileAttributes v4/user/profileAttributes
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<AttributesResponse> RequestProfileAttributesAsync(int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/profileAttributes?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttributesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set user profile attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.12.0</h3>
		/// 
		/// ### Description:
		/// Set custom user profile attributes.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Custom user profile attributes are set.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// All existing user profile attributes will be deleted.
		/// 
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**
		/// * Maximum key length is **255**
		/// * Maximum value length is **4096**
		/// SetProfileAttributes v4/user/profileAttributes
		/// </summary>
		public async Task SetProfileAttributesAsync(ProfileAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/profileAttributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or edit user profile attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>
		/// 
		/// ### Description:
		/// Add or edit custom user profile attributes.
		/// <br/><br/><span style="font-weight: bold; color: red;"> &#128679; **Warning: Please note that the response with HTTP status code 200 (OK) is deprecated and will be replaced with HTTP status code 204 (No content)!**</span><br/>
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Custom user profile attributes are added or edited.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// If an entry existed before, it will be overwritten.
		/// Range submodel is never returned.
		/// 
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**
		/// * Maximum key length is **255**
		/// * Maximum value length is **4096**
		/// UpdateProfileAttributes v4/user/profileAttributes
		/// </summary>
		/// <returns>OK **(DEPRECATED: WILL BE REPLACED BY 204: "No content")**</returns>
		public async Task<ProfileAttributes> UpdateProfileAttributesAsync(ProfileAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/profileAttributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProfileAttributes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove user profile attribute
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>
		/// 
		/// ### Description:
		/// Delete custom user profile attribute.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// Custom user profile attribute is deleted.
		/// 
		/// ### Further Information:
		/// Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// RemoveProfileAttribute v4/user/profileAttributes/{key}
		/// </summary>
		/// <param name="key">Key</param>
		public async Task RemoveProfileAttributeAsync(string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/profileAttributes/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Download Share subscriptions
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of subscribed Download Shares for current user.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of subscribed Download Shares is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Filtering
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `authParentId:eq:#`
		/// Get download shares where `authParentId` equals `#`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | **`downloadShareId`** | Download Share ID filter | `eq` | Download Share ID equals value. | `long value` |
		/// | **`authParentId`** | Auth parent ID filter | `eq` | Auth parent ID equals value. | `long value` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `downloadShareId:desc|authParentId:asc`
		/// Sort by `downloadShareId` descending **AND** `authParentId` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | **`downloadShareId`** | Download Share ID |
		/// | **`authParentId`** | Auth parent ID |
		/// 
		/// </details>
		/// ListDownloadShareSubscriptions v4/user/subscriptions/download_shares
		/// </summary>
		/// <param name="filter">Filter string</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="offset">Range offset</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<SubscribedDownloadShareList> ListDownloadShareSubscriptionsAsync(string filter, int limit, int offset, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/download_shares?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&limit="+limit+"&offset="+offset+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscribedDownloadShareList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe or Unsubscribe a List of Download Shares for notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>
		/// 
		/// ### Description:
		/// Subscribe/Unsubscribe download shares for notifications.
		/// 
		/// ### Precondition:
		/// User with _"manage download share"_ permissions on target node.
		/// 
		/// 
		/// 
		/// ### Postcondition:
		/// Download shares are subscribed or unsubscribed.
		/// Notifications for these download shares will be triggered in the future.
		/// 
		/// ### Further Information:
		/// Maximum number of subscriptions is 200.
		/// SubscribeDownloadShares v4/user/subscriptions/download_shares
		/// </summary>
		public async Task SubscribeDownloadSharesAsync(UpdateSubscriptionsBulkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/download_shares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe Download Share from notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Unsubscribe Download Share from notifications.
		/// 
		/// ### Precondition:
		/// User with _"manage download share"_ permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share is unsubscribed.
		/// Notifications for this Download Share are disabled.
		/// 
		/// ### Further Information:
		/// None.
		/// UnsubscribeDownloadShare v4/user/subscriptions/download_shares/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task UnsubscribeDownloadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/download_shares/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe Download Share for notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Subscribe Download Share for notifications.
		/// 
		/// ### Precondition:
		/// User with _"manage download share"_ permissions on target node.
		/// 
		/// ### Postcondition:
		/// Download Share is subscribed.
		/// Notifications for this Download Share will be triggered in the future.
		/// 
		/// ### Further Information:
		/// None.
		/// SubscribeDownloadShare v4/user/subscriptions/download_shares/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task SubscribeDownloadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/download_shares/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List node subscriptions
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of subscribed nodes for current user.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of subscribed nodes is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `authParentId:eq:#`
		/// Get nodes where `authParentId` equals `#`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | **`nodeId`** | Node ID filter | `eq` | Node ID equals value. | `long value` |
		/// | **`authParentId`** | Auth parent ID filter | `eq` | Auth parent ID equals value. | `long value` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `nodeId:desc|authParentId:asc`
		/// Sort by `nodeId` descending **AND** `authParentId` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | **`nodeId`** | Node ID |
		/// | **`authParentId`** | Auth parent ID |
		/// 
		/// </details>
		/// ListNodeSubscriptions v4/user/subscriptions/nodes
		/// </summary>
		/// <param name="filter">Filter string</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="offset">Range offset</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<SubscribedNodeList> ListNodeSubscriptionsAsync(string filter, int limit, int offset, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/nodes?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&limit="+limit+"&offset="+offset+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscribedNodeList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe or Unsubscribe a List of nodes for notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>
		/// 
		/// ### Description:
		/// Subscribe/Unsubscribe nodes for notifications.
		/// 
		/// ### Precondition:
		/// User has _"read"_ permissions in auth parent room.
		/// 
		/// ### Postcondition:
		/// Nodes are subscribed or unsubscribed.
		/// Notifications for these nodes will be triggered in the future.
		/// 
		/// ### Further Information:
		/// Maximum number of subscriptions is 200.
		/// UpdateNodeSubscriptions v4/user/subscriptions/nodes
		/// </summary>
		public async Task UpdateNodeSubscriptionsAsync(UpdateSubscriptionsBulkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/nodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe node from notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Unsubscribe node from notifications.
		/// 
		/// ### Precondition:
		/// User has _"read"_ permissions in auth parent room.
		/// 
		/// ### Postcondition:
		/// Node is unsubscribed.
		/// Notifications for this node are disabled.
		/// 
		/// ### Further Information:
		/// None.
		/// UnsubscribeNode v4/user/subscriptions/nodes/{node_id}
		/// </summary>
		/// <param name="node_id">Node ID</param>
		public async Task UnsubscribeNodeAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/nodes/"+node_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe node for notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
		/// 
		/// ### Description:
		/// Subscribe node for notifications.
		/// 
		/// ### Precondition:
		/// User has _"read"_ permissions in auth parent room.
		/// 
		/// ### Postcondition:
		/// Node is subscribed.
		/// Notifications for this node will be triggered in the future.
		/// 
		/// ### Further Information:
		/// None.
		/// SubscribeNode v4/user/subscriptions/nodes/{node_id}
		/// </summary>
		/// <param name="node_id">Node ID</param>
		public async Task SubscribeNodeAsync(long node_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/nodes/"+node_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Upload Share subscriptions
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of subscribed Upload Shares for current user.
		/// 
		/// ### Precondition:
		/// Authenticated user.
		/// 
		/// ### Postcondition:
		/// List of subscribed Upload Shares is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Filtering
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `targetNodeId:eq:#`
		/// Get upload shares where `targetNodeId` equals `#`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | **`uploadShareId`** | Upload Share ID filter | `eq` | Upload Share ID equals value. | `long value` |
		/// | **`targetNodeId`** | Target node ID filter | `eq` | Target node ID equals value. | `long value` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort criteria are possible.
		/// Fields are connected via logical conjunction **AND**.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `uploadShareId:desc|targetNodeId:asc`
		/// Sort by `uploadShareId` descending **AND** `targetNodeId` ascending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | **`uploadShareId`** | Upload Share ID |
		/// | **`targetNodeId`** | Target node ID |
		/// 
		/// </details>
		/// ListUploadShareSubscriptions v4/user/subscriptions/upload_shares
		/// </summary>
		/// <param name="filter">Filter string</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="offset">Range offset</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<SubscribedUploadShareList> ListUploadShareSubscriptionsAsync(string filter, int limit, int offset, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/upload_shares?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&limit="+limit+"&offset="+offset+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubscribedUploadShareList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe or Unsubscribe a List of Upload Shares for notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>
		/// 
		/// ### Description:
		/// Subscribe/Unsubscribe upload shares for notifications.
		/// 
		/// ### Precondition:
		/// User with _"manage upload share"_ permissions on target node.
		/// 
		/// 
		/// 
		/// ### Postcondition:
		/// Upload shares are subscribed or unsubscribed.
		/// Notifications for these upload shares will be triggered in the future.
		/// 
		/// ### Further Information:
		/// Maximum number of subscriptions is 200.
		/// SubscribeUploadShares v4/user/subscriptions/upload_shares
		/// </summary>
		public async Task SubscribeUploadSharesAsync(UpdateSubscriptionsBulkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/upload_shares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unsubscribe Upload Share from notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Unsubscribe Upload Share from notifications.
		/// 
		/// ### Precondition:
		/// User with _"manage upload share"_ permissions on target node.
		/// 
		/// ### Postcondition:
		/// Upload Share is unsubscribed.
		/// Notifications for this Upload Share are disabled.
		/// 
		/// ### Further Information:
		/// None.
		/// UnsubscribeUploadShare v4/user/subscriptions/upload_shares/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task UnsubscribeUploadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/upload_shares/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe Upload Share for notifications
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>
		/// 
		/// ### Description:
		/// Subscribe Upload Share for notifications.
		/// 
		/// ### Precondition:
		/// User with _"manage upload share"_ permissions on target node.
		/// 
		/// ### Postcondition:
		/// Upload Share is subscribed.
		/// Notifications for this Upload Share will be triggered in the future.
		/// 
		/// ### Further Information:
		/// None.
		/// SubscribeUploadShare v4/user/subscriptions/upload_shares/{share_id}
		/// </summary>
		/// <param name="share_id">Share ID</param>
		public async Task SubscribeUploadShareAsync(long share_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/user/subscriptions/upload_shares/"+share_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request users
		/// ### Description:
		/// Returns a list of DRACOON users.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.
		/// 
		/// ### Postcondition:
		/// List of users is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Except for `login`, `firstName` and  `lastName` - these are connected via logical disjunction (**OR**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`
		/// Filter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR`  | Operator Description | `VALUE`                                                                                                                                                                                                                                                                                                                                                                                              |
		/// | :--- | :--- |:------------| :--- |:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
		/// | `email` | Email filter | `eq`, `cn`  | Email contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |
		/// | `userName` | User name filter | `eq`, `cn`  | UserName contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |
		/// | `firstName` | User first name filter | `cn`        | User first name contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |
		/// | `lastName` | User last name filter | `cn`        | User last name contains value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |
		/// | `isLocked` | User lock status filter | `eq`        |  | `true or false`                                                                                                                                                                                                                                                                                                                                                                                      |
		/// | `effectiveRoles` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq`        |  | `true or false`<br>default: `false`                                                                                                                                                                                                                                                                                                                                                                  |
		/// | `createdAt` | Creation date filter | `ge, le`    | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)`                                                                                                                                                                                                                                                                                                                                                                                  |
		/// | `phone` | Phone filter | `eq`        | Phone equals value. | `search String`                                                                                                                                                                                                                                                                                                                                                                                      |
		/// | `isEncryptionEnabled` | Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq`        |  | `true or false`                                                                                                                                                                                                                                                                                                                                                                                      |
		/// | `hasRole` | User role filter<br>Depends on **effectiveRoles**.<br>For more Roles information please call `GET /roles API` | `eq`, `neq` | User role  equals value. | <ul><li>`CONFIG_MANAGER` - Manage global configs</li><li>`USER_MANAGER` - Manage Users</li><li>`GROUP_MANAGER` - Manage User-Groups</li><li>`ROOM_MANAGER` - Manage top level Data Rooms</li><li>`LOG_AUDITOR` - Read logs</li><li>`NONMEMBER_VIEWER` - View users and groups when having room manage permission</li><li>`USER` - Regular User role</li><li>`GUEST_USER` - Guest User role</li></ul> |
		/// 
		/// </details>
		/// 
		/// ### Deprecated filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | <del>`lockStatus`</del> | User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> |
		/// | <del>`login`</del> | User login filter | `cn` | User login contains value. | `search String` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `firstName:asc|lastLoginSuccessAt:desc`
		/// Sort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `userName` | User name |
		/// | `email` | User email |
		/// | `firstName` | User first name |
		/// | `lastName` | User last name |
		/// | `isLocked` | User lock status |
		/// | `lastLoginSuccessAt` | Last successful login date |
		/// | `expireAt` | Expiration date |
		/// | `createdAt` | Creation date |
		/// 
		/// </details>
		/// 
		/// ### Deprecated sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | <del>`gender`</del> | Gender |
		/// | <del>`lockStatus`</del> | User lock status |
		/// | <del>`login`</del> | User login |
		/// 
		/// </details>
		/// RequestUsers v4/users
		/// </summary>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <param name="include_attributes">Include custom user attributes.</param>
		/// <param name="include_roles">Include roles</param>
		/// <param name="include_manageable_rooms">Include hasManageableRooms (deprecated)</param>
		/// <returns>OK</returns>
		public async Task<UserList> RequestUsersAsync(int offset, int limit, string filter, string sort, bool include_attributes, bool include_roles, bool include_manageable_rooms, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&include_attributes="+include_attributes+"&include_roles="+include_roles+"&include_manageable_rooms="+include_manageable_rooms;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new user
		/// ### Description:
		/// Create a new user.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.
		/// 
		/// ### Postcondition:
		/// New user is created.
		/// 
		/// ### Further Information:
		/// * If a user should **NOT** expire, leave `expireAt` empty.
		/// * All input fields are limited to **150** characters
		/// * Forbidden characters in first or last name: [`<`, `>`]
		/// * Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
		/// 
		/// ### Authentication Method Options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method | Option Key | Option Value |
		/// | :--- | :--- | :--- |
		/// | `basic` / `sql` | `username` | Unique user identifier |
		/// | `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |
		/// |  | `username` | Active Directory username according to authentication setting `userFilter` |
		/// | `radius` | `username` | RADIUS username |
		/// | `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |
		/// |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |
		/// 
		/// </details>
		/// CreateUser v4/users
		/// </summary>
		public async Task CreateUserAsync(CreateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove user
		/// ### Description:
		/// Delete a user.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete users</span> required.
		/// 
		/// ### Postcondition:
		/// User is deleted.
		/// 
		/// ### Further Information:
		/// User **CANNOT** be deleted if he is a last room administrator of any room.
		/// RemoveUser v4/users/{user_id}
		/// </summary>
		/// <param name="user_id">User ID</param>
		public async Task RemoveUserAsync(long user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user
		/// ### Description:
		/// Retrieve detailed information about a single user.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.
		/// 
		/// ### Postcondition:
		/// User information is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// 
		/// ### Authentication Method Options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method | Option Key | Option Value |
		/// | :--- | :--- | :--- |
		/// | `basic` / `sql` | `username` | Unique user identifier |
		/// | `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |
		/// |  | `username` | Active Directory username according to authentication setting `userFilter` |
		/// | `radius` | `username` | RADIUS username |
		/// | `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |
		/// |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |
		/// 
		/// </details>
		/// RequestUser v4/users/{user_id}
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <param name="effective_roles">Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles.
		///
		///* `false`: DIRECT roles
		///
		///* `true`: DIRECT **AND** EFFECTIVE roles
		///
		///DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.
		///
		///EFFECTIVE means: e.g. user gets role through **group membership**.</param>
		/// <returns>OK</returns>
		public async Task<UserData> RequestUserAsync(long user_id, bool effective_roles, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"?effective_roles="+effective_roles;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update user's metadata
		/// ### Description:
		/// Update user's metadata.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.
		/// 
		/// ### Postcondition:
		/// User's metadata is updated.
		/// 
		/// ### Further Information:
		/// * If a user should **NOT** expire, leave `expireAt` empty.
		/// * All input fields are limited to **150** characters
		/// * **All** characters are allowed.
		/// 
		/// ### Authentication Method Options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | Authentication Method | Option Key | Option Value |
		/// | :--- | :--- | :--- |
		/// | `basic` / `sql` | `username` | Unique user identifier |
		/// | `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID |
		/// |  | `username` | Active Directory username according to authentication setting `userFilter` |
		/// | `radius` | `username` | RADIUS username |
		/// | `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID |
		/// |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |
		/// 
		/// </details>
		/// UpdateUser v4/users/{user_id}
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <returns>OK</returns>
		public async Task<UserData> UpdateUserAsync(long user_id, UpdateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request groups that user is a member of or / and can become a member
		/// ### Description:
		/// Retrieves a list of groups a user is member of and / or can become a member.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.
		/// 
		/// ### Postcondition:
		/// List of groups is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isMember:eq:false|name:cn:searchString`
		/// Get all groups that the user is **NOT** member of **AND** whose name is like `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `name` | Group name filter | `cn` | Group name contains value. | `search String` |
		/// | `isMember` | Filter the groups which the user is (not) member of | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// 
		/// </details>
		/// RequestUserGroups v4/users/{user_id}/groups
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <returns>OK</returns>
		public async Task<UserGroupList> RequestUserGroupsAsync(long user_id, int offset, int limit, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/groups?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserGroupList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request rooms where the user is last admin
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of all rooms where the user is last admin (except homeroom and its subordinary rooms).
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.
		/// 
		/// ### Postcondition:
		/// List of rooms is returned.
		/// 
		/// ### Further Information:
		/// An empty list is returned if no rooms were found where the user is last admin.
		/// RequestLastAdminRoomsUsers v4/users/{user_id}/last_admin_rooms
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <returns>OK</returns>
		public async Task<LastAdminUserRoomList> RequestLastAdminRoomsUsersAsync(long user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/last_admin_rooms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LastAdminUserRoomList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request emergency MFA code
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>
		/// 
		/// ### Description:
		/// Request emergency MFA code for a specific user.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.
		/// 
		/// ### Postcondition:
		/// Emergency MFA code is returned.
		/// 
		/// ### Further Information:
		/// Emergency code can be used instead of standard MFA authentication to disable all MFA setups.
		/// RequestEmergencyMfaCode v4/users/{user_id}/mfa/emergency_code
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EmergencyMfaCodeResponse> RequestEmergencyMfaCodeAsync(long user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/mfa/emergency_code";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmergencyMfaCodeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request user's granted roles
		/// ### Description:
		/// Retrieve a list of all roles granted to a user.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.
		/// 
		/// ### Postcondition:
		/// List of granted roles is returned.
		/// 
		/// ### Further Information:
		/// None.
		/// RequestUserRoles v4/users/{user_id}/roles
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <returns>OK</returns>
		public async Task<RoleList> RequestUserRolesAsync(long user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoleList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request rooms granted to the user or / and rooms that can be granted
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.10.0</h3>
		/// 
		/// ### Description:
		/// Retrieves a list of rooms granted to the user and / or that can be granted.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read users</span> required.
		/// 
		/// ### Postcondition:
		/// List of rooms is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `isGranted:eq:true|isLastAdmin:eq:true|name:cn:searchString`
		/// Get all rooms that the user is granted **AND** is last admin **AND** whose name is like `searchString`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `name` | Room name filter | `cn` | Room name contains value. | `search String` |
		/// | `isGranted` | Filter the rooms which the user is (not) granted. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |
		/// | `isLastAdmin` | Filter the rooms which the user is last room administrator.<br>Only in connection with `isGranted:eq:true` filter possible. | `eq` |  | `true` |
		/// | `effectivePerm` | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li><li>`any`: DIRECT **AND** EFFECTIVE **AND** OVER GROUP permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**.<br>OVER GROUP means: e.g. user gets `read` permissions on desired room through **group membership**. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `false` |
		/// 
		/// </details>
		/// RequestUsersRooms v4/users/{user_id}/rooms
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <returns>OK</returns>
		public async Task<RoomTreeDataList> RequestUsersRoomsAsync(long user_id, int offset, int limit, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/rooms?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RoomTreeDataList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request custom user attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.12.0</h3>
		/// 
		/// ### Description:
		/// Retrieve a list of user attributes.
		/// 
		/// ### Precondition:
		/// None.
		/// 
		/// ### Postcondition:
		/// List of attributes is returned.
		/// 
		/// ### Further Information:
		/// 
		/// ### Filtering:
		/// All filter fields are connected via logical conjunction (**AND**)
		/// Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `key:cn:searchString_1|value:cn:searchString_2`
		/// Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.
		/// 
		/// </details>
		/// 
		/// ### Filtering options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` |
		/// | :--- | :--- | :--- | :--- | :--- |
		/// | `key` | User attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` |
		/// | `value` | User attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |
		/// 
		/// </details>
		/// 
		/// ---
		/// 
		/// ### Sorting:
		/// Sort string syntax: `FIELD_NAME:ORDER`
		/// `ORDER` can be `asc` or `desc`.
		/// Multiple sort fields are supported.
		/// 
		/// <details style="padding-left: 10px">
		/// <summary style="cursor: pointer; outline: none"><strong>Example</strong></summary>
		/// 
		/// `key:asc|value:desc`
		/// Sort by `key` ascending **AND** by `value` descending.
		/// 
		/// </details>
		/// 
		/// ### Sorting options:
		/// <details style="padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;">
		/// <summary style="cursor: pointer; outline: none"><strong>Expand</strong></summary>
		/// 
		/// | `FIELD_NAME` | Description |
		/// | :--- | :--- |
		/// | `key` | User attribute key |
		/// | `value` | User attribute value |
		/// 
		/// </details>
		/// RequestUserAttributes v4/users/{user_id}/userAttributes
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <param name="offset">Range offset</param>
		/// <param name="limit">Range limit.
		///
		///Maximum 500.
		///
		/// For more results please use paging (`offset` + `limit`).</param>
		/// <param name="filter">Filter string</param>
		/// <param name="sort">Sort string</param>
		/// <returns>OK</returns>
		public async Task<AttributesResponse> RequestUserAttributesAsync(long user_id, int offset, int limit, string filter, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/userAttributes?offset="+offset+"&limit="+limit+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AttributesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set custom user attributes
		/// <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.28.0</h3>
		/// 
		/// ### Description:
		/// Set custom user attributes.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.
		/// 
		/// ### Postcondition:
		/// Custom user attributes are set.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// All existing user attributes will be deleted.
		/// 
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**.
		/// SetUserAttributes v4/users/{user_id}/userAttributes
		/// </summary>
		/// <param name="user_id">User ID</param>
		public async Task SetUserAttributesAsync(long user_id, UserAttributes requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/userAttributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or edit custom user attributes
		/// ### Description:
		/// Add or edit custom user attributes.
		/// <br/><br/><span style="font-weight: bold; color: red;"> &#128679; **Warning: Please note that the response with HTTP status code 200 (OK) is deprecated and will be replaced with HTTP status code 204 (No content)!**</span><br/>
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.
		/// 
		/// ### Postcondition:
		/// Custom user attributes gets added or edited.
		/// 
		/// ### Further Information:
		/// Batch function.
		/// If an entry exists before, it will be overwritten.
		/// 
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**.
		/// UpdateUserAttributes v4/users/{user_id}/userAttributes
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <returns>OK **(DEPRECATED: WILL BE REPLACED BY 204: "No content")**</returns>
		public async Task<UserData> UpdateUserAttributesAsync(long user_id, UserAttributes requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/userAttributes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove custom user attribute
		/// ### Description:
		/// Delete custom user attribute.
		/// 
		/// ### Precondition:
		/// Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change users</span> required.
		/// 
		/// ### Postcondition:
		/// Custom user attribute is deleted.
		/// 
		/// ### Further Information:
		/// * Allowed characters for keys are: `[a-zA-Z0-9_-]`
		/// * Characters are **case-insensitive**.
		/// RemoveUserAttribute v4/users/{user_id}/userAttributes/{key}
		/// </summary>
		/// <param name="user_id">User ID</param>
		/// <param name="key">Key</param>
		/// <returns>No Content</returns>
		public async Task RemoveUserAttributeAsync(long user_id, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/users/"+user_id+"/userAttributes/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum RequestAuditNodeUserDataX_Sds_Date_Format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFSET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPOCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEET = 4,
	}
	
	public enum RequestLogEventsAsJsonStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
	}
	
	public enum RequestMissingFileKeysUse_key
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		room_rescue_key = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system_rescue_key = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		previous_user_key = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		previous_room_rescue_key = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		previous_system_rescue_key = 4,
	}
	
	public enum RequestPasswordPoliciesForPasswordTypePassword_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		login = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		encryption = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shares = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
