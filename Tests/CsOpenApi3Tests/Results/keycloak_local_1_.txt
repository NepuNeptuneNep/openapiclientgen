//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="acr")]
		public string Acr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressClaimSet Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowed-origins")]
		public string[] Allowed_origins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="at_hash")]
		public string At_hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auth_time")]
		public System.Nullable<System.Int64> Auth_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		public AccessToken_Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azp")]
		public string Azp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="birthdate")]
		public string Birthdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="c_hash")]
		public string C_hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<AccessTokenCategory> Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claims_locales")]
		public string Claims_locales { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cnf")]
		public AccessToken_CertConf Cnf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_verified")]
		public System.Nullable<System.Boolean> Email_verified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exp")]
		public System.Nullable<System.Int64> Exp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iat")]
		public System.Nullable<System.Int64> Iat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iss")]
		public string Iss { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jti")]
		public string Jti { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middle_name")]
		public string Middle_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nbf")]
		public System.Nullable<System.Int64> Nbf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otherClaims")]
		public string OtherClaims { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number_verified")]
		public System.Nullable<System.Boolean> Phone_number_verified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferred_username")]
		public string Preferred_username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realm_access")]
		public AccessToken_Access Realm_access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s_hash")]
		public string S_hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session_state")]
		public string Session_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trusted-certs")]
		public string[] Trusted_certs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typ")]
		public string Typ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zoneinfo")]
		public string Zoneinfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressClaimSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_address")]
		public string Street_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessToken_Authorization
	{
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Permission[] Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Permission
	{
		
		[System.Runtime.Serialization.DataMember(Name="claims")]
		public string Claims { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rsid")]
		public string Rsid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rsname")]
		public string Rsname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessTokenCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL")]
		INTERNAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS")]
		ACCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ID")]
		ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADMIN")]
		ADMIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="USERINFO")]
		USERINFO = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessToken_CertConf
	{
		
		[System.Runtime.Serialization.DataMember(Name="x5t#S256")]
		public string X5t_S256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessToken_Access
	{
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verify_caller")]
		public System.Nullable<System.Boolean> Verify_caller { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdminEventRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="authDetails")]
		public AuthDetailsRepresentation AuthDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public string OperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmId")]
		public string RealmId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="representation")]
		public string Representation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourcePath")]
		public string ResourcePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthDetailsRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmId")]
		public string RealmId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationExecutionExportRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="authenticator")]
		public string Authenticator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticatorConfig")]
		public string AuthenticatorConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticatorFlow")]
		public System.Nullable<System.Boolean> AuthenticatorFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autheticatorFlow")]
		public System.Nullable<System.Boolean> AutheticatorFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowAlias")]
		public string FlowAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requirement")]
		public string Requirement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userSetupAllowed")]
		public System.Nullable<System.Boolean> UserSetupAllowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationExecutionInfoRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationConfig")]
		public string AuthenticationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationFlow")]
		public System.Nullable<System.Boolean> AuthenticationFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurable")]
		public System.Nullable<System.Boolean> Configurable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowId")]
		public string FlowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requirement")]
		public string Requirement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requirementChoices")]
		public string[] RequirementChoices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationExecutionRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="authenticator")]
		public string Authenticator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticatorConfig")]
		public string AuthenticatorConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticatorFlow")]
		public System.Nullable<System.Boolean> AuthenticatorFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autheticatorFlow")]
		public System.Nullable<System.Boolean> AutheticatorFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flowId")]
		public string FlowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentFlow")]
		public string ParentFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requirement")]
		public string Requirement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticationFlowRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationExecutions")]
		public AuthenticationExecutionExportRepresentation[] AuthenticationExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="builtIn")]
		public System.Nullable<System.Boolean> BuiltIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topLevel")]
		public System.Nullable<System.Boolean> TopLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticatorConfigInfoRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="helpText")]
		public string HelpText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConfigPropertyRepresentation[] Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigPropertyRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="helpText")]
		public string HelpText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public string[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public System.Nullable<System.Boolean> Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthenticatorConfigRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kid")]
		public string Kid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientInitialAccessCreatePresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.Nullable<System.Int32> Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientInitialAccessPresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public System.Nullable<System.Int32> Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingCount")]
		public System.Nullable<System.Int32> RemainingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientMappingsRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mappings")]
		public RoleRepresentation[] Mappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRole")]
		public System.Nullable<System.Boolean> ClientRole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="composite")]
		public System.Nullable<System.Boolean> Composite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="composites")]
		public RoleRepresentation_Composites Composites { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleRepresentation_Composites
	{
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realm")]
		public string[] Realm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminUrl")]
		public string AdminUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alwaysDisplayInConsole")]
		public System.Nullable<System.Boolean> AlwaysDisplayInConsole { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationFlowBindingOverrides")]
		public string AuthenticationFlowBindingOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizationServicesEnabled")]
		public System.Nullable<System.Boolean> AuthorizationServicesEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorizationSettings")]
		public ResourceServerRepresentation AuthorizationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bearerOnly")]
		public System.Nullable<System.Boolean> BearerOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientAuthenticatorType")]
		public string ClientAuthenticatorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consentRequired")]
		public System.Nullable<System.Boolean> ConsentRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultClientScopes")]
		public string[] DefaultClientScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultRoles")]
		public string[] DefaultRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directAccessGrantsEnabled")]
		public System.Nullable<System.Boolean> DirectAccessGrantsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frontchannelLogout")]
		public System.Nullable<System.Boolean> FrontchannelLogout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullScopeAllowed")]
		public System.Nullable<System.Boolean> FullScopeAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="implicitFlowEnabled")]
		public System.Nullable<System.Boolean> ImplicitFlowEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeReRegistrationTimeout")]
		public System.Nullable<System.Int32> NodeReRegistrationTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.Nullable<System.Int32> NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optionalClientScopes")]
		public string[] OptionalClientScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolMappers")]
		public ProtocolMapperRepresentation[] ProtocolMappers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicClient")]
		public System.Nullable<System.Boolean> PublicClient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectUris")]
		public string[] RedirectUris { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredNodes")]
		public string RegisteredNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationAccessToken")]
		public string RegistrationAccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootUrl")]
		public string RootUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceAccountsEnabled")]
		public System.Nullable<System.Boolean> ServiceAccountsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="standardFlowEnabled")]
		public System.Nullable<System.Boolean> StandardFlowEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="surrogateAuthRequired")]
		public System.Nullable<System.Boolean> SurrogateAuthRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webOrigins")]
		public string[] WebOrigins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceServerRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowRemoteResourceManagement")]
		public System.Nullable<System.Boolean> AllowRemoteResourceManagement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decisionStrategy")]
		public System.Nullable<ResourceServerRepresentationDecisionStrategy> DecisionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public PolicyRepresentation[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyEnforcementMode")]
		public System.Nullable<ResourceServerRepresentationPolicyEnforcementMode> PolicyEnforcementMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceRepresentation[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public ScopeRepresentation[] Scopes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceServerRepresentationDecisionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFFIRMATIVE")]
		AFFIRMATIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNANIMOUS")]
		UNANIMOUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONSENSUS")]
		CONSENSUS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decisionStrategy")]
		public ResourceServerRepresentationDecisionStrategy DecisionStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logic")]
		public System.Nullable<PolicyRepresentationLogic> Logic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public string[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourcesData")]
		public ResourceRepresentation[] ResourcesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopesData")]
		public ScopeRepresentation[] ScopesData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PolicyRepresentationLogic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSITIVE")]
		POSITIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEGATIVE")]
		NEGATIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon_uri")]
		public string Icon_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerManagedAccess")]
		public System.Nullable<System.Boolean> OwnerManagedAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public ScopeRepresentation[] Scopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public string[] Uris { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopeRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconUri")]
		public string IconUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public PolicyRepresentation[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public ResourceRepresentation[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceServerRepresentationPolicyEnforcementMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENFORCING")]
		ENFORCING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERMISSIVE")]
		PERMISSIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProtocolMapperRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolMapper")]
		public string ProtocolMapper { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientScopeEvaluateResource_ProtocolMapperEvaluationRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="containerId")]
		public string ContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerName")]
		public string ContainerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerType")]
		public string ContainerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapperId")]
		public string MapperId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapperName")]
		public string MapperName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolMapper")]
		public string ProtocolMapper { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientScopeRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolMappers")]
		public ProtocolMapperRepresentation[] ProtocolMappers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentExportRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public MultivaluedHashMap Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subComponents")]
		public MultivaluedHashMap SubComponents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public string SubType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultivaluedHashMap
	{
		
		[System.Runtime.Serialization.DataMember(Name="empty")]
		public System.Nullable<System.Boolean> Empty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadFactor")]
		public System.Nullable<System.Single> LoadFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="threshold")]
		public System.Nullable<System.Int32> Threshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public MultivaluedHashMap Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerType")]
		public string ProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public string SubType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentTypeRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="helpText")]
		public string HelpText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ConfigPropertyRepresentation[] Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CredentialRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.Int64> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialData")]
		public string CredentialData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretData")]
		public string SecretData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="temporary")]
		public System.Nullable<System.Boolean> Temporary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userLabel")]
		public string UserLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmId")]
		public string RealmId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FederatedIdentityRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="identityProvider")]
		public string IdentityProvider { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalRequestResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="failedRequests")]
		public string[] FailedRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successRequests")]
		public string[] SuccessRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRoles")]
		public string ClientRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmRoles")]
		public string[] RealmRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subGroups")]
		public GroupRepresentation[] SubGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityProviderMapperRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderAlias")]
		public string IdentityProviderAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderMapper")]
		public string IdentityProviderMapper { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdentityProviderRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="addReadTokenRoleOnCreate")]
		public System.Nullable<System.Boolean> AddReadTokenRoleOnCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstBrokerLoginFlowAlias")]
		public string FirstBrokerLoginFlowAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internalId")]
		public string InternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkOnly")]
		public System.Nullable<System.Boolean> LinkOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postBrokerLoginFlowAlias")]
		public string PostBrokerLoginFlowAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storeToken")]
		public System.Nullable<System.Boolean> StoreToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trustEmail")]
		public System.Nullable<System.Boolean> TrustEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyStoreConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyAlias")]
		public string KeyAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPassword")]
		public string KeyPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmAlias")]
		public string RealmAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmCertificate")]
		public System.Nullable<System.Boolean> RealmCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storePassword")]
		public string StorePassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeysMetadataRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public string Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public KeysMetadataRepresentation_KeyMetadataRepresentation[] Keys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeysMetadataRepresentation_KeyMetadataRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kid")]
		public string Kid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerPriority")]
		public System.Nullable<System.Int64> ProviderPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagementPermissionReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopePermissions")]
		public string ScopePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MappingsRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientMappings")]
		public string ClientMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmMappings")]
		public RoleRepresentation[] RealmMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemoryInfoRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="free")]
		public System.Nullable<System.Int64> Free { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeFormated")]
		public string FreeFormated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freePercentage")]
		public System.Nullable<System.Int64> FreePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int64> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalFormated")]
		public string TotalFormated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="used")]
		public System.Nullable<System.Int64> Used { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usedFormated")]
		public string UsedFormated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PartialImportRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public ClientRepresentation[] Clients { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public GroupRepresentation[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviders")]
		public IdentityProviderRepresentation[] IdentityProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ifResourceExists")]
		public string IfResourceExists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public System.Nullable<PartialImportRepresentationPolicy> Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public RolesRepresentation Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserRepresentation[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PartialImportRepresentationPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SKIP")]
		SKIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OVERWRITE")]
		OVERWRITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAIL")]
		FAIL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RolesRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realm")]
		public RoleRepresentation[] Realm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="access")]
		public string Access { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientConsents")]
		public UserConsentRepresentation[] ClientConsents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRoles")]
		public string ClientRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdTimestamp")]
		public System.Nullable<System.Int64> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public CredentialRepresentation[] Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableableCredentialTypes")]
		public string[] DisableableCredentialTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailVerified")]
		public System.Nullable<System.Boolean> EmailVerified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federatedIdentities")]
		public FederatedIdentityRepresentation[] FederatedIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationLink")]
		public string FederationLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.Nullable<System.Int32> NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realmRoles")]
		public string[] RealmRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requiredActions")]
		public string[] RequiredActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceAccountClientId")]
		public string ServiceAccountClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserConsentRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.Int64> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grantedClientScopes")]
		public string[] GrantedClientScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedDate")]
		public System.Nullable<System.Int64> LastUpdatedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordPolicyTypeRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="configType")]
		public string ConfigType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multipleSupported")]
		public System.Nullable<System.Boolean> MultipleSupported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileInfoRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="disabledFeatures")]
		public string[] DisabledFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentalFeatures")]
		public string[] ExperimentalFeatures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previewFeatures")]
		public string[] PreviewFeatures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProviderRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="operationalInfo")]
		public string OperationalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RealmEventsConfigRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="adminEventsDetailsEnabled")]
		public System.Nullable<System.Boolean> AdminEventsDetailsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminEventsEnabled")]
		public System.Nullable<System.Boolean> AdminEventsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabledEventTypes")]
		public string[] EnabledEventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventsEnabled")]
		public System.Nullable<System.Boolean> EventsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventsExpiration")]
		public System.Nullable<System.Int64> EventsExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventsListeners")]
		public string[] EventsListeners { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RealmRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessCodeLifespan")]
		public System.Nullable<System.Int32> AccessCodeLifespan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessCodeLifespanLogin")]
		public System.Nullable<System.Int32> AccessCodeLifespanLogin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessCodeLifespanUserAction")]
		public System.Nullable<System.Int32> AccessCodeLifespanUserAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessTokenLifespan")]
		public System.Nullable<System.Int32> AccessTokenLifespan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessTokenLifespanForImplicitFlow")]
		public System.Nullable<System.Int32> AccessTokenLifespanForImplicitFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountTheme")]
		public string AccountTheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionTokenGeneratedByAdminLifespan")]
		public System.Nullable<System.Int32> ActionTokenGeneratedByAdminLifespan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionTokenGeneratedByUserLifespan")]
		public System.Nullable<System.Int32> ActionTokenGeneratedByUserLifespan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminEventsDetailsEnabled")]
		public System.Nullable<System.Boolean> AdminEventsDetailsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminEventsEnabled")]
		public System.Nullable<System.Boolean> AdminEventsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminTheme")]
		public string AdminTheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticationFlows")]
		public AuthenticationFlowRepresentation[] AuthenticationFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authenticatorConfig")]
		public AuthenticatorConfigRepresentation[] AuthenticatorConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserFlow")]
		public string BrowserFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="browserSecurityHeaders")]
		public string BrowserSecurityHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bruteForceProtected")]
		public System.Nullable<System.Boolean> BruteForceProtected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientAuthenticationFlow")]
		public string ClientAuthenticationFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientScopeMappings")]
		public string ClientScopeMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientScopes")]
		public ClientScopeRepresentation[] ClientScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientSessionIdleTimeout")]
		public System.Nullable<System.Int32> ClientSessionIdleTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientSessionMaxLifespan")]
		public System.Nullable<System.Int32> ClientSessionMaxLifespan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public ClientRepresentation[] Clients { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="components")]
		public MultivaluedHashMap Components { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultDefaultClientScopes")]
		public string[] DefaultDefaultClientScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultGroups")]
		public string[] DefaultGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLocale")]
		public string DefaultLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultOptionalClientScopes")]
		public string[] DefaultOptionalClientScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultRoles")]
		public string[] DefaultRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultSignatureAlgorithm")]
		public string DefaultSignatureAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="directGrantFlow")]
		public string DirectGrantFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayNameHtml")]
		public string DisplayNameHtml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dockerAuthenticationFlow")]
		public string DockerAuthenticationFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duplicateEmailsAllowed")]
		public System.Nullable<System.Boolean> DuplicateEmailsAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editUsernameAllowed")]
		public System.Nullable<System.Boolean> EditUsernameAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailTheme")]
		public string EmailTheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabledEventTypes")]
		public string[] EnabledEventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventsEnabled")]
		public System.Nullable<System.Boolean> EventsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventsExpiration")]
		public System.Nullable<System.Int64> EventsExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventsListeners")]
		public string[] EventsListeners { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureFactor")]
		public System.Nullable<System.Int32> FailureFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federatedUsers")]
		public UserRepresentation[] FederatedUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public GroupRepresentation[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviderMappers")]
		public IdentityProviderMapperRepresentation[] IdentityProviderMappers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviders")]
		public IdentityProviderRepresentation[] IdentityProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internationalizationEnabled")]
		public System.Nullable<System.Boolean> InternationalizationEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keycloakVersion")]
		public string KeycloakVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loginTheme")]
		public string LoginTheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loginWithEmailAllowed")]
		public System.Nullable<System.Boolean> LoginWithEmailAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDeltaTimeSeconds")]
		public System.Nullable<System.Int32> MaxDeltaTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxFailureWaitSeconds")]
		public System.Nullable<System.Int32> MaxFailureWaitSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumQuickLoginWaitSeconds")]
		public System.Nullable<System.Int32> MinimumQuickLoginWaitSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notBefore")]
		public System.Nullable<System.Int32> NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offlineSessionIdleTimeout")]
		public System.Nullable<System.Int32> OfflineSessionIdleTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offlineSessionMaxLifespan")]
		public System.Nullable<System.Int32> OfflineSessionMaxLifespan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offlineSessionMaxLifespanEnabled")]
		public System.Nullable<System.Boolean> OfflineSessionMaxLifespanEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otpPolicyAlgorithm")]
		public string OtpPolicyAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otpPolicyDigits")]
		public System.Nullable<System.Int32> OtpPolicyDigits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otpPolicyInitialCounter")]
		public System.Nullable<System.Int32> OtpPolicyInitialCounter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otpPolicyLookAheadWindow")]
		public System.Nullable<System.Int32> OtpPolicyLookAheadWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otpPolicyPeriod")]
		public System.Nullable<System.Int32> OtpPolicyPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otpPolicyType")]
		public string OtpPolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="otpSupportedApplications")]
		public string[] OtpSupportedApplications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passwordPolicy")]
		public string PasswordPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permanentLockout")]
		public System.Nullable<System.Boolean> PermanentLockout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolMappers")]
		public ProtocolMapperRepresentation[] ProtocolMappers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quickLoginCheckMilliSeconds")]
		public System.Nullable<System.Int64> QuickLoginCheckMilliSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realm")]
		public string Realm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshTokenMaxReuse")]
		public System.Nullable<System.Int32> RefreshTokenMaxReuse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationAllowed")]
		public System.Nullable<System.Boolean> RegistrationAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationEmailAsUsername")]
		public System.Nullable<System.Boolean> RegistrationEmailAsUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationFlow")]
		public string RegistrationFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rememberMe")]
		public System.Nullable<System.Boolean> RememberMe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requiredActions")]
		public RequiredActionProviderRepresentation[] RequiredActions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resetCredentialsFlow")]
		public string ResetCredentialsFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resetPasswordAllowed")]
		public System.Nullable<System.Boolean> ResetPasswordAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revokeRefreshToken")]
		public System.Nullable<System.Boolean> RevokeRefreshToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public RolesRepresentation Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopeMappings")]
		public ScopeMappingRepresentation[] ScopeMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smtpServer")]
		public string SmtpServer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sslRequired")]
		public string SslRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssoSessionIdleTimeout")]
		public System.Nullable<System.Int32> SsoSessionIdleTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssoSessionIdleTimeoutRememberMe")]
		public System.Nullable<System.Int32> SsoSessionIdleTimeoutRememberMe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssoSessionMaxLifespan")]
		public System.Nullable<System.Int32> SsoSessionMaxLifespan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ssoSessionMaxLifespanRememberMe")]
		public System.Nullable<System.Int32> SsoSessionMaxLifespanRememberMe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportedLocales")]
		public string[] SupportedLocales { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userFederationMappers")]
		public UserFederationMapperRepresentation[] UserFederationMappers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userFederationProviders")]
		public UserFederationProviderRepresentation[] UserFederationProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userManagedAccessAllowed")]
		public System.Nullable<System.Boolean> UserManagedAccessAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserRepresentation[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verifyEmail")]
		public System.Nullable<System.Boolean> VerifyEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="waitIncrementSeconds")]
		public System.Nullable<System.Int32> WaitIncrementSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyAcceptableAaguids")]
		public string[] WebAuthnPolicyAcceptableAaguids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyAttestationConveyancePreference")]
		public string WebAuthnPolicyAttestationConveyancePreference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyAuthenticatorAttachment")]
		public string WebAuthnPolicyAuthenticatorAttachment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyAvoidSameAuthenticatorRegister")]
		public System.Nullable<System.Boolean> WebAuthnPolicyAvoidSameAuthenticatorRegister { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyCreateTimeout")]
		public System.Nullable<System.Int32> WebAuthnPolicyCreateTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessAcceptableAaguids")]
		public string[] WebAuthnPolicyPasswordlessAcceptableAaguids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessAttestationConveyancePreference")]
		public string WebAuthnPolicyPasswordlessAttestationConveyancePreference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessAuthenticatorAttachment")]
		public string WebAuthnPolicyPasswordlessAuthenticatorAttachment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister")]
		public System.Nullable<System.Boolean> WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessCreateTimeout")]
		public System.Nullable<System.Int32> WebAuthnPolicyPasswordlessCreateTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessRequireResidentKey")]
		public string WebAuthnPolicyPasswordlessRequireResidentKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessRpEntityName")]
		public string WebAuthnPolicyPasswordlessRpEntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessRpId")]
		public string WebAuthnPolicyPasswordlessRpId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessSignatureAlgorithms")]
		public string[] WebAuthnPolicyPasswordlessSignatureAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyPasswordlessUserVerificationRequirement")]
		public string WebAuthnPolicyPasswordlessUserVerificationRequirement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyRequireResidentKey")]
		public string WebAuthnPolicyRequireResidentKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyRpEntityName")]
		public string WebAuthnPolicyRpEntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyRpId")]
		public string WebAuthnPolicyRpId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicySignatureAlgorithms")]
		public string[] WebAuthnPolicySignatureAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webAuthnPolicyUserVerificationRequirement")]
		public string WebAuthnPolicyUserVerificationRequirement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequiredActionProviderRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultAction")]
		public System.Nullable<System.Boolean> DefaultAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScopeMappingRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientScope")]
		public string ClientScope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserFederationMapperRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationMapperType")]
		public string FederationMapperType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="federationProviderDisplayName")]
		public string FederationProviderDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserFederationProviderRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="changedSyncPeriod")]
		public System.Nullable<System.Int32> ChangedSyncPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullSyncPeriod")]
		public System.Nullable<System.Int32> FullSyncPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSync")]
		public System.Nullable<System.Int32> LastSync { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerName")]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerInfoRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="builtinProtocolMappers")]
		public string BuiltinProtocolMappers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientImporters")]
		public string[] ClientImporters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientInstallations")]
		public string ClientInstallations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentTypes")]
		public string ComponentTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enums")]
		public string Enums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identityProviders")]
		public string[] IdentityProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memoryInfo")]
		public MemoryInfoRepresentation MemoryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passwordPolicies")]
		public PasswordPolicyTypeRepresentation[] PasswordPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileInfo")]
		public ProfileInfoRepresentation ProfileInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocolMapperTypes")]
		public string ProtocolMapperTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providers")]
		public string Providers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socialProviders")]
		public string[] SocialProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemInfo")]
		public SystemInfoRepresentation SystemInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themes")]
		public string Themes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemInfoRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileEncoding")]
		public string FileEncoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="javaHome")]
		public string JavaHome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="javaRuntime")]
		public string JavaRuntime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="javaVendor")]
		public string JavaVendor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="javaVersion")]
		public string JavaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="javaVm")]
		public string JavaVm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="javaVmVersion")]
		public string JavaVmVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osArchitecture")]
		public string OsArchitecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osName")]
		public string OsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverTime")]
		public string ServerTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uptime")]
		public string Uptime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uptimeMillis")]
		public System.Nullable<System.Int64> UptimeMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userDir")]
		public string UserDir { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userLocale")]
		public string UserLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userName")]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userTimezone")]
		public string UserTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpiInfoRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="internal")]
		public System.Nullable<System.Boolean> Internal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providers")]
		public string Providers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SynchronizationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="added")]
		public System.Nullable<System.Int32> Added { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Int32> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignored")]
		public System.Nullable<System.Boolean> Ignored { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removed")]
		public System.Nullable<System.Int32> Removed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.Int32> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestLdapConnectionRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindCredential")]
		public string BindCredential { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindDn")]
		public string BindDn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="componentId")]
		public string ComponentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectionTimeout")]
		public string ConnectionTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectionUrl")]
		public string ConnectionUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTls")]
		public string StartTls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useTruststoreSpi")]
		public string UseTruststoreSpi { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserSessionRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="clients")]
		public string Clients { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAccess")]
		public System.Nullable<System.Int64> LastAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get themes, social providers, auth providers, and event listeners available on this server
		/// Get 
		/// </summary>
		public async Task GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Import a realm   Imports a realm from a full representation of that realm.
		/// Post 
		/// </summary>
		/// <param name="requestBody">JSON representation of the realm</param>
		public async Task PostAsync(RealmRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328
		/// _idNameGet {id}/name
		/// </summary>
		public async Task _idNameGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{id}/name";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the realm
		/// _realmDelete {realm}
		/// </summary>
		public async Task _realmDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the top-level representation of the realm   It will not include nested information like User and Client representations.
		/// _realmGet {realm}
		/// </summary>
		public async Task _realmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
		/// _realmPut {realm}
		/// </summary>
		public async Task _realmPutAsync(RealmRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete all admin events
		/// _realmAdmin_eventsDelete {realm}/admin-events
		/// </summary>
		public async Task _realmAdmin_eventsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/admin-events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
		/// _realmAdmin_eventsGetByAuthClientAndAuthIpAddressAndAuthRealmAndAuthUserAndDateFromAndDateToAndFirstAndMaxAndOperationTypesAndResourcePathAndResourceTypes {realm}/admin-events
		/// </summary>
		/// <param name="authUser">user id</param>
		/// <param name="max">Maximum results size (defaults to 100)</param>
		public async Task _realmAdmin_eventsGetByAuthClientAndAuthIpAddressAndAuthRealmAndAuthUserAndDateFromAndDateToAndFirstAndMaxAndOperationTypesAndResourcePathAndResourceTypesAsync(string authClient, string authIpAddress, string authRealm, string authUser, string dateFrom, string dateTo, int first, int max, string[] operationTypes, string resourcePath, string[] resourceTypes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/admin-events?authClient=" + (authClient==null? "" : System.Uri.EscapeDataString(authClient))+"&authIpAddress=" + (authIpAddress==null? "" : System.Uri.EscapeDataString(authIpAddress))+"&authRealm=" + (authRealm==null? "" : System.Uri.EscapeDataString(authRealm))+"&authUser=" + (authUser==null? "" : System.Uri.EscapeDataString(authUser))+"&dateFrom=" + (dateFrom==null? "" : System.Uri.EscapeDataString(dateFrom))+"&dateTo=" + (dateTo==null? "" : System.Uri.EscapeDataString(dateTo))+"&first="+first+"&max="+max+"&"+string.Join("&", operationTypes.Select(z => $"operationTypes={System.Uri.EscapeDataString(z.ToString())}"))+"&resourcePath=" + (resourcePath==null? "" : System.Uri.EscapeDataString(resourcePath))+"&"+string.Join("&", resourceTypes.Select(z => $"resourceTypes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear any user login failures for all users   This can release temporary disabled users
		/// _realmAttack_detectionBrute_forceUsersDelete {realm}/attack-detection/brute-force/users
		/// </summary>
		public async Task _realmAttack_detectionBrute_forceUsersDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/attack-detection/brute-force/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear any user login failures for the user   This can release temporary disabled user
		/// _realmAttack_detectionBrute_forceUsers_userIdDelete {realm}/attack-detection/brute-force/users/{userId}
		/// </summary>
		public async Task _realmAttack_detectionBrute_forceUsers_userIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/attack-detection/brute-force/users/{userId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status of a username in brute force detection
		/// _realmAttack_detectionBrute_forceUsers_userIdGet {realm}/attack-detection/brute-force/users/{userId}
		/// </summary>
		public async Task _realmAttack_detectionBrute_forceUsers_userIdGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/attack-detection/brute-force/users/{userId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get authenticator providers   Returns a list of authenticator providers.
		/// _realmAuthenticationAuthenticator_providersGet {realm}/authentication/authenticator-providers
		/// </summary>
		public async Task _realmAuthenticationAuthenticator_providersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/authenticator-providers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get client authenticator providers   Returns a list of client authenticator providers.
		/// _realmAuthenticationClient_authenticator_providersGet {realm}/authentication/client-authenticator-providers
		/// </summary>
		public async Task _realmAuthenticationClient_authenticator_providersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/client-authenticator-providers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get authenticator provider’s configuration description
		/// _realmAuthenticationConfig_description_providerIdGet {realm}/authentication/config-description/{providerId}
		/// </summary>
		public async Task _realmAuthenticationConfig_description_providerIdGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/config-description/{providerId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete authenticator configuration
		/// _realmAuthenticationConfig_idDelete {realm}/authentication/config/{id}
		/// </summary>
		public async Task _realmAuthenticationConfig_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/config/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get authenticator configuration
		/// _realmAuthenticationConfig_idGet {realm}/authentication/config/{id}
		/// </summary>
		public async Task _realmAuthenticationConfig_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/config/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update authenticator configuration
		/// _realmAuthenticationConfig_idPut {realm}/authentication/config/{id}
		/// </summary>
		/// <param name="requestBody">JSON describing new state of authenticator configuration</param>
		public async Task _realmAuthenticationConfig_idPutAsync(AuthenticatorConfigRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/config/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add new authentication execution
		/// _realmAuthenticationExecutionsPost {realm}/authentication/executions
		/// </summary>
		/// <param name="requestBody">JSON model describing authentication execution</param>
		public async Task _realmAuthenticationExecutionsPostAsync(AuthenticationExecutionRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/executions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete execution
		/// _realmAuthenticationExecutions_executionIdDelete {realm}/authentication/executions/{executionId}
		/// </summary>
		public async Task _realmAuthenticationExecutions_executionIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/executions/{executionId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Single Execution
		/// _realmAuthenticationExecutions_executionIdGet {realm}/authentication/executions/{executionId}
		/// </summary>
		public async Task _realmAuthenticationExecutions_executionIdGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/executions/{executionId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update execution with new configuration
		/// _realmAuthenticationExecutions_executionIdConfigPost {realm}/authentication/executions/{executionId}/config
		/// </summary>
		/// <param name="requestBody">JSON with new configuration</param>
		public async Task _realmAuthenticationExecutions_executionIdConfigPostAsync(AuthenticatorConfigRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/executions/{executionId}/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lower execution’s priority
		/// _realmAuthenticationExecutions_executionIdLower_priorityPost {realm}/authentication/executions/{executionId}/lower-priority
		/// </summary>
		public async Task _realmAuthenticationExecutions_executionIdLower_priorityPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/executions/{executionId}/lower-priority";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Raise execution’s priority
		/// _realmAuthenticationExecutions_executionIdRaise_priorityPost {realm}/authentication/executions/{executionId}/raise-priority
		/// </summary>
		public async Task _realmAuthenticationExecutions_executionIdRaise_priorityPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/executions/{executionId}/raise-priority";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get authentication flows   Returns a list of authentication flows.
		/// _realmAuthenticationFlowsGet {realm}/authentication/flows
		/// </summary>
		public async Task _realmAuthenticationFlowsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new authentication flow
		/// _realmAuthenticationFlowsPost {realm}/authentication/flows
		/// </summary>
		/// <param name="requestBody">Authentication flow representation</param>
		public async Task _realmAuthenticationFlowsPostAsync(AuthenticationFlowRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object
		/// _realmAuthenticationFlows_flowAliasCopyPost {realm}/authentication/flows/{flowAlias}/copy
		/// </summary>
		/// <param name="requestBody">JSON containing 'newName' attribute</param>
		public async Task _realmAuthenticationFlows_flowAliasCopyPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{flowAlias}/copy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get authentication executions for a flow
		/// _realmAuthenticationFlows_flowAliasExecutionsGet {realm}/authentication/flows/{flowAlias}/executions
		/// </summary>
		public async Task _realmAuthenticationFlows_flowAliasExecutionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{flowAlias}/executions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update authentication executions of a flow
		/// _realmAuthenticationFlows_flowAliasExecutionsPut {realm}/authentication/flows/{flowAlias}/executions
		/// </summary>
		public async Task _realmAuthenticationFlows_flowAliasExecutionsPutAsync(AuthenticationExecutionInfoRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{flowAlias}/executions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add new authentication execution to a flow
		/// _realmAuthenticationFlows_flowAliasExecutionsExecutionPost {realm}/authentication/flows/{flowAlias}/executions/execution
		/// </summary>
		/// <param name="requestBody">New execution JSON data containing 'provider' attribute</param>
		public async Task _realmAuthenticationFlows_flowAliasExecutionsExecutionPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{flowAlias}/executions/execution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add new flow with new execution to existing flow
		/// _realmAuthenticationFlows_flowAliasExecutionsFlowPost {realm}/authentication/flows/{flowAlias}/executions/flow
		/// </summary>
		/// <param name="requestBody">New authentication flow / execution JSON data containing 'alias', 'type', 'provider', and 'description' attributes</param>
		public async Task _realmAuthenticationFlows_flowAliasExecutionsFlowPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{flowAlias}/executions/flow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an authentication flow
		/// _realmAuthenticationFlows_idDelete {realm}/authentication/flows/{id}
		/// </summary>
		public async Task _realmAuthenticationFlows_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get authentication flow for id
		/// _realmAuthenticationFlows_idGet {realm}/authentication/flows/{id}
		/// </summary>
		public async Task _realmAuthenticationFlows_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an authentication flow
		/// _realmAuthenticationFlows_idPut {realm}/authentication/flows/{id}
		/// </summary>
		/// <param name="requestBody">Authentication flow representation</param>
		public async Task _realmAuthenticationFlows_idPutAsync(AuthenticationFlowRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/flows/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get form action providers   Returns a list of form action providers.
		/// _realmAuthenticationForm_action_providersGet {realm}/authentication/form-action-providers
		/// </summary>
		public async Task _realmAuthenticationForm_action_providersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/form-action-providers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get form providers   Returns a list of form providers.
		/// _realmAuthenticationForm_providersGet {realm}/authentication/form-providers
		/// </summary>
		public async Task _realmAuthenticationForm_providersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/form-providers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get configuration descriptions for all clients
		/// _realmAuthenticationPer_client_config_descriptionGet {realm}/authentication/per-client-config-description
		/// </summary>
		public async Task _realmAuthenticationPer_client_config_descriptionGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/per-client-config-description";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register a new required actions
		/// _realmAuthenticationRegister_required_actionPost {realm}/authentication/register-required-action
		/// </summary>
		/// <param name="requestBody">JSON containing 'providerId', and 'name' attributes.</param>
		public async Task _realmAuthenticationRegister_required_actionPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/register-required-action";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get required actions   Returns a list of required actions.
		/// _realmAuthenticationRequired_actionsGet {realm}/authentication/required-actions
		/// </summary>
		public async Task _realmAuthenticationRequired_actionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/required-actions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete required action
		/// _realmAuthenticationRequired_actions_aliasDelete {realm}/authentication/required-actions/{alias}
		/// </summary>
		public async Task _realmAuthenticationRequired_actions_aliasDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/required-actions/{alias}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get required action for alias
		/// _realmAuthenticationRequired_actions_aliasGet {realm}/authentication/required-actions/{alias}
		/// </summary>
		public async Task _realmAuthenticationRequired_actions_aliasGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/required-actions/{alias}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update required action
		/// _realmAuthenticationRequired_actions_aliasPut {realm}/authentication/required-actions/{alias}
		/// </summary>
		/// <param name="requestBody">JSON describing new state of required action</param>
		public async Task _realmAuthenticationRequired_actions_aliasPutAsync(RequiredActionProviderRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/required-actions/{alias}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lower required action’s priority
		/// _realmAuthenticationRequired_actions_aliasLower_priorityPost {realm}/authentication/required-actions/{alias}/lower-priority
		/// </summary>
		public async Task _realmAuthenticationRequired_actions_aliasLower_priorityPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/required-actions/{alias}/lower-priority";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Raise required action’s priority
		/// _realmAuthenticationRequired_actions_aliasRaise_priorityPost {realm}/authentication/required-actions/{alias}/raise-priority
		/// </summary>
		public async Task _realmAuthenticationRequired_actions_aliasRaise_priorityPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/required-actions/{alias}/raise-priority";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get unregistered required actions   Returns a list of unregistered required actions.
		/// _realmAuthenticationUnregistered_required_actionsGet {realm}/authentication/unregistered-required-actions
		/// </summary>
		public async Task _realmAuthenticationUnregistered_required_actionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/authentication/unregistered-required-actions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear cache of external public keys (Public keys of clients or Identity providers)
		/// _realmClear_keys_cachePost {realm}/clear-keys-cache
		/// </summary>
		public async Task _realmClear_keys_cachePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clear-keys-cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear realm cache
		/// _realmClear_realm_cachePost {realm}/clear-realm-cache
		/// </summary>
		public async Task _realmClear_realm_cachePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clear-realm-cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear user cache
		/// _realmClear_user_cachePost {realm}/clear-user-cache
		/// </summary>
		public async Task _realmClear_user_cachePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clear-user-cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Base path for retrieve providers with the configProperties properly filled
		/// _realmClient_registration_policyProvidersGet {realm}/client-registration-policy/providers
		/// </summary>
		public async Task _realmClient_registration_policyProvidersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-registration-policy/providers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get client scopes belonging to the realm   Returns a list of client scopes belonging to the realm
		/// _realmClient_scopesGet {realm}/client-scopes
		/// </summary>
		public async Task _realmClient_scopesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new client scope   Client Scope’s name must be unique!
		/// _realmClient_scopesPost {realm}/client-scopes
		/// </summary>
		public async Task _realmClient_scopesPostAsync(ClientScopeRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the mapper
		/// _realmClient_scopes_id1Protocol_mappersModels_id2Delete {realm}/client-scopes/{id1}/protocol-mappers/models/{id2}
		/// </summary>
		public async Task _realmClient_scopes_id1Protocol_mappersModels_id2DeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get mapper by id
		/// _realmClient_scopes_id1Protocol_mappersModels_id2Get {realm}/client-scopes/{id1}/protocol-mappers/models/{id2}
		/// </summary>
		public async Task _realmClient_scopes_id1Protocol_mappersModels_id2GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the mapper
		/// _realmClient_scopes_id1Protocol_mappersModels_id2Put {realm}/client-scopes/{id1}/protocol-mappers/models/{id2}
		/// </summary>
		public async Task _realmClient_scopes_id1Protocol_mappersModels_id2PutAsync(ProtocolMapperRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the client scope
		/// _realmClient_scopes_idDelete {realm}/client-scopes/{id}
		/// </summary>
		public async Task _realmClient_scopes_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get representation of the client scope
		/// _realmClient_scopes_idGet {realm}/client-scopes/{id}
		/// </summary>
		public async Task _realmClient_scopes_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the client scope
		/// _realmClient_scopes_idPut {realm}/client-scopes/{id}
		/// </summary>
		public async Task _realmClient_scopes_idPutAsync(ClientScopeRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create multiple mappers
		/// _realmClient_scopes_idProtocol_mappersAdd_modelsPost {realm}/client-scopes/{id}/protocol-mappers/add-models
		/// </summary>
		public async Task _realmClient_scopes_idProtocol_mappersAdd_modelsPostAsync(ProtocolMapperRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/protocol-mappers/add-models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get mappers
		/// _realmClient_scopes_idProtocol_mappersModelsGet {realm}/client-scopes/{id}/protocol-mappers/models
		/// </summary>
		public async Task _realmClient_scopes_idProtocol_mappersModelsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/protocol-mappers/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a mapper
		/// _realmClient_scopes_idProtocol_mappersModelsPost {realm}/client-scopes/{id}/protocol-mappers/models
		/// </summary>
		public async Task _realmClient_scopes_idProtocol_mappersModelsPostAsync(ProtocolMapperRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/protocol-mappers/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get mappers by name for a specific protocol
		/// _realmClient_scopes_idProtocol_mappersProtocol_protocolGet {realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}
		/// </summary>
		public async Task _realmClient_scopes_idProtocol_mappersProtocol_protocolGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all scope mappings for the client
		/// _realmClient_scopes_idScope_mappingsGet {realm}/client-scopes/{id}/scope-mappings
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove client-level roles from the client’s scope.
		/// _realmClient_scopes_idScope_mappingsClients_clientDelete {realm}/client-scopes/{id}/scope-mappings/clients/{client}
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsClients_clientDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the roles associated with a client’s scope   Returns roles for the client.
		/// _realmClient_scopes_idScope_mappingsClients_clientGet {realm}/client-scopes/{id}/scope-mappings/clients/{client}
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsClients_clientGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add client-level roles to the client’s scope
		/// _realmClient_scopes_idScope_mappingsClients_clientPost {realm}/client-scopes/{id}/scope-mappings/clients/{client}
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsClients_clientPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
		/// _realmClient_scopes_idScope_mappingsClients_clientAvailableGet {realm}/client-scopes/{id}/scope-mappings/clients/{client}/available
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsClients_clientAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
		/// _realmClient_scopes_idScope_mappingsClients_clientCompositeGet {realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsClients_clientCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a set of realm-level roles from the client’s scope
		/// _realmClient_scopes_idScope_mappingsRealmDelete {realm}/client-scopes/{id}/scope-mappings/realm
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsRealmDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles associated with the client’s scope
		/// _realmClient_scopes_idScope_mappingsRealmGet {realm}/client-scopes/{id}/scope-mappings/realm
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsRealmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a set of realm-level roles to the client’s scope
		/// _realmClient_scopes_idScope_mappingsRealmPost {realm}/client-scopes/{id}/scope-mappings/realm
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsRealmPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles that are available to attach to this client’s scope
		/// _realmClient_scopes_idScope_mappingsRealmAvailableGet {realm}/client-scopes/{id}/scope-mappings/realm/available
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsRealmAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/realm/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
		/// _realmClient_scopes_idScope_mappingsRealmCompositeGet {realm}/client-scopes/{id}/scope-mappings/realm/composite
		/// </summary>
		public async Task _realmClient_scopes_idScope_mappingsRealmCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-scopes/{id}/scope-mappings/realm/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get client session stats   Returns a JSON map.
		/// _realmClient_session_statsGet {realm}/client-session-stats
		/// </summary>
		public async Task _realmClient_session_statsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/client-session-stats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get clients belonging to the realm   Returns a list of clients belonging to the realm
		/// _realmClientsGetByClientIdAndFirstAndMaxAndSearchAndViewableOnly {realm}/clients
		/// </summary>
		/// <param name="clientId">filter by clientId</param>
		/// <param name="first">the first result</param>
		/// <param name="max">the max results to return</param>
		/// <param name="search">whether this is a search query or a getClientById query</param>
		/// <param name="viewableOnly">filter clients that cannot be viewed in full by admin</param>
		public async Task _realmClientsGetByClientIdAndFirstAndMaxAndSearchAndViewableOnlyAsync(string clientId, int first, int max, bool search, bool viewableOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients?clientId=" + (clientId==null? "" : System.Uri.EscapeDataString(clientId))+"&first="+first+"&max="+max+"&search="+search+"&viewableOnly="+viewableOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new client   Client’s client_id must be unique!
		/// _realmClientsPost {realm}/clients
		/// </summary>
		public async Task _realmClientsPostAsync(ClientRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// _realmClients_initial_accessGet {realm}/clients-initial-access
		/// </summary>
		public async Task _realmClients_initial_accessGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients-initial-access";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new initial access token.
		/// _realmClients_initial_accessPost {realm}/clients-initial-access
		/// </summary>
		public async Task _realmClients_initial_accessPostAsync(ClientInitialAccessCreatePresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients-initial-access";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// _realmClients_initial_access_idDelete {realm}/clients-initial-access/{id}
		/// </summary>
		public async Task _realmClients_initial_access_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients-initial-access/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the mapper
		/// _realmClients_id1Protocol_mappersModels_id2Delete {realm}/clients/{id1}/protocol-mappers/models/{id2}
		/// </summary>
		public async Task _realmClients_id1Protocol_mappersModels_id2DeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id1}/protocol-mappers/models/{id2}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get mapper by id
		/// _realmClients_id1Protocol_mappersModels_id2Get {realm}/clients/{id1}/protocol-mappers/models/{id2}
		/// </summary>
		public async Task _realmClients_id1Protocol_mappersModels_id2GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id1}/protocol-mappers/models/{id2}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the mapper
		/// _realmClients_id1Protocol_mappersModels_id2Put {realm}/clients/{id1}/protocol-mappers/models/{id2}
		/// </summary>
		public async Task _realmClients_id1Protocol_mappersModels_id2PutAsync(ProtocolMapperRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id1}/protocol-mappers/models/{id2}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the client
		/// _realmClients_idDelete {realm}/clients/{id}
		/// </summary>
		public async Task _realmClients_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get representation of the client
		/// _realmClients_idGet {realm}/clients/{id}
		/// </summary>
		public async Task _realmClients_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the client
		/// _realmClients_idPut {realm}/clients/{id}
		/// </summary>
		public async Task _realmClients_idPutAsync(ClientRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get key info
		/// _realmClients_idCertificates_attrGet {realm}/clients/{id}/certificates/{attr}
		/// </summary>
		public async Task _realmClients_idCertificates_attrGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/certificates/{attr}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a keystore file for the client, containing private key and public certificate
		/// _realmClients_idCertificates_attrDownloadPost {realm}/clients/{id}/certificates/{attr}/download
		/// </summary>
		/// <param name="requestBody">Keystore configuration as JSON</param>
		public async Task _realmClients_idCertificates_attrDownloadPostAsync(KeyStoreConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/certificates/{attr}/download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate a new certificate with new key pair
		/// _realmClients_idCertificates_attrGeneratePost {realm}/clients/{id}/certificates/{attr}/generate
		/// </summary>
		public async Task _realmClients_idCertificates_attrGeneratePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/certificates/{attr}/generate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
		/// _realmClients_idCertificates_attrGenerate_and_downloadPost {realm}/clients/{id}/certificates/{attr}/generate-and-download
		/// </summary>
		/// <param name="requestBody">Keystore configuration as JSON</param>
		public async Task _realmClients_idCertificates_attrGenerate_and_downloadPostAsync(KeyStoreConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/certificates/{attr}/generate-and-download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Upload certificate and eventually private key
		/// _realmClients_idCertificates_attrUploadPost {realm}/clients/{id}/certificates/{attr}/upload
		/// </summary>
		public async Task _realmClients_idCertificates_attrUploadPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/certificates/{attr}/upload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload only certificate, not private key
		/// _realmClients_idCertificates_attrUpload_certificatePost {realm}/clients/{id}/certificates/{attr}/upload-certificate
		/// </summary>
		public async Task _realmClients_idCertificates_attrUpload_certificatePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/certificates/{attr}/upload-certificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the client secret
		/// _realmClients_idClient_secretGet {realm}/clients/{id}/client-secret
		/// </summary>
		public async Task _realmClients_idClient_secretGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/client-secret";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a new secret for the client
		/// _realmClients_idClient_secretPost {realm}/clients/{id}/client-secret
		/// </summary>
		public async Task _realmClients_idClient_secretPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/client-secret";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get default client scopes.
		/// _realmClients_idDefault_client_scopesGet {realm}/clients/{id}/default-client-scopes
		/// </summary>
		public async Task _realmClients_idDefault_client_scopesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/default-client-scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmClients_idDefault_client_scopes_clientScopeIdDelete {realm}/clients/{id}/default-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmClients_idDefault_client_scopes_clientScopeIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/default-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmClients_idDefault_client_scopes_clientScopeIdPut {realm}/clients/{id}/default-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmClients_idDefault_client_scopes_clientScopeIdPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/default-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create JSON with payload of example access token
		/// _realmClients_idEvaluate_scopesGenerate_example_access_tokenGetByScopeAndUserId {realm}/clients/{id}/evaluate-scopes/generate-example-access-token
		/// </summary>
		public async Task _realmClients_idEvaluate_scopesGenerate_example_access_tokenGetByScopeAndUserIdAsync(string scope, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/evaluate-scopes/generate-example-access-token?scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope))+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
		/// _realmClients_idEvaluate_scopesProtocol_mappersGetByScope {realm}/clients/{id}/evaluate-scopes/protocol-mappers
		/// </summary>
		public async Task _realmClients_idEvaluate_scopesProtocol_mappersGetByScopeAsync(string scope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/evaluate-scopes/protocol-mappers?scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
		/// _realmClients_idEvaluate_scopesScope_mappings_roleContainerIdGrantedGetByScope {realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted
		/// </summary>
		public async Task _realmClients_idEvaluate_scopesScope_mappings_roleContainerIdGrantedGetByScopeAsync(string scope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted?scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.
		/// _realmClients_idEvaluate_scopesScope_mappings_roleContainerIdNot_grantedGetByScope {realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted
		/// </summary>
		public async Task _realmClients_idEvaluate_scopesScope_mappings_roleContainerIdNot_grantedGetByScopeAsync(string scope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted?scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmClients_idInstallationProviders_providerIdGet {realm}/clients/{id}/installation/providers/{providerId}
		/// </summary>
		public async Task _realmClients_idInstallationProviders_providerIdGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/installation/providers/{providerId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether client Authorization permissions have been initialized or not and a reference
		/// _realmClients_idManagementPermissionsGet {realm}/clients/{id}/management/permissions
		/// </summary>
		public async Task _realmClients_idManagementPermissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether client Authorization permissions have been initialized or not and a reference
		/// _realmClients_idManagementPermissionsPut {realm}/clients/{id}/management/permissions
		/// </summary>
		public async Task _realmClients_idManagementPermissionsPutAsync(ManagementPermissionReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak
		/// _realmClients_idNodesPost {realm}/clients/{id}/nodes
		/// </summary>
		public async Task _realmClients_idNodesPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/nodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unregister a cluster node from the client
		/// _realmClients_idNodes_nodeDelete {realm}/clients/{id}/nodes/{node}
		/// </summary>
		public async Task _realmClients_idNodes_nodeDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/nodes/{node}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get application offline session count   Returns a number of offline user sessions associated with this client   {      "count": number  }
		/// _realmClients_idOffline_session_countGet {realm}/clients/{id}/offline-session-count
		/// </summary>
		public async Task _realmClients_idOffline_session_countGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/offline-session-count";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get offline sessions for client   Returns a list of offline user sessions associated with this client
		/// _realmClients_idOffline_sessionsGetByFirstAndMax {realm}/clients/{id}/offline-sessions
		/// </summary>
		/// <param name="first">Paging offset</param>
		/// <param name="max">Maximum results size (defaults to 100)</param>
		public async Task _realmClients_idOffline_sessionsGetByFirstAndMaxAsync(int first, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/offline-sessions?first="+first+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get optional client scopes.
		/// _realmClients_idOptional_client_scopesGet {realm}/clients/{id}/optional-client-scopes
		/// </summary>
		public async Task _realmClients_idOptional_client_scopesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/optional-client-scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmClients_idOptional_client_scopes_clientScopeIdDelete {realm}/clients/{id}/optional-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmClients_idOptional_client_scopes_clientScopeIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/optional-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmClients_idOptional_client_scopes_clientScopeIdPut {realm}/clients/{id}/optional-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmClients_idOptional_client_scopes_clientScopeIdPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/optional-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create multiple mappers
		/// _realmClients_idProtocol_mappersAdd_modelsPost {realm}/clients/{id}/protocol-mappers/add-models
		/// </summary>
		public async Task _realmClients_idProtocol_mappersAdd_modelsPostAsync(ProtocolMapperRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/protocol-mappers/add-models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get mappers
		/// _realmClients_idProtocol_mappersModelsGet {realm}/clients/{id}/protocol-mappers/models
		/// </summary>
		public async Task _realmClients_idProtocol_mappersModelsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/protocol-mappers/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a mapper
		/// _realmClients_idProtocol_mappersModelsPost {realm}/clients/{id}/protocol-mappers/models
		/// </summary>
		public async Task _realmClients_idProtocol_mappersModelsPostAsync(ProtocolMapperRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/protocol-mappers/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get mappers by name for a specific protocol
		/// _realmClients_idProtocol_mappersProtocol_protocolGet {realm}/clients/{id}/protocol-mappers/protocol/{protocol}
		/// </summary>
		public async Task _realmClients_idProtocol_mappersProtocol_protocolGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/protocol-mappers/protocol/{protocol}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.
		/// _realmClients_idPush_revocationPost {realm}/clients/{id}/push-revocation
		/// </summary>
		public async Task _realmClients_idPush_revocationPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/push-revocation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a new registration access token for the client
		/// _realmClients_idRegistration_access_tokenPost {realm}/clients/{id}/registration-access-token
		/// </summary>
		public async Task _realmClients_idRegistration_access_tokenPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/registration-access-token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all roles for the realm or client
		/// _realmClients_idRolesGetByBriefRepresentationAndFirstAndMaxAndSearch {realm}/clients/{id}/roles
		/// </summary>
		public async Task _realmClients_idRolesGetByBriefRepresentationAndFirstAndMaxAndSearchAsync(bool briefRepresentation, int first, int max, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles?briefRepresentation="+briefRepresentation+"&first="+first+"&max="+max+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new role for the realm or client
		/// _realmClients_idRolesPost {realm}/clients/{id}/roles
		/// </summary>
		public async Task _realmClients_idRolesPostAsync(RoleRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a role by name
		/// _realmClients_idRoles_role_nameDelete {realm}/clients/{id}/roles/{role_name}
		/// </summary>
		public async Task _realmClients_idRoles_role_nameDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a role by name
		/// _realmClients_idRoles_role_nameGet {realm}/clients/{id}/roles/{role_name}
		/// </summary>
		public async Task _realmClients_idRoles_role_nameGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a role by name
		/// _realmClients_idRoles_role_namePut {realm}/clients/{id}/roles/{role_name}
		/// </summary>
		public async Task _realmClients_idRoles_role_namePutAsync(RoleRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove roles from the role’s composite
		/// _realmClients_idRoles_role_nameCompositesDelete {realm}/clients/{id}/roles/{role_name}/composites
		/// </summary>
		public async Task _realmClients_idRoles_role_nameCompositesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get composites of the role
		/// _realmClients_idRoles_role_nameCompositesGet {realm}/clients/{id}/roles/{role_name}/composites
		/// </summary>
		public async Task _realmClients_idRoles_role_nameCompositesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a composite to the role
		/// _realmClients_idRoles_role_nameCompositesPost {realm}/clients/{id}/roles/{role_name}/composites
		/// </summary>
		public async Task _realmClients_idRoles_role_nameCompositesPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// An app-level roles for the specified app for the role’s composite
		/// _realmClients_idRoles_role_nameCompositesClients_clientGet {realm}/clients/{id}/roles/{role_name}/composites/clients/{client}
		/// </summary>
		public async Task _realmClients_idRoles_role_nameCompositesClients_clientGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/composites/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles of the role’s composite
		/// _realmClients_idRoles_role_nameCompositesRealmGet {realm}/clients/{id}/roles/{role_name}/composites/realm
		/// </summary>
		public async Task _realmClients_idRoles_role_nameCompositesRealmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/composites/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return List of Groups that have the specified role name
		/// _realmClients_idRoles_role_nameGroupsGetByBriefRepresentationAndFirstAndMax {realm}/clients/{id}/roles/{role_name}/groups
		/// </summary>
		/// <param name="briefRepresentation">if false, return a full representation of the GroupRepresentation objects</param>
		public async Task _realmClients_idRoles_role_nameGroupsGetByBriefRepresentationAndFirstAndMaxAsync(bool briefRepresentation, int first, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/groups?briefRepresentation="+briefRepresentation+"&first="+first+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether role Authoirzation permissions have been initialized or not and a reference
		/// _realmClients_idRoles_role_nameManagementPermissionsGet {realm}/clients/{id}/roles/{role_name}/management/permissions
		/// </summary>
		public async Task _realmClients_idRoles_role_nameManagementPermissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether role Authoirzation permissions have been initialized or not and a reference
		/// _realmClients_idRoles_role_nameManagementPermissionsPut {realm}/clients/{id}/roles/{role_name}/management/permissions
		/// </summary>
		public async Task _realmClients_idRoles_role_nameManagementPermissionsPutAsync(ManagementPermissionReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return List of Users that have the specified role name
		/// _realmClients_idRoles_role_nameUsersGetByFirstAndMax {realm}/clients/{id}/roles/{role_name}/users
		/// </summary>
		public async Task _realmClients_idRoles_role_nameUsersGetByFirstAndMaxAsync(int first, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/roles/{role_name}/users?first="+first+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all scope mappings for the client
		/// _realmClients_idScope_mappingsGet {realm}/clients/{id}/scope-mappings
		/// </summary>
		public async Task _realmClients_idScope_mappingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove client-level roles from the client’s scope.
		/// _realmClients_idScope_mappingsClients_clientDelete {realm}/clients/{id}/scope-mappings/clients/{client}
		/// </summary>
		public async Task _realmClients_idScope_mappingsClients_clientDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the roles associated with a client’s scope   Returns roles for the client.
		/// _realmClients_idScope_mappingsClients_clientGet {realm}/clients/{id}/scope-mappings/clients/{client}
		/// </summary>
		public async Task _realmClients_idScope_mappingsClients_clientGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add client-level roles to the client’s scope
		/// _realmClients_idScope_mappingsClients_clientPost {realm}/clients/{id}/scope-mappings/clients/{client}
		/// </summary>
		public async Task _realmClients_idScope_mappingsClients_clientPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
		/// _realmClients_idScope_mappingsClients_clientAvailableGet {realm}/clients/{id}/scope-mappings/clients/{client}/available
		/// </summary>
		public async Task _realmClients_idScope_mappingsClients_clientAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/clients/{client}/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
		/// _realmClients_idScope_mappingsClients_clientCompositeGet {realm}/clients/{id}/scope-mappings/clients/{client}/composite
		/// </summary>
		public async Task _realmClients_idScope_mappingsClients_clientCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/clients/{client}/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a set of realm-level roles from the client’s scope
		/// _realmClients_idScope_mappingsRealmDelete {realm}/clients/{id}/scope-mappings/realm
		/// </summary>
		public async Task _realmClients_idScope_mappingsRealmDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles associated with the client’s scope
		/// _realmClients_idScope_mappingsRealmGet {realm}/clients/{id}/scope-mappings/realm
		/// </summary>
		public async Task _realmClients_idScope_mappingsRealmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a set of realm-level roles to the client’s scope
		/// _realmClients_idScope_mappingsRealmPost {realm}/clients/{id}/scope-mappings/realm
		/// </summary>
		public async Task _realmClients_idScope_mappingsRealmPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles that are available to attach to this client’s scope
		/// _realmClients_idScope_mappingsRealmAvailableGet {realm}/clients/{id}/scope-mappings/realm/available
		/// </summary>
		public async Task _realmClients_idScope_mappingsRealmAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/realm/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
		/// _realmClients_idScope_mappingsRealmCompositeGet {realm}/clients/{id}/scope-mappings/realm/composite
		/// </summary>
		public async Task _realmClients_idScope_mappingsRealmCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/scope-mappings/realm/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user dedicated to the service account
		/// _realmClients_idService_account_userGet {realm}/clients/{id}/service-account-user
		/// </summary>
		public async Task _realmClients_idService_account_userGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/service-account-user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get application session count   Returns a number of user sessions associated with this client   {      "count": number  }
		/// _realmClients_idSession_countGet {realm}/clients/{id}/session-count
		/// </summary>
		public async Task _realmClients_idSession_countGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/session-count";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.
		/// _realmClients_idTest_nodes_availableGet {realm}/clients/{id}/test-nodes-available
		/// </summary>
		public async Task _realmClients_idTest_nodes_availableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/test-nodes-available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user sessions for client   Returns a list of user sessions associated with this client
		/// _realmClients_idUser_sessionsGetByFirstAndMax {realm}/clients/{id}/user-sessions
		/// </summary>
		/// <param name="first">Paging offset</param>
		/// <param name="max">Maximum results size (defaults to 100)</param>
		public async Task _realmClients_idUser_sessionsGetByFirstAndMaxAsync(int first, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/clients/{id}/user-sessions?first="+first+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmComponentsGetByNameAndParentAndType {realm}/components
		/// </summary>
		public async Task _realmComponentsGetByNameAndParentAndTypeAsync(string name, string parent, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/components?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmComponentsPost {realm}/components
		/// </summary>
		public async Task _realmComponentsPostAsync(ComponentRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/components";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// _realmComponents_idDelete {realm}/components/{id}
		/// </summary>
		public async Task _realmComponents_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/components/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmComponents_idGet {realm}/components/{id}
		/// </summary>
		public async Task _realmComponents_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/components/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmComponents_idPut {realm}/components/{id}
		/// </summary>
		public async Task _realmComponents_idPutAsync(ComponentRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/components/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List of subcomponent types that are available to configure for a particular parent component.
		/// _realmComponents_idSub_component_typesGetByType {realm}/components/{id}/sub-component-types
		/// </summary>
		public async Task _realmComponents_idSub_component_typesGetByTypeAsync(string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/components/{id}/sub-component-types?type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmCredential_registratorsGet {realm}/credential-registrators
		/// </summary>
		public async Task _realmCredential_registratorsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/credential-registrators";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm default client scopes.
		/// _realmDefault_default_client_scopesGet {realm}/default-default-client-scopes
		/// </summary>
		public async Task _realmDefault_default_client_scopesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-default-client-scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmDefault_default_client_scopes_clientScopeIdDelete {realm}/default-default-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmDefault_default_client_scopes_clientScopeIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-default-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmDefault_default_client_scopes_clientScopeIdPut {realm}/default-default-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmDefault_default_client_scopes_clientScopeIdPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-default-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get group hierarchy.
		/// _realmDefault_groupsGet {realm}/default-groups
		/// </summary>
		public async Task _realmDefault_groupsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmDefault_groups_groupIdDelete {realm}/default-groups/{groupId}
		/// </summary>
		public async Task _realmDefault_groups_groupIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-groups/{groupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmDefault_groups_groupIdPut {realm}/default-groups/{groupId}
		/// </summary>
		public async Task _realmDefault_groups_groupIdPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-groups/{groupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm optional client scopes.
		/// _realmDefault_optional_client_scopesGet {realm}/default-optional-client-scopes
		/// </summary>
		public async Task _realmDefault_optional_client_scopesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-optional-client-scopes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmDefault_optional_client_scopes_clientScopeIdDelete {realm}/default-optional-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmDefault_optional_client_scopes_clientScopeIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-optional-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmDefault_optional_client_scopes_clientScopeIdPut {realm}/default-optional-client-scopes/{clientScopeId}
		/// </summary>
		public async Task _realmDefault_optional_client_scopes_clientScopeIdPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/default-optional-client-scopes/{clientScopeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete all events
		/// _realmEventsDelete {realm}/events
		/// </summary>
		public async Task _realmEventsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get events   Returns all events, or filters them based on URL query parameters listed here
		/// _realmEventsGetByClientAndDateFromAndDateToAndFirstAndIpAddressAndMaxAndTypeAndUser {realm}/events
		/// </summary>
		/// <param name="client">App or oauth client name</param>
		/// <param name="dateFrom">From date</param>
		/// <param name="dateTo">To date</param>
		/// <param name="first">Paging offset</param>
		/// <param name="ipAddress">IP address</param>
		/// <param name="max">Maximum results size (defaults to 100)</param>
		/// <param name="type">The types of events to return</param>
		/// <param name="user">User id</param>
		public async Task _realmEventsGetByClientAndDateFromAndDateToAndFirstAndIpAddressAndMaxAndTypeAndUserAsync(string client, string dateFrom, string dateTo, int first, string ipAddress, int max, string[] type, string user, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/events?client=" + (client==null? "" : System.Uri.EscapeDataString(client))+"&dateFrom=" + (dateFrom==null? "" : System.Uri.EscapeDataString(dateFrom))+"&dateTo=" + (dateTo==null? "" : System.Uri.EscapeDataString(dateTo))+"&first="+first+"&ipAddress=" + (ipAddress==null? "" : System.Uri.EscapeDataString(ipAddress))+"&max="+max+"&"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the events provider configuration   Returns JSON object with events provider configuration
		/// _realmEventsConfigGet {realm}/events/config
		/// </summary>
		public async Task _realmEventsConfigGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/events/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the events provider   Change the events provider and/or its configuration
		/// _realmEventsConfigPut {realm}/events/config
		/// </summary>
		public async Task _realmEventsConfigPutAsync(RealmEventsConfigRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/events/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// _realmGroup_by_path_pathGet {realm}/group-by-path/{path}
		/// </summary>
		public async Task _realmGroup_by_path_pathGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/group-by-path/{path}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get group hierarchy.
		/// _realmGroupsGetByBriefRepresentationAndFirstAndMaxAndSearch {realm}/groups
		/// </summary>
		public async Task _realmGroupsGetByBriefRepresentationAndFirstAndMaxAndSearchAsync(bool briefRepresentation, int first, int max, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups?briefRepresentation="+briefRepresentation+"&first="+first+"&max="+max+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create or add a top level realm groupSet or create child.
		/// _realmGroupsPost {realm}/groups
		/// </summary>
		public async Task _realmGroupsPostAsync(GroupRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the groups counts.
		/// _realmGroupsCountGetBySearchAndTop {realm}/groups/count
		/// </summary>
		public async Task _realmGroupsCountGetBySearchAndTopAsync(string search, bool top, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/count?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmGroups_idDelete {realm}/groups/{id}
		/// </summary>
		public async Task _realmGroups_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmGroups_idGet {realm}/groups/{id}
		/// </summary>
		public async Task _realmGroups_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update group, ignores subgroups.
		/// _realmGroups_idPut {realm}/groups/{id}
		/// </summary>
		public async Task _realmGroups_idPutAsync(GroupRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set or create child.
		/// _realmGroups_idChildrenPost {realm}/groups/{id}/children
		/// </summary>
		public async Task _realmGroups_idChildrenPostAsync(GroupRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/children";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether client Authorization permissions have been initialized or not and a reference
		/// _realmGroups_idManagementPermissionsGet {realm}/groups/{id}/management/permissions
		/// </summary>
		public async Task _realmGroups_idManagementPermissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether client Authorization permissions have been initialized or not and a reference
		/// _realmGroups_idManagementPermissionsPut {realm}/groups/{id}/management/permissions
		/// </summary>
		public async Task _realmGroups_idManagementPermissionsPutAsync(ManagementPermissionReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get users   Returns a list of users, filtered according to query parameters
		/// _realmGroups_idMembersGetByBriefRepresentationAndFirstAndMax {realm}/groups/{id}/members
		/// </summary>
		/// <param name="briefRepresentation">Only return basic information (only guaranteed to return id, username, created, first and last name,
		/// email, enabled state, email verification state, federation link, and access.
		/// Note that it means that namely user attributes, required actions, and not before are not returned.)</param>
		/// <param name="first">Pagination offset</param>
		/// <param name="max">Maximum results size (defaults to 100)</param>
		public async Task _realmGroups_idMembersGetByBriefRepresentationAndFirstAndMaxAsync(bool briefRepresentation, int first, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/members?briefRepresentation="+briefRepresentation+"&first="+first+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get role mappings
		/// _realmGroups_idRole_mappingsGet {realm}/groups/{id}/role-mappings
		/// </summary>
		public async Task _realmGroups_idRole_mappingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete client-level roles from user role mapping
		/// _realmGroups_idRole_mappingsClients_clientDelete {realm}/groups/{id}/role-mappings/clients/{client}
		/// </summary>
		public async Task _realmGroups_idRole_mappingsClients_clientDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get client-level role mappings for the user, and the app
		/// _realmGroups_idRole_mappingsClients_clientGet {realm}/groups/{id}/role-mappings/clients/{client}
		/// </summary>
		public async Task _realmGroups_idRole_mappingsClients_clientGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add client-level roles to the user role mapping
		/// _realmGroups_idRole_mappingsClients_clientPost {realm}/groups/{id}/role-mappings/clients/{client}
		/// </summary>
		public async Task _realmGroups_idRole_mappingsClients_clientPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get available client-level roles that can be mapped to the user
		/// _realmGroups_idRole_mappingsClients_clientAvailableGet {realm}/groups/{id}/role-mappings/clients/{client}/available
		/// </summary>
		public async Task _realmGroups_idRole_mappingsClients_clientAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/clients/{client}/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective client-level role mappings   This recurses any composite roles
		/// _realmGroups_idRole_mappingsClients_clientCompositeGet {realm}/groups/{id}/role-mappings/clients/{client}/composite
		/// </summary>
		public async Task _realmGroups_idRole_mappingsClients_clientCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/clients/{client}/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete realm-level role mappings
		/// _realmGroups_idRole_mappingsRealmDelete {realm}/groups/{id}/role-mappings/realm
		/// </summary>
		public async Task _realmGroups_idRole_mappingsRealmDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm-level role mappings
		/// _realmGroups_idRole_mappingsRealmGet {realm}/groups/{id}/role-mappings/realm
		/// </summary>
		public async Task _realmGroups_idRole_mappingsRealmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add realm-level role mappings to the user
		/// _realmGroups_idRole_mappingsRealmPost {realm}/groups/{id}/role-mappings/realm
		/// </summary>
		/// <param name="requestBody">Roles to add</param>
		public async Task _realmGroups_idRole_mappingsRealmPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles that can be mapped
		/// _realmGroups_idRole_mappingsRealmAvailableGet {realm}/groups/{id}/role-mappings/realm/available
		/// </summary>
		public async Task _realmGroups_idRole_mappingsRealmAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/realm/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective realm-level role mappings   This will recurse all composite roles to get the result.
		/// _realmGroups_idRole_mappingsRealmCompositeGet {realm}/groups/{id}/role-mappings/realm/composite
		/// </summary>
		public async Task _realmGroups_idRole_mappingsRealmCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/groups/{id}/role-mappings/realm/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Import identity provider from uploaded JSON file
		/// _realmIdentity_providerImport_configPost {realm}/identity-provider/import-config
		/// </summary>
		public async Task _realmIdentity_providerImport_configPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/import-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get identity providers
		/// _realmIdentity_providerInstancesGet {realm}/identity-provider/instances
		/// </summary>
		public async Task _realmIdentity_providerInstancesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new identity provider
		/// _realmIdentity_providerInstancesPost {realm}/identity-provider/instances
		/// </summary>
		/// <param name="requestBody">JSON body</param>
		public async Task _realmIdentity_providerInstancesPostAsync(IdentityProviderRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the identity provider
		/// _realmIdentity_providerInstances_aliasDelete {realm}/identity-provider/instances/{alias}
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the identity provider
		/// _realmIdentity_providerInstances_aliasGet {realm}/identity-provider/instances/{alias}
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the identity provider
		/// _realmIdentity_providerInstances_aliasPut {realm}/identity-provider/instances/{alias}
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasPutAsync(IdentityProviderRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Export public broker configuration for identity provider
		/// _realmIdentity_providerInstances_aliasExportGetByFormat {realm}/identity-provider/instances/{alias}/export
		/// </summary>
		/// <param name="format">Format to use</param>
		public async Task _realmIdentity_providerInstances_aliasExportGetByFormatAsync(string format, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/export?format=" + (format==null? "" : System.Uri.EscapeDataString(format));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether client Authorization permissions have been initialized or not and a reference
		/// _realmIdentity_providerInstances_aliasManagementPermissionsGet {realm}/identity-provider/instances/{alias}/management/permissions
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasManagementPermissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether client Authorization permissions have been initialized or not and a reference
		/// _realmIdentity_providerInstances_aliasManagementPermissionsPut {realm}/identity-provider/instances/{alias}/management/permissions
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasManagementPermissionsPutAsync(ManagementPermissionReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get mapper types for identity provider
		/// _realmIdentity_providerInstances_aliasMapper_typesGet {realm}/identity-provider/instances/{alias}/mapper-types
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasMapper_typesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/mapper-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get mappers for identity provider
		/// _realmIdentity_providerInstances_aliasMappersGet {realm}/identity-provider/instances/{alias}/mappers
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasMappersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/mappers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a mapper to identity provider
		/// _realmIdentity_providerInstances_aliasMappersPost {realm}/identity-provider/instances/{alias}/mappers
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasMappersPostAsync(IdentityProviderMapperRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/mappers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a mapper for the identity provider
		/// _realmIdentity_providerInstances_aliasMappers_idDelete {realm}/identity-provider/instances/{alias}/mappers/{id}
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasMappers_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/mappers/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get mapper by id for the identity provider
		/// _realmIdentity_providerInstances_aliasMappers_idGet {realm}/identity-provider/instances/{alias}/mappers/{id}
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasMappers_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/mappers/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a mapper for the identity provider
		/// _realmIdentity_providerInstances_aliasMappers_idPut {realm}/identity-provider/instances/{alias}/mappers/{id}
		/// </summary>
		public async Task _realmIdentity_providerInstances_aliasMappers_idPutAsync(IdentityProviderMapperRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/instances/{alias}/mappers/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get identity providers
		/// _realmIdentity_providerProviders_provider_idGet {realm}/identity-provider/providers/{provider_id}
		/// </summary>
		public async Task _realmIdentity_providerProviders_provider_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/identity-provider/providers/{provider_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmKeysGet {realm}/keys
		/// </summary>
		public async Task _realmKeysGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes all user sessions.
		/// _realmLogout_allPost {realm}/logout-all
		/// </summary>
		public async Task _realmLogout_allPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/logout-all";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial export of existing realm into a JSON file.
		/// _realmPartial_exportPostByExportClientsAndExportGroupsAndRoles {realm}/partial-export
		/// </summary>
		public async Task _realmPartial_exportPostByExportClientsAndExportGroupsAndRolesAsync(bool exportClients, bool exportGroupsAndRoles, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/partial-export?exportClients="+exportClients+"&exportGroupsAndRoles="+exportGroupsAndRoles;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Partial import from a JSON file to an existing realm.
		/// _realmPartialImportPost {realm}/partialImport
		/// </summary>
		public async Task _realmPartialImportPostAsync(PartialImportRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/partialImport";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Push the realm’s revocation policy to any client that has an admin url associated with it.
		/// _realmPush_revocationPost {realm}/push-revocation
		/// </summary>
		public async Task _realmPush_revocationPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/push-revocation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all roles for the realm or client
		/// _realmRolesGetByBriefRepresentationAndFirstAndMaxAndSearch {realm}/roles
		/// </summary>
		public async Task _realmRolesGetByBriefRepresentationAndFirstAndMaxAndSearchAsync(bool briefRepresentation, int first, int max, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles?briefRepresentation="+briefRepresentation+"&first="+first+"&max="+max+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new role for the realm or client
		/// _realmRolesPost {realm}/roles
		/// </summary>
		public async Task _realmRolesPostAsync(RoleRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete the role
		/// _realmRoles_by_id_role_idDelete {realm}/roles-by-id/{role_id}
		/// </summary>
		public async Task _realmRoles_by_id_role_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific role’s representation
		/// _realmRoles_by_id_role_idGet {realm}/roles-by-id/{role_id}
		/// </summary>
		public async Task _realmRoles_by_id_role_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the role
		/// _realmRoles_by_id_role_idPut {realm}/roles-by-id/{role_id}
		/// </summary>
		public async Task _realmRoles_by_id_role_idPutAsync(RoleRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a set of roles from the role’s composite
		/// _realmRoles_by_id_role_idCompositesDelete {realm}/roles-by-id/{role_id}/composites
		/// </summary>
		public async Task _realmRoles_by_id_role_idCompositesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get role’s children   Returns a set of role’s children provided the role is a composite.
		/// _realmRoles_by_id_role_idCompositesGet {realm}/roles-by-id/{role_id}/composites
		/// </summary>
		public async Task _realmRoles_by_id_role_idCompositesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Make the role a composite role by associating some child roles
		/// _realmRoles_by_id_role_idCompositesPost {realm}/roles-by-id/{role_id}/composites
		/// </summary>
		public async Task _realmRoles_by_id_role_idCompositesPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get client-level roles for the client that are in the role’s composite
		/// _realmRoles_by_id_role_idCompositesClients_clientGet {realm}/roles-by-id/{role_id}/composites/clients/{client}
		/// </summary>
		public async Task _realmRoles_by_id_role_idCompositesClients_clientGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}/composites/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles that are in the role’s composite
		/// _realmRoles_by_id_role_idCompositesRealmGet {realm}/roles-by-id/{role_id}/composites/realm
		/// </summary>
		public async Task _realmRoles_by_id_role_idCompositesRealmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}/composites/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether role Authoirzation permissions have been initialized or not and a reference
		/// _realmRoles_by_id_role_idManagementPermissionsGet {realm}/roles-by-id/{role_id}/management/permissions
		/// </summary>
		public async Task _realmRoles_by_id_role_idManagementPermissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether role Authoirzation permissions have been initialized or not and a reference
		/// _realmRoles_by_id_role_idManagementPermissionsPut {realm}/roles-by-id/{role_id}/management/permissions
		/// </summary>
		public async Task _realmRoles_by_id_role_idManagementPermissionsPutAsync(ManagementPermissionReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles-by-id/{role_id}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a role by name
		/// _realmRoles_role_nameDelete {realm}/roles/{role_name}
		/// </summary>
		public async Task _realmRoles_role_nameDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a role by name
		/// _realmRoles_role_nameGet {realm}/roles/{role_name}
		/// </summary>
		public async Task _realmRoles_role_nameGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a role by name
		/// _realmRoles_role_namePut {realm}/roles/{role_name}
		/// </summary>
		public async Task _realmRoles_role_namePutAsync(RoleRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove roles from the role’s composite
		/// _realmRoles_role_nameCompositesDelete {realm}/roles/{role_name}/composites
		/// </summary>
		public async Task _realmRoles_role_nameCompositesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get composites of the role
		/// _realmRoles_role_nameCompositesGet {realm}/roles/{role_name}/composites
		/// </summary>
		public async Task _realmRoles_role_nameCompositesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a composite to the role
		/// _realmRoles_role_nameCompositesPost {realm}/roles/{role_name}/composites
		/// </summary>
		public async Task _realmRoles_role_nameCompositesPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/composites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// An app-level roles for the specified app for the role’s composite
		/// _realmRoles_role_nameCompositesClients_clientGet {realm}/roles/{role_name}/composites/clients/{client}
		/// </summary>
		public async Task _realmRoles_role_nameCompositesClients_clientGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/composites/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles of the role’s composite
		/// _realmRoles_role_nameCompositesRealmGet {realm}/roles/{role_name}/composites/realm
		/// </summary>
		public async Task _realmRoles_role_nameCompositesRealmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/composites/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return List of Groups that have the specified role name
		/// _realmRoles_role_nameGroupsGetByBriefRepresentationAndFirstAndMax {realm}/roles/{role_name}/groups
		/// </summary>
		/// <param name="briefRepresentation">if false, return a full representation of the GroupRepresentation objects</param>
		public async Task _realmRoles_role_nameGroupsGetByBriefRepresentationAndFirstAndMaxAsync(bool briefRepresentation, int first, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/groups?briefRepresentation="+briefRepresentation+"&first="+first+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether role Authoirzation permissions have been initialized or not and a reference
		/// _realmRoles_role_nameManagementPermissionsGet {realm}/roles/{role_name}/management/permissions
		/// </summary>
		public async Task _realmRoles_role_nameManagementPermissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return object stating whether role Authoirzation permissions have been initialized or not and a reference
		/// _realmRoles_role_nameManagementPermissionsPut {realm}/roles/{role_name}/management/permissions
		/// </summary>
		public async Task _realmRoles_role_nameManagementPermissionsPutAsync(ManagementPermissionReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/management/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return List of Users that have the specified role name
		/// _realmRoles_role_nameUsersGetByFirstAndMax {realm}/roles/{role_name}/users
		/// </summary>
		public async Task _realmRoles_role_nameUsersGetByFirstAndMaxAsync(int first, int max, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/roles/{role_name}/users?first="+first+"&max="+max;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a specific user session.
		/// _realmSessions_sessionDelete {realm}/sessions/{session}
		/// </summary>
		public async Task _realmSessions_sessionDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/sessions/{session}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test LDAP connection
		/// _realmTestLDAPConnectionPost {realm}/testLDAPConnection
		/// </summary>
		public async Task _realmTestLDAPConnectionPostAsync(TestLdapConnectionRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/testLDAPConnection";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// _realmTestSMTPConnectionPost {realm}/testSMTPConnection
		/// </summary>
		public async Task _realmTestSMTPConnectionPostAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/testSMTPConnection";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328
		/// _realmUser_storage_idNameGet {realm}/user-storage/{id}/name
		/// </summary>
		public async Task _realmUser_storage_idNameGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/user-storage/{id}/name";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove imported users
		/// _realmUser_storage_idRemove_imported_usersPost {realm}/user-storage/{id}/remove-imported-users
		/// </summary>
		public async Task _realmUser_storage_idRemove_imported_usersPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/user-storage/{id}/remove-imported-users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Trigger sync of users   Action can be "triggerFullSync" or "triggerChangedUsersSync"
		/// _realmUser_storage_idSyncPostByAction {realm}/user-storage/{id}/sync
		/// </summary>
		public async Task _realmUser_storage_idSyncPostByActionAsync(string action, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/user-storage/{id}/sync?action=" + (action==null? "" : System.Uri.EscapeDataString(action));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unlink imported users from a storage provider
		/// _realmUser_storage_idUnlink_usersPost {realm}/user-storage/{id}/unlink-users
		/// </summary>
		public async Task _realmUser_storage_idUnlink_usersPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/user-storage/{id}/unlink-users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Trigger sync of mapper data related to ldap mapper (roles, groups, …​)   direction is "fedToKeycloak" or "keycloakToFed"
		/// _realmUser_storage_parentIdMappers_idSyncPostByDirection {realm}/user-storage/{parentId}/mappers/{id}/sync
		/// </summary>
		public async Task _realmUser_storage_parentIdMappers_idSyncPostByDirectionAsync(string direction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/user-storage/{parentId}/mappers/{id}/sync?direction=" + (direction==null? "" : System.Uri.EscapeDataString(direction));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get users   Returns a list of users, filtered according to query parameters
		/// _realmUsersGetByBriefRepresentationAndEmailAndFirstAndFirstNameAndLastNameAndMaxAndSearchAndUsername {realm}/users
		/// </summary>
		/// <param name="max">Maximum results size (defaults to 100)</param>
		/// <param name="search">A String contained in username, first or last name, or email</param>
		public async Task _realmUsersGetByBriefRepresentationAndEmailAndFirstAndFirstNameAndLastNameAndMaxAndSearchAndUsernameAsync(bool briefRepresentation, string email, int first, string firstName, string lastName, int max, string search, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users?briefRepresentation="+briefRepresentation+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&first="+first+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&max="+max+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new user   Username must be unique.
		/// _realmUsersPost {realm}/users
		/// </summary>
		public async Task _realmUsersPostAsync(UserRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// _realmUsers_management_permissionsGet {realm}/users-management-permissions
		/// </summary>
		public async Task _realmUsers_management_permissionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users-management-permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmUsers_management_permissionsPut {realm}/users-management-permissions
		/// </summary>
		public async Task _realmUsers_management_permissionsPutAsync(ManagementPermissionReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users-management-permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the number of users that match the given criteria.
		/// _realmUsersCountGetByEmailAndFirstNameAndLastNameAndSearchAndUsername {realm}/users/count
		/// </summary>
		/// <param name="email">email filter</param>
		/// <param name="firstName">first name filter</param>
		/// <param name="lastName">last name filter</param>
		/// <param name="search">arbitrary search string for all the fields below</param>
		/// <param name="username">username filter</param>
		public async Task _realmUsersCountGetByEmailAndFirstNameAndLastNameAndSearchAndUsernameAsync(string email, string firstName, string lastName, string search, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/count?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the user
		/// _realmUsers_idDelete {realm}/users/{id}
		/// </summary>
		public async Task _realmUsers_idDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get representation of the user
		/// _realmUsers_idGet {realm}/users/{id}
		/// </summary>
		public async Task _realmUsers_idGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the user
		/// _realmUsers_idPut {realm}/users/{id}
		/// </summary>
		public async Task _realmUsers_idPutAsync(UserRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return credential types, which are provided by the user storage where user is stored.
		/// _realmUsers_idConfigured_user_storage_credential_typesGet {realm}/users/{id}/configured-user-storage-credential-types
		/// </summary>
		public async Task _realmUsers_idConfigured_user_storage_credential_typesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/configured-user-storage-credential-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get consents granted by the user
		/// _realmUsers_idConsentsGet {realm}/users/{id}/consents
		/// </summary>
		public async Task _realmUsers_idConsentsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revoke consent and offline tokens for particular client from user
		/// _realmUsers_idConsents_clientDelete {realm}/users/{id}/consents/{client}
		/// </summary>
		public async Task _realmUsers_idConsents_clientDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/consents/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmUsers_idCredentialsGet {realm}/users/{id}/credentials
		/// </summary>
		public async Task _realmUsers_idCredentialsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a credential for a user
		/// _realmUsers_idCredentials_credentialIdDelete {realm}/users/{id}/credentials/{credentialId}
		/// </summary>
		public async Task _realmUsers_idCredentials_credentialIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/credentials/{credentialId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Move a credential to a position behind another credential
		/// _realmUsers_idCredentials_credentialIdMoveAfter_newPreviousCredentialIdPost {realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}
		/// </summary>
		public async Task _realmUsers_idCredentials_credentialIdMoveAfter_newPreviousCredentialIdPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Move a credential to a first position in the credentials list of the user
		/// _realmUsers_idCredentials_credentialIdMoveToFirstPost {realm}/users/{id}/credentials/{credentialId}/moveToFirst
		/// </summary>
		public async Task _realmUsers_idCredentials_credentialIdMoveToFirstPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/credentials/{credentialId}/moveToFirst";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable all credentials for a user of a specific type
		/// _realmUsers_idDisable_credential_typesPut {realm}/users/{id}/disable-credential-types
		/// </summary>
		public async Task _realmUsers_idDisable_credential_typesPutAsync(string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/disable-credential-types";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.
		/// _realmUsers_idExecute_actions_emailPutByClient_idAndLifespanAndRedirect_uri {realm}/users/{id}/execute-actions-email
		/// </summary>
		/// <param name="client_id">Client id</param>
		/// <param name="lifespan">Number of seconds after which the generated token expires</param>
		/// <param name="redirect_uri">Redirect uri</param>
		/// <param name="requestBody">required actions the user needs to complete</param>
		public async Task _realmUsers_idExecute_actions_emailPutByClient_idAndLifespanAndRedirect_uriAsync(string client_id, int lifespan, string redirect_uri, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/execute-actions-email?client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&lifespan="+lifespan+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get social logins associated with the user
		/// _realmUsers_idFederated_identityGet {realm}/users/{id}/federated-identity
		/// </summary>
		public async Task _realmUsers_idFederated_identityGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/federated-identity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a social login provider from user
		/// _realmUsers_idFederated_identity_providerDelete {realm}/users/{id}/federated-identity/{provider}
		/// </summary>
		public async Task _realmUsers_idFederated_identity_providerDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/federated-identity/{provider}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a social login provider to the user
		/// _realmUsers_idFederated_identity_providerPost {realm}/users/{id}/federated-identity/{provider}
		/// </summary>
		public async Task _realmUsers_idFederated_identity_providerPostAsync(FederatedIdentityRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/federated-identity/{provider}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// _realmUsers_idGroupsGetByBriefRepresentationAndFirstAndMaxAndSearch {realm}/users/{id}/groups
		/// </summary>
		public async Task _realmUsers_idGroupsGetByBriefRepresentationAndFirstAndMaxAndSearchAsync(bool briefRepresentation, int first, int max, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/groups?briefRepresentation="+briefRepresentation+"&first="+first+"&max="+max+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmUsers_idGroupsCountGetBySearch {realm}/users/{id}/groups/count
		/// </summary>
		public async Task _realmUsers_idGroupsCountGetBySearchAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/groups/count?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmUsers_idGroups_groupIdDelete {realm}/users/{id}/groups/{groupId}
		/// </summary>
		public async Task _realmUsers_idGroups_groupIdDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/groups/{groupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// _realmUsers_idGroups_groupIdPut {realm}/users/{id}/groups/{groupId}
		/// </summary>
		public async Task _realmUsers_idGroups_groupIdPutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/groups/{groupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Impersonate the user
		/// _realmUsers_idImpersonationPost {realm}/users/{id}/impersonation
		/// </summary>
		public async Task _realmUsers_idImpersonationPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/impersonation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
		/// _realmUsers_idLogoutPost {realm}/users/{id}/logout
		/// </summary>
		public async Task _realmUsers_idLogoutPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get offline sessions associated with the user and client
		/// _realmUsers_idOffline_sessions_clientIdGet {realm}/users/{id}/offline-sessions/{clientId}
		/// </summary>
		public async Task _realmUsers_idOffline_sessions_clientIdGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/offline-sessions/{clientId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set up a new password for the user.
		/// _realmUsers_idReset_passwordPut {realm}/users/{id}/reset-password
		/// </summary>
		/// <param name="requestBody">The representation must contain a rawPassword with the plain-text password</param>
		public async Task _realmUsers_idReset_passwordPutAsync(CredentialRepresentation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/reset-password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get role mappings
		/// _realmUsers_idRole_mappingsGet {realm}/users/{id}/role-mappings
		/// </summary>
		public async Task _realmUsers_idRole_mappingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete client-level roles from user role mapping
		/// _realmUsers_idRole_mappingsClients_clientDelete {realm}/users/{id}/role-mappings/clients/{client}
		/// </summary>
		public async Task _realmUsers_idRole_mappingsClients_clientDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get client-level role mappings for the user, and the app
		/// _realmUsers_idRole_mappingsClients_clientGet {realm}/users/{id}/role-mappings/clients/{client}
		/// </summary>
		public async Task _realmUsers_idRole_mappingsClients_clientGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add client-level roles to the user role mapping
		/// _realmUsers_idRole_mappingsClients_clientPost {realm}/users/{id}/role-mappings/clients/{client}
		/// </summary>
		public async Task _realmUsers_idRole_mappingsClients_clientPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/clients/{client}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get available client-level roles that can be mapped to the user
		/// _realmUsers_idRole_mappingsClients_clientAvailableGet {realm}/users/{id}/role-mappings/clients/{client}/available
		/// </summary>
		public async Task _realmUsers_idRole_mappingsClients_clientAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/clients/{client}/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective client-level role mappings   This recurses any composite roles
		/// _realmUsers_idRole_mappingsClients_clientCompositeGet {realm}/users/{id}/role-mappings/clients/{client}/composite
		/// </summary>
		public async Task _realmUsers_idRole_mappingsClients_clientCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/clients/{client}/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete realm-level role mappings
		/// _realmUsers_idRole_mappingsRealmDelete {realm}/users/{id}/role-mappings/realm
		/// </summary>
		public async Task _realmUsers_idRole_mappingsRealmDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get realm-level role mappings
		/// _realmUsers_idRole_mappingsRealmGet {realm}/users/{id}/role-mappings/realm
		/// </summary>
		public async Task _realmUsers_idRole_mappingsRealmGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add realm-level role mappings to the user
		/// _realmUsers_idRole_mappingsRealmPost {realm}/users/{id}/role-mappings/realm
		/// </summary>
		/// <param name="requestBody">Roles to add</param>
		public async Task _realmUsers_idRole_mappingsRealmPostAsync(RoleRepresentation[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/realm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get realm-level roles that can be mapped
		/// _realmUsers_idRole_mappingsRealmAvailableGet {realm}/users/{id}/role-mappings/realm/available
		/// </summary>
		public async Task _realmUsers_idRole_mappingsRealmAvailableGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/realm/available";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get effective realm-level role mappings   This will recurse all composite roles to get the result.
		/// _realmUsers_idRole_mappingsRealmCompositeGet {realm}/users/{id}/role-mappings/realm/composite
		/// </summary>
		public async Task _realmUsers_idRole_mappingsRealmCompositeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/role-mappings/realm/composite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send an email-verification email to the user   An email contains a link the user can click to verify their email address.
		/// _realmUsers_idSend_verify_emailPutByClient_idAndRedirect_uri {realm}/users/{id}/send-verify-email
		/// </summary>
		/// <param name="client_id">Client id</param>
		/// <param name="redirect_uri">Redirect uri</param>
		public async Task _realmUsers_idSend_verify_emailPutByClient_idAndRedirect_uriAsync(string client_id, string redirect_uri, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/send-verify-email?client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sessions associated with the user
		/// _realmUsers_idSessionsGet {realm}/users/{id}/sessions
		/// </summary>
		public async Task _realmUsers_idSessionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{realm}/users/{id}/sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
