//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokenIdListResponse
	{
		
		/// <summary>
		/// Array of access tokens Id.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AccessTokenIdResponse[] AccessTokenIdArray { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DefaultValue("AccessTokenIdListResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Object { get; set; } = "AccessTokenIdListResponse";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokenIdResponse
	{
		
		/// <summary>
		/// Ip address.
		/// Required
		/// Min length: 7
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issueAddress")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string IssueAddress { get; set; }
		
		/// <summary>
		/// Date when access token was created.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuedDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset IssuedDate { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("AccessTokenIdResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "AccessTokenIdResponse";
		
		/// <summary>
		/// Unique Id for the access token.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string TokenId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokenRequest
	{
		
		/// <summary>
		/// Your Client ID obtainable by logging into your UniCourt account.
		/// Required
		/// Min length: 32
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Your Client Secret ID obtainable by logging into your UniCourt account.
		/// Required
		/// Min length: 64
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		[System.ComponentModel.DataAnnotations.MinLength(64)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ClientSecret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokenResponse
	{
		
		/// <summary>
		/// Access token for API.
		/// Required
		/// Min length: 700
		/// Max length: 2000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		[System.ComponentModel.DataAnnotations.MinLength(700)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("AccessTokenResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "AccessTokenResponse";
		
		/// <summary>
		/// Unique Id for the access token.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string TokenId { get; set; }
		
		/// <summary>
		/// Token type.
		/// Required
		/// Min length: 6
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string TokenType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdditionalLevels
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="level1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Level1 { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="level2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Level2 { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="level3")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Level3 { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="level4")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Level4 { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 16
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("AdditionalLevels")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(16)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "AdditionalLevels";
	}
	
	/// <summary>
	/// Address object Data Schema
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// City
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string City { get; set; }
		
		/// <summary>
		/// ISO 3166-1 alpha-3 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements). Code of the country if country name is present.
		/// Required
		/// Min length: 2
		/// Max length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Country Name if present else default value.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DefaultValue("UNKNOWN")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string CountryName { get; set; } = "UNKNOWN";
		
		/// <summary>
		/// Date at which this record is created in UniCourt.
		/// Required
		/// Min length: 25
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Boolean indicating if the address is visible or not.
		/// Required
		/// Min length: 4
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Date at which this record was updated in UniCourt.
		/// Required
		/// Min length: 25
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Coordinates at geographic coordinate system.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// Minimum: -90
		/// Maximum: 90
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.Range(-90, 90)]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Coordinates at geographic coordinate system.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 7
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DefaultValue("Address")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Object { get; set; } = "Address";
		
		/// <summary>
		/// State Code if the state is a US state else contains null.
		/// Required
		/// Min length: 2
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string StateCode { get; set; }
		
		/// <summary>
		/// State Name if present else default value.
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DefaultValue("UNKNOWN")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string StateName { get; set; } = "UNKNOWN";
		
		/// <summary>
		/// 1st part of the street address.
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streetAddress1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string StreetAddress1 { get; set; }
		
		/// <summary>
		/// 2nd part of the street address.
		/// Required
		/// Min length: 1
		/// Max length: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streetAddress2")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string StreetAddress2 { get; set; }
		
		/// <summary>
		/// Zip code of the address.
		/// Required
		/// Min length: 1
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Zip { get; set; }
		
		/// <summary>
		/// 4 digit extension of the zip code if the address is a US address.
		/// Required
		/// Min length: 4
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zip4")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Zip4 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AreaOfLaw
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="areaOfLawId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AreaOfLawId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClass")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseClass { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseClassId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("AreaOfLaw")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "AreaOfLaw";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AreaOfLawResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="areaOfLawArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public AreaOfLaw[] AreaOfLawArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2140
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2140)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("AreaOfLawResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "AreaOfLawResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2139
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2139)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormAttorney
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to related cases for this association.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTimeline")]
		public CaseTimeline CaseTimeline { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Link to details for the Attorney.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormAttorneyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("AssociatedNormAttorney")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "AssociatedNormAttorney";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateBarDataArray")]
		public BarRecordPreview[] StateBarDataArray { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTimeline
	{
		
		/// <summary>
		/// The first date when the two entities have appeared together in the case. (These dates are determined from case filed dates)
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstCaseFiledDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstCaseFiledDate { get; set; }
		
		/// <summary>
		/// The last date when the two entities have appeared together in the case. (These dates are determined from case filed dates)
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastCaseFiledDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastCaseFiledDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseTimeline")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "CaseTimeline";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BarRecordPreview
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string BarNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barSourceType")]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string BarSourceType { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("BarRecordPreview")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "BarRecordPreview";
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string StateCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormAttorneyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormAttorneyArray")]
		public AssociatedNormAttorney[] AssociatedNormAttorneyArray { get; set; }
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Previous page of results if applicable.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total no. of results for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// Associated Judge
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormJudge
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to related cases for this association.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTimeline")]
		public CaseTimeline CaseTimeline { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Link to Details from the Judge.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormJudgeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormJudgeId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("AssociatedNormJudge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "AssociatedNormJudge";
		
		/// <summary>
		/// Required
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormJudgeResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormJudgeArray")]
		public AssociatedNormJudge[] AssociatedNormJudgeArray { get; set; }
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Previous page of results if applicable.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total no. of results for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormLawFirm
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to related cases for this association.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTimeline")]
		public CaseTimeline CaseTimeline { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Link to Details for this Law Firm.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormLawFirmId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("AssociatedNormLawFirm")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "AssociatedNormLawFirm";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sosDataArray")]
		public SOSDataPreview[] SosDataArray { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SOSDataPreview
	{
		
		/// <summary>
		/// Required
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DefaultValue("SOSDataPreview")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Object { get; set; } = "SOSDataPreview";
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sosNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SosNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string StateCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormLawFirmResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormLawFirmArray")]
		public AssociatedNormLawFirm[] AssociatedNormLawFirmArray { get; set; }
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total no. of results for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormParty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to related cases for this association.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTimeline")]
		public CaseTimeline CaseTimeline { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Link to Details for the Party.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormPartyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormPartyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("AssociatedNormParty")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "AssociatedNormParty";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sosDataArray")]
		public SOSDataPreview[] SosDataArray { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedNormPartyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormPartyArray")]
		public AssociatedNormParty[] AssociatedNormPartyArray { get; set; }
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total no. of results for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssociatedSoSPerson
	{
		
		/// <summary>
		/// Contact object data schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string EntityName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AssociatedSoSPersonEntityType EntityType { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("AssociatedSoSPerson")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "AssociatedSoSPerson";
	}
	
	/// <summary>
	/// Contact object data schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Contact
	{
		
		/// <summary>
		/// List of available addresses.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressArray")]
		public Address[] AddressArray { get; set; }
		
		/// <summary>
		/// List of available emails.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailArray")]
		public Email[] EmailArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 7
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DefaultValue("Contact")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Object { get; set; } = "Contact";
		
		/// <summary>
		/// List of available phone numbers.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumberArray")]
		public Phone[] PhoneNumberArray { get; set; }
	}
	
	/// <summary>
	/// Email object data schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Email
	{
		
		/// <summary>
		/// email id
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="emailId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string EmailId { get; set; }
		
		/// <summary>
		/// Date at which this record is created in UniCourt.
		/// Required
		/// Min length: 25
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Boolean indicating if the email is visible or not.
		/// Required
		/// Min length: 4
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Date at which this record was updated in UniCourt.
		/// Required
		/// Min length: 25
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 5
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DefaultValue("Email")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string Object { get; set; } = "Email";
	}
	
	/// <summary>
	/// Phone object data schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Phone
	{
		
		/// <summary>
		/// Date at which this record is created in UniCourt.
		/// Required
		/// Min length: 25
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Boolean indicating if the phone is visible or not.
		/// Required
		/// Min length: 4
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Date at which this record was updated in UniCourt.
		/// Required
		/// Min length: 25
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 5
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DefaultValue("Phone")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string Object { get; set; } = "Phone";
		
		/// <summary>
		/// Phone Number
		/// Required
		/// Min length: 1
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Resolved phone type (ideally from master data).
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PhonePhoneType PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhonePhoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFICE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssociatedSoSPersonEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partner = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Agent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Partner/General Member")]
		Partner_General_Member = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Partner/GeneralMember")]
		Partner_GeneralMember = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attorney
	{
		
		/// <summary>
		/// ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AttorneyId { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyLawFirmArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public AttorneyLawFirm[] AttorneyLawFirmArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyType")]
		public AttorneyType AttorneyType { get; set; }
		
		/// <summary>
		/// The bar enrollment number of an attorney.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string BarNumber { get; set; }
		
		/// <summary>
		/// Contact object data schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// When was the attorney first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// First name of the attorney. This is normalized by UniCourt.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Signifies if the attorney as this attorney type is currently isVisible or not for the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// When was the attorney last fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Last name of the attorney. This is normalized by UniCourt.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Middle name of the attorney. This is normalized by UniCourt.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Name of the attorney as provided by Court.
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="namePrefix")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string NamePrefix { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameSuffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string NameSuffix { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DefaultValue("Attorney")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Object { get; set; } = "Attorney";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyAttorneyAssociations")]
		public PartyAttorneyAssociations PartyAttorneyAssociations { get; set; }
		
		/// <summary>
		/// Party Role Group Id for a Attorney.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleGroupIdArray")]
		public string[] PartyRoleGroupIdArray { get; set; }
		
		/// <summary>
		/// Party Role Id for a Attorney.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleIdArray")]
		public string[] PartyRoleIdArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="possibleNormAttorneyArray")]
		public PossibleNormAttorney[] PossibleNormAttorneyArray { get; set; }
		
		/// <summary>
		/// Possible Norm Lawfirm array for a Attorney.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="possibleNormLawFirmArray")]
		public PossibleNormLawFirm[] PossibleNormLawFirmArray { get; set; }
		
		/// <summary>
		/// Attorney Type as provided by Court.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAttorneyType")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceAttorneyType { get; set; }
	}
	
	/// <summary>
	/// Name of the attorney's law firm as provided by Court. This can be null as some Courts do not provide this as a separate field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttorneyLawFirm
	{
		
		/// <summary>
		/// ID for the law firm of an attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		/// Required
		/// Min length: 17
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyLawFirmId")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AttorneyLawFirmId { get; set; }
		
		/// <summary>
		/// Is the date when the document was first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string FirstFetchDate { get; set; }
		
		/// <summary>
		/// Signifies if the attorney as this attorney type is currently isVisible or not for the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Is the date when the document was last fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string LastFetchDate { get; set; }
		
		/// <summary>
		/// Name of the law firm as provided by Court.
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 15
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DefaultValue("AttorneyLawFirm")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Object { get; set; } = "AttorneyLawFirm";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttorneyType
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AttorneyTypeId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("AttorneyType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "AttorneyType";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartyAttorneyAssociations
	{
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DefaultValue("PartyAttorneyAssociations")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Object { get; set; } = "PartyAttorneyAssociations";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyAttorneyAssociationArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PartyAttorneyAssociation[] PartyAttorneyAssociationArray { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartyAttorneyAssociation
	{
		
		/// <summary>
		/// ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AttorneyId { get; set; }
		
		/// <summary>
		/// Signifies if this party attorney relationship is currently isVisible or not for the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 24
		/// Max length: 24
		/// </summary>
		[System.ComponentModel.DefaultValue("PartyAttorneyAssociation")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		public string Object { get; set; } = "PartyAttorneyAssociation";
		
		/// <summary>
		/// ID of the association
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyAttorneyAssociationId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string PartyAttorneyAssociationId { get; set; }
		
		/// <summary>
		/// ID for the party in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string PartyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PossibleNormAttorney
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormJudgesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormJudgesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormLawFirmsAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormLawFirmsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormPartiesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormPartiesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bestMatch")]
		public bool BestMatch { get; set; } = false;
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByNormAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByNormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confidenceScore")]
		public float ConfidenceScore { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormAttorneyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormAttorneyName { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DefaultValue("PossibleNormAttorney")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Object { get; set; } = "PossibleNormAttorney";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scoreConstituents")]
		public PossibleNormAttorneyScoreConstituents ScoreConstituents { get; set; }
	}
	
	public class PossibleNormAttorneyScoreConstituents
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barId")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress BarId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Email { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lawFirm")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress LawFirm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameSimilarityScore")]
		public float NameSimilarityScore { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otherPotentialNormAttorneys")]
		public int OtherPotentialNormAttorneys { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PossibleNormAttorneyScoreConstituentsAddress
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Matched = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mismatched = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Not_Provided_By_Data_Source = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PossibleNormLawFirm
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormJudgeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormJudgeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormPartiesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormPartiesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bestMatch")]
		public bool BestMatch { get; set; } = false;
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByNormLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByNormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confidenceScore")]
		public float ConfidenceScore { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormLawFirmId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormLawFirmName { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("PossibleNormLawFirm")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "PossibleNormLawFirm";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scoreConstituents")]
		public PossibleNormLawFirmScoreConstituents ScoreConstituents { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceDetails")]
		public PossibleNormLawFirmSourceDetails SourceDetails { get; set; }
	}
	
	public class PossibleNormLawFirmScoreConstituents
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameSimilarityScore")]
		public float NameSimilarityScore { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otherPotentialNormLawFirms")]
		public int OtherPotentialNormLawFirms { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Phone { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretaryOfStateId")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress SecretaryOfStateId { get; set; }
	}
	
	public class PossibleNormLawFirmSourceDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkedNormAttorneyIdArray")]
		public string[] LinkedNormAttorneyIdArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public System.Nullable<PossibleNormLawFirmSourceDetailsSource> Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PossibleNormLawFirmSourceDetailsSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Case_Attorney_Linked_In_Other_Cases = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Case_Attorney_Field_Contains_Law_Firm = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttorneyAnalyticsAPI
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormJudgesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormJudgesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormLawFirmsAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormLawFirmsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormPartiesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormPartiesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormPartyAPI { get; set; }
		
		/// <summary>
		/// Link to Details for the Attorney.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DefaultValue("AttorneyAnalyticsAPI")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Object { get; set; } = "AttorneyAnalyticsAPI";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttorneyRepresentationType
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyRepresentationTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AttorneyRepresentationTypeId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 26
		/// Max length: 26
		/// </summary>
		[System.ComponentModel.DefaultValue("AttorneyRepresentationType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(26)]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Object { get; set; } = "AttorneyRepresentationType";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttorneyRepresentationTypeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyRepresentationTypeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public AttorneyRepresentationType[] AttorneyRepresentationTypeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2159
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2159)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 34
		/// Max length: 34
		/// </summary>
		[System.ComponentModel.DefaultValue("AttorneyRepresentationTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Object { get; set; } = "AttorneyRepresentationTypeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2158
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2158)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttorneyTypeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyTypeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public AttorneyType[] AttorneyTypeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2145
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2145)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DefaultValue("AttorneyTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Object { get; set; } = "AttorneyTypeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2144
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2144)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attorneys
	{
		
		/// <summary>
		/// Required
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public Attorney[] AttorneyArray { get; set; }
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("Attorneys")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "Attorneys";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// This contains the Attorney details that is obtained from the State Bar where the attorney is registered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BarRecord
	{
		
		/// <summary>
		/// The admittedDate is the date when an attorney was admitted to the bar of a given state.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="admittedDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> AdmittedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string BarNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barSourceData")]
		public BarSourceData BarSourceData { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 70
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barSourceType")]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string BarSourceType { get; set; }
		
		/// <summary>
		/// Contact object data schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inactivationDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> InactivationDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Last Fetch Date of the Attorney Update.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDateWithUpdates")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDateWithUpdates { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("BarRecord")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "BarRecord";
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string StateCode { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public BarRecordStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BarSourceData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="administrativeActionsArray")]
		public BarSourceDataAdministrativeActionsArray[] BarSourceDataAdministrativeActionsArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="admissionType")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string AdmissionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="advancedDegreeArray")]
		public BarSourceDataAdvancedDegreeArray[] BarSourceDataAdvancedDegreeArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appellateCourtDistrict")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string AppellateCourtDistrict { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appellateDivisionDepartment")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string AppellateDivisionDepartment { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyGroup")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string AttorneyGroup { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authorized")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Authorized { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barLawFirm")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string BarLawFirm { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barServiceClass")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string BarServiceClass { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barStatusArray")]
		public BarSourceDataBarStatusArray[] BarSourceDataBarStatusArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 5000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bio")]
		[System.ComponentModel.DataAnnotations.MaxLength(5000)]
		public string Bio { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="boardCertificationsArray")]
		public BarSourceDataBoardCertificationsArray[] BarSourceDataBoardCertificationsArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="boardDistrict")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string BoardDistrict { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="circuit")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Circuit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientsRepresentedArray")]
		public string[] ClientsRepresentedArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Comments { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committeesArray")]
		public BarSourceDataCommitteesArray[] BarSourceDataCommitteesArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtHistoryArray")]
		public BarSourceDataCourtHistoryArray[] BarSourceDataCourtHistoryArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtOfAdmissions")]
		public BarSourceDataCourtOfAdmissions CourtOfAdmissions { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceEmail")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CourtServiceEmail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disciplinaryHistoryArray")]
		public BarSourceDataDisciplinaryHistoryArray[] BarSourceDataDisciplinaryHistoryArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disciplineSummariesArray")]
		public BarSourceDataDisciplineSummariesArray[] BarSourceDataDisciplineSummariesArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dismissalsArray")]
		public string[] DismissalsArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="district")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string District { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="employmentHistoryArray")]
		public BarSourceDataEmploymentHistoryArray[] BarSourceDataEmploymentHistoryArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="feesOptionsArray")]
		public BarSourceDataFeesOptionsArray[] BarSourceDataFeesOptionsArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firmSize")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string FirmSize { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firmWebsite")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string FirmWebsite { get; set; }
		
		/// <summary>
		/// The firstAdmittedDate is the date when an attorney was admitted to the bar for the very first time regardless of which U.S state.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstAdmittedDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> FirstAdmittedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstAdmittedYear")]
		public System.Nullable<System.Int32> FirstAdmittedYear { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="homeCounty")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string HomeCounty { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inGoodStanding")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string InGoodStanding { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="insurance")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Insurance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="involvementsArray")]
		public BarSourceDataInvolvementsArray[] BarSourceDataInvolvementsArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judicialDistrict")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string JudicialDistrict { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jurisType")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string JurisType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="languagesArray")]
		public string[] LanguagesArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastRenewalDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastRenewalDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lawSchoolArray")]
		public BarSourceDataLawSchoolArray[] BarSourceDataLawSchoolArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="legalSpecialityArray")]
		public string[] LegalSpecialityArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string LicenseType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public BarSourceDataName Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextRegistration")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> NextRegistration { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextRenewalDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> NextRenewalDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("BarSourceData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "BarSourceData";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="openActionStatusArray")]
		public BarSourceDataOpenActionStatusArray[] BarSourceDataOpenActionStatusArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otherJurisdictionArray")]
		public BarSourceDataOtherJurisdictionArray[] BarSourceDataOtherJurisdictionArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otherNameArray")]
		public string[] OtherNameArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parish")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Parish { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pendingProceedingArray")]
		public string[] PendingProceedingArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Position { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="practiceAreaArray")]
		public string[] PracticeAreaArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="practiceLocationArray")]
		public string[] PracticeLocationArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="privateLawPractice")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string PrivateLawPractice { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileLastCertified")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ProfileLastCertified { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicHearingArray")]
		public BarSourceDataPublicHearingArray[] BarSourceDataPublicHearingArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonForInactivation")]
		public BarSourceDataReasonForInactivation ReasonForInactivation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedCasesArray")]
		public BarSourceDataRelatedCasesArray[] BarSourceDataRelatedCasesArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectionsArray")]
		public string[] SectionsArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="servicesArray")]
		public string[] ServicesArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceInfo")]
		public BarSourceDataSourceInfo SourceInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statewideGrievanceCommitteeHistoryArray")]
		public BarSourceDataStatewideGrievanceCommitteeHistoryArray[] BarSourceDataStatewideGrievanceCommitteeHistoryArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> StatusDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusHint")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string StatusHint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusHistoryArray")]
		public BarSourceDataStatusHistoryArray[] BarSourceDataStatusHistoryArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenYearDisciplineArray")]
		public BarSourceDataTenYearDisciplineArray[] BarSourceDataTenYearDisciplineArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="undergraduateSchool")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string UndergraduateSchool { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yearsOfPractice")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string YearsOfPractice { get; set; }
	}
	
	public class BarSourceDataAdministrativeActionsArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resultingStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string ResultingStatus { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Type { get; set; }
	}
	
	public class BarSourceDataAdvancedDegreeArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="area")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Area { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="degree")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Degree { get; set; }
	}
	
	public class BarSourceDataBarStatusArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Date { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Status { get; set; }
	}
	
	public class BarSourceDataBoardCertificationsArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="area")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Area { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Year { get; set; }
	}
	
	public class BarSourceDataCommitteesArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="committee")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Committee { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="office")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Office { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="term")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Term { get; set; }
	}
	
	public class BarSourceDataCourtHistoryArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Action { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 2000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionComments")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string ActionComments { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reinstatedDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ReinstatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	public class BarSourceDataCourtOfAdmissions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtStateArray")]
		public string[] CourtStateArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="federalArray")]
		public string[] FederalArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otherCourtsArray")]
		public string[] OtherCourtsArray { get; set; }
	}
	
	public class BarSourceDataDisciplinaryHistoryArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Action { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="complaint")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Complaint { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contactId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string ContactId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateOfAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> DateOfAction { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Definition { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="disciplinaryDecision")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string DisciplinaryDecision { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entryDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="information")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Information { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="probationDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ProbationDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reinstatedDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ReinstatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Rule { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string RuleNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectionDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> SectionDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stayDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> StayDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supremeCourt")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SupremeCourt { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="term")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Term { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeOfAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string TypeOfAction { get; set; }
	}
	
	public class BarSourceDataDisciplineSummariesArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Link { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Title { get; set; }
	}
	
	public class BarSourceDataEmploymentHistoryArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="employer")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Employer { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	public class BarSourceDataFeesOptionsArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contingencyFees")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string ContingencyFees { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flatFees")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string FlatFees { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hourlyRate")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string HourlyRate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentPlans")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string PaymentPlans { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slidingScaleFees")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SlidingScaleFees { get; set; }
	}
	
	public class BarSourceDataInvolvementsArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Position { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Type { get; set; }
	}
	
	public class BarSourceDataLawSchoolArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lawSchool")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string LawSchool { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lawSchoolGraduatedDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LawSchoolGraduatedDate { get; set; }
	}
	
	public class BarSourceDataName
	{
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Suffix { get; set; }
	}
	
	public class BarSourceDataOpenActionStatusArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Reason { get; set; }
	}
	
	public class BarSourceDataOtherJurisdictionArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string BarNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string State { get; set; }
	}
	
	public class BarSourceDataPublicHearingArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conduct")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Conduct { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuedBy")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string IssuedBy { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Order { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="respondent")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Respondent { get; set; }
	}
	
	public class BarSourceDataReasonForInactivation
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Link { get; set; }
	}
	
	public class BarSourceDataRelatedCasesArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDetails")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseDetails { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseId { get; set; }
	}
	
	public class BarSourceDataSourceInfo
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Url { get; set; }
	}
	
	public class BarSourceDataStatewideGrievanceCommitteeHistoryArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="finalDecision")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string FinalDecision { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="finalDecisionDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> FinalDecisionDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="grievanceComplaintNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string GrievanceComplaintNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publicComments")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string PublicComments { get; set; }
	}
	
	public class BarSourceDataStatusHistoryArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusChange")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string StatusChange { get; set; }
	}
	
	public class BarSourceDataTenYearDisciplineArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ActionDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reference")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Reference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BarRecordStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Not Classified")]
		Not_Classified = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingCycleUsageResponse
	{
		
		/// <summary>
		/// Total number of API calls billed for the billing cycle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiCallsBillable")]
		public BillingCycleUsageResponseApiCallsBillable ApiCallsBillable { get; set; }
		
		/// <summary>
		/// Total number of callbackFailures including caseUpdate, caseDocumentOrder and caseExport for the billing cycle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiCallsCredited")]
		public BillingCycleUsageResponseApiCallsCredited ApiCallsCredited { get; set; }
		
		/// <summary>
		/// Total API calls made for the billing cycle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiCallsMade")]
		public BillingCycleUsageResponseApiCallsMade ApiCallsMade { get; set; }
		
		/// <summary>
		/// Billing cycle apiUsage.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiUsage")]
		public string ApiUsage { get; set; }
		
		/// <summary>
		/// StartDate and endDate of the billing cycle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingCycle")]
		public BillingCycleUsageResponseBillingCycle BillingCycle { get; set; }
		
		/// <summary>
		/// Billing cycle days.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days")]
		public string Days { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DefaultValue("BillingCycleUsageResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Object { get; set; } = "BillingCycleUsageResponse";
		
		/// <summary>
		/// Total number of successful case tracks.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCasesTracked")]
		public int TotalCasesTracked { get; set; }
	}
	
	public class BillingCycleUsageResponseApiCallsBillable
	{
		
		/// <summary>
		/// Total API calls billed  for the billing cycle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Last Updated date and time for the field apiCallsBillable
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
	}
	
	public class BillingCycleUsageResponseApiCallsCredited
	{
		
		/// <summary>
		/// Total API calls credited back for the billing cycle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Last Updated date and time for the field apiCallsCredited
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
	}
	
	public class BillingCycleUsageResponseApiCallsMade
	{
		
		/// <summary>
		/// Total API calls made for the billing cycle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Last Updated date and time for the field apiCallsMade
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
	}
	
	public class BillingCycleUsageResponseBillingCycle
	{
		
		/// <summary>
		/// End date of the billing cycle.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset EndDate { get; set; }
		
		/// <summary>
		/// Start date of the billing cycle.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BillingCyclesResponse
	{
		
		/// <summary>
		/// Array of previous 12 Billing Cycles.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billingCycleArray")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string[] BillingCycleArray { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("BillingCyclesResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "BillingCyclesResponse";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CallbackListResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentOrderCallbacks")]
		public CallbackListResponseCaseDocumentOrderCallbacks CaseDocumentOrderCallbacks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseExportCallbacks")]
		public CallbackListResponseCaseExportCallbacks CaseExportCallbacks { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DefaultValue("CallbackListResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Object { get; set; } = "CallbackListResponse";
	}
	
	public class CallbackListResponseCaseDocumentOrderCallbacks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Link { get; set; }
	}
	
	public class CallbackListResponseCaseExportCallbacks
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Case
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneys")]
		public Attorneys Attorneys { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocuments")]
		public CaseDocuments CaseDocuments { get; set; }
		
		/// <summary>
		/// Unique identifier of Case.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// Case name as provided by Court.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseName")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseName { get; set; }
		
		/// <summary>
		/// Case number as provided by Court.
		/// Required
		/// Min length: 3
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string CaseNumber { get; set; }
		
		/// <summary>
		/// Count of each entitiy of a case is mentioned here so that you can calculate the number of requests needs to be done to obtain each entity results completely.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStats")]
		public CaseStats CaseStats { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatus")]
		public CaseStatus CaseStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseType")]
		public CaseType CaseType { get; set; }
		
		/// <summary>
		/// Array of cause of Actions that are added to this case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionArray")]
		public CaseCauseOfAction[] CauseOfActionArray { get; set; }
		
		/// <summary>
		/// Array of charges that are added to this case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeArray")]
		public CaseCharge[] ChargeArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="court")]
		public Court Court { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtLocation")]
		public CourtLocation CourtLocation { get; set; }
		
		/// <summary>
		/// API to get the service statuses of the given case.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceStatusAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CourtServiceStatusAPI { get; set; }
		
		/// <summary>
		/// Court Service Status ID of the requested case where we can use it to get the service status
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceStatusId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtServiceStatusId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketEntries")]
		public DocketEntries DocketEntries { get; set; }
		
		/// <summary>
		/// When a case is beyond the threshold of entities we provide this link so that the user can request and get all the data of the case with one additional call. This data will be zipped and sent via a webhoook.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exportAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ExportAPI { get; set; }
		
		/// <summary>
		/// Filing date for the case provided by the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filedDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FiledDate { get; set; }
		
		/// <summary>
		/// The date and time when the case was first fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// This field will be set to TRUE if atleast one document has a preview.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasDocumentsWithPreview")]
		public bool HasDocumentsWithPreview { get; set; }
		
		/// <summary>
		/// This field determines if this case object has only meta information. If the value is true and if the full information is required you would need to call the updateCase API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasOnlyMetaInfo")]
		public bool HasOnlyMetaInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hearings")]
		public Hearings Hearings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judges")]
		public Judges Judges { get; set; }
		
		/// <summary>
		/// The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDateWithUpdates")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDateWithUpdates { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 4
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DefaultValue("Case")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Object { get; set; } = "Case";
		
		/// <summary>
		/// The date and time when parties/attorneys were last updated from the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: This is currently applicable for Federal PACER cases since we have an option to exclude parties and fetch only latest docket entries when updating cases to save PACER fees.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="participantsLastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ParticipantsLastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parties")]
		public Parties Parties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedCases")]
		public RelatedCases RelatedCases { get; set; }
		
		/// <summary>
		/// Source data in the court website.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCaseData")]
		public SourceCaseData SourceCaseData { get; set; }
		
		/// <summary>
		/// The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceDataStatus")]
		public System.Nullable<CaseSourceDataStatus> SourceDataStatus { get; set; }
		
		/// <summary>
		/// URL to the case page in UniCourt Application.
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseDocuments
	{
		
		/// <summary>
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseDocument[] CaseDocumentArray { get; set; }
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseDocuments")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "CaseDocuments";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseDocument
	{
		
		/// <summary>
		/// Date and time when the document was downloaded and added to the UniCourt Crowd Source Library.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addedToLibraryDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string AddedToLibraryDate { get; set; }
		
		/// <summary>
		/// UniCourt's Case Document ID.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseDocumentId { get; set; }
		
		/// <summary>
		/// List of child document ID's if exists or else it will be an empty lsit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childDocumentIdArray")]
		public string[] ChildDocumentIdArray { get; set; }
		
		/// <summary>
		/// Description of the document.
		/// Required
		/// Max length: 100000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(100000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Document Date when it was filed. The document date will be either explicitly provided byt the court or if the document is associatated to a docket entry then the document date will be of docket entry date.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="documentFiledDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string DocumentFiledDate { get; set; }
		
		/// <summary>
		/// Link to either view the document if it is downloaded and already present in the UniCourt CrowdSourced Library.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="downloadAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DownloadAPI { get; set; }
		
		/// <summary>
		/// Estimated duration of a Order.
		/// Required
		/// Min length: 10
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DefaultValue(CaseDocumentEstimatedOrderDuration.estimateUnavailable)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="estimatedOrderDuration")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public CaseDocumentEstimatedOrderDuration EstimatedOrderDuration { get; set; } = CaseDocumentEstimatedOrderDuration.estimateUnavailable;
		
		/// <summary>
		/// Is the date when the document was first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string FirstFetchDate { get; set; }
		
		/// <summary>
		/// Determines if the document is present in the UniCourt Library or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inLibrary")]
		public bool InLibrary { get; set; }
		
		/// <summary>
		/// Determines if a preview is available for the case document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isPreviewAvailable")]
		public bool IsPreviewAvailable { get; set; }
		
		/// <summary>
		/// Document name.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseDocument")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "CaseDocument";
		
		/// <summary>
		/// Total number of pages in the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Int32> Pages { get; set; }
		
		/// <summary>
		/// Document ID which is the parent document for the current document. This will be null if the current document is a parent document.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentDocumentId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string ParentDocumentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previewDocument")]
		public PreviewDocument PreviewDocument { get; set; }
		
		/// <summary>
		/// Price of the document.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// Order of documents how it is being stored in UniCourt.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceDataStatus")]
		public System.Nullable<CaseDocumentSourceDataStatus> SourceDataStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseDocumentEstimatedOrderDuration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		estimateUnavailable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		withinMinutes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		withinHours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		withinDays = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		withinWeeks = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PreviewDocument
	{
		
		/// <summary>
		/// Date and time when the preview document was downloaded and added to the UniCourt CrowdSourced Library.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addedToLibraryDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string AddedToLibraryDate { get; set; }
		
		/// <summary>
		/// Link to get the file url for the preview document which is already present in the UniCourt CrowdSourced Library.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="downloadAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DownloadAPI { get; set; }
		
		/// <summary>
		/// Determines if the preview document is present in the UniCourt Library or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inLibrary")]
		public bool InLibrary { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 15
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DefaultValue("PreviewDocument")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Object { get; set; } = "PreviewDocument";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseDocumentSourceDataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LONGER_AVAILABLE_IN_COURT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEALED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 3,
	}
	
	/// <summary>
	/// Count of each entitiy of a case is mentioned here so that you can calculate the number of requests needs to be done to obtain each entity results completely.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseStats
	{
		
		/// <summary>
		/// Count which includes the freeCaseDocumentCount and paidCaseDocumentCount.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allCaseDocumentCount")]
		public int AllCaseDocumentCount { get; set; }
		
		/// <summary>
		/// Count of number of attornies available in the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyCount")]
		public int AttorneyCount { get; set; }
		
		/// <summary>
		/// Count of number of documents that are available in the UniCourt CrowdSourced Library for the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentInLibraryCount")]
		public int CaseDocumentInLibraryCount { get; set; }
		
		/// <summary>
		/// Count of number of docket entries available in the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketEntryCount")]
		public int DocketEntryCount { get; set; }
		
		/// <summary>
		/// Count of number of free documents available in the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeCaseDocumentCount")]
		public int FreeCaseDocumentCount { get; set; }
		
		/// <summary>
		/// Count of number of hearings available in the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hearingCount")]
		public int HearingCount { get; set; }
		
		/// <summary>
		/// Count of number of judges available in the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judgeCount")]
		public int JudgeCount { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseStats")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "CaseStats";
		
		/// <summary>
		/// Count of number of paid documents available in the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paidCaseDocumentCount")]
		public int PaidCaseDocumentCount { get; set; }
		
		/// <summary>
		/// Count of number of parties available in the case being requested for.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyCount")]
		public int PartyCount { get; set; }
		
		/// <summary>
		/// Count of related cases that are available in the case being requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedCaseCount")]
		public int RelatedCaseCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassArray")]
		public string[] CaseClassArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatusGroup")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseStatusGroup { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatusGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseStatusGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatusId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseStatusId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 10
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseStatus")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Object { get; set; } = "CaseStatus";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseType
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="areaOfLaw")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AreaOfLaw { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="areaOfLawId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AreaOfLawId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClass")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseClass { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseClassId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeGroup")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseTypeGroup { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseTypeGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeTag")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseTypeTag { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Object { get; set; } = "CaseType";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="saliCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SaliCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCauseOfAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfAction")]
		public CauseOfAction CauseOfAction { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionAdditionalDataArray")]
		public CauseOfActionAdditionalData[] CauseOfActionAdditionalDataArray { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCauseOfAction")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "CaseCauseOfAction";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CauseOfAction
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionGroup")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CauseOfActionGroup { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CauseOfActionGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CauseOfActionId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("CauseOfAction")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "CauseOfAction";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CauseOfActionAdditionalData
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionAdditionalDataId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CauseOfActionAdditionalDataId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 27
		/// Max length: 27
		/// </summary>
		[System.ComponentModel.DefaultValue("CauseOfActionAdditionalData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(27)]
		[System.ComponentModel.DataAnnotations.MaxLength(27)]
		public string Object { get; set; } = "CauseOfActionAdditionalData";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCharge
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="charge")]
		public Charge Charge { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeAdditionalDataArray")]
		public ChargeAdditionalData[] ChargeAdditionalDataArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeDegree")]
		public ChargeDegree ChargeDegree { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeSeverity")]
		public ChargeSeverity ChargeSeverity { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 10
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCharge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Object { get; set; } = "CaseCharge";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Charge
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeGroup")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChargeGroup { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string ChargeGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string ChargeId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 6
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DefaultValue("Charge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string Object { get; set; } = "Charge";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeAdditionalData
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeAdditionalDataId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string ChargeAdditionalDataId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeAdditionalData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Object { get; set; } = "ChargeAdditionalData";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeDegree
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeDegreeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string ChargeDegreeId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeDegree")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "ChargeDegree";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeSeverity
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeSeverityId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string ChargeSeverityId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 14
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeSeverity")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(14)]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Object { get; set; } = "ChargeSeverity";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Court
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additionalLevels")]
		public AdditionalLevels AdditionalLevels { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appealCourtsForCourtAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AppealCourtsForCourtAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="container")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Container { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="containerType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ContainerType { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtLocationsForCourtAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CourtLocationsForCourtAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceStatusAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string CourtServiceStatusAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtSystemId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtTypeId { get; set; }
		
		/// <summary>
		/// The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jurisdictionGeoForCourtAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string JurisdictionGeoForCourtAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameAka")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NameAka { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 5
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DefaultValue("Court")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string Object { get; set; } = "Court";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="system")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string System { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtLocation
	{
		
		/// <summary>
		/// City
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtLocationId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtLocationId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceStatusAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string CourtServiceStatusAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtsForCourtLocationAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CourtsForCourtLocationAPI { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtLocation")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "CourtLocation";
		
		/// <summary>
		/// State Name if present else default value.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DefaultValue("UNKNOWN")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string StateName { get; set; } = "UNKNOWN";
		
		/// <summary>
		/// 1st part of the street address.
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streetAddress1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string StreetAddress1 { get; set; }
		
		/// <summary>
		/// 2nd part of the street address.
		/// Required
		/// Max length: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="streetAddress2")]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string StreetAddress2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocketEntries
	{
		
		/// <summary>
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketEntryArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DocketEntry[] DocketEntryArray { get; set; }
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("DocketEntries")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "DocketEntries";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocketEntry
	{
		
		/// <summary>
		/// Determines if it is the first docket entry or the last docket entry. This value will be set only for the first and last docket entry. For other docket entries it will be null. However, this will be set as single_docket_entry when the Case contains only one docket entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="boundary")]
		public System.Nullable<DocketEntryBoundary> Boundary { get; set; }
		
		/// <summary>
		/// Docket Badge helps you to know what type of a docket entry it is.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketBadge")]
		public DocketEntryDocketBadge DocketBadge { get; set; }
		
		/// <summary>
		/// Docket Action Date
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketEntryDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset DocketEntryDate { get; set; }
		
		/// <summary>
		/// Primary Documents refers to documents that are directly related to a docket entry. Primary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the primary document is one which is attached to the docket number. Because in district for a primary document it can have many attachments associatated to it. PACER Appeal Courts - Here the attachments for a docket entry are the primary documents. Because in appeal for those attachments there is no primary documents.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketEntryPrimaryDocuments")]
		public DocketEntryPrimaryDocuments DocketEntryPrimaryDocuments { get; set; }
		
		/// <summary>
		/// Secondary Documents refers to documents that are attached to a docket entry. Secondary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the secondary document is one which is attached in the docket entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketEntrySecondaryDocuments")]
		public DocketEntrySecondaryDocuments DocketEntrySecondaryDocuments { get; set; }
		
		/// <summary>
		/// The respective docket entry number which is defined in the court website.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketNumber")]
		public System.Nullable<System.Int32> DocketNumber { get; set; }
		
		/// <summary>
		/// When this docket entry was last fetched from the source.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string LastFetchDate { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 11
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DefaultValue("DocketEntry")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public string Object { get; set; } = "DocketEntry";
		
		/// <summary>
		/// Other Docket Numbers that referenced for a particular docket entry.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referencedDocketNumberArray")]
		public ReferencedDocketNumber[] ReferencedDocketNumberArray { get; set; }
		
		/// <summary>
		/// Order number how the dockets have stored in UniCourt.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public int SortOrder { get; set; }
		
		/// <summary>
		/// Source Docket Entry
		/// Required
		/// Max length: 1000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000000)]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="textStructured")]
		public SourceStructuredData TextStructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocketEntryBoundary
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		first = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		last = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		single_docket_entry = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocketEntryDocketBadge
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUDGEMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINANCIAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPOSITION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENTENCE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAIL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAUSE_OF_ACTION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARREST = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARRANT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUMMON = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TICKLER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPINION = 14,
	}
	
	/// <summary>
	/// Primary Documents refers to documents that are directly related to a docket entry. Primary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the primary document is one which is attached to the docket number. Because in district for a primary document it can have many attachments associatated to it. PACER Appeal Courts - Here the attachments for a docket entry are the primary documents. Because in appeal for those attachments there is no primary documents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocketEntryPrimaryDocuments
	{
		
		/// <summary>
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseDocument[] CaseDocumentArray { get; set; }
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 27
		/// Max length: 27
		/// </summary>
		[System.ComponentModel.DefaultValue("DocketEntryPrimaryDocuments")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(27)]
		[System.ComponentModel.DataAnnotations.MaxLength(27)]
		public string Object { get; set; } = "DocketEntryPrimaryDocuments";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case. entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// Secondary Documents refers to documents that are attached to a docket entry. Secondary Documents could be specific to a courts or case type in courts. For isntance the below example is in PACER. PACER District Courts - Here the secondary document is one which is attached in the docket entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocketEntrySecondaryDocuments
	{
		
		/// <summary>
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseDocument[] CaseDocumentArray { get; set; }
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 29
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("DocketEntrySecondaryDocuments")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(29)]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "DocketEntrySecondaryDocuments";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case. entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// Object consisiting of each docket entry number and its corresponding API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReferencedDocketNumber
	{
		
		/// <summary>
		/// Link to Docket Entries API with the current docket number. The response of this API will give all the primary documents and secondary documents that are associated to it.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketEntriesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string DocketEntriesAPI { get; set; }
		
		/// <summary>
		/// Each referenced docket number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="docketNumber")]
		public int DocketNumber { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 22
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("ReferencedDocketNumber")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "ReferencedDocketNumber";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceStructuredData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="extractedFields")]
		public ExtractedFields ExtractedFields { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rawOrderedDataArray")]
		public RawOrderedData[] RawOrderedDataArray { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtractedFields
	{
		
		/// <summary>
		/// This can be an field that is extracted from rawOrderedDataArray on request of different users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RawOrderedData
	{
		
		/// <summary>
		/// Any docket text that belongs to the main docket text is added in the child.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childArray")]
		public RawOrderedDataChild[] ChildArray { get; set; }
		
		/// <summary>
		/// Label of the docket from the source.
		/// Required
		/// Max length: 100000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lbl")]
		[System.ComponentModel.DataAnnotations.MaxLength(100000)]
		public string Lbl { get; set; }
		
		/// <summary>
		/// Structure order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ord")]
		public int Ord { get; set; }
		
		/// <summary>
		/// List of available addresses.
		/// Required
		/// Max length: 1000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="val")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000000)]
		public string Val { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RawOrderedDataChild
	{
		
		/// <summary>
		/// Any docket text that belongs to the main docket text is added in the child.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childArray")]
		public RawOrderedDataChildChildArray[] RawOrderedDataChildChildArray { get; set; }
		
		/// <summary>
		/// Label of the docket from the source.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lbl")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Lbl { get; set; }
		
		/// <summary>
		/// Structure order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ord")]
		public int Ord { get; set; }
		
		/// <summary>
		/// List of available addresses.
		/// Required
		/// Max length: 100000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="val")]
		[System.ComponentModel.DataAnnotations.MaxLength(100000)]
		public string Val { get; set; }
	}
	
	public class RawOrderedDataChildChildArray
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childArray")]
		public string[] ChildArray { get; set; }
		
		/// <summary>
		/// Label of the docket from the source.
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lbl")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Lbl { get; set; }
		
		/// <summary>
		/// Structure order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ord")]
		public int Ord { get; set; }
		
		/// <summary>
		/// List of available addresses.
		/// Required
		/// Max length: 1000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="val")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000000)]
		public string Val { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hearings
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hearingArray")]
		public Hearing[] HearingArray { get; set; }
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DefaultValue("Hearings")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Object { get; set; } = "Hearings";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hearing
	{
		
		/// <summary>
		/// When this hearing was first fetched from the source.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string FirstFetchDate { get; set; }
		
		/// <summary>
		/// Hearing Date
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hearingDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset HearingDate { get; set; }
		
		/// <summary>
		/// Source Hearing Description Text
		/// Required
		/// Max length: 100000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hearingDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(100000)]
		public string HearingDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hearingStructured")]
		public SourceStructuredData HearingStructured { get; set; }
		
		/// <summary>
		/// When this hearing was last fetched from the source.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string LastFetchDate { get; set; }
		
		/// <summary>
		/// Location where the hearing will takeplace.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 7
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DefaultValue("Hearing")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Object { get; set; } = "Hearing";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Judges
	{
		
		/// <summary>
		/// Required
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judgeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public Judge[] JudgeArray { get; set; }
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 6
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DefaultValue("Judges")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string Object { get; set; } = "Judges";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Judge
	{
		
		/// <summary>
		/// Contact object data schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// When was the judge first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// First name of the judge. This is normalized by UniCourt.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Signifies if the judge as this judge type is currently isVisible or not for the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// ID for the judge in this case. This ID is unique within a case and NOT across cases. If the same Judge were to appear in another case this ID would be different.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judgeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string JudgeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judgeType")]
		public JudgeType JudgeType { get; set; }
		
		/// <summary>
		/// When was the judge last fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Last name of the judge. This is normalized by UniCourt.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Middle name of the judge. This is normalized by UniCourt.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Name of the judge as provided by Court.
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="namePrefix")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string NamePrefix { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameSuffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string NameSuffix { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 5
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DefaultValue("Judge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string Object { get; set; } = "Judge";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="possibleNormJudgeArray")]
		public PossibleNormJudge[] PossibleNormJudgeArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceJudgeType")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string SourceJudgeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JudgeType
	{
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judgeTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string JudgeTypeId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("JudgeType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "JudgeType";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PossibleNormJudge
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormAttorneysAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormAttorneysAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormLawFirmsAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormLawFirmsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormPartiesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormPartiesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bestMatch")]
		public bool BestMatch { get; set; } = false;
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByNormJudgeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseCountAnalyticsByNormJudgeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confidenceScore")]
		public System.Nullable<System.Single> ConfidenceScore { get; set; }
		
		/// <summary>
		/// Link to Details For the Judge.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormJudgeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormJudgeId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormJudgeName { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("PossibleNormJudge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "PossibleNormJudge";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scoreConstituents")]
		public PossibleNormJudgeScoreConstituents ScoreConstituents { get; set; }
	}
	
	public class PossibleNormJudgeScoreConstituents
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameSimilarityScore")]
		public float NameSimilarityScore { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otherPotentialNormJudges")]
		public int OtherPotentialNormJudges { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Parties
	{
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 7
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DefaultValue("Parties")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Object { get; set; } = "Parties";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public Party[] PartyArray { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Party
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyRepresentationType")]
		public AttorneyRepresentationType AttorneyRepresentationType { get; set; }
		
		/// <summary>
		/// Contact object data schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// When was the party first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// First name of the party. This is normalized by UniCourt.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Signifies if the party as this party type is currently isVisible or not for the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// When was the party last fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Last name of the party. This is normalized by UniCourt.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Middle name of the party. This is normalized by UniCourt.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Name of the party as provided by Court.
		/// Required
		/// Min length: 1
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="namePrefix")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string NamePrefix { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameSuffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string NameSuffix { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 5
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DefaultValue("Party")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string Object { get; set; } = "Party";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyAttorneyAssociations")]
		public PartyAttorneyAssociations PartyAttorneyAssociations { get; set; }
		
		/// <summary>
		/// To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyClassificationType")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PartyPartyClassificationType PartyClassificationType { get; set; }
		
		/// <summary>
		/// ID for the party in this case. This ID is unique within a case and NOT across cases. If the same party were to appear in another case this ID would be different.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string PartyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRole")]
		public PartyRole PartyRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="possibleNormPartyArray")]
		public PossibleNormParty[] PossibleNormPartyArray { get; set; }
		
		/// <summary>
		/// Party Type as provided by Court.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourcePartyRole")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string SourcePartyRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartyPartyClassificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDIVIDUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartyRole
	{
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("PartyRole")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "PartyRole";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleGroup")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartyRoleGroup { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string PartyRoleGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string PartyRoleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PossibleNormParty
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormAttorneysAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormAttorneysAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormJudgesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormJudgesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormLawFirmsAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormLawFirmsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(false)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bestMatch")]
		public bool BestMatch { get; set; } = false;
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByNormPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByNormPartyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormPartyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confidenceScore")]
		public float ConfidenceScore { get; set; }
		
		/// <summary>
		/// Link to Details For the Party.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormPartyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormPartyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormPartyName { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("PossibleNormParty")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "PossibleNormParty";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scoreConstituents")]
		public PossibleNormPartyScoreConstituents ScoreConstituents { get; set; }
	}
	
	public class PossibleNormPartyScoreConstituents
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameSimilarityScore")]
		public float NameSimilarityScore { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otherPotentialNormParties")]
		public int OtherPotentialNormParties { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress Phone { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretaryOfStateId")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public PossibleNormAttorneyScoreConstituentsAddress SecretaryOfStateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelatedCases
	{
		
		/// <summary>
		/// Link to next page of a particular entity in a Case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("RelatedCases")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "RelatedCases";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedCaseArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RelatedCase[] RelatedCaseArray { get; set; }
		
		/// <summary>
		/// Total number of parties of the Case entity in a Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects of a party in the Case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelatedCase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additionalSourceData")]
		public SourceStructuredData AdditionalSourceData { get; set; }
		
		/// <summary>
		/// Link to the Case API of the current related case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseAPI { get; set; }
		
		/// <summary>
		/// Case ID of the related Case. This can be null if this case in not found in our database. However the meta information of the related case will be present.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// Case Name of the related Case.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseName")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseName { get; set; }
		
		/// <summary>
		/// Case Number of the related Case.
		/// Required
		/// Min length: 3
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string CaseNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseRelationshipType")]
		public CaseRelationshipType CaseRelationshipType { get; set; }
		
		/// <summary>
		/// This specifies if the related cases is still related to the parent case or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 11
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DefaultValue("RelatedCase")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public string Object { get; set; } = "RelatedCase";
		
		/// <summary>
		/// Case Relationship Type provided by court.
		/// Required
		/// Min length: 3
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCaseRelationshipType")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceCaseRelationshipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseRelationshipType
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseRelationshipTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseRelationshipTypeId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseRelationshipType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Object { get; set; } = "CaseRelationshipType";
	}
	
	/// <summary>
	/// Source data in the court website.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceCaseData
	{
		
		/// <summary>
		/// Array of Charges for a case which is provided by the Court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="natureOfSuitArray")]
		public NatureOfSuit[] NatureOfSuitArray { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 14
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DefaultValue("SourceCaseData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(14)]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Object { get; set; } = "SourceCaseData";
		
		/// <summary>
		/// Case Status as provided by Court.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCaseStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceCaseStatus { get; set; }
		
		/// <summary>
		/// Case Type for a case which is provided by the Court.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCaseType")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceCaseType { get; set; }
		
		/// <summary>
		/// Array of Cause Of Action for a case which is provided by the Court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCauseOfActionArray")]
		public SourceCauseOfAction[] SourceCauseOfActionArray { get; set; }
		
		/// <summary>
		/// Array of Charges for a case which is provided by the Court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceChargeArray")]
		public SourceCharge[] SourceChargeArray { get; set; }
		
		/// <summary>
		/// Courtrhouse as provided by Court.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCourt")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceCourt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourcePageData")]
		public SourcePageData[] SourcePageData { get; set; }
	}
	
	/// <summary>
	/// Nature Of Suit for a case.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NatureOfSuit
	{
		
		/// <summary>
		/// Nos Code from the source site which is extracted from the sourceText.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Code Name from the source site which is extracted from the sourceText.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("NatureOfSuit")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "NatureOfSuit";
		
		/// <summary>
		/// Section of a nos code extracted from the sourceText.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="section")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Section { get; set; }
		
		/// <summary>
		/// Source nos code data from the court site.
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceText")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string SourceText { get; set; }
	}
	
	/// <summary>
	/// Source Cause of Action data from the source site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceCauseOfAction
	{
		
		/// <summary>
		/// When this Cause of Action was first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string FirstFetchDate { get; set; }
		
		/// <summary>
		/// Signifies if the cause of action is currently isVisible or not for the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// When this Cause of Action was last fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string LastFetchDate { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("SourceCauseOfAction")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "SourceCauseOfAction";
		
		/// <summary>
		/// Cause of Action data from the source site.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCauseOfAction")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceCauseOfAction1 { get; set; }
		
		/// <summary>
		/// Raw Cause of Action data from the source site.
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCauseOfActionRaw")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string SourceCauseOfActionRaw { get; set; }
		
		/// <summary>
		/// Statute of a Cause of Action.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceStatute")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceStatute { get; set; }
	}
	
	/// <summary>
	/// Source charge data from the source site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceCharge
	{
		
		/// <summary>
		/// When this charge was first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string FirstFetchDate { get; set; }
		
		/// <summary>
		/// Signifies if the charge is currently isVisible or not for the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// When this charge was last fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string LastFetchDate { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 12
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("SourceCharge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "SourceCharge";
		
		/// <summary>
		/// Charge data from the source site.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCharge")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SourceCharge1 { get; set; }
		
		/// <summary>
		/// Additional data related to the charge which is available in the source site.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceChargeAdditionalDataArray")]
		public SourceChargeAdditionalData[] SourceChargeAdditionalDataArray { get; set; }
		
		/// <summary>
		/// Charge degree data from the source site.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceChargeDegree")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SourceChargeDegree { get; set; }
		
		/// <summary>
		/// Raw charge data from the source site.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceChargeRaw")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SourceChargeRaw { get; set; }
		
		/// <summary>
		/// Charge severity data from the source site.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceChargeSeverity")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string SourceChargeSeverity { get; set; }
		
		/// <summary>
		/// Statute of a charge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceStatute")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string SourceStatute { get; set; }
	}
	
	/// <summary>
	/// Additional data that enchances the information of a given charge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceChargeAdditionalData
	{
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 26
		/// Max length: 26
		/// </summary>
		[System.ComponentModel.DefaultValue("SourceChargeAdditionalData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(26)]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Object { get; set; } = "SourceChargeAdditionalData";
		
		/// <summary>
		/// Describes what type of additional data.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Type { get; set; }
		
		/// <summary>
		/// Value of additional data.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Source data from different pages in the court website.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourcePageData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additionalSourceData")]
		public SourceStructuredData AdditionalSourceData { get; set; }
		
		/// <summary>
		/// When was the page first fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string FirstFetchDate { get; set; }
		
		/// <summary>
		/// When was the page last fetched from the court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string LastFetchDate { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 14
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DefaultValue("SourcePageData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(14)]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Object { get; set; } = "SourcePageData";
		
		/// <summary>
		/// Pages supported for PACER pacerCaseQuery, pacerDocketReport, pacerCaseSummary, pacerAssociatedCases, pacerCaseLocatorResults, hearing, relatedCases.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageName")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string PageName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseSourceDataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LONGER_AVAILABLE_IN_COURT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 2,
	}
	
	/// <summary>
	/// Provides Court Data per State Jurisdiction for an entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseAnalyticsAPI
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByAreaOfLawAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByAreaOfLawAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByCaseClassAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByCaseClassAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByCaseTypeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByCaseTypeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByCaseTypeGroupAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByCaseTypeGroupAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByCourtAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByCourtAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByCourtLocationAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByCourtLocationAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByCourtSystemAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByCourtSystemAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByCourtTypeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByCourtTypeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByJurisdictionGeoAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByJurisdictionGeoAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByPartyRoleAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByPartyRoleAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByPartyRoleGroupAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByPartyRoleGroupAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseAnalyticsAPI")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "CaseAnalyticsAPI";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCases")]
		public int TotalCases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseClass
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseClassId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseClass")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "CaseClass";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseClassCoverage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClass")]
		public CaseClass CaseClass { get; set; }
		
		/// <summary>
		/// Total Cases for a specific CourtLocation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocationy.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentInLibraryCount")]
		public int CaseDocumentInLibraryCount { get; set; }
		
		/// <summary>
		/// Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocation in last 30 days.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentInLibraryInLastThirtyDaysCount")]
		public int CaseDocumentInLibraryInLastThirtyDaysCount { get; set; }
		
		/// <summary>
		/// Cases in last 30 days that were added to UniCourt for a specific CourtLocation
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="casesInLastThirtyDaysCount")]
		public int CasesInLastThirtyDaysCount { get; set; }
		
		/// <summary>
		/// API Link to the Court Service status with filters of court and case class
		/// Required
		/// Min length: 50
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceStatusAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(50)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CourtServiceStatusAPI { get; set; }
		
		/// <summary>
		/// Free Case Documents for a specific CourtLocation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeCaseDocumentCount")]
		public int FreeCaseDocumentCount { get; set; }
		
		/// <summary>
		/// Free Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="freeCaseDocumentsInLastThirtyDaysCount")]
		public int FreeCaseDocumentsInLastThirtyDaysCount { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseClassCoverage")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "CaseClassCoverage";
		
		/// <summary>
		/// Paid Case Documents for a specific CourtLocation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paidCaseDocumentCount")]
		public int PaidCaseDocumentCount { get; set; }
		
		/// <summary>
		/// Paid Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paidCaseDocumentsInLastThirtyDaysCount")]
		public int PaidCaseDocumentsInLastThirtyDaysCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseClassResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseClass[] CaseClassArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2140
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2140)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseClassResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "CaseClassResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2140
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2140)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByAreaOfLaw
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="areaOfLaw")]
		public AreaOfLaw AreaOfLaw { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByAreaOfLaw")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "CaseCountAnalyticsByAreaOfLaw";
	}
	
	/// <summary>
	/// Case Counts by Area Of Law Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByAreaOfLawResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 37
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByAreaOfLawResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(37)]
		public string Object { get; set; } = "CaseCountAnalyticsByAreaOfLawResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByAreaOfLaw[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Area Of Law for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalAreaOfLawCount")]
		public int TotalAreaOfLawCount { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseClass
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClass")]
		public CaseClass CaseClass { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseClass")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseClass";
	}
	
	/// <summary>
	/// Case Counts by Case Class Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseClassResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 37
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseClassResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(37)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseClassResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCaseClass[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Case Class for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseClassCount")]
		public int TotalCaseClassCount { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseFiledDate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue(CaseCountAnalyticsByCaseFiledDateGroupedBy.Yearly)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="groupedBy")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public CaseCountAnalyticsByCaseFiledDateGroupedBy GroupedBy { get; set; } = CaseCountAnalyticsByCaseFiledDateGroupedBy.Yearly;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monthInt")]
		public System.Nullable<System.Int32> MonthInt { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="monthString")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public System.Nullable<CaseCountAnalyticsByCaseFiledDateMonthString> MonthString { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 33
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseFiledDate")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(33)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseFiledDate";
		
		/// <summary>
		/// Required
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quarter")]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public System.Nullable<CaseCountAnalyticsByCaseFiledDateQuarter> Quarter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weekOfMonth")]
		public System.Nullable<System.Int32> WeekOfMonth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weekOfYear")]
		public System.Nullable<System.Int32> WeekOfYear { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public int Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseCountAnalyticsByCaseFiledDateGroupedBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yearly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Quarterly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseCountAnalyticsByCaseFiledDateMonthString
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		January = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		February = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		March = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		April = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		May = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		June = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		July = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		August = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		September = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		October = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		November = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		December = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseCountAnalyticsByCaseFiledDateQuarter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Q4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 4,
	}
	
	/// <summary>
	/// Response for Case Count by filing date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseFiledDateResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 41
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseFiledDateResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(41)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseFiledDateResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCaseFiledDate[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of Case File Date for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseFiledDateCount")]
		public int TotalCaseFiledDateCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseType")]
		public CaseType CaseType { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 28
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseType";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseTypeGroup
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeGroup")]
		public CaseTypeGroup CaseTypeGroup { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 33
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseTypeGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(33)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseTypeGroup";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTypeGroup
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="areaOfLaw")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AreaOfLaw { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="areaOfLawId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string AreaOfLawId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClass")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseClass { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseClassId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseTypeGroupId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseTypeGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "CaseTypeGroup";
	}
	
	/// <summary>
	/// Case Counts by Case Type Group Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseTypeGroupResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 41
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseTypeGroupResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(41)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseTypeGroupResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCaseTypeGroup[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of Case Type Group for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseTypeGroupCount")]
		public int TotalCaseTypeGroupCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// Case Counts by Case Types Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCaseTypeResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 36
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCaseTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string Object { get; set; } = "CaseCountAnalyticsByCaseTypeResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCaseType[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of CaseType for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseTypeCount")]
		public int TotalCaseTypeCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourt
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaseCountAnalyticsByCourtGeo Geo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="court")]
		public Court Court { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourt")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourt";
	}
	
	public class CaseCountAnalyticsByCourtGeo
	{
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourtLocation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaseCountAnalyticsByCourtLocationGeo Geo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="court")]
		public Court Court { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtLocation")]
		public CourtLocation CourtLocation { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 33
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourtLocation")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(33)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourtLocation";
	}
	
	public class CaseCountAnalyticsByCourtLocationGeo
	{
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Longitude { get; set; }
	}
	
	/// <summary>
	/// Case Counts by Court Location Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourtLocationResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 41
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourtLocationResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(41)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourtLocationResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCourtLocation[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of Court Location for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCourtLocationCount")]
		public int TotalCourtLocationCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// Case Counts by Court.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourtResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 33
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourtResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(33)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourtResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCourt[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of Court for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCourtCount")]
		public int TotalCourtCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourtSystem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaseCountAnalyticsByCourtSystemGeo Geo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtSystem")]
		public CourtSystem CourtSystem { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 31
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourtSystem")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(31)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourtSystem";
	}
	
	public class CaseCountAnalyticsByCourtSystemGeo
	{
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtSystem
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtSystemId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CourtType { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtTypeId { get; set; }
		
		/// <summary>
		/// The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 11
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtSystem")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public string Object { get; set; } = "CourtSystem";
	}
	
	/// <summary>
	/// Case Counts by Court System.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourtSystemResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 39
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourtSystemResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(39)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourtSystemResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCourtSystem[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of Court System for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCourtSystemCount")]
		public int TotalCourtSystemCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourtType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaseCountAnalyticsByCourtTypeGeo Geo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtType")]
		public CourtType CourtType { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourtType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourtType";
	}
	
	public class CaseCountAnalyticsByCourtTypeGeo
	{
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtType
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtTypeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtTypeId { get; set; }
		
		/// <summary>
		/// The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtType")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "CourtType";
	}
	
	/// <summary>
	/// Case Counts by Court Type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByCourtTypeResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 37
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByCourtTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(37)]
		public string Object { get; set; } = "CaseCountAnalyticsByCourtTypeResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByCourtType[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of Court Type for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCourtTypeCount")]
		public int TotalCourtTypeCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByJurisdictionGeo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CaseCountAnalyticsByJurisdictionGeoGeo Geo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jurisdictionGeo")]
		public JurisdictionGeo JurisdictionGeo { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByJurisdictionGeo")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Object { get; set; } = "CaseCountAnalyticsByJurisdictionGeo";
	}
	
	public class CaseCountAnalyticsByJurisdictionGeoGeo
	{
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JurisdictionGeo
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="county")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string County { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtsForJurisdictionGeoAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CourtsForJurisdictionGeoAPI { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fipsCode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string FipsCode { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jurisdictionGeoId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string JurisdictionGeoId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 15
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DefaultValue("JurisdictionGeo")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Object { get; set; } = "JurisdictionGeo";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipCodeArray")]
		public string[] ZipCodeArray { get; set; }
	}
	
	/// <summary>
	/// Case Counts by Juridiction Geo Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByJurisdictionGeoResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 43
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByJurisdictionGeoResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(43)]
		public string Object { get; set; } = "CaseCountAnalyticsByJurisdictionGeoResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByJurisdictionGeo[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of Jurisdiction for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalJurisdictionGeoCount")]
		public int TotalJurisdictionGeoCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormAttorney
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormAttorneyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormAttorneyName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormAttorney")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormAttorney";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormAttorneyResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormAttorneyResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormAttorneyResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByNormAttorney[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of NormAttorney for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalNormAttorneyCount")]
		public int TotalNormAttorneyCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormJudge
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormJudgeId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormJudgeName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormJudge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormJudge";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormJudgeResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 37
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormJudgeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(37)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormJudgeResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByNormJudge[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of NormJudge for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalNormJudgeCount")]
		public int TotalNormJudgeCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormLawFirm
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormLawFirmId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormLawFirmName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 31
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormLawFirm")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(31)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormLawFirm";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormLawFirmResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 39
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormLawFirmResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(39)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormLawFirmResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByNormLawFirm[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of NormLawFirm for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalNormLawFirmCount")]
		public int TotalNormLawFirmCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormParty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for this criteria.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormPartyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormPartyName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormParty")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormParty";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByNormPartyResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 37
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByNormPartyResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(37)]
		public string Object { get; set; } = "CaseCountAnalyticsByNormPartyResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByNormParty[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of NormParty for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalNormPartyCount")]
		public int TotalNormPartyCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByPartyRole
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for the entity involving the search criteria. TBD.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByPartyRole")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "CaseCountAnalyticsByPartyRole";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRole")]
		public PartyRole PartyRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByPartyRoleGroup
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCount")]
		public int CaseCount { get; set; }
		
		/// <summary>
		/// Link to cases for the entity involving the search criteria. TBD.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 34
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByPartyRoleGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string Object { get; set; } = "CaseCountAnalyticsByPartyRoleGroup";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleGroup")]
		public PartyRoleGroup PartyRoleGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartyRoleGroup
	{
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 14
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DefaultValue("PartyRoleGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(14)]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Object { get; set; } = "PartyRoleGroup";
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string PartyRoleGroupId { get; set; }
	}
	
	/// <summary>
	/// Case Count by Party Type Group Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByPartyRoleGroupResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 42
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByPartyRoleGroupResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(42)]
		public string Object { get; set; } = "CaseCountAnalyticsByPartyRoleGroupResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByPartyRoleGroup[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
		
		/// <summary>
		/// Total no. of Party Role Group for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPartyRoleGroupCount")]
		public int TotalPartyRoleGroupCount { get; set; }
	}
	
	/// <summary>
	/// Case Count by Party Type Response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseCountAnalyticsByPartyRoleResponse
	{
		
		/// <summary>
		/// Next page of results if applicable.
		/// Required
		/// Max length: 2173
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2173)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 37
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseCountAnalyticsByPartyRoleResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(37)]
		public string Object { get; set; } = "CaseCountAnalyticsByPartyRoleResponse";
		
		/// <summary>
		/// Link to previous page of results.
		/// Required
		/// Max length: 2172
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(2172)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CaseCountAnalyticsByPartyRole[] Results { get; set; }
		
		/// <summary>
		/// Total no. of Cases for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Total no. of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
		
		/// <summary>
		/// Total no. of Party Role for this criteria.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPartyRoleCount")]
		public int TotalPartyRoleCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseDocumentOrderCallback
	{
		
		/// <summary>
		/// Date when the job is run.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="callbackGeneratedDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> CallbackGeneratedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocument")]
		public CaseDocument CaseDocument { get; set; }
		
		/// <summary>
		/// UniCourt's Case Document ID.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseDocumentId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentOrderCallbackAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string CaseDocumentOrderCallbackAPI { get; set; }
		
		/// <summary>
		/// Unique Id for the Case Document Order Callback.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentOrderCallbackId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseDocumentOrderCallbackId { get; set; }
		
		/// <summary>
		/// Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public Exception Exception { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public ExportFile File { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseDocumentOrderCallback")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Object { get; set; } = "CaseDocumentOrderCallback";
		
		/// <summary>
		/// Status of the request.
		/// Required
		/// Min length: 7
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public CaseDocumentOrderCallbackStatus Status { get; set; }
	}
	
	/// <summary>
	/// Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Exception
	{
		
		/// <summary>
		/// Indicates the type of error occured.
		/// Required
		/// Min length: 1
		/// Max length: 75
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(75)]
		public string Code { get; set; }
		
		/// <summary>
		/// Describes what went wrong.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="details")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Details { get; set; }
		
		/// <summary>
		/// Indicates the error message that describes the error code.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("Exception")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "Exception";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportFile
	{
		
		/// <summary>
		/// Expiry date-time for the fileUrl provided in this object.
		/// Required
		/// Min length: 10
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public System.DateTimeOffset ExpiryDate { get; set; }
		
		/// <summary>
		/// Link to download the file.
		/// Required
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string FileUrl { get; set; }
		
		/// <summary>
		/// Name of the file.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 10
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DefaultValue("ExportFile")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Object { get; set; } = "ExportFile";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseDocumentOrderCallbackStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseDocumentOrderCallbackListResponse
	{
		
		/// <summary>
		/// Array of case document order callback objects.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="callbackArray")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseDocumentOrderCallback[] CallbackArray { get; set; }
		
		/// <summary>
		/// Link for the next page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 37
		/// Max length: 37
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseDocumentOrderCallbackListResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(37)]
		[System.ComponentModel.DataAnnotations.MaxLength(37)]
		public string Object { get; set; } = "CaseDocumentOrderCallbackListResponse";
		
		/// <summary>
		/// Current page number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link for the previous page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of case document order callback objects available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// **Applicable for PACER cases.**
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseDocumentOrderPacerOptions
	{
		
		/// <summary>
		/// PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacerClientCode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string PacerClientCode { get; set; }
		
		/// <summary>
		/// Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.
		/// Required
		/// Min length: 6
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerUserId")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PacerUserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseDocumentOrderRequest
	{
		
		/// <summary>
		/// Document ID which you want to order.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseDocumentId { get; set; }
		
		/// <summary>
		/// Flag value to determine if the document order is a preview order or no.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isPreviewOnly")]
		public bool IsPreviewOnly { get; set; }
		
		/// <summary>
		/// **Applicable for PACER cases.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacerOptions")]
		public CaseDocumentOrderPacerOptions PacerOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseExportCallback
	{
		
		/// <summary>
		/// Date when the job is run.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="callbackGeneratedDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> CallbackGeneratedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseExportCallbackAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string CaseExportCallbackAPI { get; set; }
		
		/// <summary>
		/// Unique Id for the Case Export Callback.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseExportCallbackId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseExportCallbackId { get; set; }
		
		/// <summary>
		/// Unique Id for a Case in UniCourt.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public Exception Exception { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public ExportFile File { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseExportCallback")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "CaseExportCallback";
		
		/// <summary>
		/// Status of the request.
		/// Required
		/// Min length: 7
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public CaseDocumentOrderCallbackStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseExportCallbackListResponse
	{
		
		/// <summary>
		/// Array of case export callback objects.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="callbackArray")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseExportCallback[] CallbackArray { get; set; }
		
		/// <summary>
		/// Link for the next page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 30
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseExportCallbackListResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(30)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Object { get; set; } = "CaseExportCallbackListResponse";
		
		/// <summary>
		/// Current page number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link for the previous page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of case export callback objects available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseRelationshipTypeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseRelationshipTypeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseRelationshipType[] CaseRelationshipTypeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2153
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2153)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 28
		/// Max length: 28
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseRelationshipTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(28)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		public string Object { get; set; } = "CaseRelationshipTypeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2152
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2152)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseSearchResponse
	{
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseSearchId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchResultArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public CaseSearchResult[] CaseSearchResultArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2138
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2138)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseSearchResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "CaseSearchResponse";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2138
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2138)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 3
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="q")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Q { get; set; }
		
		/// <summary>
		/// The number of matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total pages for matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseSearchResult
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseName")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string CaseName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatus")]
		public CaseStatus CaseStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseType")]
		public CaseType CaseType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="court")]
		public Court Court { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtLocation")]
		public CourtLocation CourtLocation { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filedDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FiledDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDateWithUpdates")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDateWithUpdates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectArray")]
		public MatchedObject[] MatchedObjectArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 16
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseSearchResult")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(16)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "CaseSearchResult";
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="participantsLastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ParticipantsLastFetchDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchedObject
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="highlightSnippet")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public string HighlightSnippet { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string MatchedObjectAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectAttribute")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MatchedObjectAttribute { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectId")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string MatchedObjectId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string MatchedObjectName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("MatchedObject")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "MatchedObject";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseStatusGroup
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatusGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseStatusGroupId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 15
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseStatusGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Object { get; set; } = "CaseStatusGroup";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseStatusGroupResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatusGroupArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseStatusGroup[] CaseStatusGroupArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2148
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2148)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 23
		/// Max length: 23
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseStatusGroupResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(23)]
		[System.ComponentModel.DataAnnotations.MaxLength(23)]
		public string Object { get; set; } = "CaseStatusGroupResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2147
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseStatusResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseStatusArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseStatus[] CaseStatusArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 18
		/// Max length: 2143
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(2143)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseStatusResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "CaseStatusResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 18
		/// Max length: 2142
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(2142)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTrack
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="case")]
		public Case Case { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseAPI { get; set; }
		
		/// <summary>
		/// Unique Id for a Case in UniCourt.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastFetchDate { get; set; }
		
		/// <summary>
		/// The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDateWithUpdates")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastFetchDateWithUpdates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastTrackedDetails")]
		public LastTrackedDetails LastTrackedDetails { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 9
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseTrack")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "CaseTrack";
		
		/// <summary>
		/// Applicable for PACER cases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerOptions")]
		public CaseUpdatePacerOptionsResponse PacerOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LastTrackedDetails
	{
		
		/// <summary>
		/// The date and time when the case was tracked for this account.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastTrackDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastTrackDate { get; set; }
		
		/// <summary>
		/// Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastTrackException")]
		public Exception LastTrackException { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("LastTrackedDetails")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "LastTrackedDetails";
		
		/// <summary>
		/// Applicable for PACER cases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerOptions")]
		public CaseUpdatePacerOptionsResponse PacerOptions { get; set; }
	}
	
	/// <summary>
	/// Applicable for PACER cases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseUpdatePacerOptionsResponse
	{
		
		/// <summary>
		/// Currently this option is only applicable for Federal PACER cases. The default behavior of the Case Update is to fetch the Docket Report from PACER which includes the parties and attorneys too.
		///
		///However if you need to fetch information for other pages in PACER you will need to specify it here.
		///- associatedCases:
		///> This will fetch the Associated Cases page in PACER if available. This page consists of related cases especially applicable for Multi-District Litigation cases and Member Cases. Including this option will internally link all related cases in our system. Data from this page will be available via the Related Cases API.
		///- caseSummary:
		///> This will fetch the Case Summary page in PACER if available. This page consists of additional case info which is not present in the Docket Report page. Data from this page will be structured and available as response in the Case API’s ```additional_info``` field.
		///- listOfCreditors:
		///> This page will fetch the “List Of Creditors” page for PACER Bankruptcy cases of case type "bk". Note that this page cannot be extracted for Bankruptcy cases of case type "ap" (Adversary Proceedings). This page consists of the Creditor information like the name and address of the Creditors. Data from this page will be structured and available as response in the Case API.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="additionalPageArray")]
		public CaseUpdatePacerOptionsResponseAdditionalPageArray[] CaseUpdatePacerOptionsResponseAdditionalPageArray { get; set; }
		
		/// <summary>
		/// **Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**
		///
		///**Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**
		///
		///**With this option you can choose when to fetch parties for case based on when was it last fetched.**
		///You can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.
		///
		///Min days is 0 and Max days is 100.
		///
		///Example:
		///1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.
		///2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.
		///
		/// Required
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fetchParticipantsIfOlderThanDays")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public int FetchParticipantsIfOlderThanDays { get; set; } = 0;
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 30
		/// Max length: 30
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseUpdatePacerOptionsResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(30)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Object { get; set; } = "CaseUpdatePacerOptionsResponse";
		
		/// <summary>
		/// PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		/// Required
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerClientCode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string PacerClientCode { get; set; }
		
		/// <summary>
		/// **Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**
		/// Required
		/// Min length: 6
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerUserId")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PacerUserId { get; set; }
		
		/// <summary>
		/// This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.
		///
		///Only one of the two values is allowed:
		///-   fetchNewDocketEntries:
		///    >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.
		///-   fetchAllDocketEntries:
		///    >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.
		///
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="refreshType")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public System.Nullable<CaseUpdatePacerOptionsResponseRefreshType> RefreshType { get; set; }
	}
	
	public class CaseUpdatePacerOptionsResponseAdditionalPageArray
	{
		
		/// <summary>
		/// You can limit how often this page information is fetched to reduce your PACER fees.
		///
		///Min days is 0 and Max days is 100.
		///
		///Example:
		///1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.
		///2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.
		///
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchIfOlderThanDays")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> FetchIfOlderThanDays { get; set; }
		
		/// <summary>
		/// Min length: 11
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public System.Nullable<CaseUpdatePacerOptionsResponseAdditionalPageArrayPage> Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseUpdatePacerOptionsResponseAdditionalPageArrayPage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associatedCases = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		caseSummary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		listOfCreditors = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CaseUpdatePacerOptionsResponseRefreshType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fetchNewDocketEntries = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fetchAllDocketEntries = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schedule
	{
		
		/// <summary>
		/// [] -> if schedule type is daily <br>
		///1-7 -> if schedule type is weekly <br>
		///1-31 -> if schedule type is monthly
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days")]
		public int[] Days { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DefaultValue("Schedule")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Object { get; set; } = "Schedule";
		
		/// <summary>
		/// Required
		/// Min length: 5
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public ScheduleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScheduleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTrackListResponse
	{
		
		/// <summary>
		/// Array of cases tracked.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTrackPreviewArray")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseTrackPreview[] CaseTrackPreviewArray { get; set; }
		
		/// <summary>
		/// Link for the next page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseTrackListResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "CaseTrackListResponse";
		
		/// <summary>
		/// Current page number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link for the previous page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of case track available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTrackPreview
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseAPI { get; set; }
		
		/// <summary>
		/// Unique Id for a Case in UniCourt.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastFetchDate { get; set; }
		
		/// <summary>
		/// The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDateWithUpdates")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastFetchDateWithUpdates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastTrackedDetails")]
		public LastTrackedDetails LastTrackedDetails { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 16
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseTrackPreview")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(16)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "CaseTrackPreview";
		
		/// <summary>
		/// Applicable for PACER cases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerOptions")]
		public CaseUpdatePacerOptionsResponse PacerOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTrackRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTrackParams")]
		public CaseUpdateRequest CaseTrackParams { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public CaseTrackSchedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseUpdateRequest
	{
		
		/// <summary>
		/// UniCourt's Case Id for update.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// Applicable for PACER cases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacerOptions")]
		public CaseUpdatePacerOptions PacerOptions { get; set; }
	}
	
	/// <summary>
	/// Applicable for PACER cases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseUpdatePacerOptions
	{
		
		/// <summary>
		/// Currently this option is only applicable for Federal PACER cases. The default behavior of the Case Update is to fetch the Docket Report from PACER which includes the parties and attorneys too.
		///
		///However if you need to fetch information for other pages in PACER you will need to specify it here.
		///- associatedCases:
		///> This will fetch the Associated Cases page in PACER if available. This page consists of related cases especially applicable for Multi-District Litigation cases and Member Cases. Including this option will internally link all related cases in our system. Data from this page will be available via the Related Cases API.
		///- caseSummary:
		///> This will fetch the Case Summary page in PACER if available. This page consists of additional case info which is not present in the Docket Report page. Data from this page will be structured and available as response in the Case API’s ```additional_info``` field.
		///- listOfCreditors:
		///> This page will fetch the “List Of Creditors” page for PACER Bankruptcy cases of case type "bk". Note that this page cannot be extracted for Bankruptcy cases of case type "ap" (Adversary Proceedings). This page consists of the Creditor information like the name and address of the Creditors. Data from this page will be structured and available as response in the Case API.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalPageArray")]
		public CaseUpdatePacerOptionsAdditionalPageArray[] CaseUpdatePacerOptionsAdditionalPageArray { get; set; }
		
		/// <summary>
		/// **Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**
		///
		///**Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**
		///
		///**With this option you can choose when to fetch parties for case based on when was it last fetched.**
		///You can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.
		///
		///Min days is 0 and Max days is 100.
		///
		///Example:
		///1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.
		///2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.
		///
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchParticipantsIfOlderThanDays")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> FetchParticipantsIfOlderThanDays { get; set; }
		
		/// <summary>
		/// PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacerClientCode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string PacerClientCode { get; set; }
		
		/// <summary>
		/// **Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**
		/// Required
		/// Min length: 6
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerUserId")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PacerUserId { get; set; }
		
		/// <summary>
		/// This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.
		///
		///Only one of the two values is allowed:
		///-   fetchNewDocketEntries:
		///    >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.
		///-   fetchAllDocketEntries:
		///    >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.
		///
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue(CaseUpdatePacerOptionsResponseRefreshType.fetchNewDocketEntries)]
		[System.Runtime.Serialization.DataMember(Name="refreshType")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public CaseUpdatePacerOptionsResponseRefreshType RefreshType { get; set; } = CaseUpdatePacerOptionsResponseRefreshType.fetchNewDocketEntries;
	}
	
	public class CaseUpdatePacerOptionsAdditionalPageArray
	{
		
		/// <summary>
		/// You can limit how often this page information is fetched to reduce your PACER fees.
		///
		///Min days is 0 and Max days is 100.
		///
		///Example:
		///1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.
		///2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.
		///
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fetchIfOlderThanDays")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> FetchIfOlderThanDays { get; set; }
		
		/// <summary>
		/// Min length: 11
		/// Max length: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public CaseUpdatePacerOptionsResponseAdditionalPageArrayPage Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTrackSchedule
	{
		
		/// <summary>
		/// [] -> if schedule type is daily <br>
		///1-7 -> if schedule type is weekly <br>
		///1-31 -> if schedule type is monthly
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="days")]
		public int[] Days { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 5
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public ScheduleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTypeGroupResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeGroupArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseTypeGroup[] CaseTypeGroupArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2144
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2144)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseTypeGroupResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "CaseTypeGroupResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2143
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2143)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseTypeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTypeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseType[] CaseTypeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2139
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2139)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 16
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(16)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "CaseTypeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2138
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2138)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseUpdate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="case")]
		public Case Case { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseAPI { get; set; }
		
		/// <summary>
		/// Unique Id for a Case in UniCourt.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public Exception Exception { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 10
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseUpdate")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Object { get; set; } = "CaseUpdate";
		
		/// <summary>
		/// Applicable for PACER cases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerOptions")]
		public CaseUpdatePacerOptionsResponse PacerOptions { get; set; }
		
		/// <summary>
		/// The date and time when the case was last requested for update 
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestedDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset RequestedDate { get; set; }
		
		/// <summary>
		/// Status of the request.
		/// Required
		/// Min length: 7
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public CaseDocumentOrderCallbackStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseUpdateListResponse
	{
		
		/// <summary>
		/// Array of case update objects.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseUpdatePreviewArray")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CaseUpdatePreview[] CaseUpdatePreviewArray { get; set; }
		
		/// <summary>
		/// Link for the next page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 22
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseUpdateListResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "CaseUpdateListResponse";
		
		/// <summary>
		/// Current page number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link for the previous page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of case update objects available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CaseUpdatePreview
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseAPI { get; set; }
		
		/// <summary>
		/// Unique Id for a Case in UniCourt.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseId { get; set; }
		
		/// <summary>
		/// Exception object contains specific error code and its message related to the API request validation error or error occurred during API request processing.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exception")]
		public Exception Exception { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("CaseUpdatePreview")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "CaseUpdatePreview";
		
		/// <summary>
		/// Applicable for PACER cases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerOptions")]
		public CaseUpdatePacerOptionsResponse PacerOptions { get; set; }
		
		/// <summary>
		/// The date and time when the case was last requested for update 
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestedDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset RequestedDate { get; set; }
		
		/// <summary>
		/// Status of the request.
		/// Required
		/// Min length: 7
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public CaseDocumentOrderCallbackStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CauseOfActionAdditionalDataResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionAdditionalDataArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CauseOfActionAdditionalData[] CauseOfActionAdditionalDataArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2160
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2160)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 35
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DefaultValue("CauseOfActionAdditionalDataResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(35)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Object { get; set; } = "CauseOfActionAdditionalDataResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2159
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2159)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CauseOfActionGroup
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CauseOfActionGroupId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("CauseOfActionGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "CauseOfActionGroup";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CauseOfActionGroupResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionGroupArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CauseOfActionGroup[] CauseOfActionGroupArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2151
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2151)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 26
		/// Max length: 26
		/// </summary>
		[System.ComponentModel.DefaultValue("CauseOfActionGroupResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(26)]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Object { get; set; } = "CauseOfActionGroupResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2150)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CauseOfActionResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="causeOfActionArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CauseOfAction[] CauseOfActionArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2146
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2146)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("CauseOfActionResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "CauseOfActionResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2145
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2145)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeAdditionalDataResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeAdditionalDataArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ChargeAdditionalData[] ChargeAdditionalDataArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2153
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2153)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 28
		/// Max length: 28
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeAdditionalDataResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(28)]
		[System.ComponentModel.DataAnnotations.MaxLength(28)]
		public string Object { get; set; } = "ChargeAdditionalDataResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2152
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2152)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeDegreeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeDegreeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ChargeDegree[] ChargeDegreeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2160
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2160)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 20
		/// Max length: 20
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeDegreeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Object { get; set; } = "ChargeDegreeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2159
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2159)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeGroup
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string ChargeGroupId { get; set; }
		
		/// <summary>
		/// The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset CreatedDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 11
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public string Object { get; set; } = "ChargeGroup";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeGroupResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeGroupArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ChargeGroup[] ChargeGroupArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2142
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2142)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeGroupResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "ChargeGroupResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2141
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2141)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Charge[] ChargeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2137
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2137)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 14
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(14)]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Object { get; set; } = "ChargeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2136
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2136)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChargeSeverityResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chargeSeverityArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ChargeSeverity[] ChargeSeverityArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2160
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2160)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 22
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("ChargeSeverityResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "ChargeSeverityResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2159
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2159)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtCoverage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassCoverageArray")]
		public CaseClassCoverage[] CaseClassCoverageArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="court")]
		public Court Court { get; set; }
		
		/// <summary>
		/// Date when it was last updated.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdateCountDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string LastUpdateCountDate { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtCoverage")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "CourtCoverage";
		
		/// <summary>
		/// Total Cases for a specific court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseCount")]
		public int TotalCaseCount { get; set; }
		
		/// <summary>
		/// Count of total Case Documents added in UniCourt Library.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseDocumentInLibraryCount")]
		public int TotalCaseDocumentInLibraryCount { get; set; }
		
		/// <summary>
		/// Count of total Case Documents added in UniCourt Library in last 30 days
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCaseDocumentInLibraryInLastThirtyDaysCount")]
		public int TotalCaseDocumentInLibraryInLastThirtyDaysCount { get; set; }
		
		/// <summary>
		/// Total Cases in last 30 days that were added to UniCourt
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCasesInLastThirtyDaysCount")]
		public int TotalCasesInLastThirtyDaysCount { get; set; }
		
		/// <summary>
		/// Total Free Case Documents for a specific court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalFreeCaseDocumentCount")]
		public int TotalFreeCaseDocumentCount { get; set; }
		
		/// <summary>
		/// Total Free Case Documents in last 30 days that were added to UniCourt
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalFreeCaseDocumentsInLastThirtyDaysCount")]
		public int TotalFreeCaseDocumentsInLastThirtyDaysCount { get; set; }
		
		/// <summary>
		/// Total Paid Case Documents for a specific court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPaidCaseDocumentCount")]
		public int TotalPaidCaseDocumentCount { get; set; }
		
		/// <summary>
		/// Total Paid Case Documents in last 30 days that were added to UniCourt
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPaidCaseDocumentsInLastThirtyDaysCount")]
		public int TotalPaidCaseDocumentsInLastThirtyDaysCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtLocationResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtLocationArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CourtLocation[] CourtLocationArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2144
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2144)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtLocationResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "CourtLocationResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2143
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2143)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Court[] CourtArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2136
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2136)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "CourtResponse";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2135
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2135)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// The number of matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total pages for matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtServiceStatus
	{
		
		/// <summary>
		/// All the Case class ids associated to the service status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseClassIdArray")]
		public string[] CaseClassIdArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentOrderServiceStatus")]
		public ServiceStatus CaseDocumentOrderServiceStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseTrackServiceStatus")]
		public ServiceStatus CaseTrackServiceStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseUpdateServiceStatus")]
		public ServiceStatus CaseUpdateServiceStatus { get; set; }
		
		/// <summary>
		/// All the court ids associated to the service status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtIdArray")]
		public string[] CourtIdArray { get; set; }
		
		/// <summary>
		/// All the court location ids associated to the service status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtLocationIdArray")]
		public string[] CourtLocationIdArray { get; set; }
		
		/// <summary>
		/// Court Service Status Object ID
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceStatusId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CourtServiceStatusId { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtServiceStatus")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "CourtServiceStatus";
		
		/// <summary>
		/// Date when the service status was last fetched.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceStatusAsOn")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string ServiceStatusAsOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceStatus
	{
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 13
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("ServiceStatus")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(13)]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "ServiceStatus";
		
		/// <summary>
		/// Status Details of Case Update Services Status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceDetails")]
		public ServiceStatusServiceDetails ServiceDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceStatusDownDetails")]
		public ServiceStatusDownDetails ServiceStatusDownDetails { get; set; }
		
		/// <summary>
		/// Status of Case Update Services Status.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceUp")]
		public bool ServiceUp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceStatusServiceDetails
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acceptingCaseUpdates = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notAcceptingCaseUpdates = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acceptingCaseTrack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notAcceptingCaseTrack = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acceptingAutoDocOrders = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acceptingManualDocOrders = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notAcceptingAutoDocOrdersLimitExceeded = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notAcceptingManualDocOrdersLimitExceeded = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notAcceptingDocOrders = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceStatusDownDetails
	{
		
		/// <summary>
		/// Details of the reason.
		/// Required
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="details")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public string Details { get; set; }
		
		/// <summary>
		/// Estimated Time this Service could be Up again for the use.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eta")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Eta { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 24
		/// Max length: 24
		/// </summary>
		[System.ComponentModel.DefaultValue("ServiceStatusDownDetails")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		public string Object { get; set; } = "ServiceStatusDownDetails";
		
		/// <summary>
		/// This field determines the reason behind status being down. Following are the possible reason for the service to be down:
		///
		///	underMaintenance: It means that the site is under scheduled maintenance.
		///
		///	notIntegrated: When an court with specific case type is not integrated in UniCourt.
		///
		///	brokenIntegration: Due to some updates made to the court site our existing Integration has broken and will require a fix to be made to support this court again for a spcific case type category.
		///
		///	sourceMigrated: When a source is migrated from one site to another for a specific case type category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public ServiceStatusDownDetailsReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceStatusDownDetailsReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		underMaintenance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notIntegrated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brokenIntegration = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sourceMigrated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtServiceStatusResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtServiceStatusArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CourtServiceStatus[] CourtServiceStatusArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2153
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2153)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 26
		/// Max length: 26
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtServiceStatusResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(26)]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Object { get; set; } = "CourtServiceStatusResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2152
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2152)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtSystemResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtSystemArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CourtSystem[] CourtSystemArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2142
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2142)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtSystemResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "CourtSystemResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2141
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2141)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CourtTypeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtTypeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public CourtType[] CourtTypeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2140
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2140)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("CourtTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "CourtTypeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2139
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2139)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DailyUsageResponse
	{
		
		/// <summary>
		/// Total number of API calls billed for the billing cycle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiCallsBillable")]
		public DailyUsageResponseApiCallsBillable ApiCallsBillable { get; set; }
		
		/// <summary>
		/// Total number of callbackFailures including caseUpdate, caseDocumentOrder and caseExport for the billing cycle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiCallsCredited")]
		public DailyUsageResponseApiCallsCredited ApiCallsCredited { get; set; }
		
		/// <summary>
		/// Total API calls made for the billing cycle.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiCallsMade")]
		public DailyUsageResponseApiCallsMade ApiCallsMade { get; set; }
		
		/// <summary>
		/// Api Usage made.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiUsage")]
		public string ApiUsage { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("DailyUsageResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "DailyUsageResponse";
		
		/// <summary>
		/// End time of the usage.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usageEndTime")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset UsageEndTime { get; set; }
		
		/// <summary>
		/// Start time of the usage.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="usageStartTime")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset UsageStartTime { get; set; }
	}
	
	public class DailyUsageResponseApiCallsBillable
	{
		
		/// <summary>
		/// Total API calls billed  for the billing cycle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Last Updated date and time for the field apiCallsBillable
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
	}
	
	public class DailyUsageResponseApiCallsCredited
	{
		
		/// <summary>
		/// Total API calls credited back for the billing cycle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Last Updated date and time for the field apiCallsCredited
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
	}
	
	public class DailyUsageResponseApiCallsMade
	{
		
		/// <summary>
		/// Total API calls made for the billing cycle
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Last Updated date and time for the field apiCallsMade
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentDownload
	{
		
		/// <summary>
		/// API call to download the document again if the above fileUrl is expired.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentDownloadAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string CaseDocumentDownloadAPI { get; set; }
		
		/// <summary>
		/// Requested Document ID.
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseDocumentId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string CaseDocumentId { get; set; }
		
		/// <summary>
		/// Expiry date-time for the fileUrl provided in this object.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string ExpiryDate { get; set; }
		
		/// <summary>
		/// Link to download the file.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string FileUrl { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 16
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("DocumentDownload")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(16)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "DocumentDownload";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidateAccessTokenRequest
	{
		
		/// <summary>
		/// Your Client ID obtainable by logging into your UniCourt account.
		/// Required
		/// Min length: 32
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Your Client Secret ID obtainable by logging into your UniCourt account.
		/// Required
		/// Min length: 64
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		[System.ComponentModel.DataAnnotations.MinLength(64)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ClientSecret { get; set; }
		
		/// <summary>
		/// The Token ID of token being invalidated
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string TokenId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JudgeAnalyticsAPI
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormAttorneysAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormAttorneysAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormLawFirmsAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormLawFirmsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormPartiesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormPartiesAPI { get; set; }
		
		/// <summary>
		/// Link to Details for the Judge.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormJudgeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("JudgeAnalyticsAPI")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "JudgeAnalyticsAPI";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JudgeTypeResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judgeTypeArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public JudgeType[] JudgeTypeArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2142
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2142)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("JudgeTypeResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "JudgeTypeResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2141
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2141)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JurisdictionGeoResponse
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jurisdictionGeoArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public JurisdictionGeo[] JurisdictionGeoArray { get; set; }
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2147
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 23
		/// Max length: 23
		/// </summary>
		[System.ComponentModel.DefaultValue("JurisdictionGeoResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(23)]
		[System.ComponentModel.DataAnnotations.MaxLength(23)]
		public string Object { get; set; } = "JurisdictionGeoResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2146
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2146)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LawFirmAnalyticsAPI
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormJudgeAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormJudgeAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormPartiesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormPartiesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormPartyAPI { get; set; }
		
		/// <summary>
		/// Link to Details for the Law Firm.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("LawFirmAnalyticsAPI")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "LawFirmAnalyticsAPI";
	}
	
	/// <summary>
	/// Norm Attorney
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormAttorney
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attorneyAnalyticsAPI")]
		public AttorneyAnalyticsAPI AttorneyAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barRecordArray")]
		public BarRecord[] BarRecordArray { get; set; }
		
		/// <summary>
		/// Provides Court Data per State Jurisdiction for an entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAnalyticsAPI")]
		public CaseAnalyticsAPI CaseAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasAssociatedPublicData")]
		public bool HasAssociatedPublicData { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormAttorneyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DefaultValue("NormAttorney")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public string Object { get; set; } = "NormAttorney";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="similarNormAttorneyArray")]
		public SimilarNormAttorney[] SimilarNormAttorneyArray { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimilarNormAttorney
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="barRecordPreviewArray")]
		public BarRecordPreview[] BarRecordPreviewArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormAttorneyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneySimilarityScore")]
		public float NormAttorneySimilarityScore { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("SimilarNormAttorney")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "SimilarNormAttorney";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormAttorneySearchResponse
	{
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2120
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2120)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneySearchId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormAttorneySearchId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneySearchResultArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public NormAttorneySearchResult[] NormAttorneySearchResultArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 26
		/// Max length: 26
		/// </summary>
		[System.ComponentModel.DefaultValue("NormAttorneySearchResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(26)]
		[System.ComponentModel.DataAnnotations.MaxLength(26)]
		public string Object { get; set; } = "NormAttorneySearchResponse";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2119
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2119)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 3
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="q")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Q { get; set; }
		
		/// <summary>
		/// The number of matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total pages for matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormAttorneySearchResult
	{
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 4
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasAssociatedPublicData")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public bool HasAssociatedPublicData { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectArray")]
		public MatchedObject[] MatchedObjectArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyDetailsAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormAttorneyDetailsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normAttorneyId")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormAttorneyId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 24
		/// Max length: 24
		/// </summary>
		[System.ComponentModel.DefaultValue("NormAttorneySearchResult")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(24)]
		[System.ComponentModel.DataAnnotations.MaxLength(24)]
		public string Object { get; set; } = "NormAttorneySearchResult";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormCorporateGroup
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normCorporateGroupId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormCorporateGroupId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normCorporateGroupName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string NormCorporateGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("NormCorporateGroup")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "NormCorporateGroup";
	}
	
	/// <summary>
	/// Norm Judge
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormJudge
	{
		
		/// <summary>
		/// Provides Court Data per State Jurisdiction for an entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAnalyticsAPI")]
		public CaseAnalyticsAPI CaseAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasAssociatedPublicData")]
		public bool HasAssociatedPublicData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judgeAnalyticsAPI")]
		public JudgeAnalyticsAPI JudgeAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judicialDataArray")]
		public NormJudgePublicData[] JudicialDataArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormJudgeId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("NormJudge")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "NormJudge";
	}
	
	/// <summary>
	/// This contains the Judge Public details that is obtained from various sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormJudgePublicData
	{
		
		/// <summary>
		/// American Bar Association (ABA) Rating of the Judge.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="abaRatings")]
		public NormJudgePublicDataAbaRatings AbaRatings { get; set; }
		
		/// <summary>
		/// Other Names of the Judge.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="aliasArray")]
		public string[] AliasArray { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bio")]
		public NormJudgePublicDataBio Bio { get; set; }
		
		/// <summary>
		/// Contact object data schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// The Education History of the judge.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="educationArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public NormJudgePublicDataEducationArray[] NormJudgePublicDataEducationArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> FirstFetchDate { get; set; }
		
		/// <summary>
		/// The judicial source of the Judge
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judicialSource")]
		public NormJudgePublicDataJudicialSource JudicialSource { get; set; }
		
		/// <summary>
		/// The judicial status of the Judge
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="judicialStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string JudicialStatus { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastFetchDate { get; set; }
		
		/// <summary>
		/// Last Fetch Date of the Judge Update.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDateWithUpdates")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> LastFetchDateWithUpdates { get; set; }
		
		/// <summary>
		/// Name changes of the Judge. Change in the official name. Other names go to Alias array.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameHistoryArray")]
		public NormJudgePublicDataNameHistoryArray[] NormJudgePublicDataNameHistoryArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("NormJudgePublicData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "NormJudgePublicData";
		
		/// <summary>
		/// The non-judicial career history of the judge.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="professionalCareerArray")]
		public string[] ProfessionalCareerArray { get; set; }
		
		/// <summary>
		/// Judicial History of the Judge.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceHistoryArray")]
		public ServiceHistory[] ServiceHistoryArray { get; set; }
	}
	
	public class NormJudgePublicDataAbaRatings
	{
		
		/// <summary>
		/// rating
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rating")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Rating { get; set; }
		
		/// <summary>
		/// Year when Rating was recieved.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	public class NormJudgePublicDataBio
	{
		
		/// <summary>
		/// The Birth City of the Judge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="birthCity")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string BirthCity { get; set; }
		
		/// <summary>
		/// The Date of Birth of the Judge.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="birthDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> BirthDate { get; set; }
		
		/// <summary>
		/// The Birth State of the Judge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="birthState")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string BirthState { get; set; }
		
		/// <summary>
		/// The Death City of the Judge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deathCity")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DeathCity { get; set; }
		
		/// <summary>
		/// The Date of the Death of the Judge.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deathDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> DeathDate { get; set; }
		
		/// <summary>
		/// The Death State of the Judge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deathState")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string DeathState { get; set; }
		
		/// <summary>
		/// Ethnic Group of the Judge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ethnicity")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Ethnicity { get; set; }
		
		/// <summary>
		/// The Political Affiliation of the Judge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="politicalAffiliation")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PoliticalAffiliation { get; set; }
	}
	
	public class NormJudgePublicDataEducationArray
	{
		
		/// <summary>
		/// The Degree Awarded to the Judge
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="degree")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Degree { get; set; }
		
		/// <summary>
		/// The University which awarded the degree to the Judge.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="school")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string School { get; set; }
		
		/// <summary>
		/// The year when the degree was awarded.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	public class NormJudgePublicDataJudicialSource
	{
		
		/// <summary>
		/// Name of the Judicial Data Source
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of acquisition of the data source
		/// Required
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public NormJudgePublicDataJudicialSourceType Type { get; set; }
		
		/// <summary>
		/// URL of the data source, if type is Website
		/// Required
		/// Max length: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NormJudgePublicDataJudicialSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Website = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 1,
	}
	
	public class NormJudgePublicDataNameHistoryArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// A timeline of courts where the judge has been employed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceHistory
	{
		
		/// <summary>
		/// The President-in-charge of the Judges appointment.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appointedBy")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AppointedBy { get; set; }
		
		/// <summary>
		/// The year in which the Judge began practicing in his current service.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The year in which the Judge began practicing in his current service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fromYear")]
		public System.Nullable<System.Int32> FromYear { get; set; }
		
		/// <summary>
		/// Boolean indicating if the service history  is visible or not.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public bool IsVisible { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DefaultValue("ServiceHistory")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Object { get; set; } = "ServiceHistory";
		
		/// <summary>
		/// The reason for the Judges termination for the current position.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonForTermination")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string ReasonForTermination { get; set; }
		
		/// <summary>
		/// The court served by the Judge. The court is taken from source.
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCourt")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string SourceCourt { get; set; }
		
		/// <summary>
		/// Title held by the Judge.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Title { get; set; }
		
		/// <summary>
		/// The year in which the Judge stoped practicing in his current service.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
		
		/// <summary>
		/// The year in which the Judge stoped practicing in his current service.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toYear")]
		public System.Nullable<System.Int32> ToYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormJudgeSearchResponse
	{
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2117
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2117)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeSearchId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormJudgeSearchId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeSearchResultArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public NormJudgeSearchResult[] NormJudgeSearchResultArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 23
		/// Max length: 23
		/// </summary>
		[System.ComponentModel.DefaultValue("NormJudgeSearchResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(23)]
		[System.ComponentModel.DataAnnotations.MaxLength(23)]
		public string Object { get; set; } = "NormJudgeSearchResponse";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2116
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2116)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 3
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="q")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Q { get; set; }
		
		/// <summary>
		/// The number of matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total pages for matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormJudgeSearchResult
	{
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectArray")]
		public MatchedObject[] MatchedObjectArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeDetailsAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormJudgeDetailsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normJudgeId")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormJudgeId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("NormJudgeSearchResult")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "NormJudgeSearchResult";
	}
	
	/// <summary>
	/// Schema for Norm Law Firm containing Organization sub-field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormLawFirm
	{
		
		/// <summary>
		/// Provides Court Data per State Jurisdiction for an entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAnalyticsAPI")]
		public CaseAnalyticsAPI CaseAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lawFirmAnalyticsAPI")]
		public LawFirmAnalyticsAPI LawFirmAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormLawFirmId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normOrganizationData")]
		public NormOrganization NormOrganizationData { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DefaultValue("NormLawFirm")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public string Object { get; set; } = "NormLawFirm";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormOrganization
	{
		
		/// <summary>
		/// Required
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cik")]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Cik { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isInvolvedInLitigation")]
		public bool IsInvolvedInLitigation { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lei")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Lei { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="naics")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Naics { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="naicsDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string NaicsDescription { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normCorporateGroupArray")]
		public NormCorporateGroup[] NormCorporateGroupArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normOrganizationId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormOrganizationId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormPartyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("NormOrganization")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "NormOrganization";
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="organizationType")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NormOrganizationOrganizationType OrganizationType { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sic")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Sic { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sicDescription")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string SicDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sosDataArray")]
		public SOSData[] SosDataArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tickerArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public NormOrganizationTickerArray[] NormOrganizationTickerArray { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NormOrganizationOrganizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GovernmentAgency = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SOSData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedSoSPersonArray")]
		public AssociatedSoSPerson[] AssociatedSoSPersonArray { get; set; }
		
		/// <summary>
		/// Contact object data schema.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domesticRegistration")]
		public bool DomesticRegistration { get; set; } = true;
		
		/// <summary>
		/// Required
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fein")]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Fein { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inactivationDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> InactivationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; } = true;
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Last Fetch Date of Organization with Updates.
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDateWithUpdates")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDateWithUpdates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nameChangesArray")]
		public SOSNameChange[] NameChangesArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DefaultValue("SOSData")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Object { get; set; } = "SOSData";
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registeredDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> RegisteredDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sosAssociatedNormOrganizationArray")]
		public SOSAssociatedNormOrganization[] SosAssociatedNormOrganizationArray { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sosNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string SosNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stateCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string StateCode { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public System.Nullable<SOSDataStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SOSNameChange
	{
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 13
		/// </summary>
		[System.ComponentModel.DefaultValue("SOSNameChange")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(13)]
		public string Object { get; set; } = "SOSNameChange";
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SOSAssociatedNormOrganization
	{
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FromDate { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normOrganizationAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormOrganizationAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normOrganizationId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormOrganizationId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 29
		/// </summary>
		[System.ComponentModel.DefaultValue("SOSAssociatedNormOrganization")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(29)]
		public string Object { get; set; } = "SOSAssociatedNormOrganization";
		
		/// <summary>
		/// Required
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationshipType")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public SOSAssociatedNormOrganizationRelationshipType RelationshipType { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SOSAssociatedNormOrganizationRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Child = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SOSDataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
	}
	
	public class NormOrganizationTickerArray
	{
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Exchange { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbols")]
		public string[] Symbols { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormLawFirmSearchResponse
	{
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2119
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2119)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmSearchId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormLawFirmSearchId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmSearchResultArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public NormLawFirmSearchResult[] NormLawFirmSearchResultArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DefaultValue("NormLawFirmSearchResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Object { get; set; } = "NormLawFirmSearchResponse";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2118
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2118)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 3
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="q")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Q { get; set; }
		
		/// <summary>
		/// The number of matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total pages for matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormLawFirmSearchResult
	{
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectArray")]
		public MatchedObject[] MatchedObjectArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmDetailsAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormLawFirmDetailsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normLawFirmId")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormLawFirmId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 23
		/// Max length: 23
		/// </summary>
		[System.ComponentModel.DefaultValue("NormLawFirmSearchResult")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(23)]
		[System.ComponentModel.DataAnnotations.MaxLength(23)]
		public string Object { get; set; } = "NormLawFirmSearchResult";
	}
	
	/// <summary>
	/// Norm Party
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormParty
	{
		
		/// <summary>
		/// Provides Court Data per State Jurisdiction for an entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseAnalyticsAPI")]
		public CaseAnalyticsAPI CaseAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseSearchAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseSearchAPI { get; set; }
		
		/// <summary>
		/// * Only applicable if the Party is an Individual.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="individualData")]
		public NormPartyIndividualData IndividualData { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normOrganizationData")]
		public NormOrganization NormOrganizationData { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormPartyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 9
		/// </summary>
		[System.ComponentModel.DefaultValue("NormParty")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string Object { get; set; } = "NormParty";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyAnalyticsAPI")]
		public PartyAnalyticsAPI PartyAnalyticsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyClassificationType")]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public NormPartyPartyClassificationType PartyClassificationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relatedNormPartyArray")]
		public RelatedNormParty[] RelatedNormPartyArray { get; set; }
	}
	
	public class NormPartyIndividualData
	{
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartyAnalyticsAPI
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormAttorneysAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormAttorneysAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormJudgesAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormJudgesAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="associatedNormLawFirmsAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string AssociatedNormLawFirmsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormAttorneyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormAttorneyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormLawFirmAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormLawFirmAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="caseCountAnalyticsByOpposingNormPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string CaseCountAnalyticsByOpposingNormPartyAPI { get; set; }
		
		/// <summary>
		/// Link to Details for the Party.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormPartyAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("PartyAnalyticsAPI")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "PartyAnalyticsAPI";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NormPartyPartyClassificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Organization = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelatedNormParty
	{
		
		/// <summary>
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormPartyId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 16
		/// </summary>
		[System.ComponentModel.DefaultValue("RelatedNormParty")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string Object { get; set; } = "RelatedNormParty";
		
		/// <summary>
		/// Required
		/// Max length: 250
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="relationshipType")]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public RelatedNormPartyRelationshipType RelationshipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RelatedNormPartyRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Child = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Same_Corporate_Group = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormPartySearchResponse
	{
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2117
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2117)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartySearchId")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormPartySearchId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartySearchResultArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public NormPartySearchResult[] NormPartySearchResultArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 23
		/// Max length: 23
		/// </summary>
		[System.ComponentModel.DefaultValue("NormPartySearchResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(23)]
		[System.ComponentModel.DataAnnotations.MaxLength(23)]
		public string Object { get; set; } = "NormPartySearchResponse";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2116
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2116)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Query been sent by client
		/// Required
		/// Min length: 3
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="q")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Q { get; set; }
		
		/// <summary>
		/// The number of matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total pages for matches that were found in the index.
		/// Required
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NormPartySearchResult
	{
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset FirstFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastFetchDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset LastFetchDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="matchedObjectArray")]
		public MatchedObject[] MatchedObjectArray { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyDetailsAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NormPartyDetailsAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="normPartyId")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string NormPartyId { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 21
		/// Max length: 21
		/// </summary>
		[System.ComponentModel.DefaultValue("NormPartySearchResult")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(21)]
		[System.ComponentModel.DataAnnotations.MaxLength(21)]
		public string Object { get; set; } = "NormPartySearchResult";
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyClassificationType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PartyClassificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERCaseSearchContent
	{
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 22
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERCaseSearchContent")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "PACERCaseSearchContent";
		
		/// <summary>
		/// This parameter represents the bankruptcy chapter of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclBankruptcyChapter")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclBankruptcyChapter { get; set; }
		
		/// <summary>
		/// Sequentially generated number that identifies the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseId")]
		public int PclCaseId { get; set; }
		
		/// <summary>
		/// Link to case in the case management/electronic case files (CM/ECF) system at the court.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseLink")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PclCaseLink { get; set; }
		
		/// <summary>
		/// The sequence number of the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseNumber")]
		public int PclCaseNumber { get; set; }
		
		/// <summary>
		/// Case Number.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseNumberFull")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclCaseNumberFull { get; set; }
		
		/// <summary>
		/// The divisional office in which the case was filed.
		/// Required
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseOffice")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string PclCaseOffice { get; set; }
		
		/// <summary>
		/// Title of the case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseTitle")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PclCaseTitle { get; set; }
		
		/// <summary>
		/// Code that identifies the type of case.
		/// Required
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseType")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string PclCaseType { get; set; }
		
		/// <summary>
		/// The year in which the case falls. Could be two or four digit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseYear")]
		public int PclCaseYear { get; set; }
		
		/// <summary>
		/// This parameter represents the civil cto number of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilCtoNumber")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclCivilCtoNumber { get; set; }
		
		/// <summary>
		/// This parameter represents the civil disposition date of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilDateDisposition")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclCivilDateDisposition { get; set; }
		
		/// <summary>
		/// This parameter represents the civil initiated date of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilDateInitiated")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclCivilDateInitiated { get; set; }
		
		/// <summary>
		/// This parameter represents the civil terminated date of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilDateTerminated")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclCivilDateTerminated { get; set; }
		
		/// <summary>
		/// This parameter represents the civil stat disposition of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilStatDisposition")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclCivilStatDisposition { get; set; }
		
		/// <summary>
		/// This parameter represents the civil stat initiated of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilStatInitiated")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclCivilStatInitiated { get; set; }
		
		/// <summary>
		/// This parameter represents the civil stat terminated of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilStatTerminated")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclCivilStatTerminated { get; set; }
		
		/// <summary>
		/// This parameter represents the civil transferee of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCivilTransferee")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclCivilTransferee { get; set; }
		
		/// <summary>
		/// The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B
		/// Required
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCourtId")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string PclCourtId { get; set; }
		
		/// <summary>
		/// This parameter represents the date discharged of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDateDischarged")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclDateDischarged { get; set; }
		
		/// <summary>
		/// This parameter represents the date dismissed of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDateDismissed")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclDateDismissed { get; set; }
		
		/// <summary>
		/// Filing date of the case.
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDateFiled")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclDateFiled { get; set; }
		
		/// <summary>
		/// This parameter represents the date reopened of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDateReopened")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclDateReopened { get; set; }
		
		/// <summary>
		/// This parameter represents the date termed of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDateTermed")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclDateTermed { get; set; }
		
		/// <summary>
		/// This parameter represents the disposition of the case when it is present
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDisposition")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string PclDisposition { get; set; }
		
		/// <summary>
		/// This parameter represents the disposition method of the case when it is present
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDispositionMethod")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string PclDispositionMethod { get; set; }
		
		/// <summary>
		/// This parameter represents the joint bankruptcy flag of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclJointBankruptcyFlag")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclJointBankruptcyFlag { get; set; }
		
		/// <summary>
		/// This parameter represents the joint discharged date of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclJointDischargedDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclJointDischargedDate { get; set; }
		
		/// <summary>
		/// This parameter represents the joint dismissed date of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclJointDismissedDate")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclJointDismissedDate { get; set; }
		
		/// <summary>
		/// This parameter represents the joint disposition method of the case when it is present
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclJointDispositionMethod")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string PclJointDispositionMethod { get; set; }
		
		/// <summary>
		/// JPML Case Seed number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclJpmlNumber")]
		public System.Nullable<System.Int32> PclJpmlNumber { get; set; }
		
		/// <summary>
		/// Link to case in the case management/electronic case files (CM/ECF) system at the court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclJurisdictionType")]
		public PACERCaseSearchContentPclJurisdictionType PclJurisdictionType { get; set; }
		
		/// <summary>
		/// Which court does this mdl belongs too.
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlCourtId")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclMdlCourtId { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl date ordered of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlDateOrdered")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclMdlDateOrdered { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl date received of the case when it is present
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlDateReceived")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclMdlDateReceived { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl extension of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlExtension")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclMdlExtension { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl judge lastname of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlJudgeLastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclMdlJudgeLastName { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl lit type of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlLittype")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclMdlLittype { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl status of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlStatus")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclMdlStatus { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl transferee of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlTransferee")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclMdlTransferee { get; set; }
		
		/// <summary>
		/// This parameter represents the mdl transferee district of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMdlTransfereeDistrict")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclMdlTransfereeDistrict { get; set; }
		
		/// <summary>
		/// This parameter represents the nature of suit of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclNatureOfSuit")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclNatureOfSuit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PACERCaseSearchContentPclJurisdictionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appellate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bankruptcy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Criminal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Civil = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Multi-district Litigation")]
		MultiMinusdistrict_Litigation = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERCaseSearchResults
	{
		
		/// <summary>
		/// This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasOnlyMetaInfo")]
		public bool HasOnlyMetaInfo { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 22
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERCaseSearchResults")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "PACERCaseSearchResults";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerContent")]
		public PACERCaseSearchContent PacerContent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uniCourtContent")]
		public CaseSearchResult UniCourtContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERImportCase
	{
		
		/// <summary>
		/// Court Fee charged for the Find Case request. This is only applicable for Appeal Cases.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="courtFee")]
		public System.Nullable<System.Double> CourtFee { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 15
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERImportCase")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Object { get; set; } = "PACERImportCase";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerImportCaseResultsArray")]
		public PACERImportCaseResults[] PacerImportCaseResultsArray { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERImportCaseResults
	{
		
		/// <summary>
		/// This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasOnlyMetaInfo")]
		public bool HasOnlyMetaInfo { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 22
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERImportCaseResults")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "PACERImportCaseResults";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uniCourtContent")]
		public CaseSearchResult UniCourtContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERPartySearchContent
	{
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 23
		/// Max length: 23
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERPartySearchContent")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(23)]
		[System.ComponentModel.DataAnnotations.MaxLength(23)]
		public string Object { get; set; } = "PACERPartySearchContent";
		
		/// <summary>
		/// Sequentially generated number that identifies the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseId")]
		public int PclCaseId { get; set; }
		
		/// <summary>
		/// The sequence number of the case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseNumber")]
		public int PclCaseNumber { get; set; }
		
		/// <summary>
		/// Case Number.
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseNumberFull")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclCaseNumberFull { get; set; }
		
		/// <summary>
		/// The divisional office in which the case was filed.
		/// Required
		/// Max length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseOffice")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string PclCaseOffice { get; set; }
		
		/// <summary>
		/// Title of the case.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseTitle")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PclCaseTitle { get; set; }
		
		/// <summary>
		/// Code that identifies the type of case.
		/// Required
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseType")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string PclCaseType { get; set; }
		
		/// <summary>
		/// The year in which the case falls. Could be two or four digit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCaseYear")]
		public int PclCaseYear { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCourtCase")]
		public PACERCaseSearchContent PclCourtCase { get; set; }
		
		/// <summary>
		/// The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B
		/// Required
		/// Max length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclCourtId")]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string PclCourtId { get; set; }
		
		/// <summary>
		/// Filing date of the case.
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclDateFiled")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string PclDateFiled { get; set; }
		
		/// <summary>
		/// This parameter represents the first name of the case when it is present
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclFirstName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PclFirstName { get; set; }
		
		/// <summary>
		/// This parameter represents the generation of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclGeneration")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclGeneration { get; set; }
		
		/// <summary>
		/// Link to case in the case management/electronic case files (CM/ECF) system at the court.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclJurisdictionType")]
		public PACERPartySearchContentPclJurisdictionType PclJurisdictionType { get; set; }
		
		/// <summary>
		/// This parameter represents the last name of the case when it is present
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclLastName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PclLastName { get; set; }
		
		/// <summary>
		/// This parameter represents the middle name of the case when it is present
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclMiddleName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string PclMiddleName { get; set; }
		
		/// <summary>
		/// This parameter represents the party role of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclPartyRole")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclPartyRole { get; set; }
		
		/// <summary>
		/// This parameter represents the party type of the case when it is present
		/// Required
		/// Max length: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pclPartyType")]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string PclPartyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PACERPartySearchContentPclJurisdictionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appellate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bankruptcy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Criminal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Civil = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Multi-district Litigation")]
		MultiMinusdistrict_Litigation = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERPartySearchResults
	{
		
		/// <summary>
		/// This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hasOnlyMetaInfo")]
		public bool HasOnlyMetaInfo { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 23
		/// Max length: 23
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERPartySearchResults")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(23)]
		[System.ComponentModel.DataAnnotations.MaxLength(23)]
		public string Object { get; set; } = "PACERPartySearchResults";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerContent")]
		public PACERPartySearchContent PacerContent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uniCourtContent")]
		public CaseSearchResult UniCourtContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERSearchPageInfo
	{
		
		/// <summary>
		/// Indicates if the current page is the first page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="first")]
		public bool First { get; set; }
		
		/// <summary>
		/// Indicates if the current page is the last page.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="last")]
		public bool Last { get; set; }
		
		/// <summary>
		/// Current Page number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="number")]
		public int Number { get; set; }
		
		/// <summary>
		/// Number of records returned.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public int NumberOfElements { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 19
		/// Max length: 19
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERSearchPageInfo")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(19)]
		[System.ComponentModel.DataAnnotations.MaxLength(19)]
		public string Object { get; set; } = "PACERSearchPageInfo";
		
		/// <summary>
		/// Number of results obtained in a page..
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="size")]
		public int Size { get; set; }
		
		/// <summary>
		/// Total number of records available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public int TotalElements { get; set; }
		
		/// <summary>
		/// Total pages of data available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PACERSearchReceipt
	{
		
		/// <summary>
		/// No of pages that was billed for the given PACER search.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billablePages")]
		public int BillablePages { get; set; }
		
		/// <summary>
		/// client code added if any was set.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientCode")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ClientCode { get; set; }
		
		/// <summary>
		/// PACER Account ID.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="csoId")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public System.Nullable<System.Int32> CsoId { get; set; }
		
		/// <summary>
		/// Description of the search made.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// Firm ID.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firmId")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string FirmId { get; set; }
		
		/// <summary>
		/// ID which is used for PACER login.
		/// Required
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loginId")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string LoginId { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 18
		/// Max length: 18
		/// </summary>
		[System.ComponentModel.DefaultValue("PACERSearchReceipt")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(18)]
		[System.ComponentModel.DataAnnotations.MaxLength(18)]
		public string Object { get; set; } = "PACERSearchReceipt";
		
		/// <summary>
		/// Report ID for the search made.
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reportId")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ReportId { get; set; }
		
		/// <summary>
		/// Details of the search made for this request.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="search")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Search { get; set; }
		
		/// <summary>
		/// PACER Search Fee.
		/// Required
		/// Min length: 3
		/// Max length: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="searchFee")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string SearchFee { get; set; }
		
		/// <summary>
		/// Date when the transaction was made at the pacer court site.
		/// Required
		/// Min length: 25
		/// Max length: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionDate")]
		[System.ComponentModel.DataAnnotations.MinLength(25)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public System.DateTimeOffset TransactionDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PCLCase
	{
		
		/// <summary>
		/// Link to next page of the PCL Search Results.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 7
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DefaultValue("PCLCase")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Object { get; set; } = "PCLCase";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerPageInfo")]
		public PACERSearchPageInfo PacerPageInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerReceipt")]
		public PACERSearchReceipt PacerReceipt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerSearchResultsArray")]
		public PACERCaseSearchResults[] PacerSearchResultsArray { get; set; }
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of records available for this Search.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects the current PCL Search.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PCLParty
	{
		
		/// <summary>
		/// Link to next page of the PCL Search Results.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object
		/// Required
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DefaultValue("PCLParty")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Object { get; set; } = "PCLParty";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerPageInfo")]
		public PACERSearchPageInfo PacerPageInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerReceipt")]
		public PACERSearchReceipt PacerReceipt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerSearchResultsArray")]
		public PACERPartySearchResults[] PacerSearchResultsArray { get; set; }
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Total number of records available for this Search.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects the current PCL Search.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PacerCredential
	{
		
		/// <summary>
		/// Pacer Client Code.
		/// Required
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultPacerClientCode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string DefaultPacerClientCode { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 15
		/// Max length: 15
		/// </summary>
		[System.ComponentModel.DefaultValue("PacerCredential")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string Object { get; set; } = "PacerCredential";
		
		/// <summary>
		/// Pacer User Id.
		/// Required
		/// Min length: 6
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerUserId")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PacerUserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PacerCredentialListResponse
	{
		
		/// <summary>
		/// Link for the next page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Name of the object.
		/// Required
		/// Min length: 27
		/// Max length: 27
		/// </summary>
		[System.ComponentModel.DefaultValue("PacerCredentialListResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(27)]
		[System.ComponentModel.DataAnnotations.MaxLength(27)]
		public string Object { get; set; } = "PacerCredentialListResponse";
		
		/// <summary>
		/// Array of pacer credentials.
		/// Required
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerCredentialArray")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public PacerCredential[] PacerCredentialArray { get; set; }
		
		/// <summary>
		/// Current page number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Link for the previous page.
		/// Required
		/// Min length: 1
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of pacer credentials available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages available.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PacerCredentialRequest
	{
		
		/// <summary>
		/// Pacer Client Code.
		/// Min length: 0
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultPacerClientCode")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string DefaultPacerClientCode { get; set; }
		
		/// <summary>
		/// Pacer User Id.
		/// Required
		/// Min length: 6
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pacerUserId")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PacerUserId { get; set; }
		
		/// <summary>
		/// Password.
		/// Required
		/// Min length: 8
		/// Max length: 45
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartyRoleGroupResponse
	{
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2147
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 22
		/// Max length: 22
		/// </summary>
		[System.ComponentModel.DefaultValue("PartyRoleGroupResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(22)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string Object { get; set; } = "PartyRoleGroupResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleGroupArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public PartyRoleGroup[] PartyRoleGroupArray { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2146
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2146)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartyRoleResponse
	{
		
		/// <summary>
		/// Link to next page.
		/// Required
		/// Min length: 1
		/// Max length: 2142
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nextPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2142)]
		public string NextPageAPI { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 17
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DefaultValue("PartyRoleResponse")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(17)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string Object { get; set; } = "PartyRoleResponse";
		
		/// <summary>
		/// Page number for which results where obtained.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="partyRoleArray")]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public PartyRole[] PartyRoleArray { get; set; }
		
		/// <summary>
		/// Link to previous page.
		/// Required
		/// Min length: 1
		/// Max length: 2141
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previousPageAPI")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2141)]
		public string PreviousPageAPI { get; set; }
		
		/// <summary>
		/// Total number of matches found.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalCount { get; set; }
		
		/// <summary>
		/// Total number of pages to obtain all the objects.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public int TotalPages { get; set; }
	}
	
	/// <summary>
	/// Success object contains its message related to the API request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Success
	{
		
		/// <summary>
		/// A message indicating that the request was successful.
		/// Required
		/// Min length: 1
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 7
		/// Max length: 7
		/// </summary>
		[System.ComponentModel.DefaultValue("Success")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="object")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Object { get; set; } = "Success";
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets details for a requested Attorney ID.
		/// Retrieve the attorney with the specified attorneyId value.
		/// GetAttorneyById attorney/{attorneyId}
		/// </summary>
		/// <returns>The request is recieved.</returns>
		public async Task<Attorney> GetAttorneyByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attorney/{attorneyId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attorney>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Associated Party details for a requested Attorney ID.
		/// Retrieve the parties represented by the attorney with the specified attorneyId value.
		/// GetAttorneyAssociatedParties attorney/{attorneyId}/associatedParties
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PartyAttorneyAssociations> GetAttorneyAssociatedPartiesAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attorney/{attorneyId}/associatedParties?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartyAttorneyAssociations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Specify the billing cycle to know the API usage.
		/// An endpoint to obtain information on API usage for a specific billing cycle.
		/// GetBillingUsageByBillingCycle billingCycleUsage/{billingCycle}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BillingCycleUsageResponse> GetBillingUsageByBillingCycleAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billingCycleUsage/{billingCycle}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingCycleUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the previous 12 billing cycles.
		/// An endpoint to obtain information on the previous 12 billing cycles.
		/// GetBillingCycles billingCycles
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BillingCyclesResponse> GetBillingCyclesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "billingCycles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillingCyclesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of callback types with count for a requested Date.
		/// Get list of callback types with count for a requested Date.
		/// GetCallbacks callbacks
		/// </summary>
		/// <param name="date">Date for which fetch the callback type list. By default, the date will be set to current date.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="status">Status of the callbacks. Default status will fetch all callbacks.
		/// Min length: 7
		/// Max length: 11
		// </param>
		/// <returns>OK</returns>
		public async Task<CallbackListResponse> GetCallbacksAsync(System.DateTimeOffset date, GetCallbacksStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "callbacks?date=" + date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CallbackListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets case information for a requested Case ID.
		/// Retrieve the case with the specified caseId value.
		/// GetCase case/{caseId}
		/// </summary>
		/// <returns>The request is recieved.</returns>
		public async Task<Case> GetCaseAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Case>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Attorneys for a requested Case ID.
		/// Retrieve the attorneys in the case with the specified caseId value.
		/// GetCaseAttorneys case/{caseId}/attorneys
		/// </summary>
		/// <param name="isVisible">Retrieve attorneys in the case with the specified caseId value whose isVisible flag is set to the specified value.</param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<Attorneys> GetCaseAttorneysAsync(bool isVisible, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/attorneys?isVisible="+isVisible+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attorneys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Docket Entries for a requested Case ID.
		/// Retrieve the docket entries in the case with the specified caseId value.
		/// GetCaseDocketEntries case/{caseId}/docketEntries
		/// </summary>
		/// <param name="docketNumber">Retrieve the docket entry witih the specified docket number in the case with the specified caseId value.</param>
		/// <param name="sortBy">Sort the retrieved docket entries in ascending order or descending order of date.
		/// Min length: 10
		/// Max length: 20
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<DocketEntries> GetCaseDocketEntriesAsync(int docketNumber, GetCaseDocketEntriesSortBy sortBy, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/docketEntries?docketNumber="+docketNumber+"&sortBy=" + sortBy+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocketEntries>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Primary Documents of Docket Entries.
		/// Retrieve the primary documents in the case with the specified caseId value.
		/// GetPrimaryDocumentsForDocketEntries case/{caseId}/docketEntries/primaryDocuments
		/// </summary>
		/// <param name="docketNumber">Retrieve the primary documents associated with the specified docket number in the case with the specified caseId value.</param>
		/// <param name="inLibrary">Retrieve the primary documents in the with the specified inLibrary flag in the case with the specified caseId value.</param>
		/// <param name="afterFirstFetchDate">Retrieve all primary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="libraryDate">Retrieve all primary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<DocketEntryPrimaryDocuments> GetPrimaryDocumentsForDocketEntriesAsync(int docketNumber, bool inLibrary, System.DateTimeOffset afterFirstFetchDate, System.DateTimeOffset libraryDate, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/docketEntries/primaryDocuments?docketNumber="+docketNumber+"&inLibrary="+inLibrary+"&afterFirstFetchDate=" + afterFirstFetchDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&libraryDate=" + libraryDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocketEntryPrimaryDocuments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Secondary Documents of Docket Entries.
		/// Retrieve the secondary documents in the case with the specified caseId value.
		/// GetSecondaryDocumentsForDocketEntries case/{caseId}/docketEntries/secondaryDocuments
		/// </summary>
		/// <param name="docketNumber">Retrieve the secondary documents associated with the specified docket number in the case with the specified caseId value.</param>
		/// <param name="inLibrary">Retrieve the secondary documents in the with the specified inLibrary flag in the case with the specified caseId value.</param>
		/// <param name="afterFirstFetchDate">Retrieve all secondary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="libraryDate">Retrieve all secondary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<DocketEntrySecondaryDocuments> GetSecondaryDocumentsForDocketEntriesAsync(int docketNumber, bool inLibrary, System.DateTimeOffset afterFirstFetchDate, System.DateTimeOffset libraryDate, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/docketEntries/secondaryDocuments?docketNumber="+docketNumber+"&inLibrary="+inLibrary+"&afterFirstFetchDate=" + afterFirstFetchDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&libraryDate=" + libraryDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocketEntrySecondaryDocuments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Documents for a requested Case ID.
		/// Gets Documents for a requested Case ID.
		/// GetCaseDocuments case/{caseId}/documents
		/// </summary>
		/// <param name="inLibrary">Filter all the documents those are added to the UniCourt library.</param>
		/// <param name="afterFirstFetchDate">Get all the documents which were added to the case on or after a specific date.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="libraryDate">Sort all the documents based on the date when the document was added to the UniCourt Library.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="firstFetchDate">Sort all the documents based on the date it was fetched from the source site.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortBy">Sort documents with document order.
		/// Min length: 10
		/// Max length: 20
		// </param>
		/// <param name="pageNumber">The page for which the result should be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<CaseDocuments> GetCaseDocumentsAsync(bool inLibrary, System.DateTimeOffset afterFirstFetchDate, System.DateTimeOffset libraryDate, System.DateTimeOffset firstFetchDate, GetCaseDocumentsSortBy sortBy, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/documents?inLibrary="+inLibrary+"&afterFirstFetchDate=" + afterFirstFetchDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&libraryDate=" + libraryDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&firstFetchDate=" + firstFetchDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortBy=" + sortBy+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseDocuments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Hearings for a requested Case ID.
		/// Gets Hearings for a requested Case ID.
		/// GetCaseHearings case/{caseId}/hearings
		/// </summary>
		/// <param name="sortBy">Specify the sort order of hearings in the case with the specified caseId.</param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<Hearings> GetCaseHearingsAsync(GetCaseHearingsSortBy sortBy, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/hearings?sortBy=" + sortBy+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hearings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Judges for a requested Case ID.
		/// Retrieve the judges involved in the specified case.
		/// GetCaseJudges case/{caseId}/judges
		/// </summary>
		/// <param name="isVisible">Retrieve attorneys judges in the case with the specified caseId value whose isVisible flag is set to the specified value.</param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<Judges> GetCaseJudgesAsync(bool isVisible, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/judges?isVisible="+isVisible+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Judges>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Parties for a requested Case ID.
		/// Retrieve the parties involved in the case with the specified caseId value.
		/// GetCaseParties case/{caseId}/parties
		/// </summary>
		/// <param name="isVisible">Retrieve parties in the case with the specified caseId value whose isVisible flag is set to the specified value.</param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <param name="partyRoleId">Retrieve all parties with the specified partyRoleId value in the case with the specified caseId value.
		/// Min length: 18
		/// Max length: 18
		// </param>
		/// <param name="partyRoleGroupId">Retrieve all parties with the specified partyRoleGroupId value in the case with the specified caseId value.
		/// Min length: 18
		/// Max length: 18
		// </param>
		/// <param name="attorneyRepresentationTypeId">Retrieve all parties with the specified attorneyRepresentationTypeId value in the case with the specified caseId value.
		/// Min length: 18
		/// Max length: 18
		// </param>
		/// <param name="partyClassificationType">Retrieve all parties with the specified partyClassificationType value in the case with the specified caseId value.
		/// Min length: 5
		/// Max length: 10
		// </param>
		/// <returns>The request is recieved.</returns>
		public async Task<Parties> GetCasePartiesAsync(bool isVisible, int pageNumber, string partyRoleId, string partyRoleGroupId, string attorneyRepresentationTypeId, PartyPartyClassificationType partyClassificationType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/parties?isVisible="+isVisible+"&pageNumber="+pageNumber+"&partyRoleId=" + (partyRoleId==null? "" : System.Uri.EscapeDataString(partyRoleId))+"&partyRoleGroupId=" + (partyRoleGroupId==null? "" : System.Uri.EscapeDataString(partyRoleGroupId))+"&attorneyRepresentationTypeId=" + (attorneyRepresentationTypeId==null? "" : System.Uri.EscapeDataString(attorneyRepresentationTypeId))+"&partyClassificationType=" + partyClassificationType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Parties>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Related Cases for a requested Case ID.
		/// Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
		/// GetCaseRelatedCases case/{caseId}/relatedCases
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<RelatedCases> GetCaseRelatedCasesAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "case/{caseId}/relatedCases?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RelatedCases>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Area Of Law.
		/// Get Case Count Analytics by Area Of Law.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by Area Of Law of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByAreaOfLaw caseCountAnalyticsByAreaOfLaw
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByAreaOfLawResponse> GetCaseCountAnalyticsByAreaOfLawAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByAreaOfLaw?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByAreaOfLawResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Case Class.
		/// Get Analytics by Case Class.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by Case Class  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCaseClass caseCountAnalyticsByCaseClass
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCaseClassResponse> GetCaseCountAnalyticsByCaseClassAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCaseClass?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCaseClassResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Case Filed Date.
		/// Get Case Count Analytics grouped by Filing Date.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by case filed date of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCaseFiledDate caseCountAnalyticsByCaseFiledDate
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <param name="groupBy">GroupBy</param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCaseFiledDateResponse> GetCaseCountAnalyticsByCaseFiledDateAsync(string q, int pageNumber, CaseCountAnalyticsByCaseFiledDateGroupedBy groupBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCaseFiledDate?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&groupBy=" + groupBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCaseFiledDateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Case Type.
		/// Get Case Count Analytics by Case Type.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by case types  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCaseType caseCountAnalyticsByCaseType
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCaseTypeResponse> GetCaseCountAnalyticsByCaseTypeAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCaseType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCaseTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Case Type Group.
		/// Get Analytics by Case Type Group.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by case type catgeory of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCaseTypeGroup caseCountAnalyticsByCaseTypeGroup
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCaseTypeGroupResponse> GetCaseCountAnalyticsByCaseTypeGroupAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCaseTypeGroup?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCaseTypeGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Court.
		/// Get Case Count Analytics grouped by Court.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by Court of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCourt caseCountAnalyticsByCourt
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCourtResponse> GetCaseCountAnalyticsByCourtAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCourt?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCourtResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Court Location.
		/// Get Case Count Analytics grouped by Court Location.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by court location  of all cases with court id CORTV4vCEaKrhystBz and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=courtId:"CORTV4vCEaKrhystBz" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCourtLocation caseCountAnalyticsByCourtLocation
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCourtLocationResponse> GetCaseCountAnalyticsByCourtLocationAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCourtLocation?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCourtLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Court System.
		/// Get Case Count Analytics grouped by Court System.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by court system of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCourtSystem caseCountAnalyticsByCourtSystem
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCourtSystemResponse> GetCaseCountAnalyticsByCourtSystemAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCourtSystem?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCourtSystemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by CourtType.
		/// Get Case Count Analytics grouped by Court Type.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by court type  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByCourtType caseCountAnalyticsByCourtType
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByCourtTypeResponse> GetCaseCountAnalyticsByCourtTypeAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByCourtType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByCourtTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Jurisdiction Geo.
		/// Get Case Count Analytics grouped by Jurisdiction Geo.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by jurisdiction geo of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByJurisdictionGeo caseCountAnalyticsByJurisdictionGeo
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByJurisdictionGeoResponse> GetCaseCountAnalyticsByJurisdictionGeoAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByJurisdictionGeo?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByJurisdictionGeoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Attorney.
		/// Returns Case Analytics by Attorney.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by norm attorney of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByNormAttorney caseCountAnalyticsByNormAttorney
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByNormAttorneyResponse> GetCaseCountAnalyticsByNormAttorneyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByNormAttorney?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByNormAttorneyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Judge.
		/// Returns Case Analytics by Judge.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by norm judge of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByNormJudge caseCountAnalyticsByNormJudge
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByNormJudgeResponse> GetCaseCountAnalyticsByNormJudgeAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByNormJudge?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByNormJudgeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Norm Law Firm.
		/// Returns Case Analytics by Norm Law Firm.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by norm lawfirm  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByNormLawFirm caseCountAnalyticsByNormLawFirm
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByNormLawFirmResponse> GetCaseCountAnalyticsByNormLawFirmAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByNormLawFirm?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByNormLawFirmResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Party.
		/// Returns Case Analytics by Party.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by norm party of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByNormParty caseCountAnalyticsByNormParty
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByNormPartyResponse> GetCaseCountAnalyticsByNormPartyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByNormParty?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByNormPartyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Party Role.
		/// Returns Case Analytics by Party Type.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by party role of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByPartyRole caseCountAnalyticsByPartyRole
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByPartyRoleResponse> GetCaseCountAnalyticsByPartyRoleAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByPartyRole?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByPartyRoleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Party Role Group.
		/// Returns Case Analytics by Party Type Group.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by Party Role Group of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByPartyRoleGroup caseCountAnalyticsByPartyRoleGroup
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByPartyRoleGroupResponse> GetCaseCountAnalyticsByPartyRoleGroupAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseCountAnalyticsByPartyRoleGroup?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByPartyRoleGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details for a requested Document ID.
		/// Gets details for a requested Document ID.
		/// GetDocumentById caseDocument/{caseDocumentId}
		/// </summary>
		/// <returns>The request is recieved.</returns>
		public async Task<CaseDocument> GetDocumentByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseDocument/{caseDocumentId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets downloadable URL for a requested Document ID.
		/// Gets downloadable URL for a requested Document ID.
		/// GetCaseDocumentDownloadById caseDocumentDownload/{caseDocumentId}
		/// </summary>
		/// <param name="isPreviewDocument">If the document you want to download is a preview of a document.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<DocumentDownload> GetCaseDocumentDownloadByIdAsync(bool isPreviewDocument, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseDocumentDownload/{caseDocumentId}?isPreviewDocument="+isPreviewDocument;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DocumentDownload>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Case Document Order for requested Document Ids.
		/// Add Case Document Order for requested Document Ids.
		/// OrderCaseDocument caseDocumentOrder
		/// </summary>
		/// <param name="requestBody">If the Case Document Order is for Preview, then the value for ``isPreviewOnly`` should be ``true`` else ``false``.
		///</param>
		/// <returns>OK</returns>
		public async Task<CaseDocumentOrderCallback> OrderCaseDocumentAsync(CaseDocumentOrderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseDocumentOrder";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseDocumentOrderCallback>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Case Document Order Callback list for a requested Date.
		/// Get Case Document Order Callback list for a requested Date.
		/// GetCaseDocumentOrderCallbacks caseDocumentOrder/callbacks
		/// </summary>
		/// <param name="date">Date for which fetch the Case Document Order Callback list. By default, the date will be set to current date.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="status">Status of Document Order callbacks. Default status will fetch all callbacks.
		/// Min length: 7
		/// Max length: 11
		// </param>
		/// <param name="pageNumber">Page to fetch the Case Document Order Callback list.<br>
		///  - Minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseDocumentOrderCallbackListResponse> GetCaseDocumentOrderCallbacksAsync(System.DateTimeOffset date, GetCallbacksStatus status, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseDocumentOrder/callbacks?date=" + date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + status+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseDocumentOrderCallbackListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Case Document Order Callback for a requested Case Document Order Callback Id.
		/// Get Case Document Order Callback for a requested Case Document Order Callback Id.
		/// GetCaseDocumentOrderCallbackById caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CaseDocumentOrderCallback> GetCaseDocumentOrderCallbackByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseDocumentOrderCallback>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Case Export Callback list for a requested Date.
		/// Retrieve callbacks according to the specified criteria.
		/// GetCaseExportCallbacks caseExport/callbacks
		/// </summary>
		/// <param name="date">The date for which callbacks are to be retrieved.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="status">The status code of the callbacks to be retrieved.
		/// Min length: 7
		/// Max length: 11
		// </param>
		/// <param name="pageNumber">The page number of the callbacks to be retrieved.<br>
		///  - Minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseExportCallbackListResponse> GetCaseExportCallbacksAsync(System.DateTimeOffset date, GetCallbacksStatus status, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseExport/callbacks?date=" + date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + status+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseExportCallbackListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Case Export Callback for a requested Case Export Callback Id.
		/// Retrieve the specified case export callback object.
		/// GetCaseExportCallbackById caseExport/callbacks/{caseExportCallbackId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CaseExportCallback> GetCaseExportCallbackByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseExport/callbacks/{caseExportCallbackId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseExportCallback>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets case exported for a requested Case ID.
		/// Retrieve information about the specified case export.
		/// ExportCase caseExport/{caseId}
		/// </summary>
		/// <returns>The request is recieved.</returns>
		public async Task<CaseExportCallback> ExportCaseAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseExport/{caseId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseExportCallback>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case search.
		/// This endpoint retrieves cases according to keyword expressions you provide.
		/// <br>
		/// Keyword expressions are constructed according to the rules described below.
		/// <br><br>
		/// This API supports multiple use cases:
		/// - Search for multiple keywords  `Google OR Facebook`.
		/// - Search within particular attributes.
		/// - Relational search using terms and connectors.
		/// - And much more.
		/// ----
		/// 
		/// ## Allowed Connectors in Keyword Expressions
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find cases containing each of the terms joined by AND connectors.|**personal AND injury**|
		/// | **OR**  |Find cases containing any of the terms joined by OR connectors.|**order OR decision**|
		/// | **NOT** |Find cases that do not contain the specified term.|**personal AND NOT injury**.  Find cases with the word “personal” and not “injury”.|
		/// | **“[phrase]”** |Find the exact phrase placed between the quotation marks.|**"personal injury”**|
		/// | **~**  |Find cases in which the specified words appear near each other. For example, "personal injury" ~ 5 targets cases in which the word "personal" appears within 5 words of the word "injury".|**“personal injury” ~ 5** - Find cases with “personal” within five words of “injury”. |
		/// | **( … )** |Specifies the order in which connectors are to be appliied in a keyword expression.| **personal AND (injury OR fall)** - Find cases with the word personal injury or personal fall.|
		/// 
		/// <br><br>
		/// ## Fields and Connectors Searching
		/// | Filed | Description  | Example |
		/// | ------| ------|------|
		/// |**caseNumber** |Find cases with the specified case number (i.e., docket number).| **caseNumber:"2020-L-007212"** - Find cases whose case number matches given case number number.|
		/// |**caseName** |Find cases with the specified case title.| **caseName:"THOMAS P. CARNEY, INC. VS BEHLER JAMES Et Al"** - Find cases whose case name matches given terms.|
		/// |**Court**|Find cases in the specified court.|**(Court:(name:(New York)))** - Find cases in New York state.<br>|
		/// |**CaseStatus**|Find cases witih the specified case status.|**(CaseStatus:(name:Disposed))** - All disposed cases.<br>|
		/// |**CaseType**|Find cases of the specified case type. | **(CaseType:(name:Property))** - Cases with case type “property”.|
		/// |**Party** | Find cases involving the specified party.| **(Party:(name:Apple))** - Find cases involving Apple. |
		/// |**partyId**|Find cases involving a party with the specified partyId value.|**(Party:(partyId:"PRTYgu1ffe866484c2"))**|
		/// |**PartyRole** | Find cases in which at least one party has the specified party role. | **(Party:((PartyRole:(name:"plaintiff"))))** - Find cases with party role “plaintiff”.<br><br> **(Party:((PartyRole:(name:defendant)) AND (AttorneyRepresentationType:(name:(Attorney represented)))))** - Find cases where a party is acting as defendant and represented by an attorney.|
		/// |**AttorneyRepresentationType**| Find cases in which at least one party has the specified attorney representation type.|**(Party:(AttorneyRepresentationType:(name:"attorney represented")))** - Find cases where a party is represented by an attorney. |
		/// |**Attorney** | Find cases involving the specified attorney. | **(Attorney:(name:"David Boies"))** - Find cases involving the attorney David Boies. |
		/// |**AttorneyType**|Find cases involving at least one attorney of the specified attorney type.|**(Attorney:((AttorneyType:(name:"Lead Attorney"))))**|
		/// |**Judge** |Find cases involving the specified judge. | **(Judge:(name:"Posner"))** - Find cases involving Judge Posner.|
		/// |**JudgeType**|Find cases involving at least one judge of the specified judge type.|**(Judge:((JudgeType:(name:"Magistrate"))))**|
		/// |**CaseStats**|Find cases with the specified case statistics.|**(CaseStats:(partyCount:[10 TO 100]))** - Find cases involving 10 to 100 parties.<br>**(CaseStats:(attorneyCount:[2 TO 40]))** - Find cases involving 2 to 40 attorneys.<br>**(CaseStats:(judgeCount:[\* TO 2]))** - Find cases involving up to 2 judges. <br>**(CaseStats:(docketEntryCount:[10 TO 100]))** - Find cases having 10 to 100 docket_entries. <br>**(CaseStats:(allCaseDocumentCount:[10 TO 100]))** - Find cases having 10 to 100 documents. |
		/// |**filedDate** | Find cases that were filed on the specified date or within the specified date range. | **filedDate:[2020-03-15 TO 2021-12-01]** - Find the most recently filed cases between March 15, 2020 and December 1, 2021 (inclusive). |
		/// |**lastFetchDate**| Find cases in which UniCourt last checked for updates on the specified date or within the specified date range. |**(lastFetchDate:[now-60d TO \*\])** - Find cases that were updated by UniCourt in the last 60 days. |
		/// |**lastFetchDateWithUpdates**|Find cases in which UniCourt last detected an update on the specified date or within the specified date range.|**(lastFetchDateWithUpdates:[now-6d TO \*\])** - Find cases for the changes found on court site in last 6 days.|
		/// |**participantsLastFetchDate**|Find cases in which information cocnerning participants was last updated on the specified date or within the specified date range.|**(participantsLastFetchDate:[now-6d TO \*\])** - Find cases where the participant's information was updated in last 6 days.|
		/// |**DocketEntry**|Find cases in which at least one docket entry contains the specified text.|**(DocketEntry:(text:(Motion to Compel Responses) AND docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00]))** - Find cases with docket text “Motion to Compel Responses” and action date between 2020-01-01 and 2020-05-01.|
		/// |**docketEntryDate**|Find cases in which at least one docket entry was made on the specified date or within the specified date range.|**(DocketEntry:(docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00])) AND (CaseStats:(allCaseDocumentCount:[0 TO 10]))** - Find cases with docket action date between 2020-01-01 and 2020-05-01 having up to 10 documents associated with it.|
		/// |**HearingDate**| Find cases with at least one hearing scheduled for the specified date or within the specified date range.|**(Hearing:(hearingDate:[now TO now+10d]))** - Find cases where hearing is scheduled in next 10 days.|
		/// |**HearingDate**| Search for cases where hearing is going to happen in 10 to 20days.|**(Hearing:(hearingDate:[now+10d TO now+20d]))** - Find cases where hearing is scheduled in next 10 to 20 days.|
		/// |**JurisdictionGeo**|Find cases in which the law of the specified state governs.|**(JurisdictionGeo:(state:"New York"))**- Find cases where Jurisdiction is New York state.|
		/// |**Party Address Exists**|Find cases with Party addresses.|**(Party:(Contact:(Address:(stateName:\*))))**- Returns only those cases that have addresses for parties.|
		/// |**Document**|Find cases with specific document name and preview is available for the document.|**(CaseDocument:(name:"civil case cover sheet" AND isPreviewAvailable:true))**- Returns cases with document civil case cover sheet and preview is available.|
		/// 
		/// <br><br>
		/// ---
		/// ## Party Sub Filter Examples
		/// |Example |Explanation |
		/// |---|---|
		/// |**(Party:(name:google AND (PartyRole:(name:"plaintiff"))))**|Find cases involving at least one plaintiff whose name contains the term "Google".|
		/// |**(Party:(name:"OTELIA PEREIDA" AND (AttorneyRepresentationType:(name:"Attorney represented")))) AND (Attorney:(name:"Law Offices of Todd M Friedman"))**|Find cases where the Party is *OTELIA PEREIDA* and is represented by the attorney *Law Offices of Todd M Friedman*.|
		/// 
		/// ---
		/// ### All query parameters supported for this API can be found in below schema section. Schema -->  CaseSearchQueryObject
		/// 
		/// SearchCases caseSearch
		/// </summary>
		/// <param name="q">Query parameter for keyword expressions.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="sort">Query parameter specifying how results are to be sorted. Results can be sorted according to filedDate or relevancy.
		/// Min length: 9
		/// Max length: 9
		// </param>
		/// <param name="order">Query parameter specifying whether search result are sorted in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseSearchResponse> SearchCasesAsync(string q, SearchCasesSort sort, SearchCasesOrder order, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseSearch?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&sort=" + sort+"&order=" + order+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case search results for a given caseSearchId.
		/// Retrieve the search results corresponding to the specified caseSearchId value.
		/// 
		/// SearchCasesById caseSearch/{caseSearchId}
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseSearchResponse> SearchCasesByIdAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseSearch/{caseSearchId}?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Case Track for the requested Case Id.
		/// Track the specified case.
		/// TrackCase caseTrack
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Success> TrackCaseAsync(CaseTrackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseTrack";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove Case Track for a specific Case Id.
		/// Remove Case Track for a specific Case Id.
		/// RemoveCaseTrackById caseTrack/{caseId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Success> RemoveCaseTrackByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseTrack/{caseId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Case Track for a requested Case Id.
		/// Retrieve case tracking information for the specified caseId value.
		/// GetCaseTrackById caseTrack/{caseId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CaseTrack> GetCaseTrackByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseTrack/{caseId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseTrack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Case Track list.
		/// Retrieve a list of all tracked cases.
		/// GetCaseTracks caseTracks
		/// </summary>
		/// <param name="lastFetchDate">The lastFetchDate value of the tracked case. The date value should be entered in the format YYYY-MM-DDTHH:MM:SS+ZZ:zz.
		///
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="lastFetchDateWithUpdates">The date on which changes were last found in the case information.
		///
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.<br>
		///  - Minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseTrackListResponse> GetCaseTracksAsync(System.DateTimeOffset lastFetchDate, System.DateTimeOffset lastFetchDateWithUpdates, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseTracks?lastFetchDate=" + lastFetchDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&lastFetchDateWithUpdates=" + lastFetchDateWithUpdates.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseTrackListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Case Update for the requested Case Id.
		/// Request case updates for the specified case.
		/// UpdateCase caseUpdate
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CaseUpdate> UpdateCaseAsync(CaseUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseUpdate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Case Updates for a requested CaseId.
		/// Retrieve case updates for the specified case object.
		/// GetCaseUpdateByCaseId caseUpdate/{caseId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CaseUpdate> GetCaseUpdateByCaseIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseUpdate/{caseId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseUpdate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Case Update  list for a requested Date.
		/// Retrieve case updates for the specified date.
		/// GetCaseUpdates caseUpdates
		/// </summary>
		/// <param name="caseId">The caseId value of the case for which updates should be retrieved.
		/// Min length: 18
		/// Max length: 18
		// </param>
		/// <param name="requestedDate">The date for which case updates are to be retrieved.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="status">Status of the case updates to be retrieved.
		/// Min length: 7
		/// Max length: 11
		// </param>
		/// <param name="pageNumber">The page number of the callbacks to be retrieved.<br>
		///  - Minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseUpdateListResponse> GetCaseUpdatesAsync(string caseId, System.DateTimeOffset requestedDate, GetCallbacksStatus status, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "caseUpdates?caseId=" + (caseId==null? "" : System.Uri.EscapeDataString(caseId))+"&requestedDate=" + requestedDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + status+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseUpdateListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Court Coverage of all courts of specific type.
		/// Determine whether the specified court is covered by UniCourt.
		/// GetCourtCoverage courtCoverage/{courtId}
		/// </summary>
		/// <returns>The request is received.</returns>
		public async Task<CourtCoverage> GetCourtCoverageAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "courtCoverage/{courtId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtCoverage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get API usage for a requested Date.
		/// An endpoint to obtain information on API usage for a specific day.
		/// GetDailyUsageByDate dailyUsage/{date}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DailyUsageResponse> GetDailyUsageByDateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dailyUsage/{date}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DailyUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate new token to access API.
		/// This endpoint allows you to generate a new access token, which is a required field for all UniCourt API endpoints except for the Authentication API. To generate a new token, you must provide your Client ID and Client Secret ID which you can find by logging into your UniCourt account. At any time, you can have a maximum of 10 active access tokens. The tokens never expire and, if you make a request which would otherwise lead to you having more than 10 active tokens, you will receive an error message.
		/// GenerateNewToken generateNewToken
		/// </summary>
		/// <param name="requestBody">The endpoint accepts your Client ID and Client Secret ID as part of the request.</param>
		/// <returns>OK</returns>
		public async Task<AccessTokenResponse> GenerateNewTokenAsync(AccessTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "generateNewToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// API to invalidate all access tokens.
		/// An endpoint which allows you to invalidate all existing access tokens associated with your UniCourt account.
		/// InvalidateAllTokens invalidateAllTokens
		/// </summary>
		/// <param name="requestBody">The endpoint accepts your Client ID and Secret Client ID as part of the request.</param>
		/// <returns>OK</returns>
		public async Task<Success> InvalidateAllTokensAsync(AccessTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invalidateAllTokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// API to invalidate the access token.
		/// An endpoint which allows you to invalidate a given access token.
		/// InvalidateToken invalidateToken
		/// </summary>
		/// <param name="requestBody">The endpoint accepts your Client ID, Client Secret ID and the Token ID for the access token you wish to invalidate as part of the request. You can obtain a list of all Token IDs from the /listAllTokenIds endpoint within this API.</param>
		/// <returns>OK</returns>
		public async Task<Success> InvalidateTokenAsync(InvalidateAccessTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invalidateToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets details for a requested Judge ID.
		/// Retrieve the judge with the specified judgeId value.
		/// GetJudgeById judge/{judgeId}
		/// </summary>
		/// <returns>The request is recieved.</returns>
		public async Task<Judge> GetJudgeByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "judge/{judgeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Judge>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// API to list all the access tokens Id.
		/// An endpoint which allows you to view all active access tokens associated with your Client ID and Client Secret ID.
		/// ListAllTokenIds listAllTokenIds
		/// </summary>
		/// <param name="requestBody">The endpoint accepts your Client ID and Client Secret ID as part of the request.</param>
		/// <returns>OK</returns>
		public async Task<AccessTokenIdListResponse> ListAllTokenIdsAsync(AccessTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "listAllTokenIds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessTokenIdListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// AreaOfLaw Object.
		/// The keyword expression targeting the desired area of law.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> AreaOfLawQueryObject
		/// 
		/// GetAreasOfLaw masterData/areaOfLaw
		/// </summary>
		/// <param name="q">Retrieve one or more areas of law using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<AreaOfLawResponse> GetAreasOfLawAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/areaOfLaw?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AreaOfLawResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AreaOfLaw Object for the given AreaOfLaw Id.
		/// Retrieve the specified area of law.
		/// 
		/// GetAreaOfLaw masterData/areaOfLaw/{areaOfLawId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AreaOfLaw> GetAreaOfLawAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/areaOfLaw/{areaOfLawId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AreaOfLaw>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorney Representation Type Object.
		/// Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyRepresentationTypeQueryObject
		/// 
		/// GetAttorneyRepresentationTypes masterData/attorneyRepresentationType
		/// </summary>
		/// <param name="q">The keyword expression targeting the attorney representation type.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<AttorneyRepresentationTypeResponse> GetAttorneyRepresentationTypesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/attorneyRepresentationType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttorneyRepresentationTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorney Representation Type Object for the given attorneyRepresentationTypeId.
		/// Retrieve the specified attorney representation type.
		/// 
		/// GetAttorneyRepresentationType masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttorneyRepresentationType> GetAttorneyRepresentationTypeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttorneyRepresentationType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorney Type Object.
		/// Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyTypeQueryObject
		/// 
		/// GetAttorneyTypes masterData/attorneyType
		/// </summary>
		/// <param name="q">The keyword expression targeting the attorney type.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<AttorneyTypeResponse> GetAttorneyTypesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/attorneyType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttorneyTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorney Type Object for given Attorney Type Id.
		/// Retrieve a specified attorney type object.
		/// 
		/// GetAttorneyType masterData/attorneyType/{attorneyTypeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttorneyType> GetAttorneyTypeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/attorneyType/{attorneyTypeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AttorneyType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Class Object.
		/// Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseClassQueryObject
		/// 
		/// GetCasesClass masterData/caseClass
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired case class.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseClassResponse> GetCasesClassAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseClass?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseClassResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Class Object for the given Case Class Id.
		/// Retrieve the specified case class.
		/// 
		/// GetCaseClass masterData/caseClass/{caseClassId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaseClass> GetCaseClassAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseClass/{caseClassId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseClass>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Relationship Type Object.
		/// Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseRelationshipTypeQueryObject
		/// 
		/// GetCaseRelationshipTypes masterData/caseRelationshipType
		/// </summary>
		/// <param name="q">The keyword expression targeting the case relationship type.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseRelationshipTypeResponse> GetCaseRelationshipTypesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseRelationshipType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseRelationshipTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Relationship Type Object for the given caseRelationshipTypeId.
		/// Retrieve the specified case relationship type.
		/// 
		/// GetCaseRelationshipType masterData/caseRelationshipType/{caseRelationshipTypeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaseRelationshipType> GetCaseRelationshipTypeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseRelationshipType/{caseRelationshipTypeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseRelationshipType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Status Object.
		/// Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> CaseStatusQueryObject
		/// 
		/// GetCasesStatus masterData/caseStatus
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired case status.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseStatusResponse> GetCasesStatusAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseStatus?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the caseStatus information for the given caseStatusId.
		/// Retrieve the specified case status.
		/// 
		/// GetCaseStatus masterData/caseStatus/{caseStatusId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaseStatus> GetCaseStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseStatus/{caseStatusId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Status Group Object.
		/// Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseStatusGroupQueryObject
		/// 
		/// GetCaseStatusGroups masterData/caseStatusGroup
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired case status group.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseStatusGroupResponse> GetCaseStatusGroupsAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseStatusGroup?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseStatusGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the caseStatusGroup information for the given caseStatusGroupId.
		/// Retrieve the specified case status group.
		/// 
		/// GetCaseStatusGroup masterData/caseStatusGroup/{caseStatusGroupId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaseStatusGroup> GetCaseStatusGroupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseStatusGroup/{caseStatusGroupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseStatusGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Type Object.
		/// Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeQueryObject
		/// 
		/// GetCaseTypes masterData/caseType
		/// </summary>
		/// <param name="q">Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseTypeResponse> GetCaseTypesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CaseType Object for given Case Type Id.
		/// Retrieve the specified case type.
		/// 
		/// GetCaseType masterData/caseType/{caseTypeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaseType> GetCaseTypeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseType/{caseTypeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CaseTypeGroup Object.
		/// Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeGroupQueryObject
		/// 
		/// GetCaseTypeGroups masterData/caseTypeGroup
		/// </summary>
		/// <param name="q">Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CaseTypeGroupResponse> GetCaseTypeGroupsAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseTypeGroup?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseTypeGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CaseType Group for the given CaseType Group Id.
		/// Retrieve the specified case type group.
		/// 
		/// GetCaseTypeGroup masterData/caseTypeGroup/{caseTypeGroupId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CaseTypeGroup> GetCaseTypeGroupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/caseTypeGroup/{caseTypeGroupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseTypeGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CauseOfAction Object.
		/// Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionQueryObject
		/// 
		/// GetCausesOfAction masterData/causeOfAction
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired cause of action.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CauseOfActionResponse> GetCausesOfActionAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/causeOfAction?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CauseOfActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CauseOfAction Object for the given causeOfActionId.
		/// Retrieve the specified cause of action.
		/// 
		/// GetCauseOfAction masterData/causeOfAction/{causeOfActionId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CauseOfAction> GetCauseOfActionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/causeOfAction/{causeOfActionId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CauseOfAction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CauseOfActionAdditionaData Object.
		/// Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionAdditionalDataQueryObject
		/// 
		/// GetCausesOfActionAdditionalData masterData/causeOfActionAdditionalData
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired cause of action additional data.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CauseOfActionAdditionalDataResponse> GetCausesOfActionAdditionalDataAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/causeOfActionAdditionalData?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CauseOfActionAdditionalDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
		/// Retrieve the specified cause of action additional data.
		/// 
		/// GetCauseOfActionAdditionalData masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CauseOfActionAdditionalData> GetCauseOfActionAdditionalDataAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CauseOfActionAdditionalData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CauseOfActionGroup Object.
		/// Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionGroupQueryObject
		/// 
		/// GetCausesOfActionGroup masterData/causeOfActionGroup
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired cause of action group.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CauseOfActionGroupResponse> GetCausesOfActionGroupAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/causeOfActionGroup?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CauseOfActionGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CauseOfActionGroup Object for the given causeOfActionGroupId.
		/// Retrieve the specified cause of action group.
		/// 
		/// GetCauseOfActionGroup masterData/causeOfActionGroup/{causeOfActionGroupId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CauseOfActionGroup> GetCauseOfActionGroupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/causeOfActionGroup/{causeOfActionGroupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CauseOfActionGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge Object.
		/// Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeQueryObject
		/// 
		/// GetCharges masterData/charge
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired charge.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<ChargeResponse> GetChargesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/charge?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge Object for the given chargeId.
		/// Retrieve the specified charge.
		/// 
		/// GetCharge masterData/charge/{chargeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Charge> GetChargeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/charge/{chargeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Charge>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge Additional Data Object.
		/// Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeAdditionalDataQueryObject
		/// 
		/// GetChargesAdditionalData masterData/chargeAdditionalData
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired charge additional data.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<ChargeAdditionalDataResponse> GetChargesAdditionalDataAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeAdditionalData?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeAdditionalDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge Additional Data Object for the given chargeAdditionalDataId.
		/// Retrieve the specified charge additional data.
		/// 
		/// GetChargeAdditionalData masterData/chargeAdditionalData/{chargeAdditionalDataId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChargeAdditionalData> GetChargeAdditionalDataAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeAdditionalData/{chargeAdditionalDataId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeAdditionalData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ChargeDegree Object.
		/// Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeDegreeQueryObject
		/// 
		/// GetChargesDegree masterData/chargeDegree
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired charge degree.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<ChargeDegreeResponse> GetChargesDegreeAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeDegree?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeDegreeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ChargeDegree Object for the given chargeDegreeId.
		/// Retrieve the specified charge degree.
		/// 
		/// GetChargeDegree masterData/chargeDegree/{chargeDegreeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChargeDegree> GetChargeDegreeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeDegree/{chargeDegreeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeDegree>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge Group Object.
		/// Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeGroupQueryObject
		/// 
		/// GetChargeGroups masterData/chargeGroup
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired charge group.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<ChargeGroupResponse> GetChargeGroupsAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeGroup?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charge Group Object for the given chargeGroupId.
		/// Retrieve the specified charge group.
		/// 
		/// GetChargeGroup masterData/chargeGroup/{chargeGroupId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChargeGroup> GetChargeGroupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeGroup/{chargeGroupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ChargeSeverity Object.
		/// Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeSeverityQueryObject
		/// 
		/// GetChargesSeverity masterData/chargeSeverity
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired charge severity.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<ChargeSeverityResponse> GetChargesSeverityAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeSeverity?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeSeverityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ChargeSeverity Object for the given chargeSeverityId.
		/// Retrieve the specified charge severity.
		/// 
		/// GetChargeSeverity masterData/chargeSeverity/{chargeSeverityId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChargeSeverity> GetChargeSeverityAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/chargeSeverity/{chargeSeverityId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChargeSeverity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court Objects.
		/// Retrieve information about a specified court or courts.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtQueryObject
		/// 
		/// GetCourts masterData/court
		/// </summary>
		/// <param name="q">The keyword expression that sets forth the criteria concerning the court or courts to be retrieved. Keyword expressions should be constructed according to the rules shown above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CourtResponse> GetCourtsAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/court?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court Object for given courtId.
		/// Retrieve information about a specified court.
		/// 
		/// GetCourt masterData/court/{courtId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Court> GetCourtAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/court/{courtId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Court>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Appeal Court Objects for given courtId.
		/// Retrieve the appeals courts associated with the specified court.
		/// 
		/// GetAppealCourtsForCourt masterData/court/{courtId}/appealCourts
		/// </summary>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.</param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.</param>
		/// <returns>Success</returns>
		public async Task<CourtResponse> GetAppealCourtsForCourtAsync(int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/court/{courtId}/appealCourts?pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associated Court Location for given courtId.
		/// Retrieve the court locations associated with the specified court.
		/// 
		/// GetCourtLocationsForCourt masterData/court/{courtId}/courtLocations
		/// </summary>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.</param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.</param>
		/// <returns>Success</returns>
		public async Task<CourtLocationResponse> GetCourtLocationsForCourtAsync(int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/court/{courtId}/courtLocations?pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Jurisdiction Geo Objects for given courtId.
		/// Retrieve the jurisdiction geography object for the specified court.
		/// 
		/// GetJurisdictionGeoForCourt masterData/court/{courtId}/jurisdictionGeo
		/// </summary>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.</param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.</param>
		/// <returns>Success</returns>
		public async Task<JurisdictionGeoResponse> GetJurisdictionGeoForCourtAsync(int pageNumber, GetJurisdictionGeoForCourtSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/court/{courtId}/jurisdictionGeo?pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JurisdictionGeoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Courthouse Object.
		/// Retrieve the specified court location or court locations.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtLocationQueryObject
		/// 
		/// GetCourtLocations masterData/courtLocation
		/// </summary>
		/// <param name="q">The keyword expression that sets forth the criteria concerning the court location or court locations to target. Keyword expressions should be constructed according to the rules shown above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CourtLocationResponse> GetCourtLocationsAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtLocation?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Courthouse Object for given Court Location Id.
		/// Contains the Court Location Object.
		/// 
		/// GetCourtLocation masterData/courtLocation/{courtLocationId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CourtLocation> GetCourtLocationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtLocation/{courtLocationId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtLocation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associated Court for given Court Location.
		/// Retrieve the courts associated with the specified court location.
		/// 
		/// GetCourtsForCourtLocation masterData/courtLocation/{courtLocationId}/courts
		/// </summary>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.</param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.</param>
		/// <returns>Success</returns>
		public async Task<CourtResponse> GetCourtsForCourtLocationAsync(int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtLocation/{courtLocationId}/courts?pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court Service Status Object.
		/// Retrieve the status of one or more courts using a keyword expression.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtServiceStatusQueryObject
		/// 
		/// GetCourtsServiceStatus masterData/courtServiceStatus
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired court. Keyword expressions should be constructed according to the rules given above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CourtServiceStatusResponse> GetCourtsServiceStatusAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtServiceStatus?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtServiceStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court Service Status Object for the given courtServiceStatusId.
		/// Retrieve the court status of the specified court.
		/// 
		/// GetCourtServiceStatus masterData/courtServiceStatus/{courtServiceStatusId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CourtServiceStatus> GetCourtServiceStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtServiceStatus/{courtServiceStatusId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtServiceStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court System Objects.
		/// Retrieve information about the specified court system or court systems.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtSystemQueryObject
		/// 
		/// GetCourtSystems masterData/courtSystem
		/// </summary>
		/// <param name="q">The keyword expression that sets forth the criteria concerning the court system or court systems. Keyword expressions should be constructed according to the rules shown above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CourtSystemResponse> GetCourtSystemsAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtSystem?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtSystemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court System Object for given courtSystemId.
		/// Retrieve the specified court system.
		/// 
		/// GetCourtSystem masterData/courtSystem/{courtSystemId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CourtSystem> GetCourtSystemAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtSystem/{courtSystemId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtSystem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court Type Objects.
		/// Retrieve court types recognized by UniCourt.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtTypeQueryObject
		/// 
		/// GetCourtTypes masterData/courtType
		/// </summary>
		/// <param name="q">The keyword expression that sets forth the criteria concerning the court type or court types. Keyword expressions should be constructed according to the rules shown above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<CourtTypeResponse> GetCourtTypesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Court Type Object for given courtTypeId.
		/// Retrieve the information concerning the specific court type.
		/// 
		/// GetCourtType masterData/courtType/{courtTypeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CourtType> GetCourtTypeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/courtType/{courtTypeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Judge Type Object.
		/// Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JudgeTypeQueryObject
		/// 
		/// GetJudgeTypes masterData/judgeType
		/// </summary>
		/// <param name="q">The keyword expression targeting the judge type.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<JudgeTypeResponse> GetJudgeTypesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/judgeType?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JudgeTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Judge Type Object for the given judgeTypeId.
		/// Retrieve the specified judge type.
		/// 
		/// GetJudgeType masterData/judgeType/{judgeTypeId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<JudgeType> GetJudgeTypeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/judgeType/{judgeTypeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JudgeType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Jurisdiction Geo Object.
		/// Retrieve one or more jurisdiction geographies using a keyword expression.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JurisdictionGeoQueryObject
		/// 
		/// GetJurisdictionsGeo masterData/jurisdictionGeo
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired jurisdiction geography. Keyword expressions should be constructed according to the rules given above.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.</param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<JurisdictionGeoResponse> GetJurisdictionsGeoAsync(string q, int pageNumber, GetJurisdictionGeoForCourtSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/jurisdictionGeo?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JurisdictionGeoResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Jurisdiction Geo Object for given Jurisdiction Geo Id.
		/// Retrieve the specified jurisdiction geography.
		/// 
		/// GetJurisdictionGeo masterData/jurisdictionGeo/{jurisdictionGeoId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<JurisdictionGeo> GetJurisdictionGeoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/jurisdictionGeo/{jurisdictionGeoId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JurisdictionGeo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associated Court for given Jurisdiction Geo.
		/// Returns Associated Court for given Jurisdiction Geo.
		/// 
		/// GetCourtsForJurisdictionGeo masterData/jurisdictionGeo/{jurisdictionGeoId}/courts
		/// </summary>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///- maximum: 100
		///
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">Sort field.</param>
		/// <param name="order">Sort order.</param>
		/// <returns>Success</returns>
		public async Task<CourtResponse> GetCourtsForJurisdictionGeoAsync(int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/jurisdictionGeo/{jurisdictionGeoId}/courts?pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CourtResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Party Role Object.
		/// Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleQueryObject
		/// 
		/// GetPartyRoles masterData/partyRole
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired party role.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<PartyRoleResponse> GetPartyRolesAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/partyRole?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartyRoleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Party Role Object.
		/// Retrieve the specified party role.
		/// 
		/// GetPartyRole masterData/partyRole/{partyRoleId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PartyRole> GetPartyRoleAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/partyRole/{partyRoleId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartyRole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Party Role Group Object.
		/// Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.
		/// 
		/// ## Logical Operators
		/// | Connector | Description  | Example |
		/// | ------| ------|------|
		/// | **AND** |Find data containing all connected terms.|**google AND facebook**|
		/// | **OR**  |Find data containing any connected term.| **order OR decision**|
		/// | **NOT** |Exclude data.| **google NOT apple**.|
		/// | **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
		/// | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|
		/// 
		/// ### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleGroupQueryObject
		/// 
		/// GetPartyRoleGroups masterData/partyRoleGroup
		/// </summary>
		/// <param name="q">The keyword expression targeting the desired party role group.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">The page number of the results to be retrieved.
		///- minimum: 1
		///- maximum: 100
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="sort">The field according to which search results are to be sorted.
		/// Min length: 4
		/// Max length: 4
		// </param>
		/// <param name="order">Whether search results are to be shown in ascending or descending order.
		/// Min length: 3
		/// Max length: 4
		// </param>
		/// <returns>Success</returns>
		public async Task<PartyRoleGroupResponse> GetPartyRoleGroupsAsync(string q, int pageNumber, GetAreasOfLawSort sort, SearchCasesOrder order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/partyRoleGroup?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber+"&sort=" + sort+"&order=" + order;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartyRoleGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Party Role Group Object.
		/// Retrieve the specified party role group.
		/// 
		/// GetPartyRoleGroup masterData/partyRoleGroup/{partyRoleGroupId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PartyRoleGroup> GetPartyRoleGroupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "masterData/partyRoleGroup/{partyRoleGroupId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartyRoleGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm Attorney Details.
		/// This endpoint retrieves information on the attorney in our normalized attorney database which matches the normAttorneyId specified in the request.
		/// GetNormAttorneyById normAttorney/{normAttorneyId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NormAttorney> GetNormAttorneyByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normAttorney/{normAttorneyId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormAttorney>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Judges faced by the Attorney.
		/// This endpoint returns information on all judges which have appeared in cases with the attorney specified by the normAttorneyId. The returned judges are ordered in descending order of number of cases shared with the relevant attorney.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all judges associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormJudgesAssociatedWithNormAttorney normAttorney/{normAttorneyId}/associatedNormJudges
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormJudgeResponse> GetNormJudgesAssociatedWithNormAttorneyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normAttorney/{normAttorneyId}/associatedNormJudges?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormJudgeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Law Firms the attorney has worked for.
		/// Returns a list of Law Firms the norm Attorney has worked for.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all LawFirms associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormLawFirmsAssociatedWithNormAttorney normAttorney/{normAttorneyId}/associatedNormLawFirms
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormLawFirmResponse> GetNormLawFirmsAssociatedWithNormAttorneyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normAttorney/{normAttorneyId}/associatedNormLawFirms?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormLawFirmResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Parties Represented By the Attorney.
		/// Returns a list of Parties the Attorney has represented.
		/// <br><br>
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
		/// | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object.. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all parties associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormPartiesAssociatedWithNormAttorney normAttorney/{normAttorneyId}/associatedNormParties
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormPartyResponse> GetNormPartiesAssociatedWithNormAttorneyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normAttorney/{normAttorneyId}/associatedNormParties?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormPartyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Opposing Norm Attorney.
		/// Returns Case Analytics by Attorney.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normPartyId** | Single Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Single Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDiNU45NWikKVxSH"** |
		/// | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by norm attorney with norm id NATYY29p78c7UoyJJ of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByOpposingNormAttorneyForANormAttorney normAttorney/{normAttorneyId}/caseCountAnalyticsByOpposingNormAttorney
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByNormAttorneyResponse> GetCaseCountAnalyticsByOpposingNormAttorneyForANormAttorneyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normAttorney/{normAttorneyId}/caseCountAnalyticsByOpposingNormAttorney?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByNormAttorneyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorney search.
		/// ### This endpoint retrieves information, including the normAttorneyId, on all attorneys in our normalized attorney database which match the request parameters. All query parameters supported by this API can be found in the schema section below.
		/// 
		/// SearchNormalizedAttorneys normAttorneySearch
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for.
		///The query can be as simple as a keyword, but supports many additional options and filters.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormAttorneySearchResponse> SearchNormalizedAttorneysAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normAttorneySearch?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormAttorneySearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm attorney search results for a given normAttorneySearchId.
		/// ### All query parameters supported for this API can be found in below schema section. Schema --> NormAttorneySearchQueryObject
		/// 
		/// SearchNormalizedAttorneysById normAttorneySearch/{normAttorneySearchId}
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormAttorneySearchResponse> SearchNormalizedAttorneysByIdAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normAttorneySearch/{normAttorneySearchId}?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormAttorneySearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm Judge Details.
		/// The Judge API allows you to look up Judge Details by normJudgeId.
		/// 
		/// GetNormJudgeById normJudge/{normJudgeId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NormJudge> GetNormJudgeByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normJudge/{normJudgeId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormJudge>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorneys Associated with the Judge.
		/// Returns a list of attorneys associated with a judge.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLODj4BBVTho3pKpz","COLOPUfJRhw5yPxgRi")**|
		/// | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all attorneys associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormAttorneysAssociatedWithNormJudge normJudge/{normJudgeId}/associatedNormAttorneys
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormAttorneyResponse> GetNormAttorneysAssociatedWithNormJudgeAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normJudge/{normJudgeId}/associatedNormAttorneys?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormAttorneyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Law Firms Associated With the Judge.
		/// Returns a list of Law Firms a Judge has heard.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLOPUfJRhw5yPxgRi"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLODj4BBVTho3pKpz","COLOPUfJRhw5yPxgRi")**|
		/// | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all Law Firms associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormLawFirmsAssociatedWithNormJudge normJudge/{normJudgeId}/associatedNormLawFirms
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormLawFirmResponse> GetNormLawFirmsAssociatedWithNormJudgeAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normJudge/{normJudgeId}/associatedNormLawFirms?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormLawFirmResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Parties Associated with the Judge.
		/// Returns a list of Parties A Judge has seen.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLODj4BBVTho3pKpz","COLOPUfJRhw5yPxgRi")**|
		/// | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all Parties associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormPartiesAssociatedWithNormJudge normJudge/{normJudgeId}/associatedNormParties
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormPartyResponse> GetNormPartiesAssociatedWithNormJudgeAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normJudge/{normJudgeId}/associatedNormParties?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormPartyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Judge search.
		/// ### All query parameters supported for this API can be found in below schema section. Schema --> NormJudgeSearchQueryObject
		/// 
		/// SearchNormalizedJudges normJudgeSearch
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for.
		///The query can be as simple as a keyword, but supports many additional options and filters.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormJudgeSearchResponse> SearchNormalizedJudgesAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normJudgeSearch?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormJudgeSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm judge search results for a given normJudgeSearchId.
		/// ### All query parameters supported for this API can be found in below schema section. Schema --> NormJudgeSearchQueryObject
		/// 
		/// SearchNormalizedJudgesById normJudgeSearch/{normJudgeSearchId}
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormJudgeSearchResponse> SearchNormalizedJudgesByIdAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normJudgeSearch/{normJudgeSearchId}?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormJudgeSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm LawFirm Details.
		/// The Law Firm API allows you to look up Law Firms by normLawFirmId.
		/// 
		/// GetNormLawFirmById normLawFirm/{normLawFirmId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NormLawFirm> GetNormLawFirmByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normLawFirm/{normLawFirmId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormLawFirm>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorneys working for the Law Firm.
		/// Returns a list of Attorneys associated to a Law Firm.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId**  | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **caseFiledDate**  | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all attorneys associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormAttorneysAssociatedWithNormLawFirm normLawFirm/{normLawFirmId}/associatedNormAttorneys
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormAttorneyResponse> GetNormAttorneysAssociatedWithNormLawFirmAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normLawFirm/{normLawFirmId}/associatedNormAttorneys?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormAttorneyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Judges Faced By the Law Firm.
		/// Returns list of Judges faced by the Law Firm.
		/// <br><br>
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all judges associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormJudgesAssociatedWithNormLawFirm normLawFirm/{normLawFirmId}/associatedNormJudges
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormJudgeResponse> GetNormJudgesAssociatedWithNormLawFirmAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normLawFirm/{normLawFirmId}/associatedNormJudges?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormJudgeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Parties Represented by the Law Firm.
		/// Returns list of Parties represented by the Law Firm.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all parties associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormPartiesAssociatedWithNormLawFirm normLawFirm/{normLawFirmId}/associatedNormParties
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormPartyResponse> GetNormPartiesAssociatedWithNormLawFirmAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normLawFirm/{normLawFirmId}/associatedNormParties?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormPartyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Opposing Norm Law Firm.
		/// Returns Case Analytics by Norm Law Firm.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYp7kmEQtt8jQ3eQ"** |
		/// | **normPartyId** | Single Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by norm lawfirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm normLawFirm/{normLawFirmId}/caseCountAnalyticsByOpposingNormLawFirm
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByNormLawFirmResponse> GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normLawFirm/{normLawFirmId}/caseCountAnalyticsByOpposingNormLawFirm?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByNormLawFirmResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Law firm search.
		/// ### All query parameters supported for this API can be found in below schema section. Schema --> NormLawFirmSearchQueryObject
		/// 
		/// SearchNormalizedLawFirms normLawFirmSearch
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for.
		///The query can be as simple as a keyword, but supports many additional options and filters.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormLawFirmSearchResponse> SearchNormalizedLawFirmsAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normLawFirmSearch?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormLawFirmSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm law firm search result for a given normLawFirmSearchId.
		/// ### All query parameters supported for this API can be found in below schema section. Schema --> NormLawFirmSearchQueryObject
		/// 
		/// SearchNormalizedLawFirmsById normLawFirmSearch/{normLawFirmSearchId}
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormLawFirmSearchResponse> SearchNormalizedLawFirmsByIdAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normLawFirmSearch/{normLawFirmSearchId}?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormLawFirmSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm Party Details.
		/// The Party Details API allows you to look up Parties by normPartyId.
		/// 
		/// GetNormPartyById normParty/{normPartyId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NormParty> GetNormPartyByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normParty/{normPartyId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormParty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attorneys that represented the Party.
		/// Returns a list of  Attorneys the Party has been represented by.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz","CORTYsomR6GiiiPovp")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all attorneys associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormAttorneysAssociatedWithNormParty normParty/{normPartyId}/associatedNormAttorneys
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormAttorneyResponse> GetNormAttorneysAssociatedWithNormPartyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normParty/{normPartyId}/associatedNormAttorneys?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormAttorneyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Judges Faced By the Party.
		/// Returns a list of Judges the party has faced.
		/// <br><br>
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz","CORTYsomR6GiiiPovp")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all judges associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// <br><br>
		/// 
		/// GetNormJudgesAssociatedWithNormParty normParty/{normPartyId}/associatedNormJudges
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormJudgeResponse> GetNormJudgesAssociatedWithNormPartyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normParty/{normPartyId}/associatedNormJudges?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormJudgeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Law Firms that represented the Party.
		/// Returns a list of Law Firms the Party has been represented by.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz","CORTYsomR6GiiiPovp")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get all lawfirms associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetNormLawFirmsAssociatedWithNormParty normParty/{normPartyId}/associatedNormLawFirms
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<AssociatedNormLawFirmResponse> GetNormLawFirmsAssociatedWithNormPartyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normParty/{normPartyId}/associatedNormLawFirms?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatedNormLawFirmResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Case Count Analytics by Opposing Norm Party.
		/// Returns Case Analytics by Opposing Norm Party.
		/// ## Terms and Connectors
		/// | Connector | Schema   | Description  | Example |
		/// | ------| ------| ------|------|
		/// | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
		/// | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
		/// | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
		/// | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
		/// | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
		/// | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
		/// | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
		/// | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
		/// | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
		/// | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
		/// | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
		/// | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
		/// | **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
		/// | **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
		/// | **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
		/// | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
		/// | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
		/// | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \*]** |
		/// | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
		/// <br>
		/// ## Example Query
		/// Query to get case count grouped by norm party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
		/// q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
		/// 
		/// GetCaseCountAnalyticsByOpposingNormPartyForANormParty normParty/{normPartyId}/caseCountAnalyticsByOpposingNormParty
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above.
		/// Max length: 2048
		// </param>
		/// <param name="pageNumber">Page number.
		///- minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<CaseCountAnalyticsByNormPartyResponse> GetCaseCountAnalyticsByOpposingNormPartyForANormPartyAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normParty/{normPartyId}/caseCountAnalyticsByOpposingNormParty?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CaseCountAnalyticsByNormPartyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Party search.
		/// ### All query parameters supported for this API can be found in below schema section. Schema --> NormPartySearchQueryObject
		/// 
		/// SearchNormalizedParties normPartySearch
		/// </summary>
		/// <param name="q">The URL encoded query you are searching for.
		///The query can be as simple as a keyword, but supports many additional options and filters.</a>
		///
		/// Min length: 3
		/// Max length: 2000
		// </param>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormPartySearchResponse> SearchNormalizedPartiesAsync(string q, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normPartySearch?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormPartySearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Norm party search results for a given normPartySearchId.
		/// ### All query parameters supported for this API can be found in below schema section. Schema --> NormPartySearchQueryObject
		/// 
		/// SearchNormalizedPartiesById normPartySearch/{normPartySearchId}
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.
		///- Minimum: 1
		///- Maximum: 1000
		///
		/// Min length: 1
		/// Max length: 255
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<NormPartySearchResponse> SearchNormalizedPartiesByIdAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "normPartySearch/{normPartySearchId}?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NormPartySearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find PACER Case for a requested Case Number and Court.
		/// Import the specified case from PACER.
		/// 
		/// Workflow:
		/// 
		/// 1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database.
		/// 
		/// 2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId.
		/// 
		/// Note:
		/// 
		/// 1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee.
		/// 
		/// 2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs.
		/// ImportPacerCaseByCourtUsingCaseNumber pacer/importCaseByCourtUsingCaseNumber
		/// </summary>
		/// <param name="pacerUserId">The PACER username of the PACER account under which the case should be imported.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the case should be imported.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the case to be imported.
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="courtId">The courtId value of the court from which the case is to be imported.
		/// Min length: 18
		/// Max length: 18
		// </param>
		/// <returns>The request is recieved.</returns>
		public async Task<PACERImportCase> ImportPacerCaseByCourtUsingCaseNumberAsync(string pacerUserId, string pacerClientCode, string caseNumber, string courtId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacer/importCaseByCourtUsingCaseNumber?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&courtId=" + (courtId==null? "" : System.Uri.EscapeDataString(courtId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PACERImportCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search all courts within the PACER system for a particular case.
		/// AllCourtsPacerCaseLocatorCaseSearch pacerCaseLocator/caseSearch/allCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLCase> AllCourtsPacerCaseLocatorCaseSearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/caseSearch/allCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for PACER cases filed in U.S. Courts of Appeals.
		/// AppealCourtsPacerCaseLocatorCaseSearch pacerCaseLocator/caseSearch/appealCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn  
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="natureOfSuitsArray">The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases in U.S. Courts of Appeals. 
		///
		///	Scenario: When mulitple nature of suits needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search with the nature of suit 1110 (Insurance) and 1150 (Overpayments & Enforc. of Judgments), My query in the request will look like the example mentioned below. 
		///
		///	Example: natureOfSuitsArray=1110&natureOfSuitsArray=1150</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLCase> AppealCourtsPacerCaseLocatorCaseSearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] natureOfSuitsArray, 
					string[] courtRegionIdArray, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/caseSearch/appealCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", natureOfSuitsArray.Select(z => $"natureOfSuitsArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for Bankruptcy Courts.
		/// Search for PACER cases filed in U.S. Bankruptcy Courts.
		/// BankruptcyCourtsPacerCaseLocatorCaseSearch pacerCaseLocator/caseSearch/bankruptcyCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="federalBankruptcyChapterArray">The chapter of the U.S. Bankruptcy Code under which the target case was filed. Please see Appendix D for a list of valid chapter numbers. 
		///
		///	Scenario: When mulitple Federal Bankruptcy Chapters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search with the Federal Bankruptcy Chapters 7 (Chapter 7) and 11 (Chapter 11), My query in the request will look like the example mentioned below. 
		///
		///	Example: federalBankruptcyChapterArray=7&federalBankruptcyChapterArray=11</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDischargedStartDate">The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		///
		///	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDischargedEndDate">The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		///
		///	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDismissedStartDate">The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		///
		///	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDismissedEndDate">The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLCase> BankruptcyCourtsPacerCaseLocatorCaseSearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] federalBankruptcyChapterArray, 
					string[] courtRegionIdArray, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					System.DateTimeOffset caseDischargedStartDate, 
					System.DateTimeOffset caseDischargedEndDate, 
					System.DateTimeOffset caseDismissedStartDate, 
					System.DateTimeOffset caseDismissedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/caseSearch/bankruptcyCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", federalBankruptcyChapterArray.Select(z => $"federalBankruptcyChapterArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDischargedStartDate=" + caseDischargedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDischargedEndDate=" + caseDischargedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDismissedStartDate=" + caseDismissedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDismissedEndDate=" + caseDismissedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for civil cases filed in PACER.
		/// CivilCourtsPacerCaseLocatorCaseSearch pacerCaseLocator/caseSearch/civilCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case.
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="natureOfSuitsArray">The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases. 
		///
		///	Scenario: When mulitple nature of suits needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search with the nature of suit 110 (Insurance) and 140 (Negotiable Instrument), My query in the request will look like the example mentioned below. 
		///
		///	Example: natureOfSuitsArray=110&natureOfSuitsArray=140</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLCase> CivilCourtsPacerCaseLocatorCaseSearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] natureOfSuitsArray, 
					string[] courtRegionIdArray, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/caseSearch/civilCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", natureOfSuitsArray.Select(z => $"natureOfSuitsArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for criminal cases in PACER.
		/// CriminalCourtsPacerCaseLocatorCaseSearch pacerCaseLocator/caseSearch/criminalCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLCase> CriminalCourtsPacerCaseLocatorCaseSearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/caseSearch/criminalCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for multidistrict litigation in PACER.
		/// MultiDistrictCourtsPacerCaseLocatorCaseSearch pacerCaseLocator/caseSearch/multiDistrictCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="jpmlNumber">Master JPML Case Number.</param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLCase> MultiDistrictCourtsPacerCaseLocatorCaseSearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int jpmlNumber, 
					int pacerCaseId, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/caseSearch/multiDistrictCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&jpmlNumber="+jpmlNumber+"&pacerCaseId="+pacerCaseId+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLCase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for the specified party across all PACER case filings.
		/// AllCourtsPacerCaseLocatorPartySearch pacerCaseLocator/partySearch/allCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="lastName">The last name (for an individual) or the entity name (for a business entity) of the target party.
		/// Max length: 50
		// </param>
		/// <param name="firstName">The first name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="middleName">The middle name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="generation">The suffix (e.g., Jr., III) of the target party's name.
		/// Max length: 5
		// </param>
		/// <param name="partyType">The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		/// Max length: 50
		// </param>
		/// <param name="partyExactNameMatch">Specify whether the search string must match the name of the target party exactly.</param>
		/// <param name="partyRoleArray">The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case.
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseYearFrom">Limit the results of the search to those cases from the year specified or later
		/// Max length: 4
		// </param>
		/// <param name="caseYearTo">Limit the results of the search to those cases from the year specified or earlier
		/// Max length: 4
		// </param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario 1: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		///
		///	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLParty> AllCourtsPacerCaseLocatorPartySearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string lastName, 
					string firstName, 
					string middleName, 
					string generation, 
					string partyType, 
					bool partyExactNameMatch, 
					string[] partyRoleArray, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					int caseYearFrom, 
					int caseYearTo, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/partySearch/allCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&middleName=" + (middleName==null? "" : System.Uri.EscapeDataString(middleName))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&partyType=" + (partyType==null? "" : System.Uri.EscapeDataString(partyType))+"&partyExactNameMatch="+partyExactNameMatch+"&"+string.Join("&", partyRoleArray.Select(z => $"partyRoleArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseYearFrom="+caseYearFrom+"&caseYearTo="+caseYearTo+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLParty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for the specified party across all PACER appeals cases.
		/// AppealCourtsPacerCaseLocatorPartySearch pacerCaseLocator/partySearch/appealCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="lastName">The last name (for an individual) or the entity name (for a business entity) of the target party.
		/// Max length: 50
		// </param>
		/// <param name="firstName">The first name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="middleName">The middle name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="generation">The suffix (e.g., Jr., III) of the target party's name.
		/// Max length: 5
		// </param>
		/// <param name="partyType">The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		/// Max length: 50
		// </param>
		/// <param name="partyExactNameMatch">Specify whether the search string must match the name of the target party exactly.</param>
		/// <param name="partyRoleArray">The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseYearFrom">Limit the results of the search to those cases from the year specified or later
		/// Max length: 4
		// </param>
		/// <param name="caseYearTo">Limit the results of the search to those cases from the year specified or earlier
		/// Max length: 4
		// </param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario 1: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		///
		///	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLParty> AppealCourtsPacerCaseLocatorPartySearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string lastName, 
					string firstName, 
					string middleName, 
					string generation, 
					string partyType, 
					bool partyExactNameMatch, 
					string[] partyRoleArray, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					int caseYearFrom, 
					int caseYearTo, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/partySearch/appealCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&middleName=" + (middleName==null? "" : System.Uri.EscapeDataString(middleName))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&partyType=" + (partyType==null? "" : System.Uri.EscapeDataString(partyType))+"&partyExactNameMatch="+partyExactNameMatch+"&"+string.Join("&", partyRoleArray.Select(z => $"partyRoleArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseYearFrom="+caseYearFrom+"&caseYearTo="+caseYearTo+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLParty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for the specified party in PACER bankruptcy filings.
		/// BankruptcyCourtsPacerCaseLocatorPartySearch pacerCaseLocator/partySearch/bankruptcyCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="lastName">The last name (for an individual) or the entity name (for a business entity) of the target party.
		/// Max length: 50
		// </param>
		/// <param name="firstName">The first name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="middleName">The middle name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="generation">The suffix (e.g., Jr., III) of the target party's name.
		/// Max length: 5
		// </param>
		/// <param name="partyType">The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		/// Max length: 50
		// </param>
		/// <param name="partyExactNameMatch">Specify whether the search string must match the name of the target party exactly.</param>
		/// <param name="partyRoleArray">The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseYearFrom">Limit the results of the search to those cases from the year specified or later
		/// Max length: 4
		// </param>
		/// <param name="caseYearTo">Limit the results of the search to those cases from the year specified or earlier
		/// Max length: 4
		// </param>
		/// <param name="ssnOrEin">The Social Security number or the federal Employer Identification Number of the target party. Either number can be entered with or without dashes.
		/// Max length: 9
		// </param>
		/// <param name="fourDigitSsn">The last four digits of the Social Security number of the target party.
		///
		///	Note: When specified, a last name/entity name must also be specified.
		/// Max length: 4
		// </param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDischargedStartDate">The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		///
		///	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDischargedEndDate">The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		///
		///	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDismissedStartDate">The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). 
		///
		///	Note: This parameter is applicable since we only perform this search for Bankruptcy Court type.
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseDismissedEndDate">The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario 1: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		///
		///	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLParty> BankruptcyCourtsPacerCaseLocatorPartySearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string lastName, 
					string firstName, 
					string middleName, 
					string generation, 
					string partyType, 
					bool partyExactNameMatch, 
					string[] partyRoleArray, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					int caseYearFrom, 
					int caseYearTo, 
					string ssnOrEin, 
					string fourDigitSsn, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					System.DateTimeOffset caseDischargedStartDate, 
					System.DateTimeOffset caseDischargedEndDate, 
					System.DateTimeOffset caseDismissedStartDate, 
					System.DateTimeOffset caseDismissedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/partySearch/bankruptcyCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&middleName=" + (middleName==null? "" : System.Uri.EscapeDataString(middleName))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&partyType=" + (partyType==null? "" : System.Uri.EscapeDataString(partyType))+"&partyExactNameMatch="+partyExactNameMatch+"&"+string.Join("&", partyRoleArray.Select(z => $"partyRoleArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseYearFrom="+caseYearFrom+"&caseYearTo="+caseYearTo+"&ssnOrEin=" + (ssnOrEin==null? "" : System.Uri.EscapeDataString(ssnOrEin))+"&fourDigitSsn=" + (fourDigitSsn==null? "" : System.Uri.EscapeDataString(fourDigitSsn))+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDischargedStartDate=" + caseDischargedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDischargedEndDate=" + caseDischargedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDismissedStartDate=" + caseDismissedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseDismissedEndDate=" + caseDismissedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLParty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for the specified party in civil cases filed in PACER.
		/// CivilCourtsPacerCaseLocatorPartySearch pacerCaseLocator/partySearch/civilCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="lastName">The last name (for an individual) or the entity name (for a business entity) of the target party.
		/// Max length: 50
		// </param>
		/// <param name="firstName">The first name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="middleName">The middle name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="generation">The name suffix (e.g., III, MD).
		/// Max length: 5
		// </param>
		/// <param name="partyType">The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		/// Max length: 50
		// </param>
		/// <param name="partyExactNameMatch">Specify whether the search string must match the name of the target party exactly.</param>
		/// <param name="partyRoleArray">The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseYearFrom">Limit the results of the search to those cases from the year specified or later
		/// Max length: 4
		// </param>
		/// <param name="caseYearTo">Limit the results of the search to those cases from the year specified or earlier
		/// Max length: 4
		// </param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario 1: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		///
		///	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLParty> CivilCourtsPacerCaseLocatorPartySearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string lastName, 
					string firstName, 
					string middleName, 
					string generation, 
					string partyType, 
					bool partyExactNameMatch, 
					string[] partyRoleArray, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					int caseYearFrom, 
					int caseYearTo, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/partySearch/civilCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&middleName=" + (middleName==null? "" : System.Uri.EscapeDataString(middleName))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&partyType=" + (partyType==null? "" : System.Uri.EscapeDataString(partyType))+"&partyExactNameMatch="+partyExactNameMatch+"&"+string.Join("&", partyRoleArray.Select(z => $"partyRoleArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseYearFrom="+caseYearFrom+"&caseYearTo="+caseYearTo+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLParty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for the specified party in PACER criminal cases.
		/// CriminalCourtsPacerCaseLocatorPartySearch pacerCaseLocator/partySearch/criminalCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="lastName">The last name (for an individual) or the entity name (for a business entity) of the target party.
		/// Max length: 50
		// </param>
		/// <param name="firstName">The first name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="middleName">The middle name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="generation">The suffix (e.g., Jr., III) of the target party's name.
		/// Max length: 5
		// </param>
		/// <param name="partyType">The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		/// Max length: 50
		// </param>
		/// <param name="partyExactNameMatch">Specify whether the search string must match the name of the target party exactly.</param>
		/// <param name="partyRoleArray">The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseYearFrom">Limit the results of the search to those cases from the year specified or later
		/// Max length: 4
		// </param>
		/// <param name="caseYearTo">Limit the results of the search to those cases from the year specified or earlier
		/// Max length: 4
		// </param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario 1: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		///
		///	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLParty> CriminalCourtsPacerCaseLocatorPartySearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int pacerCaseId, 
					string lastName, 
					string firstName, 
					string middleName, 
					string generation, 
					string partyType, 
					bool partyExactNameMatch, 
					string[] partyRoleArray, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					int caseYearFrom, 
					int caseYearTo, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/partySearch/criminalCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&pacerCaseId="+pacerCaseId+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&middleName=" + (middleName==null? "" : System.Uri.EscapeDataString(middleName))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&partyType=" + (partyType==null? "" : System.Uri.EscapeDataString(partyType))+"&partyExactNameMatch="+partyExactNameMatch+"&"+string.Join("&", partyRoleArray.Select(z => $"partyRoleArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseYearFrom="+caseYearFrom+"&caseYearTo="+caseYearTo+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLParty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PACER Case Locator Search API for All Courts.
		/// Search for the specified party in multidistrict litigation in PACER.
		/// MultiDistrictCourtsPacerCaseLocatorPartySearch pacerCaseLocator/partySearch/multiDistrictCourts
		/// </summary>
		/// <param name="pacerUserId">The username of the PACER account under which the search is to be performed.
		/// Min length: 6
		/// Max length: 20
		// </param>
		/// <param name="pacerClientCode">The PACER client code under which the search is to be performed.
		/// Min length: 1
		/// Max length: 32
		// </param>
		/// <param name="caseNumber">The case number of the target case. You may use the following case-number formats: 
		///
		///	yy-nnnnn 
		///
		///	yy-tp-nnnnn 
		///
		///	yy tp nnnnn 
		///
		///	yytpnnnnn 
		///
		///	o:yy-nnnnn 
		///
		///	o:yy-tp-nnnnn 
		///
		///	o:yy tp nnnnn 
		///
		///	o:yytpnnnnn 
		///
		///where: 
		///
		///yy  case year (may be 2 or 4 digits) 
		///
		///nnnnn  case number (up to 5 digits) 
		///
		///tp  case type (up to 2 characters) 
		///
		///o  office where the case was filed (1 digit).
		/// Min length: 3
		/// Max length: 50
		// </param>
		/// <param name="jpmlNumber">Master JPML Case Number.</param>
		/// <param name="pacerCaseId">The PACER-assigned identifier of the target case.</param>
		/// <param name="lastName">The last name (for an individual) or the entity name (for a business entity) of the target party.
		/// Max length: 50
		// </param>
		/// <param name="firstName">The first name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="middleName">The middle name of the target party.
		/// Max length: 100
		// </param>
		/// <param name="generation">The suffix (e.g., Jr., III) of the target party's name.
		/// Max length: 5
		// </param>
		/// <param name="partyType">The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.
		/// Max length: 50
		// </param>
		/// <param name="partyExactNameMatch">Specify whether the search string must match the name of the target party exactly.</param>
		/// <param name="partyRoleArray">The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court.</param>
		/// <param name="caseTitle">The title of the target case. 
		///
		///	Examples: 
		///
		///	A search for case title john doe v will result in all cases with the case title John Doe v. 
		///
		///	A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc.
		/// Max length: 255
		// </param>
		/// <param name="caseOffice">The divisional office in which the case was filed.
		/// Max length: 1
		// </param>
		/// <param name="caseSequenceNumber">The PACER-assigned sequence number of the target case. Ex 12345
		/// Max length: 6
		// </param>
		/// <param name="caseYear">The two- or four-digit year in which the target case was filed.
		/// Max length: 4
		// </param>
		/// <param name="caseTypeArray">The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values. 
		///
		///	Scenario: When mulitple case types needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below. 
		///
		///	Example: caseTypeArray=cv&caseTypeArray=cr</param>
		/// <param name="courtRegionIdArray">The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values. 
		///
		///	Scenario: When mulitple court region ids needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below. 
		///
		///	Example: courtRegionIdArray=cac&courtRegionIdArray=cae</param>
		/// <param name="caseYearFrom">Limit the results of the search to those cases from the year specified or later
		/// Max length: 4
		// </param>
		/// <param name="caseYearTo">Limit the results of the search to those cases from the year specified or earlier
		/// Max length: 4
		// </param>
		/// <param name="caseFiledStartDate">The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseFiledEndDate">The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedStartDate">The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="caseTerminatedEndDate">The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).
		/// Min length: 25
		/// Max length: 25
		// </param>
		/// <param name="sortParameterQuery">How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings. 
		///
		///	Scenario 1: When mulitple sort paramters needs to be requested. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtId,ASC&caseId,ASC 
		///
		///	Scenario 2: When you want to sort the response using the case parameters in the party search. 
		///
		///	Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below. 
		///
		///	Example: sortParameterQuery=courtCase.caseOffice,ASC&caseid,DESC
		/// Min length: 5
		/// Max length: 100
		// </param>
		/// <param name="caseStatus">Whether the target case is marked as 'open' or 'closed' within PACER.
		/// Min length: 3
		/// Max length: 100
		// </param>
		/// <param name="pageNumber">The page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PCLParty> MultiDistrictCourtsPacerCaseLocatorPartySearchAsync(
					string pacerUserId, 
					string pacerClientCode, 
					string caseNumber, 
					int jpmlNumber, 
					int pacerCaseId, 
					string lastName, 
					string firstName, 
					string middleName, 
					string generation, 
					string partyType, 
					bool partyExactNameMatch, 
					string[] partyRoleArray, 
					string caseTitle, 
					int caseOffice, 
					int caseSequenceNumber, 
					int caseYear, 
					string[] caseTypeArray, 
					string[] courtRegionIdArray, 
					int caseYearFrom, 
					int caseYearTo, 
					System.DateTimeOffset caseFiledStartDate, 
					System.DateTimeOffset caseFiledEndDate, 
					System.DateTimeOffset caseTerminatedStartDate, 
					System.DateTimeOffset caseTerminatedEndDate, 
					string sortParameterQuery, 
					AllCourtsPacerCaseLocatorCaseSearchCaseStatus caseStatus, 
					int pageNumber, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCaseLocator/partySearch/multiDistrictCourts?pacerUserId=" + (pacerUserId==null? "" : System.Uri.EscapeDataString(pacerUserId))+"&pacerClientCode=" + (pacerClientCode==null? "" : System.Uri.EscapeDataString(pacerClientCode))+"&caseNumber=" + (caseNumber==null? "" : System.Uri.EscapeDataString(caseNumber))+"&jpmlNumber="+jpmlNumber+"&pacerCaseId="+pacerCaseId+"&lastName=" + (lastName==null? "" : System.Uri.EscapeDataString(lastName))+"&firstName=" + (firstName==null? "" : System.Uri.EscapeDataString(firstName))+"&middleName=" + (middleName==null? "" : System.Uri.EscapeDataString(middleName))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&partyType=" + (partyType==null? "" : System.Uri.EscapeDataString(partyType))+"&partyExactNameMatch="+partyExactNameMatch+"&"+string.Join("&", partyRoleArray.Select(z => $"partyRoleArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseTitle=" + (caseTitle==null? "" : System.Uri.EscapeDataString(caseTitle))+"&caseOffice="+caseOffice+"&caseSequenceNumber="+caseSequenceNumber+"&caseYear="+caseYear+"&"+string.Join("&", caseTypeArray.Select(z => $"caseTypeArray={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", courtRegionIdArray.Select(z => $"courtRegionIdArray={System.Uri.EscapeDataString(z.ToString())}"))+"&caseYearFrom="+caseYearFrom+"&caseYearTo="+caseYearTo+"&caseFiledStartDate=" + caseFiledStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseFiledEndDate=" + caseFiledEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedStartDate=" + caseTerminatedStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&caseTerminatedEndDate=" + caseTerminatedEndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&sortParameterQuery=" + (sortParameterQuery==null? "" : System.Uri.EscapeDataString(sortParameterQuery))+"&caseStatus=" + caseStatus+"&pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PCLParty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Pacer Credential List.
		/// List registered PACER credentials.
		/// GetPacerCredential pacerCredential
		/// </summary>
		/// <param name="pageNumber">The page number of the PACER credentials to be retrieved.<br>
		///  - Minimum: 1
		///
		/// Minimum: 1
		// </param>
		/// <returns>OK</returns>
		public async Task<PacerCredentialListResponse> GetPacerCredentialAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCredential?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PacerCredentialListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Pacer Credential.
		/// Register PACER credentials with UniCourt.
		/// AddPacerCredential pacerCredential
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Success> AddPacerCredentialAsync(PacerCredentialRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCredential";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove Pacer credential for a specific Pacer User Id.
		/// De-register the PACER credentials for the specified PACER username.
		/// RemovePacerCredentialById pacerCredential/{pacerUserId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Success> RemovePacerCredentialByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCredential/{pacerUserId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Success>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Pacer Credential for a requested pacer User Id.
		/// Retrieve the PACER credentials for the specified PACER username.
		/// GetPacerCredentialById pacerCredential/{pacerUserId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PacerCredential> GetPacerCredentialByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pacerCredential/{pacerUserId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PacerCredential>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details for a requested Party ID.
		/// Retrieve the party with the specified partyId value.
		/// GetPartyById party/{partyId}
		/// </summary>
		/// <returns>The request is recieved.</returns>
		public async Task<Party> GetPartyByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "party/{partyId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Party>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Associated Attorney details for a requested Party ID.
		/// Retrieve the attorneys in the case with the specified partyId value.
		/// GetPartyAssociatedAttorneys party/{partyId}/associatedAttorneys
		/// </summary>
		/// <param name="pageNumber">Query parameter specifying the page number of the search results to be retrieved.</param>
		/// <returns>The request is recieved.</returns>
		public async Task<PartyAttorneyAssociations> GetPartyAssociatedAttorneysAsync(int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "party/{partyId}/associatedAttorneys?pageNumber="+pageNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PartyAttorneyAssociations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetCallbacksStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 2,
	}
	
	public enum GetCaseDocketEntriesSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="latest to oldest")]
		latest_to_oldest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oldest to latest")]
		oldest_to_latest = 1,
	}
	
	public enum GetCaseDocumentsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="latest to oldest")]
		latest_to_oldest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oldest to latest")]
		oldest_to_latest = 1,
	}
	
	public enum GetCaseHearingsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="latest to oldest")]
		latest_to_oldest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="oldest to latest")]
		oldest_to_latest = 1,
	}
	
	public enum SearchCasesSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		filedDate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevancy = 1,
	}
	
	public enum SearchCasesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public enum GetAreasOfLawSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 0,
	}
	
	public enum GetJurisdictionGeoForCourtSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		state = 0,
	}
	
	public enum AllCourtsPacerCaseLocatorCaseSearchCaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		closed = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
