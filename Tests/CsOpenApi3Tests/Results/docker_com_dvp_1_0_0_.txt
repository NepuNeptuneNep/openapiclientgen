//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<DatasetModelName> Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timespans")]
		public TimespanType[] Timespans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public DataviewType[] Views { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetModelName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pulls = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TimespanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		months = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weeks = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataviewType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		summary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="repo-summary")]
		repoMinussummary = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pulls = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonthData
	{
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public MonthModel[] Months { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MonthModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamespaceData
	{
		
		[System.Runtime.Serialization.DataMember(Name="namespaces")]
		public string[] Namespaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamespaceMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasets")]
		public DatasetModel[] Datasets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extraRepos")]
		public string[] ExtraRepos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	/// <summary>
	/// failed second factor login response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostUsers2FALoginErrorResponse
	{
		
		/// <summary>
		/// Description of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
	}
	
	/// <summary>
	/// failed user login response or second factor required
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostUsersLoginErrorResponse
	{
		
		/// <summary>
		/// Description of the error.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Short time lived token to be used on `/v2/users/2fa-login` to complete the authentication. This field is present only if 2FA is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login_2fa_token")]
		public string Login_2fa_token { get; set; }
	}
	
	/// <summary>
	/// successful user login response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PostUsersLoginSuccessResponse
	{
		
		/// <summary>
		/// Created authentication token.
		///
		///This token can be used in the HTTP Authorization header as a JWT to authenticate with the Docker Hub APIs.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResponseDataFile[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseDataFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int64> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimespanData
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimespanModel
	{
	}
	
	/// <summary>
	/// Second factor user login details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Users2FALoginRequest
	{
		
		/// <summary>
		/// The Time-based One-Time Password of the Docker Hub account to authenticate with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// The intermediate 2FA token returned from `/v2/users/login` API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="login_2fa_token")]
		public string Login_2fa_token { get; set; }
	}
	
	/// <summary>
	/// User login details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UsersLoginRequest
	{
		
		/// <summary>
		/// The password or personal access token (PAT) of the Docker Hub account to authenticate with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The username of the Docker Hub account to authenticate with.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeekData
	{
		
		[System.Runtime.Serialization.DataMember(Name="weeks")]
		public WeekModel[] Weeks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeekModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="week")]
		public System.Nullable<System.Int32> Week { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class YearData
	{
		
		[System.Runtime.Serialization.DataMember(Name="years")]
		public YearModel[] Years { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class YearModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get namespaces and repos
		/// Gets a list of your namespaces and repos which have data available
		/// GetNamespaces 
		/// </summary>
		/// <returns>Success</returns>
		public async Task<NamespaceData> GetNamespacesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NamespaceData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get namespace
		/// Gets metadata associated with specified namespace, including extra repos associated with the namespace
		/// GetNamespace namespaces/{namespace}
		/// </summary>
		/// <param name="_namespace">Namespace to fetch data for</param>
		/// <returns>Success</returns>
		public async Task<NamespaceMetadata> GetNamespaceAsync(string _namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "namespaces/"+ (_namespace==null? "" : System.Uri.EscapeDataString(_namespace));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NamespaceMetadata>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get years with data
		/// Gets a list of years that have data for the given namespace
		/// GetNamespaceYears namespaces/{namespace}/pulls/exports/years
		/// </summary>
		/// <param name="_namespace">Namespace to fetch data for</param>
		/// <returns>Success</returns>
		public async Task<YearData> GetNamespaceYearsAsync(string _namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "namespaces/"+ (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"/pulls/exports/years";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<YearData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get timespans with data
		/// Gets a list of timespans of the given type that have data for the given namespace and year
		/// GetNamespaceTimespans namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}
		/// </summary>
		/// <param name="_namespace">Namespace to fetch data for</param>
		/// <param name="year">Year to fetch data for</param>
		/// <param name="timespantype">Type of timespan to fetch data for</param>
		/// <returns>Success</returns>
		public async Task<TimespanData> GetNamespaceTimespansAsync(string _namespace, int year, TimespanType timespantype, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "namespaces/"+ (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"/pulls/exports/years/"+year+"/"+timespantype;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TimespanData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get namespace metadata for timespan
		/// Gets info about data for the given namespace and timespan
		/// GetNamespaceTimespanMetadata namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}
		/// </summary>
		/// <param name="_namespace">Namespace to fetch data for</param>
		/// <param name="year">Year to fetch data for</param>
		/// <param name="timespantype">Type of timespan to fetch data for</param>
		/// <param name="timespan">Timespan to fetch data for</param>
		/// <returns>Success</returns>
		public async Task<TimespanModel> GetNamespaceTimespanMetadataAsync(string _namespace, int year, TimespanType timespantype, int timespan, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "namespaces/"+ (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"/pulls/exports/years/"+year+"/"+timespantype+"/"+timespan;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TimespanModel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get namespace data for timespan
		/// Gets a list of URLs that can be used to download the pull data for the given namespace and timespan
		/// GetNamespaceDataByTimespan namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/{dataview}
		/// </summary>
		/// <param name="_namespace">Namespace to fetch data for</param>
		/// <param name="year">Year to fetch data for</param>
		/// <param name="timespantype">Type of timespan to fetch data for</param>
		/// <param name="timespan">Timespan to fetch data for</param>
		/// <param name="dataview">Type of data to fetch</param>
		/// <returns>Success</returns>
		public async Task<ResponseData> GetNamespaceDataByTimespanAsync(string _namespace, int year, TimespanType timespantype, int timespan, DataviewType dataview, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "namespaces/"+ (_namespace==null? "" : System.Uri.EscapeDataString(_namespace))+"/pulls/exports/years/"+year+"/"+timespantype+"/"+timespan+"/"+dataview;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponseData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Second factor authentication.
		/// When a user has 2FA enabled, this is the second call to perform after
		/// `/v2/users/login` call.
		/// 
		/// Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.
		/// 
		/// The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.
		/// 
		/// Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
		/// 
		/// PostUsers2FALogin v2/users/2fa-login
		/// </summary>
		/// <param name="requestBody">Login details.</param>
		/// <returns>Authentication successful</returns>
		public async Task<PostUsersLoginSuccessResponse> PostUsers2FALoginAsync(Users2FALoginRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/2fa-login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostUsersLoginSuccessResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an authentication token
		/// Creates and returns a bearer token in JWT format that you can use to
		/// authenticate with Docker Hub APIs.
		/// 
		/// The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.
		/// 
		/// Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.
		/// 
		/// PostUsersLogin v2/users/login
		/// </summary>
		/// <param name="requestBody">Login details.</param>
		/// <returns>Authentication successful</returns>
		public async Task<PostUsersLoginSuccessResponse> PostUsersLoginAsync(UsersLoginRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostUsersLoginSuccessResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
